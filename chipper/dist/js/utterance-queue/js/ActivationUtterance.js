// Copyright 2019-2022, University of Colorado Boulder
/**
 * An utterance that should generally be used for announcing a change after an "activation" interaction such
 * as clicking a button or a checkbox. The delay for waiting for utterance stability is chosen such that the alert won't
 * become stable and be spoken faster than the press and hold delay for continuous clicking with the "enter" key. See
 * Utterance.js for a description of utterance "stability". The result is that pressing and holding "enter" on a
 * button will result in only a single utterance.
 *
 * @author Jesse Greenberg
 */ import optionize from '../../phet-core/js/optionize.js';
import Utterance from './Utterance.js';
import utteranceQueueNamespace from './utteranceQueueNamespace.js';
let ActivationUtterance = class ActivationUtterance extends Utterance {
    constructor(providedOptions){
        const options = optionize()({
            // {number} - in ms, should be larger than 500, prevents the utterance from being duplicated within the delay
            // of press and hold for most typical user settings
            alertStableDelay: 500
        }, providedOptions);
        assert && assert(options.alertStableDelay >= 500, 'Utterance will likely be duplicated if activated with key press and hold');
        super(options);
    }
};
export { ActivationUtterance as default };
utteranceQueueNamespace.register('ActivationUtterance', ActivationUtterance);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9BY3RpdmF0aW9uVXR0ZXJhbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEFuIHV0dGVyYW5jZSB0aGF0IHNob3VsZCBnZW5lcmFsbHkgYmUgdXNlZCBmb3IgYW5ub3VuY2luZyBhIGNoYW5nZSBhZnRlciBhbiBcImFjdGl2YXRpb25cIiBpbnRlcmFjdGlvbiBzdWNoXG4gKiBhcyBjbGlja2luZyBhIGJ1dHRvbiBvciBhIGNoZWNrYm94LiBUaGUgZGVsYXkgZm9yIHdhaXRpbmcgZm9yIHV0dGVyYW5jZSBzdGFiaWxpdHkgaXMgY2hvc2VuIHN1Y2ggdGhhdCB0aGUgYWxlcnQgd29uJ3RcbiAqIGJlY29tZSBzdGFibGUgYW5kIGJlIHNwb2tlbiBmYXN0ZXIgdGhhbiB0aGUgcHJlc3MgYW5kIGhvbGQgZGVsYXkgZm9yIGNvbnRpbnVvdXMgY2xpY2tpbmcgd2l0aCB0aGUgXCJlbnRlclwiIGtleS4gU2VlXG4gKiBVdHRlcmFuY2UuanMgZm9yIGEgZGVzY3JpcHRpb24gb2YgdXR0ZXJhbmNlIFwic3RhYmlsaXR5XCIuIFRoZSByZXN1bHQgaXMgdGhhdCBwcmVzc2luZyBhbmQgaG9sZGluZyBcImVudGVyXCIgb24gYVxuICogYnV0dG9uIHdpbGwgcmVzdWx0IGluIG9ubHkgYSBzaW5nbGUgdXR0ZXJhbmNlLlxuICpcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXG4gKi9cblxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgVXR0ZXJhbmNlLCB7IFV0dGVyYW5jZU9wdGlvbnMgfSBmcm9tICcuL1V0dGVyYW5jZS5qcyc7XG5pbXBvcnQgdXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UgZnJvbSAnLi91dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZS5qcyc7XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xuZXhwb3J0IHR5cGUgQWN0aXZhdGlvblV0dGVyYW5jZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFV0dGVyYW5jZU9wdGlvbnM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGl2YXRpb25VdHRlcmFuY2UgZXh0ZW5kcyBVdHRlcmFuY2Uge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogQWN0aXZhdGlvblV0dGVyYW5jZU9wdGlvbnMgKSB7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEFjdGl2YXRpb25VdHRlcmFuY2VPcHRpb25zLCBTZWxmT3B0aW9ucywgVXR0ZXJhbmNlT3B0aW9ucz4oKSgge1xuXG4gICAgICAvLyB7bnVtYmVyfSAtIGluIG1zLCBzaG91bGQgYmUgbGFyZ2VyIHRoYW4gNTAwLCBwcmV2ZW50cyB0aGUgdXR0ZXJhbmNlIGZyb20gYmVpbmcgZHVwbGljYXRlZCB3aXRoaW4gdGhlIGRlbGF5XG4gICAgICAvLyBvZiBwcmVzcyBhbmQgaG9sZCBmb3IgbW9zdCB0eXBpY2FsIHVzZXIgc2V0dGluZ3NcbiAgICAgIGFsZXJ0U3RhYmxlRGVsYXk6IDUwMFxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy5hbGVydFN0YWJsZURlbGF5ID49IDUwMCwgJ1V0dGVyYW5jZSB3aWxsIGxpa2VseSBiZSBkdXBsaWNhdGVkIGlmIGFjdGl2YXRlZCB3aXRoIGtleSBwcmVzcyBhbmQgaG9sZCcgKTtcblxuICAgIHN1cGVyKCBvcHRpb25zICk7XG4gIH1cbn1cblxudXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UucmVnaXN0ZXIoICdBY3RpdmF0aW9uVXR0ZXJhbmNlJywgQWN0aXZhdGlvblV0dGVyYW5jZSApOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJVdHRlcmFuY2UiLCJ1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSIsIkFjdGl2YXRpb25VdHRlcmFuY2UiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYWxlcnRTdGFibGVEZWxheSIsImFzc2VydCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Ozs7O0NBUUMsR0FFRCxPQUFPQSxlQUFxQyxrQ0FBa0M7QUFDOUUsT0FBT0MsZUFBcUMsaUJBQWlCO0FBQzdELE9BQU9DLDZCQUE2QiwrQkFBK0I7QUFLcEQsSUFBQSxBQUFNQyxzQkFBTixNQUFNQSw0QkFBNEJGO0lBRS9DLFlBQW9CRyxlQUE0QyxDQUFHO1FBRWpFLE1BQU1DLFVBQVVMLFlBQXdFO1lBRXRGLDZHQUE2RztZQUM3RyxtREFBbUQ7WUFDbkRNLGtCQUFrQjtRQUNwQixHQUFHRjtRQUVIRyxVQUFVQSxPQUFRRixRQUFRQyxnQkFBZ0IsSUFBSSxLQUFLO1FBRW5ELEtBQUssQ0FBRUQ7SUFDVDtBQUNGO0FBZkEsU0FBcUJGLGlDQWVwQjtBQUVERCx3QkFBd0JNLFFBQVEsQ0FBRSx1QkFBdUJMIn0=