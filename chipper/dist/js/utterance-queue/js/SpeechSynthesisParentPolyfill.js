// Copyright 2022-2024, University of Colorado Boulder
/**
 * A polyfill for SpeechSynthesis that tries to pull a working implementation from a parent window. Assumes that
 * this code is running in an iframe hosted by a parent window and that the parent has a working implementation
 * of SpeechSynthesis. In particular, this is used in fenster as a way to get SpeechSynthesis in an Android WebView
 * where SpeechSynthesis is not currently supported. See fenster for more information about an example use case.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */ import utteranceQueueNamespace from './utteranceQueueNamespace.js';
const SpeechSynthesisParentPolyfill = {
    /**
   * Initialize the polyfill, setting objects related to SpeechSynthesis on the window. The implementation of
   * SpeechSynthesisPolyfill assumes that the simulation is running in a child iframe under a parent window
   * that implements SpeechSynthesis. So we grab the implementation from the parent and set it to this window.
   */ initialize () {
        if (window.speechSynthesis || window.SpeechSynthesis || window.SpeechSynthesisUtterance) {
            throw new Error('SpeechSynthesis is supported here, the polyfill should not overwrite it');
        }
        assert && assert(window.parent, 'This polyfill requires a parent frame implementation of SpeechSynthesis.');
        // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
        window.SpeechSynthesis = window.parent.SpeechSynthesis;
        // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
        window.speechSynthesis = new window.parent.SpeechSynthesis();
        // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
        window.SpeechSynthesisUtterance = window.parent.SpeechSynthesisUtterance;
    }
};
utteranceQueueNamespace.register('SpeechSynthesisParentPolyfill', SpeechSynthesisParentPolyfill);
export default SpeechSynthesisParentPolyfill;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9TcGVlY2hTeW50aGVzaXNQYXJlbnRQb2x5ZmlsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBBIHBvbHlmaWxsIGZvciBTcGVlY2hTeW50aGVzaXMgdGhhdCB0cmllcyB0byBwdWxsIGEgd29ya2luZyBpbXBsZW1lbnRhdGlvbiBmcm9tIGEgcGFyZW50IHdpbmRvdy4gQXNzdW1lcyB0aGF0XG4gKiB0aGlzIGNvZGUgaXMgcnVubmluZyBpbiBhbiBpZnJhbWUgaG9zdGVkIGJ5IGEgcGFyZW50IHdpbmRvdyBhbmQgdGhhdCB0aGUgcGFyZW50IGhhcyBhIHdvcmtpbmcgaW1wbGVtZW50YXRpb25cbiAqIG9mIFNwZWVjaFN5bnRoZXNpcy4gSW4gcGFydGljdWxhciwgdGhpcyBpcyB1c2VkIGluIGZlbnN0ZXIgYXMgYSB3YXkgdG8gZ2V0IFNwZWVjaFN5bnRoZXNpcyBpbiBhbiBBbmRyb2lkIFdlYlZpZXdcbiAqIHdoZXJlIFNwZWVjaFN5bnRoZXNpcyBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4gU2VlIGZlbnN0ZXIgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgYW4gZXhhbXBsZSB1c2UgY2FzZS5cbiAqXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgdXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UgZnJvbSAnLi91dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZS5qcyc7XG5cbmNvbnN0IFNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsID0ge1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBwb2x5ZmlsbCwgc2V0dGluZyBvYmplY3RzIHJlbGF0ZWQgdG8gU3BlZWNoU3ludGhlc2lzIG9uIHRoZSB3aW5kb3cuIFRoZSBpbXBsZW1lbnRhdGlvbiBvZlxuICAgKiBTcGVlY2hTeW50aGVzaXNQb2x5ZmlsbCBhc3N1bWVzIHRoYXQgdGhlIHNpbXVsYXRpb24gaXMgcnVubmluZyBpbiBhIGNoaWxkIGlmcmFtZSB1bmRlciBhIHBhcmVudCB3aW5kb3dcbiAgICogdGhhdCBpbXBsZW1lbnRzIFNwZWVjaFN5bnRoZXNpcy4gU28gd2UgZ3JhYiB0aGUgaW1wbGVtZW50YXRpb24gZnJvbSB0aGUgcGFyZW50IGFuZCBzZXQgaXQgdG8gdGhpcyB3aW5kb3cuXG4gICAqL1xuICBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIGlmICggd2luZG93LnNwZWVjaFN5bnRoZXNpcyB8fCB3aW5kb3cuU3BlZWNoU3ludGhlc2lzIHx8IHdpbmRvdy5TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoICdTcGVlY2hTeW50aGVzaXMgaXMgc3VwcG9ydGVkIGhlcmUsIHRoZSBwb2x5ZmlsbCBzaG91bGQgbm90IG92ZXJ3cml0ZSBpdCcgKTtcbiAgICB9XG5cbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB3aW5kb3cucGFyZW50LCAnVGhpcyBwb2x5ZmlsbCByZXF1aXJlcyBhIHBhcmVudCBmcmFtZSBpbXBsZW1lbnRhdGlvbiBvZiBTcGVlY2hTeW50aGVzaXMuJyApO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFZlcnkgaGFja3ksIHRoaXMgcHJvdG90eXBlIHNvbHV0aW9uIGlzIG5vdCBnZXR0aW5nIHdvcmsgYW55bW9yZS4gTm8gbmVlZCBmb3IgYmV0dGVyIHNvbHV0aW9uLlxuICAgIHdpbmRvdy5TcGVlY2hTeW50aGVzaXMgPSB3aW5kb3cucGFyZW50LlNwZWVjaFN5bnRoZXNpcztcblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBWZXJ5IGhhY2t5LCB0aGlzIHByb3RvdHlwZSBzb2x1dGlvbiBpcyBub3QgZ2V0dGluZyB3b3JrIGFueW1vcmUuIE5vIG5lZWQgZm9yIGJldHRlciBzb2x1dGlvbi5cbiAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzID0gbmV3IHdpbmRvdy5wYXJlbnQuU3BlZWNoU3ludGhlc2lzKCk7XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVmVyeSBoYWNreSwgdGhpcyBwcm90b3R5cGUgc29sdXRpb24gaXMgbm90IGdldHRpbmcgd29yayBhbnltb3JlLiBObyBuZWVkIGZvciBiZXR0ZXIgc29sdXRpb24uXG4gICAgd2luZG93LlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSA9IHdpbmRvdy5wYXJlbnQuU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlO1xuICB9XG59O1xuXG51dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZS5yZWdpc3RlciggJ1NwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsJywgU3BlZWNoU3ludGhlc2lzUGFyZW50UG9seWZpbGwgKTtcbmV4cG9ydCBkZWZhdWx0IFNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsOyJdLCJuYW1lcyI6WyJ1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSIsIlNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsIiwiaW5pdGlhbGl6ZSIsIndpbmRvdyIsInNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsIkVycm9yIiwiYXNzZXJ0IiwicGFyZW50IiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7OztDQU9DLEdBRUQsT0FBT0EsNkJBQTZCLCtCQUErQjtBQUVuRSxNQUFNQyxnQ0FBZ0M7SUFFcEM7Ozs7R0FJQyxHQUNEQztRQUNFLElBQUtDLE9BQU9DLGVBQWUsSUFBSUQsT0FBT0UsZUFBZSxJQUFJRixPQUFPRyx3QkFBd0IsRUFBRztZQUN6RixNQUFNLElBQUlDLE1BQU87UUFDbkI7UUFFQUMsVUFBVUEsT0FBUUwsT0FBT00sTUFBTSxFQUFFO1FBRWpDLG1IQUFtSDtRQUNuSE4sT0FBT0UsZUFBZSxHQUFHRixPQUFPTSxNQUFNLENBQUNKLGVBQWU7UUFFdEQsbUhBQW1IO1FBQ25IRixPQUFPQyxlQUFlLEdBQUcsSUFBSUQsT0FBT00sTUFBTSxDQUFDSixlQUFlO1FBRTFELG1IQUFtSDtRQUNuSEYsT0FBT0csd0JBQXdCLEdBQUdILE9BQU9NLE1BQU0sQ0FBQ0gsd0JBQXdCO0lBQzFFO0FBQ0Y7QUFFQU4sd0JBQXdCVSxRQUFRLENBQUUsaUNBQWlDVDtBQUNuRSxlQUFlQSw4QkFBOEIifQ==