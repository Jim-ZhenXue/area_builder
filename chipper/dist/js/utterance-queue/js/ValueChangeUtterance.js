// Copyright 2019-2024, University of Colorado Boulder
/**
 * An utterance that should generally be used for announcing a change in value after interacting with a slider
 * or number type input. Often, changes to a value are announced with aria-valuetext, but additional information about
 * the change is conveyed by a supplemental Utterance. The delay ensures that VoiceOver and JAWS will announce the
 * alert after reading the aria-valuetext in full. See https://github.com/phetsims/scenery-phet/issues/491 and
 * https://github.com/phetsims/john-travoltage/issues/315 for testing notes.
 *
 * @author Jesse Greenberg
 */ import deprecationWarning from '../../phet-core/js/deprecationWarning.js';
import optionize from '../../phet-core/js/optionize.js';
import Utterance from './Utterance.js';
import utteranceQueueNamespace from './utteranceQueueNamespace.js';
let ValueChangeUtterance = class ValueChangeUtterance extends Utterance {
    constructor(providedOptions){
        deprecationWarning('Please use AccessibleValueHander.pdomCreateContextResponseAlert(), see https://github.com/phetsims/sun/issues/685');
        const options = optionize()({
            // {number} - in ms, prevents VoiceOver from reading changes too frequently or interrupting the alert to read
            // aria-valuetext changes under typical user settings
            alertStableDelay: 1000
        }, providedOptions);
        super(options);
    }
};
utteranceQueueNamespace.register('ValueChangeUtterance', ValueChangeUtterance);
export default ValueChangeUtterance;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9WYWx1ZUNoYW5nZVV0dGVyYW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBBbiB1dHRlcmFuY2UgdGhhdCBzaG91bGQgZ2VuZXJhbGx5IGJlIHVzZWQgZm9yIGFubm91bmNpbmcgYSBjaGFuZ2UgaW4gdmFsdWUgYWZ0ZXIgaW50ZXJhY3Rpbmcgd2l0aCBhIHNsaWRlclxuICogb3IgbnVtYmVyIHR5cGUgaW5wdXQuIE9mdGVuLCBjaGFuZ2VzIHRvIGEgdmFsdWUgYXJlIGFubm91bmNlZCB3aXRoIGFyaWEtdmFsdWV0ZXh0LCBidXQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIGNoYW5nZSBpcyBjb252ZXllZCBieSBhIHN1cHBsZW1lbnRhbCBVdHRlcmFuY2UuIFRoZSBkZWxheSBlbnN1cmVzIHRoYXQgVm9pY2VPdmVyIGFuZCBKQVdTIHdpbGwgYW5ub3VuY2UgdGhlXG4gKiBhbGVydCBhZnRlciByZWFkaW5nIHRoZSBhcmlhLXZhbHVldGV4dCBpbiBmdWxsLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnktcGhldC9pc3N1ZXMvNDkxIGFuZFxuICogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaG4tdHJhdm9sdGFnZS9pc3N1ZXMvMzE1IGZvciB0ZXN0aW5nIG5vdGVzLlxuICpcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnXG4gKi9cblxuaW1wb3J0IGRlcHJlY2F0aW9uV2FybmluZyBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvZGVwcmVjYXRpb25XYXJuaW5nLmpzJztcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IFV0dGVyYW5jZSwgeyBVdHRlcmFuY2VPcHRpb25zIH0gZnJvbSAnLi9VdHRlcmFuY2UuanMnO1xuaW1wb3J0IHV0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlIGZyb20gJy4vdXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UuanMnO1xuXG5leHBvcnQgdHlwZSBWYWx1ZUNoYW5nZVV0dGVyYW5jZU9wdGlvbnMgPSBVdHRlcmFuY2VPcHRpb25zO1xuXG5jbGFzcyBWYWx1ZUNoYW5nZVV0dGVyYW5jZSBleHRlbmRzIFV0dGVyYW5jZSB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBWYWx1ZUNoYW5nZVV0dGVyYW5jZU9wdGlvbnMgKSB7XG4gICAgZGVwcmVjYXRpb25XYXJuaW5nKCAnUGxlYXNlIHVzZSBBY2Nlc3NpYmxlVmFsdWVIYW5kZXIucGRvbUNyZWF0ZUNvbnRleHRSZXNwb25zZUFsZXJ0KCksIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy82ODUnICk7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFZhbHVlQ2hhbmdlVXR0ZXJhbmNlT3B0aW9ucywgRW1wdHlTZWxmT3B0aW9ucywgVXR0ZXJhbmNlT3B0aW9ucz4oKSgge1xuXG4gICAgICAvLyB7bnVtYmVyfSAtIGluIG1zLCBwcmV2ZW50cyBWb2ljZU92ZXIgZnJvbSByZWFkaW5nIGNoYW5nZXMgdG9vIGZyZXF1ZW50bHkgb3IgaW50ZXJydXB0aW5nIHRoZSBhbGVydCB0byByZWFkXG4gICAgICAvLyBhcmlhLXZhbHVldGV4dCBjaGFuZ2VzIHVuZGVyIHR5cGljYWwgdXNlciBzZXR0aW5nc1xuICAgICAgYWxlcnRTdGFibGVEZWxheTogMTAwMFxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcbiAgfVxufVxuXG51dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZS5yZWdpc3RlciggJ1ZhbHVlQ2hhbmdlVXR0ZXJhbmNlJywgVmFsdWVDaGFuZ2VVdHRlcmFuY2UgKTtcbmV4cG9ydCBkZWZhdWx0IFZhbHVlQ2hhbmdlVXR0ZXJhbmNlOyJdLCJuYW1lcyI6WyJkZXByZWNhdGlvbldhcm5pbmciLCJvcHRpb25pemUiLCJVdHRlcmFuY2UiLCJ1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSIsIlZhbHVlQ2hhbmdlVXR0ZXJhbmNlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImFsZXJ0U3RhYmxlRGVsYXkiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7Ozs7OztDQVFDLEdBRUQsT0FBT0Esd0JBQXdCLDJDQUEyQztBQUMxRSxPQUFPQyxlQUFxQyxrQ0FBa0M7QUFDOUUsT0FBT0MsZUFBcUMsaUJBQWlCO0FBQzdELE9BQU9DLDZCQUE2QiwrQkFBK0I7QUFJbkUsSUFBQSxBQUFNQyx1QkFBTixNQUFNQSw2QkFBNkJGO0lBRWpDLFlBQW9CRyxlQUE2QyxDQUFHO1FBQ2xFTCxtQkFBb0I7UUFFcEIsTUFBTU0sVUFBVUwsWUFBOEU7WUFFNUYsNkdBQTZHO1lBQzdHLHFEQUFxRDtZQUNyRE0sa0JBQWtCO1FBQ3BCLEdBQUdGO1FBRUgsS0FBSyxDQUFFQztJQUNUO0FBQ0Y7QUFFQUgsd0JBQXdCSyxRQUFRLENBQUUsd0JBQXdCSjtBQUMxRCxlQUFlQSxxQkFBcUIifQ==