// Copyright 2022-2024, University of Colorado Boulder
/**
 * A type to wrap an Utterance while in the UtteranceQueue, see UtteranceQueue for implementation. Internal to
 * utterance-queue, should otherwise not need to be used.
 *
 * @author Jesse Greenberg
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import Disposable from '../../axon/js/Disposable.js';
import utteranceQueueNamespace from './utteranceQueueNamespace.js';
// One instance per entry in the UtteranceQueue.queue
let UtteranceWrapper = class UtteranceWrapper extends Disposable {
    dispose() {
        // The same Utterance may exist multiple times in the queue if we are removing duplicates from the array,
        // so the listener may have already been removed.
        if (this.utterancePriorityListener) {
            this.utterance.priorityProperty.unlink(this.utterancePriorityListener);
            this.utterancePriorityListener = null;
        }
        super.dispose();
    }
    constructor(utterance){
        super(), this.utterance = utterance, this.timeInQueue = 0, this.stableTime = 0, this.utterancePriorityListener = null;
    }
};
utteranceQueueNamespace.register('UtteranceWrapper', UtteranceWrapper);
export default UtteranceWrapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9VdHRlcmFuY2VXcmFwcGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgdHlwZSB0byB3cmFwIGFuIFV0dGVyYW5jZSB3aGlsZSBpbiB0aGUgVXR0ZXJhbmNlUXVldWUsIHNlZSBVdHRlcmFuY2VRdWV1ZSBmb3IgaW1wbGVtZW50YXRpb24uIEludGVybmFsIHRvXG4gKiB1dHRlcmFuY2UtcXVldWUsIHNob3VsZCBvdGhlcndpc2Ugbm90IG5lZWQgdG8gYmUgdXNlZC5cbiAqXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBEaXNwb3NhYmxlIGZyb20gJy4uLy4uL2F4b24vanMvRGlzcG9zYWJsZS5qcyc7XG5pbXBvcnQgVXR0ZXJhbmNlIGZyb20gJy4vVXR0ZXJhbmNlLmpzJztcbmltcG9ydCB1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSBmcm9tICcuL3V0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlLmpzJztcblxudHlwZSBQcmlvcml0eUxpc3RlbmVyID0gKCBwcmlvcml0eTogbnVtYmVyICkgPT4gdm9pZDtcblxuLy8gT25lIGluc3RhbmNlIHBlciBlbnRyeSBpbiB0aGUgVXR0ZXJhbmNlUXVldWUucXVldWVcbmNsYXNzIFV0dGVyYW5jZVdyYXBwZXIgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcblxuICAvLyBJbiBtcywgaG93IGxvbmcgdGhpcyB1dHRlcmFuY2UgaGFzIGJlZW4gaW4gdGhlIHF1ZXVlLiBUaGVcbiAgLy8gc2FtZSBVdHRlcmFuY2UgY2FuIGJlIGluIHRoZSBxdWV1ZSBtb3JlIHRoYW4gb25jZSAoZm9yIHV0dGVyYW5jZSBsb29waW5nIG9yIHdoaWxlIHRoZSB1dHRlcmFuY2Ugc3RhYmlsaXplcyksXG4gIC8vIGluIHRoaXMgY2FzZSB0aGUgdGltZSB3aWxsIGJlIHNpbmNlIHRoZSBmaXJzdCB0aW1lIHRoZSB1dHRlcmFuY2Ugd2FzIGFkZGVkIHRvIHRoZSBxdWV1ZS5cbiAgcHVibGljIHRpbWVJblF1ZXVlID0gMDtcblxuICAvLyBpcyB0aGUgYW1vdW50IG9mIHRpbWUgc2luY2UgdGhpcyB1dHRlcmFuY2UgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIHV0dGVyYW5jZVF1ZXVlLlxuICBwdWJsaWMgc3RhYmxlVGltZSA9IDA7XG5cbiAgLy8gQSByZWZlcmVuY2UgdG8gYSBsaXN0ZW5lciBvbiB0aGUgVXR0ZXJhbmNlIHByaW9yaXR5UHJvcGVydHkgd2hpbGUgdGhpcyBVdHRlcmFuY2VcbiAgLy8gaXMgbW92aW5nIHRocm91Z2ggdGhlIFV0dGVyYW5jZVF1ZXVlIChpbiB0aGUgcXVldWUgYW5kIGN1cnJlbnRseSBiZWluZyBhbm5vdW5jZWQpLiBXZSB3YW50IHRvIG1vbml0b3IgZm9yIHByaW9yaXR5XG4gIC8vIGNoYW5nZXMgdG8gYWRqdXN0IGl0cyBzcG90IGluIGxpbmUgd2hlbiBuZWVkZWQuXG4gIHB1YmxpYyB1dHRlcmFuY2VQcmlvcml0eUxpc3RlbmVyOiBQcmlvcml0eUxpc3RlbmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwdWJsaWMgcmVhZG9ubHkgdXR0ZXJhbmNlOiBVdHRlcmFuY2UgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xuXG4gICAgLy8gVGhlIHNhbWUgVXR0ZXJhbmNlIG1heSBleGlzdCBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgcXVldWUgaWYgd2UgYXJlIHJlbW92aW5nIGR1cGxpY2F0ZXMgZnJvbSB0aGUgYXJyYXksXG4gICAgLy8gc28gdGhlIGxpc3RlbmVyIG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkLlxuICAgIGlmICggdGhpcy51dHRlcmFuY2VQcmlvcml0eUxpc3RlbmVyICkge1xuICAgICAgdGhpcy51dHRlcmFuY2UucHJpb3JpdHlQcm9wZXJ0eS51bmxpbmsoIHRoaXMudXR0ZXJhbmNlUHJpb3JpdHlMaXN0ZW5lciApO1xuICAgICAgdGhpcy51dHRlcmFuY2VQcmlvcml0eUxpc3RlbmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cbn1cblxudXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UucmVnaXN0ZXIoICdVdHRlcmFuY2VXcmFwcGVyJywgVXR0ZXJhbmNlV3JhcHBlciApO1xuZXhwb3J0IGRlZmF1bHQgVXR0ZXJhbmNlV3JhcHBlcjsiXSwibmFtZXMiOlsiRGlzcG9zYWJsZSIsInV0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlIiwiVXR0ZXJhbmNlV3JhcHBlciIsImRpc3Bvc2UiLCJ1dHRlcmFuY2VQcmlvcml0eUxpc3RlbmVyIiwidXR0ZXJhbmNlIiwicHJpb3JpdHlQcm9wZXJ0eSIsInVubGluayIsInRpbWVJblF1ZXVlIiwic3RhYmxlVGltZSIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7OztDQU1DLEdBRUQsT0FBT0EsZ0JBQWdCLDhCQUE4QjtBQUVyRCxPQUFPQyw2QkFBNkIsK0JBQStCO0FBSW5FLHFEQUFxRDtBQUNyRCxJQUFBLEFBQU1DLG1CQUFOLE1BQU1BLHlCQUF5QkY7SUFtQmJHLFVBQWdCO1FBRTlCLHlHQUF5RztRQUN6RyxpREFBaUQ7UUFDakQsSUFBSyxJQUFJLENBQUNDLHlCQUF5QixFQUFHO1lBQ3BDLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxnQkFBZ0IsQ0FBQ0MsTUFBTSxDQUFFLElBQUksQ0FBQ0gseUJBQXlCO1lBQ3RFLElBQUksQ0FBQ0EseUJBQXlCLEdBQUc7UUFDbkM7UUFFQSxLQUFLLENBQUNEO0lBQ1I7SUFkQSxZQUFvQixBQUFnQkUsU0FBb0IsQ0FBRztRQUN6RCxLQUFLLFNBRDZCQSxZQUFBQSxnQkFWN0JHLGNBQWMsUUFHZEMsYUFBYSxRQUtiTCw0QkFBcUQ7SUFJNUQ7QUFhRjtBQUVBSCx3QkFBd0JTLFFBQVEsQ0FBRSxvQkFBb0JSO0FBQ3RELGVBQWVBLGlCQUFpQiJ9