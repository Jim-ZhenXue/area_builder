// Copyright 2022-2024, University of Colorado Boulder
/**
 * Tests for Enumeration, EnumerationValue
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import Enumeration from './Enumeration.js';
import EnumerationValue from './EnumerationValue.js';
QUnit.module('Enumeration');
QUnit.test('Enumeration', (assert)=>{
    let MyEnumeration = class MyEnumeration extends EnumerationValue {
    };
    MyEnumeration.ITEM_1 = new MyEnumeration();
    MyEnumeration.ITEM_2 = new MyEnumeration();
    MyEnumeration.ITEM_3 = new MyEnumeration();
    MyEnumeration.enumeration = new Enumeration(MyEnumeration);
    assert.ok(MyEnumeration.enumeration.keys.length === 3, 'keys all there');
    assert.ok(MyEnumeration.enumeration.values.length === 3, 'values all there');
    assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_1.enumeration, 'enumeration instances are the same');
    assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_2.enumeration, 'enumeration instances are the same 2');
    assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_3.enumeration, 'enumeration instances are the same 3');
    window.assert && assert.throws(()=>{
        return new MyEnumeration();
    }, 'cannot create new instances after class is defined and sealed');
});
QUnit.test('Enumeration Subtyping', (assert)=>{
    let MyEnumeration = class MyEnumeration extends EnumerationValue {
    };
    MyEnumeration.ITEM_1 = new MyEnumeration();
    MyEnumeration.ITEM_2 = new MyEnumeration();
    MyEnumeration.ITEM_3 = new MyEnumeration();
    MyEnumeration.enumeration = new Enumeration(MyEnumeration);
    let MySubEnumeration = class MySubEnumeration extends MyEnumeration {
    };
    MySubEnumeration.ITEM_4 = new MySubEnumeration();
    MySubEnumeration.enumeration = new Enumeration(MySubEnumeration, {
        instanceType: MyEnumeration
    });
    assert.ok(MySubEnumeration.enumeration.keys.length === 4, 'keys all there');
    assert.ok(MySubEnumeration.enumeration.values.length === 4, 'values all there');
    assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_1.enumeration, 'enumeration instances from parent');
    assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_2.enumeration, 'enumeration instances from parent 2');
    assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_3.enumeration, 'enumeration instances from parent 3');
    assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_1.enumeration, 'enumeration instances not from child');
    assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_2.enumeration, 'enumeration instances not from child 2');
    // @ts-expect-error INTENTIONAL - we know this doesn't exist, but still want the runtime check
    assert.ok(!MyEnumeration.ITEM_4, 'super should not have sub item');
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9FbnVtZXJhdGlvblRlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFRlc3RzIGZvciBFbnVtZXJhdGlvbiwgRW51bWVyYXRpb25WYWx1ZVxuICpcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi9FbnVtZXJhdGlvbi5qcyc7XG5pbXBvcnQgRW51bWVyYXRpb25WYWx1ZSBmcm9tICcuL0VudW1lcmF0aW9uVmFsdWUuanMnO1xuXG5RVW5pdC5tb2R1bGUoICdFbnVtZXJhdGlvbicgKTtcblxuUVVuaXQudGVzdCggJ0VudW1lcmF0aW9uJywgYXNzZXJ0ID0+IHtcblxuICBjbGFzcyBNeUVudW1lcmF0aW9uIGV4dGVuZHMgRW51bWVyYXRpb25WYWx1ZSB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzEgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVRFTV8yID0gbmV3IE15RW51bWVyYXRpb24oKTtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElURU1fMyA9IG5ldyBNeUVudW1lcmF0aW9uKCk7XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBNeUVudW1lcmF0aW9uICk7XG4gIH1cblxuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24ua2V5cy5sZW5ndGggPT09IDMsICdrZXlzIGFsbCB0aGVyZScgKTtcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uLnZhbHVlcy5sZW5ndGggPT09IDMsICd2YWx1ZXMgYWxsIHRoZXJlJyApO1xuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24gPT09IE15RW51bWVyYXRpb24uSVRFTV8xLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIGFyZSB0aGUgc2FtZScgKTtcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uID09PSBNeUVudW1lcmF0aW9uLklURU1fMi5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBhcmUgdGhlIHNhbWUgMicgKTtcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uID09PSBNeUVudW1lcmF0aW9uLklURU1fMy5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBhcmUgdGhlIHNhbWUgMycgKTtcblxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC50aHJvd3MoICgpID0+IHtcbiAgICByZXR1cm4gbmV3IE15RW51bWVyYXRpb24oKTtcbiAgfSwgJ2Nhbm5vdCBjcmVhdGUgbmV3IGluc3RhbmNlcyBhZnRlciBjbGFzcyBpcyBkZWZpbmVkIGFuZCBzZWFsZWQnICk7XG59ICk7XG5cblFVbml0LnRlc3QoICdFbnVtZXJhdGlvbiBTdWJ0eXBpbmcnLCBhc3NlcnQgPT4ge1xuXG4gIGNsYXNzIE15RW51bWVyYXRpb24gZXh0ZW5kcyBFbnVtZXJhdGlvblZhbHVlIHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElURU1fMSA9IG5ldyBNeUVudW1lcmF0aW9uKCk7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzIgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSVRFTV8zID0gbmV3IE15RW51bWVyYXRpb24oKTtcblxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIE15RW51bWVyYXRpb24gKTtcbiAgfVxuXG4gIGNsYXNzIE15U3ViRW51bWVyYXRpb24gZXh0ZW5kcyBNeUVudW1lcmF0aW9uIHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElURU1fNCA9IG5ldyBNeVN1YkVudW1lcmF0aW9uKCk7XG5cbiAgICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBNeVN1YkVudW1lcmF0aW9uLCB7XG4gICAgICBpbnN0YW5jZVR5cGU6IE15RW51bWVyYXRpb25cbiAgICB9ICk7XG4gIH1cblxuICBhc3NlcnQub2soIE15U3ViRW51bWVyYXRpb24uZW51bWVyYXRpb24ua2V5cy5sZW5ndGggPT09IDQsICdrZXlzIGFsbCB0aGVyZScgKTtcbiAgYXNzZXJ0Lm9rKCBNeVN1YkVudW1lcmF0aW9uLmVudW1lcmF0aW9uLnZhbHVlcy5sZW5ndGggPT09IDQsICd2YWx1ZXMgYWxsIHRoZXJlJyApO1xuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24gPT09IE15U3ViRW51bWVyYXRpb24uSVRFTV8xLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIGZyb20gcGFyZW50JyApO1xuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24gPT09IE15U3ViRW51bWVyYXRpb24uSVRFTV8yLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIGZyb20gcGFyZW50IDInICk7XG4gIGFzc2VydC5vayggTXlFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbiA9PT0gTXlTdWJFbnVtZXJhdGlvbi5JVEVNXzMuZW51bWVyYXRpb24sICdlbnVtZXJhdGlvbiBpbnN0YW5jZXMgZnJvbSBwYXJlbnQgMycgKTtcbiAgYXNzZXJ0Lm9rKCBNeVN1YkVudW1lcmF0aW9uLmVudW1lcmF0aW9uICE9PSBNeVN1YkVudW1lcmF0aW9uLklURU1fMS5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBub3QgZnJvbSBjaGlsZCcgKTtcbiAgYXNzZXJ0Lm9rKCBNeVN1YkVudW1lcmF0aW9uLmVudW1lcmF0aW9uICE9PSBNeVN1YkVudW1lcmF0aW9uLklURU1fMi5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBub3QgZnJvbSBjaGlsZCAyJyApO1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgSU5URU5USU9OQUwgLSB3ZSBrbm93IHRoaXMgZG9lc24ndCBleGlzdCwgYnV0IHN0aWxsIHdhbnQgdGhlIHJ1bnRpbWUgY2hlY2tcbiAgYXNzZXJ0Lm9rKCAhTXlFbnVtZXJhdGlvbi5JVEVNXzQsICdzdXBlciBzaG91bGQgbm90IGhhdmUgc3ViIGl0ZW0nICk7XG59ICk7Il0sIm5hbWVzIjpbIkVudW1lcmF0aW9uIiwiRW51bWVyYXRpb25WYWx1ZSIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsIk15RW51bWVyYXRpb24iLCJJVEVNXzEiLCJJVEVNXzIiLCJJVEVNXzMiLCJlbnVtZXJhdGlvbiIsIm9rIiwia2V5cyIsImxlbmd0aCIsInZhbHVlcyIsIndpbmRvdyIsInRocm93cyIsIk15U3ViRW51bWVyYXRpb24iLCJJVEVNXzQiLCJpbnN0YW5jZVR5cGUiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBRUQsT0FBT0EsaUJBQWlCLG1CQUFtQjtBQUMzQyxPQUFPQyxzQkFBc0Isd0JBQXdCO0FBRXJEQyxNQUFNQyxNQUFNLENBQUU7QUFFZEQsTUFBTUUsSUFBSSxDQUFFLGVBQWVDLENBQUFBO0lBRXpCLElBQUEsQUFBTUMsZ0JBQU4sTUFBTUEsc0JBQXNCTDtJQU01QjtJQU5NSyxjQUNtQkMsU0FBUyxJQUFJRDtJQURoQ0EsY0FFbUJFLFNBQVMsSUFBSUY7SUFGaENBLGNBR21CRyxTQUFTLElBQUlIO0lBSGhDQSxjQUttQkksY0FBYyxJQUFJVixZQUFhTTtJQUd4REQsT0FBT00sRUFBRSxDQUFFTCxjQUFjSSxXQUFXLENBQUNFLElBQUksQ0FBQ0MsTUFBTSxLQUFLLEdBQUc7SUFDeERSLE9BQU9NLEVBQUUsQ0FBRUwsY0FBY0ksV0FBVyxDQUFDSSxNQUFNLENBQUNELE1BQU0sS0FBSyxHQUFHO0lBQzFEUixPQUFPTSxFQUFFLENBQUVMLGNBQWNJLFdBQVcsS0FBS0osY0FBY0MsTUFBTSxDQUFDRyxXQUFXLEVBQUU7SUFDM0VMLE9BQU9NLEVBQUUsQ0FBRUwsY0FBY0ksV0FBVyxLQUFLSixjQUFjRSxNQUFNLENBQUNFLFdBQVcsRUFBRTtJQUMzRUwsT0FBT00sRUFBRSxDQUFFTCxjQUFjSSxXQUFXLEtBQUtKLGNBQWNHLE1BQU0sQ0FBQ0MsV0FBVyxFQUFFO0lBRTNFSyxPQUFPVixNQUFNLElBQUlBLE9BQU9XLE1BQU0sQ0FBRTtRQUM5QixPQUFPLElBQUlWO0lBQ2IsR0FBRztBQUNMO0FBRUFKLE1BQU1FLElBQUksQ0FBRSx5QkFBeUJDLENBQUFBO0lBRW5DLElBQUEsQUFBTUMsZ0JBQU4sTUFBTUEsc0JBQXNCTDtJQU01QjtJQU5NSyxjQUNtQkMsU0FBUyxJQUFJRDtJQURoQ0EsY0FFbUJFLFNBQVMsSUFBSUY7SUFGaENBLGNBR21CRyxTQUFTLElBQUlIO0lBSGhDQSxjQUttQkksY0FBYyxJQUFJVixZQUFhTTtJQUd4RCxJQUFBLEFBQU1XLG1CQUFOLE1BQU1BLHlCQUF5Qlg7SUFNL0I7SUFOTVcsaUJBQ21CQyxTQUFTLElBQUlEO0lBRGhDQSxpQkFHNEJQLGNBQWMsSUFBSVYsWUFBYWlCLGtCQUFrQjtRQUMvRUUsY0FBY2I7SUFDaEI7SUFHRkQsT0FBT00sRUFBRSxDQUFFTSxpQkFBaUJQLFdBQVcsQ0FBQ0UsSUFBSSxDQUFDQyxNQUFNLEtBQUssR0FBRztJQUMzRFIsT0FBT00sRUFBRSxDQUFFTSxpQkFBaUJQLFdBQVcsQ0FBQ0ksTUFBTSxDQUFDRCxNQUFNLEtBQUssR0FBRztJQUM3RFIsT0FBT00sRUFBRSxDQUFFTCxjQUFjSSxXQUFXLEtBQUtPLGlCQUFpQlYsTUFBTSxDQUFDRyxXQUFXLEVBQUU7SUFDOUVMLE9BQU9NLEVBQUUsQ0FBRUwsY0FBY0ksV0FBVyxLQUFLTyxpQkFBaUJULE1BQU0sQ0FBQ0UsV0FBVyxFQUFFO0lBQzlFTCxPQUFPTSxFQUFFLENBQUVMLGNBQWNJLFdBQVcsS0FBS08saUJBQWlCUixNQUFNLENBQUNDLFdBQVcsRUFBRTtJQUM5RUwsT0FBT00sRUFBRSxDQUFFTSxpQkFBaUJQLFdBQVcsS0FBS08saUJBQWlCVixNQUFNLENBQUNHLFdBQVcsRUFBRTtJQUNqRkwsT0FBT00sRUFBRSxDQUFFTSxpQkFBaUJQLFdBQVcsS0FBS08saUJBQWlCVCxNQUFNLENBQUNFLFdBQVcsRUFBRTtJQUVqRiw4RkFBOEY7SUFDOUZMLE9BQU9NLEVBQUUsQ0FBRSxDQUFDTCxjQUFjWSxNQUFNLEVBQUU7QUFDcEMifQ==