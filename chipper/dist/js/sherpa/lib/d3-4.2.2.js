// https://d3js.org Version 4.2.2. Copyright 2016 Mike Bostock.
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : factory(global.d3 = global.d3 || {});
})(this, function(exports1) {
    'use strict';
    var version = "4.2.2";
    function ascending(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }
    function bisector(compare) {
        if (compare.length === 1) compare = ascendingComparator(compare);
        return {
            left: function(a, x, lo, hi) {
                if (lo == null) lo = 0;
                if (hi == null) hi = a.length;
                while(lo < hi){
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) < 0) lo = mid + 1;
                    else hi = mid;
                }
                return lo;
            },
            right: function(a, x, lo, hi) {
                if (lo == null) lo = 0;
                if (hi == null) hi = a.length;
                while(lo < hi){
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) > 0) hi = mid;
                    else lo = mid + 1;
                }
                return lo;
            }
        };
    }
    function ascendingComparator(f) {
        return function(d, x) {
            return ascending(f(d), x);
        };
    }
    var ascendingBisect = bisector(ascending);
    var bisectRight = ascendingBisect.right;
    var bisectLeft = ascendingBisect.left;
    function descending(a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }
    function number(x) {
        return x === null ? NaN : +x;
    }
    function variance(array, f) {
        var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
        if (f == null) {
            while(++i < n){
                if (!isNaN(a = number(array[i]))) {
                    d = a - m;
                    m += d / ++j;
                    s += d * (a - m);
                }
            }
        } else {
            while(++i < n){
                if (!isNaN(a = number(f(array[i], i, array)))) {
                    d = a - m;
                    m += d / ++j;
                    s += d * (a - m);
                }
            }
        }
        if (j > 1) return s / (j - 1);
    }
    function deviation(array, f) {
        var v = variance(array, f);
        return v ? Math.sqrt(v) : v;
    }
    function extent(array, f) {
        var i = -1, n = array.length, a, b, c;
        if (f == null) {
            while(++i < n)if ((b = array[i]) != null && b >= b) {
                a = c = b;
                break;
            }
            while(++i < n)if ((b = array[i]) != null) {
                if (a > b) a = b;
                if (c < b) c = b;
            }
        } else {
            while(++i < n)if ((b = f(array[i], i, array)) != null && b >= b) {
                a = c = b;
                break;
            }
            while(++i < n)if ((b = f(array[i], i, array)) != null) {
                if (a > b) a = b;
                if (c < b) c = b;
            }
        }
        return [
            a,
            c
        ];
    }
    var array = Array.prototype;
    var slice = array.slice;
    var map = array.map;
    function constant(x) {
        return function() {
            return x;
        };
    }
    function identity(x) {
        return x;
    }
    function range(start, stop, step) {
        start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
        var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
        while(++i < n){
            range[i] = start + i * step;
        }
        return range;
    }
    var e10 = Math.sqrt(50);
    var e5 = Math.sqrt(10);
    var e2 = Math.sqrt(2);
    function ticks(start, stop, count) {
        var step = tickStep(start, stop, count);
        return range(Math.ceil(start / step) * step, Math.floor(stop / step) * step + step / 2, step);
    }
    function tickStep(start, stop, count) {
        var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
        if (error >= e10) step1 *= 10;
        else if (error >= e5) step1 *= 5;
        else if (error >= e2) step1 *= 2;
        return stop < start ? -step1 : step1;
    }
    function sturges(values) {
        return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
    }
    function histogram() {
        var value = identity, domain = extent, threshold = sturges;
        function histogram(data) {
            var i, n = data.length, x, values = new Array(n);
            for(i = 0; i < n; ++i){
                values[i] = value(data[i], i, data);
            }
            var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
            // Convert number of thresholds into uniform thresholds.
            if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);
            // Remove any thresholds outside the domain.
            var m = tz.length;
            while(tz[0] <= x0)tz.shift(), --m;
            while(tz[m - 1] >= x1)tz.pop(), --m;
            var bins = new Array(m + 1), bin;
            // Initialize bins.
            for(i = 0; i <= m; ++i){
                bin = bins[i] = [];
                bin.x0 = i > 0 ? tz[i - 1] : x0;
                bin.x1 = i < m ? tz[i] : x1;
            }
            // Assign data to bins by value, ignoring any outside the domain.
            for(i = 0; i < n; ++i){
                x = values[i];
                if (x0 <= x && x <= x1) {
                    bins[bisectRight(tz, x, 0, m)].push(data[i]);
                }
            }
            return bins;
        }
        histogram.value = function(_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
        };
        histogram.domain = function(_) {
            return arguments.length ? (domain = typeof _ === "function" ? _ : constant([
                _[0],
                _[1]
            ]), histogram) : domain;
        };
        histogram.thresholds = function(_) {
            return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
        };
        return histogram;
    }
    function threshold(array, p, f) {
        if (f == null) f = number;
        if (!(n = array.length)) return;
        if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);
        if (p >= 1) return +f(array[n - 1], n - 1, array);
        var n, h = (n - 1) * p, i = Math.floor(h), a = +f(array[i], i, array), b = +f(array[i + 1], i + 1, array);
        return a + (b - a) * (h - i);
    }
    function freedmanDiaconis(values, min, max) {
        values = map.call(values, number).sort(ascending);
        return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
    }
    function scott(values, min, max) {
        return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
    }
    function max(array, f) {
        var i = -1, n = array.length, a, b;
        if (f == null) {
            while(++i < n)if ((b = array[i]) != null && b >= b) {
                a = b;
                break;
            }
            while(++i < n)if ((b = array[i]) != null && b > a) a = b;
        } else {
            while(++i < n)if ((b = f(array[i], i, array)) != null && b >= b) {
                a = b;
                break;
            }
            while(++i < n)if ((b = f(array[i], i, array)) != null && b > a) a = b;
        }
        return a;
    }
    function mean(array, f) {
        var s = 0, n = array.length, a, i = -1, j = n;
        if (f == null) {
            while(++i < n)if (!isNaN(a = number(array[i]))) s += a;
            else --j;
        } else {
            while(++i < n)if (!isNaN(a = number(f(array[i], i, array)))) s += a;
            else --j;
        }
        if (j) return s / j;
    }
    function median(array, f) {
        var numbers = [], n = array.length, a, i = -1;
        if (f == null) {
            while(++i < n)if (!isNaN(a = number(array[i]))) numbers.push(a);
        } else {
            while(++i < n)if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
        }
        return threshold(numbers.sort(ascending), 0.5);
    }
    function merge(arrays) {
        var n = arrays.length, m, i = -1, j = 0, merged, array;
        while(++i < n)j += arrays[i].length;
        merged = new Array(j);
        while(--n >= 0){
            array = arrays[n];
            m = array.length;
            while(--m >= 0){
                merged[--j] = array[m];
            }
        }
        return merged;
    }
    function min(array, f) {
        var i = -1, n = array.length, a, b;
        if (f == null) {
            while(++i < n)if ((b = array[i]) != null && b >= b) {
                a = b;
                break;
            }
            while(++i < n)if ((b = array[i]) != null && a > b) a = b;
        } else {
            while(++i < n)if ((b = f(array[i], i, array)) != null && b >= b) {
                a = b;
                break;
            }
            while(++i < n)if ((b = f(array[i], i, array)) != null && a > b) a = b;
        }
        return a;
    }
    function pairs(array) {
        var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
        while(i < n)pairs[i] = [
            p,
            p = array[++i]
        ];
        return pairs;
    }
    function permute(array, indexes) {
        var i = indexes.length, permutes = new Array(i);
        while(i--)permutes[i] = array[indexes[i]];
        return permutes;
    }
    function scan(array, compare) {
        if (!(n = array.length)) return;
        var i = 0, n, j = 0, xi, xj = array[j];
        if (!compare) compare = ascending;
        while(++i < n)if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;
        if (compare(xj, xj) === 0) return j;
    }
    function shuffle(array, i0, i1) {
        var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0), t, i;
        while(m){
            i = Math.random() * m-- | 0;
            t = array[m + i0];
            array[m + i0] = array[i + i0];
            array[i + i0] = t;
        }
        return array;
    }
    function sum(array, f) {
        var s = 0, n = array.length, a, i = -1;
        if (f == null) {
            while(++i < n)if (a = +array[i]) s += a; // Note: zero and null are equivalent.
        } else {
            while(++i < n)if (a = +f(array[i], i, array)) s += a;
        }
        return s;
    }
    function transpose(matrix) {
        if (!(n = matrix.length)) return [];
        for(var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;){
            for(var j = -1, n, row = transpose[i] = new Array(n); ++j < n;){
                row[j] = matrix[j][i];
            }
        }
        return transpose;
    }
    function length(d) {
        return d.length;
    }
    function zip() {
        return transpose(arguments);
    }
    var prefix = "$";
    function Map() {}
    Map.prototype = map$1.prototype = {
        constructor: Map,
        has: function(key) {
            return prefix + key in this;
        },
        get: function(key) {
            return this[prefix + key];
        },
        set: function(key, value) {
            this[prefix + key] = value;
            return this;
        },
        remove: function(key) {
            var property = prefix + key;
            return property in this && delete this[property];
        },
        clear: function() {
            for(var property in this)if (property[0] === prefix) delete this[property];
        },
        keys: function() {
            var keys = [];
            for(var property in this)if (property[0] === prefix) keys.push(property.slice(1));
            return keys;
        },
        values: function() {
            var values = [];
            for(var property in this)if (property[0] === prefix) values.push(this[property]);
            return values;
        },
        entries: function() {
            var entries = [];
            for(var property in this)if (property[0] === prefix) entries.push({
                key: property.slice(1),
                value: this[property]
            });
            return entries;
        },
        size: function() {
            var size = 0;
            for(var property in this)if (property[0] === prefix) ++size;
            return size;
        },
        empty: function() {
            for(var property in this)if (property[0] === prefix) return false;
            return true;
        },
        each: function(f) {
            for(var property in this)if (property[0] === prefix) f(this[property], property.slice(1), this);
        }
    };
    function map$1(object, f) {
        var map = new Map;
        // Copy constructor.
        if (object instanceof Map) object.each(function(value, key) {
            map.set(key, value);
        });
        else if (Array.isArray(object)) {
            var i = -1, n = object.length, o;
            if (f == null) while(++i < n)map.set(i, object[i]);
            else while(++i < n)map.set(f(o = object[i], i, object), o);
        } else if (object) for(var key in object)map.set(key, object[key]);
        return map;
    }
    function nest() {
        var keys = [], sortKeys = [], sortValues, rollup, nest;
        function apply(array, depth, createResult, setResult) {
            if (depth >= keys.length) return rollup != null ? rollup(array) : sortValues != null ? array.sort(sortValues) : array;
            var i = -1, n = array.length, key = keys[depth++], keyValue, value, valuesByKey = map$1(), values, result = createResult();
            while(++i < n){
                if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
                    values.push(value);
                } else {
                    valuesByKey.set(keyValue, [
                        value
                    ]);
                }
            }
            valuesByKey.each(function(values, key) {
                setResult(result, key, apply(values, depth, createResult, setResult));
            });
            return result;
        }
        function entries(map, depth) {
            if (++depth > keys.length) return map;
            var array, sortKey = sortKeys[depth - 1];
            if (rollup != null && depth >= keys.length) array = map.entries();
            else array = [], map.each(function(v, k) {
                array.push({
                    key: k,
                    values: entries(v, depth)
                });
            });
            return sortKey != null ? array.sort(function(a, b) {
                return sortKey(a.key, b.key);
            }) : array;
        }
        return nest = {
            object: function(array) {
                return apply(array, 0, createObject, setObject);
            },
            map: function(array) {
                return apply(array, 0, createMap, setMap);
            },
            entries: function(array) {
                return entries(apply(array, 0, createMap, setMap), 0);
            },
            key: function(d) {
                keys.push(d);
                return nest;
            },
            sortKeys: function(order) {
                sortKeys[keys.length - 1] = order;
                return nest;
            },
            sortValues: function(order) {
                sortValues = order;
                return nest;
            },
            rollup: function(f) {
                rollup = f;
                return nest;
            }
        };
    }
    function createObject() {
        return {};
    }
    function setObject(object, key, value) {
        object[key] = value;
    }
    function createMap() {
        return map$1();
    }
    function setMap(map, key, value) {
        map.set(key, value);
    }
    function Set() {}
    var proto = map$1.prototype;
    Set.prototype = set.prototype = {
        constructor: Set,
        has: proto.has,
        add: function(value) {
            value += "";
            this[prefix + value] = value;
            return this;
        },
        remove: proto.remove,
        clear: proto.clear,
        values: proto.keys,
        size: proto.size,
        empty: proto.empty,
        each: proto.each
    };
    function set(object, f) {
        var set = new Set;
        // Copy constructor.
        if (object instanceof Set) object.each(function(value) {
            set.add(value);
        });
        else if (object) {
            var i = -1, n = object.length;
            if (f == null) while(++i < n)set.add(object[i]);
            else while(++i < n)set.add(f(object[i], i, object));
        }
        return set;
    }
    function keys(map) {
        var keys = [];
        for(var key in map)keys.push(key);
        return keys;
    }
    function values(map) {
        var values = [];
        for(var key in map)values.push(map[key]);
        return values;
    }
    function entries(map) {
        var entries = [];
        for(var key in map)entries.push({
            key: key,
            value: map[key]
        });
        return entries;
    }
    function uniform(min, max) {
        min = min == null ? 0 : +min;
        max = max == null ? 1 : +max;
        if (arguments.length === 1) max = min, min = 0;
        else max -= min;
        return function() {
            return Math.random() * max + min;
        };
    }
    function normal(mu, sigma) {
        var x, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
            var y;
            // If available, use the second previously-generated uniform random.
            if (x != null) y = x, x = null;
            else do {
                x = Math.random() * 2 - 1;
                y = Math.random() * 2 - 1;
                r = x * x + y * y;
            }while (!r || r > 1)
            return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
        };
    }
    function logNormal() {
        var randomNormal = normal.apply(this, arguments);
        return function() {
            return Math.exp(randomNormal());
        };
    }
    function irwinHall(n) {
        return function() {
            for(var sum = 0, i = 0; i < n; ++i)sum += Math.random();
            return sum;
        };
    }
    function bates(n) {
        var randomIrwinHall = irwinHall(n);
        return function() {
            return randomIrwinHall() / n;
        };
    }
    function exponential(lambda) {
        return function() {
            return -Math.log(1 - Math.random()) / lambda;
        };
    }
    function linear(t) {
        return +t;
    }
    function quadIn(t) {
        return t * t;
    }
    function quadOut(t) {
        return t * (2 - t);
    }
    function quadInOut(t) {
        return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
    }
    function cubicIn(t) {
        return t * t * t;
    }
    function cubicOut(t) {
        return --t * t * t + 1;
    }
    function easeCubicInOut(t) {
        return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }
    var exponent = 3;
    var polyIn = function custom(e) {
        e = +e;
        function polyIn(t) {
            return Math.pow(t, e);
        }
        polyIn.exponent = custom;
        return polyIn;
    }(exponent);
    var polyOut = function custom(e) {
        e = +e;
        function polyOut(t) {
            return 1 - Math.pow(1 - t, e);
        }
        polyOut.exponent = custom;
        return polyOut;
    }(exponent);
    var polyInOut = function custom(e) {
        e = +e;
        function polyInOut(t) {
            return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
        }
        polyInOut.exponent = custom;
        return polyInOut;
    }(exponent);
    var pi = Math.PI;
    var halfPi = pi / 2;
    function sinIn(t) {
        return 1 - Math.cos(t * halfPi);
    }
    function sinOut(t) {
        return Math.sin(t * halfPi);
    }
    function sinInOut(t) {
        return (1 - Math.cos(pi * t)) / 2;
    }
    function expIn(t) {
        return Math.pow(2, 10 * t - 10);
    }
    function expOut(t) {
        return 1 - Math.pow(2, -10 * t);
    }
    function expInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
    }
    function circleIn(t) {
        return 1 - Math.sqrt(1 - t * t);
    }
    function circleOut(t) {
        return Math.sqrt(1 - --t * t);
    }
    function circleInOut(t) {
        return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
    }
    var b1 = 4 / 11;
    var b2 = 6 / 11;
    var b3 = 8 / 11;
    var b4 = 3 / 4;
    var b5 = 9 / 11;
    var b6 = 10 / 11;
    var b7 = 15 / 16;
    var b8 = 21 / 22;
    var b9 = 63 / 64;
    var b0 = 1 / b1 / b1;
    function bounceIn(t) {
        return 1 - bounceOut(1 - t);
    }
    function bounceOut(t) {
        return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
    }
    function bounceInOut(t) {
        return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
    }
    var overshoot = 1.70158;
    var backIn = function custom(s) {
        s = +s;
        function backIn(t) {
            return t * t * ((s + 1) * t - s);
        }
        backIn.overshoot = custom;
        return backIn;
    }(overshoot);
    var backOut = function custom(s) {
        s = +s;
        function backOut(t) {
            return --t * t * ((s + 1) * t + s) + 1;
        }
        backOut.overshoot = custom;
        return backOut;
    }(overshoot);
    var backInOut = function custom(s) {
        s = +s;
        function backInOut(t) {
            return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
        }
        backInOut.overshoot = custom;
        return backInOut;
    }(overshoot);
    var tau = 2 * Math.PI;
    var amplitude = 1;
    var period = 0.3;
    var elasticIn = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticIn(t) {
            return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
        }
        elasticIn.amplitude = function(a) {
            return custom(a, p * tau);
        };
        elasticIn.period = function(p) {
            return custom(a, p);
        };
        return elasticIn;
    }(amplitude, period);
    var elasticOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticOut(t) {
            return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
        }
        elasticOut.amplitude = function(a) {
            return custom(a, p * tau);
        };
        elasticOut.period = function(p) {
            return custom(a, p);
        };
        return elasticOut;
    }(amplitude, period);
    var elasticInOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticInOut(t) {
            return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
        }
        elasticInOut.amplitude = function(a) {
            return custom(a, p * tau);
        };
        elasticInOut.period = function(p) {
            return custom(a, p);
        };
        return elasticInOut;
    }(amplitude, period);
    function area(polygon) {
        var i = -1, n = polygon.length, a, b = polygon[n - 1], area = 0;
        while(++i < n){
            a = b;
            b = polygon[i];
            area += a[1] * b[0] - a[0] * b[1];
        }
        return area / 2;
    }
    function centroid(polygon) {
        var i = -1, n = polygon.length, x = 0, y = 0, a, b = polygon[n - 1], c, k = 0;
        while(++i < n){
            a = b;
            b = polygon[i];
            k += c = a[0] * b[1] - b[0] * a[1];
            x += (a[0] + b[0]) * c;
            y += (a[1] + b[1]) * c;
        }
        return k *= 3, [
            x / k,
            y / k
        ];
    }
    // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
    // the 3D cross product in a quadrant I Cartesian coordinate system (+x is
    // right, +y is up). Returns a positive value if ABC is counter-clockwise,
    // negative if clockwise, and zero if the points are collinear.
    function cross(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }
    function lexicographicOrder(a, b) {
        return a[0] - b[0] || a[1] - b[1];
    }
    // Computes the upper convex hull per the monotone chain algorithm.
    // Assumes points.length >= 3, is sorted by x, unique in y.
    // Returns an array of indices into points in left-to-right order.
    function computeUpperHullIndexes(points) {
        var n = points.length, indexes = [
            0,
            1
        ], size = 2;
        for(var i = 2; i < n; ++i){
            while(size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0)--size;
            indexes[size++] = i;
        }
        return indexes.slice(0, size); // remove popped points
    }
    function hull(points) {
        if ((n = points.length) < 3) return null;
        var i, n, sortedPoints = new Array(n), flippedPoints = new Array(n);
        for(i = 0; i < n; ++i)sortedPoints[i] = [
            +points[i][0],
            +points[i][1],
            i
        ];
        sortedPoints.sort(lexicographicOrder);
        for(i = 0; i < n; ++i)flippedPoints[i] = [
            sortedPoints[i][0],
            -sortedPoints[i][1]
        ];
        var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
        // Construct the hull polygon, removing possible duplicate endpoints.
        var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull = [];
        // Add upper hull in right-to-l order.
        // Then add lower hull in left-to-right order.
        for(i = upperIndexes.length - 1; i >= 0; --i)hull.push(points[sortedPoints[upperIndexes[i]][2]]);
        for(i = +skipLeft; i < lowerIndexes.length - skipRight; ++i)hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
        return hull;
    }
    function contains(polygon, point) {
        var n = polygon.length, p = polygon[n - 1], x = point[0], y = point[1], x0 = p[0], y0 = p[1], x1, y1, inside = false;
        for(var i = 0; i < n; ++i){
            p = polygon[i], x1 = p[0], y1 = p[1];
            if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
            x0 = x1, y0 = y1;
        }
        return inside;
    }
    function length$1(polygon) {
        var i = -1, n = polygon.length, b = polygon[n - 1], xa, ya, xb = b[0], yb = b[1], perimeter = 0;
        while(++i < n){
            xa = xb;
            ya = yb;
            b = polygon[i];
            xb = b[0];
            yb = b[1];
            xa -= xb;
            ya -= yb;
            perimeter += Math.sqrt(xa * xa + ya * ya);
        }
        return perimeter;
    }
    var pi$1 = Math.PI;
    var tau$1 = 2 * pi$1;
    var epsilon = 1e-6;
    var tauEpsilon = tau$1 - epsilon;
    function Path() {
        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
        this._ = [];
    }
    function path() {
        return new Path;
    }
    Path.prototype = path.prototype = {
        constructor: Path,
        moveTo: function(x, y) {
            this._.push("M", this._x0 = this._x1 = +x, ",", this._y0 = this._y1 = +y);
        },
        closePath: function() {
            if (this._x1 !== null) {
                this._x1 = this._x0, this._y1 = this._y0;
                this._.push("Z");
            }
        },
        lineTo: function(x, y) {
            this._.push("L", this._x1 = +x, ",", this._y1 = +y);
        },
        quadraticCurveTo: function(x1, y1, x, y) {
            this._.push("Q", +x1, ",", +y1, ",", this._x1 = +x, ",", this._y1 = +y);
        },
        bezierCurveTo: function(x1, y1, x2, y2, x, y) {
            this._.push("C", +x1, ",", +y1, ",", +x2, ",", +y2, ",", this._x1 = +x, ",", this._y1 = +y);
        },
        arcTo: function(x1, y1, x2, y2, r) {
            x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
            var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
            // Is the radius negative? Error.
            if (r < 0) throw new Error("negative radius: " + r);
            // Is this path empty? Move to (x1,y1).
            if (this._x1 === null) {
                this._.push("M", this._x1 = x1, ",", this._y1 = y1);
            } else if (!(l01_2 > epsilon)) ;
            else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
                this._.push("L", this._x1 = x1, ",", this._y1 = y1);
            } else {
                var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
                // If the start tangent is not coincident with (x0,y0), line to.
                if (Math.abs(t01 - 1) > epsilon) {
                    this._.push("L", x1 + t01 * x01, ",", y1 + t01 * y01);
                }
                this._.push("A", r, ",", r, ",0,0,", +(y01 * x20 > x01 * y20), ",", this._x1 = x1 + t21 * x21, ",", this._y1 = y1 + t21 * y21);
            }
        },
        arc: function(x, y, r, a0, a1, ccw) {
            x = +x, y = +y, r = +r;
            var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
            // Is the radius negative? Error.
            if (r < 0) throw new Error("negative radius: " + r);
            // Is this path empty? Move to (x0,y0).
            if (this._x1 === null) {
                this._.push("M", x0, ",", y0);
            } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
                this._.push("L", x0, ",", y0);
            }
            // Is this arc empty? We’re done.
            if (!r) return;
            // Is this a complete circle? Draw two arcs to complete the circle.
            if (da > tauEpsilon) {
                this._.push("A", r, ",", r, ",0,1,", cw, ",", x - dx, ",", y - dy, "A", r, ",", r, ",0,1,", cw, ",", this._x1 = x0, ",", this._y1 = y0);
            } else {
                if (da < 0) da = da % tau$1 + tau$1;
                this._.push("A", r, ",", r, ",0,", +(da >= pi$1), ",", cw, ",", this._x1 = x + r * Math.cos(a1), ",", this._y1 = y + r * Math.sin(a1));
            }
        },
        rect: function(x, y, w, h) {
            this._.push("M", this._x0 = this._x1 = +x, ",", this._y0 = this._y1 = +y, "h", +w, "v", +h, "h", -w, "Z");
        },
        toString: function() {
            return this._.join("");
        }
    };
    function tree_add(d) {
        var x = +this._x.call(null, d), y = +this._y.call(null, d);
        return add(this.cover(x, y), x, y, d);
    }
    function add(tree, x, y, d) {
        if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points
        var parent, node = tree._root, leaf = {
            data: d
        }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
        // If the tree is empty, initialize the root as a leaf.
        if (!node) return tree._root = leaf, tree;
        // Find the existing leaf for the new point, or add it.
        while(node.length){
            if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
            else x1 = xm;
            if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
            else y1 = ym;
            if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
        }
        // Is the new point is exactly coincident with the existing point?
        xp = +tree._x.call(null, node.data);
        yp = +tree._y.call(null, node.data);
        if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
        // Otherwise, split the leaf node until the old and new point are separated.
        do {
            parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
            if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
            else x1 = xm;
            if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
            else y1 = ym;
        }while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm))
        return parent[j] = node, parent[i] = leaf, tree;
    }
    function addAll(data) {
        var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
        // Compute the points and their extent.
        for(i = 0; i < n; ++i){
            if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
            xz[i] = x;
            yz[i] = y;
            if (x < x0) x0 = x;
            if (x > x1) x1 = x;
            if (y < y0) y0 = y;
            if (y > y1) y1 = y;
        }
        // If there were no (valid) points, inherit the existing extent.
        if (x1 < x0) x0 = this._x0, x1 = this._x1;
        if (y1 < y0) y0 = this._y0, y1 = this._y1;
        // Expand the tree to cover the new points.
        this.cover(x0, y0).cover(x1, y1);
        // Add the new points.
        for(i = 0; i < n; ++i){
            add(this, xz[i], yz[i], data[i]);
        }
        return this;
    }
    function tree_cover(x, y) {
        if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points
        var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
        // If the quadtree has no extent, initialize them.
        // Integer extent are necessary so that if we later double the extent,
        // the existing quadrant boundaries don’t change due to floating point error!
        if (isNaN(x0)) {
            x1 = (x0 = Math.floor(x)) + 1;
            y1 = (y0 = Math.floor(y)) + 1;
        } else if (x0 > x || x > x1 || y0 > y || y > y1) {
            var z = x1 - x0, node = this._root, parent, i;
            switch(i = (y < (y0 + y1) / 2) << 1 | x < (x0 + x1) / 2){
                case 0:
                    {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1)
                        break;
                    }
                case 1:
                    {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1)
                        break;
                    }
                case 2:
                    {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y)
                        break;
                    }
                case 3:
                    {
                        do parent = new Array(4), parent[i] = node, node = parent;
                        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y)
                        break;
                    }
            }
            if (this._root && this._root.length) this._root = node;
        } else return this;
        this._x0 = x0;
        this._y0 = y0;
        this._x1 = x1;
        this._y1 = y1;
        return this;
    }
    function tree_data() {
        var data = [];
        this.visit(function(node) {
            if (!node.length) do data.push(node.data);
            while (node = node.next)
        });
        return data;
    }
    function tree_extent(_) {
        return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [
            [
                this._x0,
                this._y0
            ],
            [
                this._x1,
                this._y1
            ]
        ];
    }
    function Quad(node, x0, y0, x1, y1) {
        this.node = node;
        this.x0 = x0;
        this.y0 = y0;
        this.x1 = x1;
        this.y1 = y1;
    }
    function tree_find(x, y, radius) {
        var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
        if (node) quads.push(new Quad(node, x0, y0, x3, y3));
        if (radius == null) radius = Infinity;
        else {
            x0 = x - radius, y0 = y - radius;
            x3 = x + radius, y3 = y + radius;
            radius *= radius;
        }
        while(q = quads.pop()){
            // Stop searching if this quadrant can’t contain a closer node.
            if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;
            // Bisect the current quadrant.
            if (node.length) {
                var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
                quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym));
                // Visit the closest quadrant first.
                if (i = (y >= ym) << 1 | x >= xm) {
                    q = quads[quads.length - 1];
                    quads[quads.length - 1] = quads[quads.length - 1 - i];
                    quads[quads.length - 1 - i] = q;
                }
            } else {
                var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
                if (d2 < radius) {
                    var d = Math.sqrt(radius = d2);
                    x0 = x - d, y0 = y - d;
                    x3 = x + d, y3 = y + d;
                    data = node.data;
                }
            }
        }
        return data;
    }
    function tree_remove(d) {
        if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points
        var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
        // If the tree is empty, initialize the root as a leaf.
        if (!node) return this;
        // Find the leaf node for the point.
        // While descending, also retain the deepest parent with a non-removed sibling.
        if (node.length) while(true){
            if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;
            else x1 = xm;
            if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;
            else y1 = ym;
            if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
            if (!node.length) break;
            if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
        }
        // Find the point to remove.
        while(node.data !== d)if (!(previous = node, node = node.next)) return this;
        if (next = node.next) delete node.next;
        // If there are multiple coincident points, remove just the point.
        if (previous) return next ? previous.next = next : delete previous.next, this;
        // If this is the root point, remove it.
        if (!parent) return this._root = next, this;
        // Remove this leaf.
        next ? parent[i] = next : delete parent[i];
        // If the parent now contains exactly one leaf, collapse superfluous parents.
        if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
            if (retainer) retainer[j] = node;
            else this._root = node;
        }
        return this;
    }
    function removeAll(data) {
        for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);
        return this;
    }
    function tree_root() {
        return this._root;
    }
    function tree_size() {
        var size = 0;
        this.visit(function(node) {
            if (!node.length) do ++size;
            while (node = node.next)
        });
        return size;
    }
    function tree_visit(callback) {
        var quads = [], q, node = this._root, child, x0, y0, x1, y1;
        if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
        while(q = quads.pop()){
            if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
                var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
                if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
                if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
                if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
                if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
            }
        }
        return this;
    }
    function tree_visitAfter(callback) {
        var quads = [], next = [], q;
        if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
        while(q = quads.pop()){
            var node = q.node;
            if (node.length) {
                var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
                if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
                if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
                if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
                if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
            }
            next.push(q);
        }
        while(q = next.pop()){
            callback(q.node, q.x0, q.y0, q.x1, q.y1);
        }
        return this;
    }
    function defaultX(d) {
        return d[0];
    }
    function tree_x(_) {
        return arguments.length ? (this._x = _, this) : this._x;
    }
    function defaultY(d) {
        return d[1];
    }
    function tree_y(_) {
        return arguments.length ? (this._y = _, this) : this._y;
    }
    function quadtree(nodes, x, y) {
        var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
        return nodes == null ? tree : tree.addAll(nodes);
    }
    function Quadtree(x, y, x0, y0, x1, y1) {
        this._x = x;
        this._y = y;
        this._x0 = x0;
        this._y0 = y0;
        this._x1 = x1;
        this._y1 = y1;
        this._root = undefined;
    }
    function leaf_copy(leaf) {
        var copy = {
            data: leaf.data
        }, next = copy;
        while(leaf = leaf.next)next = next.next = {
            data: leaf.data
        };
        return copy;
    }
    var treeProto = quadtree.prototype = Quadtree.prototype;
    treeProto.copy = function() {
        var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
        if (!node) return copy;
        if (!node.length) return copy._root = leaf_copy(node), copy;
        nodes = [
            {
                source: node,
                target: copy._root = new Array(4)
            }
        ];
        while(node = nodes.pop()){
            for(var i = 0; i < 4; ++i){
                if (child = node.source[i]) {
                    if (child.length) nodes.push({
                        source: child,
                        target: node.target[i] = new Array(4)
                    });
                    else node.target[i] = leaf_copy(child);
                }
            }
        }
        return copy;
    };
    treeProto.add = tree_add;
    treeProto.addAll = addAll;
    treeProto.cover = tree_cover;
    treeProto.data = tree_data;
    treeProto.extent = tree_extent;
    treeProto.find = tree_find;
    treeProto.remove = tree_remove;
    treeProto.removeAll = removeAll;
    treeProto.root = tree_root;
    treeProto.size = tree_size;
    treeProto.visit = tree_visit;
    treeProto.visitAfter = tree_visitAfter;
    treeProto.x = tree_x;
    treeProto.y = tree_y;
    var slice$1 = [].slice;
    var noabort = {};
    function Queue(size) {
        if (!(size >= 1)) throw new Error;
        this._size = size;
        this._call = this._error = null;
        this._tasks = [];
        this._data = [];
        this._waiting = this._active = this._ended = this._start = 0; // inside a synchronous task callback?
    }
    Queue.prototype = queue.prototype = {
        constructor: Queue,
        defer: function(callback) {
            if (typeof callback !== "function" || this._call) throw new Error;
            if (this._error != null) return this;
            var t = slice$1.call(arguments, 1);
            t.push(callback);
            ++this._waiting, this._tasks.push(t);
            poke(this);
            return this;
        },
        abort: function() {
            if (this._error == null) abort(this, new Error("abort"));
            return this;
        },
        await: function(callback) {
            if (typeof callback !== "function" || this._call) throw new Error;
            this._call = function(error, results) {
                callback.apply(null, [
                    error
                ].concat(results));
            };
            maybeNotify(this);
            return this;
        },
        awaitAll: function(callback) {
            if (typeof callback !== "function" || this._call) throw new Error;
            this._call = callback;
            maybeNotify(this);
            return this;
        }
    };
    function poke(q) {
        if (!q._start) try {
            start(q);
        } catch (e) {
            if (q._tasks[q._ended + q._active - 1]) abort(q, e);
        } // task errored synchronously
    }
    function start(q) {
        while(q._start = q._waiting && q._active < q._size){
            var i = q._ended + q._active, t = q._tasks[i], j = t.length - 1, c = t[j];
            t[j] = end(q, i);
            --q._waiting, ++q._active;
            t = c.apply(null, t);
            if (!q._tasks[i]) continue; // task finished synchronously
            q._tasks[i] = t || noabort;
        }
    }
    function end(q, i) {
        return function(e, r) {
            if (!q._tasks[i]) return; // ignore multiple callbacks
            --q._active, ++q._ended;
            q._tasks[i] = null;
            if (q._error != null) return; // ignore secondary errors
            if (e != null) {
                abort(q, e);
            } else {
                q._data[i] = r;
                if (q._waiting) poke(q);
                else maybeNotify(q);
            }
        };
    }
    function abort(q, e) {
        var i = q._tasks.length, t;
        q._error = e; // ignore active callbacks
        q._data = undefined; // allow gc
        q._waiting = NaN; // prevent starting
        while(--i >= 0){
            if (t = q._tasks[i]) {
                q._tasks[i] = null;
                if (t.abort) try {
                    t.abort();
                } catch (e) {}
            }
        }
        q._active = NaN; // allow notification
        maybeNotify(q);
    }
    function maybeNotify(q) {
        if (!q._active && q._call) q._call(q._error, q._data);
    }
    function queue(concurrency) {
        return new Queue(arguments.length ? +concurrency : Infinity);
    }
    function constant$1(x) {
        return function constant() {
            return x;
        };
    }
    var epsilon$1 = 1e-12;
    var pi$2 = Math.PI;
    var halfPi$1 = pi$2 / 2;
    var tau$2 = 2 * pi$2;
    function arcInnerRadius(d) {
        return d.innerRadius;
    }
    function arcOuterRadius(d) {
        return d.outerRadius;
    }
    function arcStartAngle(d) {
        return d.startAngle;
    }
    function arcEndAngle(d) {
        return d.endAngle;
    }
    function arcPadAngle(d) {
        return d && d.padAngle; // Note: optional!
    }
    function asin(x) {
        return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);
    }
    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
        var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
        return [
            x0 + t * x10,
            y0 + t * y10
        ];
    }
    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
        var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
        // Pick the closer of the two intersection points.
        // TODO Is there a faster way to determine which intersection to use?
        if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
        return {
            cx: cx0,
            cy: cy0,
            x01: -ox,
            y01: -oy,
            x11: cx0 * (r1 / r - 1),
            y11: cy0 * (r1 / r - 1)
        };
    }
    function arc() {
        var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant$1(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
        function arc() {
            var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi$1, a1 = endAngle.apply(this, arguments) - halfPi$1, da = Math.abs(a1 - a0), cw = a1 > a0;
            if (!context) context = buffer = path();
            // Ensure that the outer radius is always larger than the inner radius.
            if (r1 < r0) r = r1, r1 = r0, r0 = r;
            // Is it a point?
            if (!(r1 > epsilon$1)) context.moveTo(0, 0);
            else if (da > tau$2 - epsilon$1) {
                context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
                context.arc(0, 0, r1, a0, a1, !cw);
                if (r0 > epsilon$1) {
                    context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
                    context.arc(0, 0, r0, a1, a0, cw);
                }
            } else {
                var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon$1 && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)), rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
                // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
                if (rp > epsilon$1) {
                    var p0 = asin(rp / r0 * Math.sin(ap)), p1 = asin(rp / r1 * Math.sin(ap));
                    if ((da0 -= p0 * 2) > epsilon$1) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
                    else da0 = 0, a00 = a10 = (a0 + a1) / 2;
                    if ((da1 -= p1 * 2) > epsilon$1) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
                    else da1 = 0, a01 = a11 = (a0 + a1) / 2;
                }
                var x01 = r1 * Math.cos(a01), y01 = r1 * Math.sin(a01), x10 = r0 * Math.cos(a10), y10 = r0 * Math.sin(a10);
                // Apply rounded corners?
                if (rc > epsilon$1) {
                    var x11 = r1 * Math.cos(a11), y11 = r1 * Math.sin(a11), x00 = r0 * Math.cos(a00), y00 = r0 * Math.sin(a00);
                    // Restrict the corner radius according to the sector angle.
                    if (da < pi$2) {
                        var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [
                            x10,
                            y10
                        ], ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                        rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                        rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
                    }
                }
                // Is the sector collapsed to a line?
                if (!(da1 > epsilon$1)) context.moveTo(x01, y01);
                else if (rc1 > epsilon$1) {
                    t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                    t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                    context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                    // Have the corners merged?
                    if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                    else {
                        context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                        context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                        context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                    }
                } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
                // Is there no inner ring, and it’s a circular sector?
                // Or perhaps it’s an annular sector collapsed due to padding?
                if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);
                else if (rc0 > epsilon$1) {
                    t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                    t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                    context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                    // Have the corners merged?
                    if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                    else {
                        context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                        context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                        context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                    }
                } else context.arc(0, 0, r0, a10, a00, cw);
            }
            context.closePath();
            if (buffer) return context = null, buffer + "" || null;
        }
        arc.centroid = function() {
            var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;
            return [
                Math.cos(a) * r,
                Math.sin(a) * r
            ];
        };
        arc.innerRadius = function(_) {
            return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : innerRadius;
        };
        arc.outerRadius = function(_) {
            return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : outerRadius;
        };
        arc.cornerRadius = function(_) {
            return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : cornerRadius;
        };
        arc.padRadius = function(_) {
            return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), arc) : padRadius;
        };
        arc.startAngle = function(_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : startAngle;
        };
        arc.endAngle = function(_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : endAngle;
        };
        arc.padAngle = function(_) {
            return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : padAngle;
        };
        arc.context = function(_) {
            return arguments.length ? (context = _ == null ? null : _, arc) : context;
        };
        return arc;
    }
    function Linear(context) {
        this._context = context;
    }
    Linear.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._point = 0;
        },
        lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2; // proceed
                default:
                    this._context.lineTo(x, y);
                    break;
            }
        }
    };
    function curveLinear(context) {
        return new Linear(context);
    }
    function x(p) {
        return p[0];
    }
    function y(p) {
        return p[1];
    }
    function line() {
        var x$$ = x, y$$ = y, defined = constant$1(true), context = null, curve = curveLinear, output = null;
        function line(data) {
            var i, n = data.length, d, defined0 = false, buffer;
            if (context == null) output = curve(buffer = path());
            for(i = 0; i <= n; ++i){
                if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                    if (defined0 = !defined0) output.lineStart();
                    else output.lineEnd();
                }
                if (defined0) output.point(+x$$(d, i, data), +y$$(d, i, data));
            }
            if (buffer) return output = null, buffer + "" || null;
        }
        line.x = function(_) {
            return arguments.length ? (x$$ = typeof _ === "function" ? _ : constant$1(+_), line) : x$$;
        };
        line.y = function(_) {
            return arguments.length ? (y$$ = typeof _ === "function" ? _ : constant$1(+_), line) : y$$;
        };
        line.defined = function(_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), line) : defined;
        };
        line.curve = function(_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
        };
        line.context = function(_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
        };
        return line;
    }
    function area$1() {
        var x0 = x, x1 = null, y0 = constant$1(0), y1 = y, defined = constant$1(true), context = null, curve = curveLinear, output = null;
        function area(data) {
            var i, j, k, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
            if (context == null) output = curve(buffer = path());
            for(i = 0; i <= n; ++i){
                if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                    if (defined0 = !defined0) {
                        j = i;
                        output.areaStart();
                        output.lineStart();
                    } else {
                        output.lineEnd();
                        output.lineStart();
                        for(k = i - 1; k >= j; --k){
                            output.point(x0z[k], y0z[k]);
                        }
                        output.lineEnd();
                        output.areaEnd();
                    }
                }
                if (defined0) {
                    x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                    output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
                }
            }
            if (buffer) return output = null, buffer + "" || null;
        }
        function arealine() {
            return line().defined(defined).curve(curve).context(context);
        }
        area.x = function(_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
        };
        area.x0 = function(_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
        };
        area.x1 = function(_) {
            return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
        };
        area.y = function(_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
        };
        area.y0 = function(_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
        };
        area.y1 = function(_) {
            return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
        };
        area.lineX0 = area.lineY0 = function() {
            return arealine().x(x0).y(y0);
        };
        area.lineY1 = function() {
            return arealine().x(x0).y(y1);
        };
        area.lineX1 = function() {
            return arealine().x(x1).y(y0);
        };
        area.defined = function(_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), area) : defined;
        };
        area.curve = function(_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
        };
        area.context = function(_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
        };
        return area;
    }
    function descending$1(a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }
    function identity$1(d) {
        return d;
    }
    function pie() {
        var value = identity$1, sortValues = descending$1, sort = null, startAngle = constant$1(0), endAngle = constant$1(tau$2), padAngle = constant$1(0);
        function pie(data) {
            var i, n = data.length, j, k, sum = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
            for(i = 0; i < n; ++i){
                if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
                    sum += v;
                }
            }
            // Optionally sort the arcs by previously-computed values or by data.
            if (sortValues != null) index.sort(function(i, j) {
                return sortValues(arcs[i], arcs[j]);
            });
            else if (sort != null) index.sort(function(i, j) {
                return sort(data[i], data[j]);
            });
            // Compute the arcs! They are stored in the original data's order.
            for(i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1){
                j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
                    data: data[j],
                    index: i,
                    value: v,
                    startAngle: a0,
                    endAngle: a1,
                    padAngle: p
                };
            }
            return arcs;
        }
        pie.value = function(_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), pie) : value;
        };
        pie.sortValues = function(_) {
            return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
        };
        pie.sort = function(_) {
            return arguments.length ? (sort = _, sortValues = null, pie) : sort;
        };
        pie.startAngle = function(_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : startAngle;
        };
        pie.endAngle = function(_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : endAngle;
        };
        pie.padAngle = function(_) {
            return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : padAngle;
        };
        return pie;
    }
    var curveRadialLinear = curveRadial(curveLinear);
    function Radial(curve) {
        this._curve = curve;
    }
    Radial.prototype = {
        areaStart: function() {
            this._curve.areaStart();
        },
        areaEnd: function() {
            this._curve.areaEnd();
        },
        lineStart: function() {
            this._curve.lineStart();
        },
        lineEnd: function() {
            this._curve.lineEnd();
        },
        point: function(a, r) {
            this._curve.point(r * Math.sin(a), r * -Math.cos(a));
        }
    };
    function curveRadial(curve) {
        function radial(context) {
            return new Radial(curve(context));
        }
        radial._curve = curve;
        return radial;
    }
    function radialLine(l) {
        var c = l.curve;
        l.angle = l.x, delete l.x;
        l.radius = l.y, delete l.y;
        l.curve = function(_) {
            return arguments.length ? c(curveRadial(_)) : c()._curve;
        };
        return l;
    }
    function radialLine$1() {
        return radialLine(line().curve(curveRadialLinear));
    }
    function radialArea() {
        var a = area$1().curve(curveRadialLinear), c = a.curve, x0 = a.lineX0, x1 = a.lineX1, y0 = a.lineY0, y1 = a.lineY1;
        a.angle = a.x, delete a.x;
        a.startAngle = a.x0, delete a.x0;
        a.endAngle = a.x1, delete a.x1;
        a.radius = a.y, delete a.y;
        a.innerRadius = a.y0, delete a.y0;
        a.outerRadius = a.y1, delete a.y1;
        a.lineStartAngle = function() {
            return radialLine(x0());
        }, delete a.lineX0;
        a.lineEndAngle = function() {
            return radialLine(x1());
        }, delete a.lineX1;
        a.lineInnerRadius = function() {
            return radialLine(y0());
        }, delete a.lineY0;
        a.lineOuterRadius = function() {
            return radialLine(y1());
        }, delete a.lineY1;
        a.curve = function(_) {
            return arguments.length ? c(curveRadial(_)) : c()._curve;
        };
        return a;
    }
    var circle = {
        draw: function(context, size) {
            var r = Math.sqrt(size / pi$2);
            context.moveTo(r, 0);
            context.arc(0, 0, r, 0, tau$2);
        }
    };
    var cross$1 = {
        draw: function(context, size) {
            var r = Math.sqrt(size / 5) / 2;
            context.moveTo(-3 * r, -r);
            context.lineTo(-r, -r);
            context.lineTo(-r, -3 * r);
            context.lineTo(r, -3 * r);
            context.lineTo(r, -r);
            context.lineTo(3 * r, -r);
            context.lineTo(3 * r, r);
            context.lineTo(r, r);
            context.lineTo(r, 3 * r);
            context.lineTo(-r, 3 * r);
            context.lineTo(-r, r);
            context.lineTo(-3 * r, r);
            context.closePath();
        }
    };
    var tan30 = Math.sqrt(1 / 3);
    var tan30_2 = tan30 * 2;
    var diamond = {
        draw: function(context, size) {
            var y = Math.sqrt(size / tan30_2), x = y * tan30;
            context.moveTo(0, -y);
            context.lineTo(x, 0);
            context.lineTo(0, y);
            context.lineTo(-x, 0);
            context.closePath();
        }
    };
    var ka = 0.89081309152928522810;
    var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);
    var kx = Math.sin(tau$2 / 10) * kr;
    var ky = -Math.cos(tau$2 / 10) * kr;
    var star = {
        draw: function(context, size) {
            var r = Math.sqrt(size * ka), x = kx * r, y = ky * r;
            context.moveTo(0, -r);
            context.lineTo(x, y);
            for(var i = 1; i < 5; ++i){
                var a = tau$2 * i / 5, c = Math.cos(a), s = Math.sin(a);
                context.lineTo(s * r, -c * r);
                context.lineTo(c * x - s * y, s * x + c * y);
            }
            context.closePath();
        }
    };
    var square = {
        draw: function(context, size) {
            var w = Math.sqrt(size), x = -w / 2;
            context.rect(x, x, w, w);
        }
    };
    var sqrt3 = Math.sqrt(3);
    var triangle = {
        draw: function(context, size) {
            var y = -Math.sqrt(size / (sqrt3 * 3));
            context.moveTo(0, y * 2);
            context.lineTo(-sqrt3 * y, -y);
            context.lineTo(sqrt3 * y, -y);
            context.closePath();
        }
    };
    var c = -0.5;
    var s = Math.sqrt(3) / 2;
    var k = 1 / Math.sqrt(12);
    var a = (k / 2 + 1) * 3;
    var wye = {
        draw: function(context, size) {
            var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x2 = -x1, y2 = y1;
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
            context.lineTo(x2, y2);
            context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
            context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
            context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
            context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
            context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
            context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
            context.closePath();
        }
    };
    var symbols = [
        circle,
        cross$1,
        diamond,
        square,
        star,
        triangle,
        wye
    ];
    function symbol() {
        var type = constant$1(circle), size = constant$1(64), context = null;
        function symbol() {
            var buffer;
            if (!context) context = buffer = path();
            type.apply(this, arguments).draw(context, +size.apply(this, arguments));
            if (buffer) return context = null, buffer + "" || null;
        }
        symbol.type = function(_) {
            return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
        };
        symbol.size = function(_) {
            return arguments.length ? (size = typeof _ === "function" ? _ : constant$1(+_), symbol) : size;
        };
        symbol.context = function(_) {
            return arguments.length ? (context = _ == null ? null : _, symbol) : context;
        };
        return symbol;
    }
    function noop() {}
    function point(that, x, y) {
        that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
    }
    function Basis(context) {
        this._context = context;
    }
    Basis.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            switch(this._point){
                case 3:
                    point(this, this._x1, this._y1); // proceed
                case 2:
                    this._context.lineTo(this._x1, this._y1);
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
                default:
                    point(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
        }
    };
    function basis(context) {
        return new Basis(context);
    }
    function BasisClosed(context) {
        this._context = context;
    }
    BasisClosed.prototype = {
        areaStart: noop,
        areaEnd: noop,
        lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            switch(this._point){
                case 1:
                    {
                        this._context.moveTo(this._x2, this._y2);
                        this._context.closePath();
                        break;
                    }
                case 2:
                    {
                        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                        this._context.closePath();
                        break;
                    }
                case 3:
                    {
                        this.point(this._x2, this._y2);
                        this.point(this._x3, this._y3);
                        this.point(this._x4, this._y4);
                        break;
                    }
            }
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._x2 = x, this._y2 = y;
                    break;
                case 1:
                    this._point = 2;
                    this._x3 = x, this._y3 = y;
                    break;
                case 2:
                    this._point = 3;
                    this._x4 = x, this._y4 = y;
                    this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
                    break;
                default:
                    point(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
        }
    };
    function basisClosed(context) {
        return new BasisClosed(context);
    }
    function BasisOpen(context) {
        this._context = context;
    }
    BasisOpen.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
                    this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                    break;
                case 3:
                    this._point = 4; // proceed
                default:
                    point(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
        }
    };
    function basisOpen(context) {
        return new BasisOpen(context);
    }
    function Bundle(context, beta) {
        this._basis = new Basis(context);
        this._beta = beta;
    }
    Bundle.prototype = {
        lineStart: function() {
            this._x = [];
            this._y = [];
            this._basis.lineStart();
        },
        lineEnd: function() {
            var x = this._x, y = this._y, j = x.length - 1;
            if (j > 0) {
                var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
                while(++i <= j){
                    t = i / j;
                    this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
                }
            }
            this._x = this._y = null;
            this._basis.lineEnd();
        },
        point: function(x, y) {
            this._x.push(+x);
            this._y.push(+y);
        }
    };
    var bundle = function custom(beta) {
        function bundle(context) {
            return beta === 1 ? new Basis(context) : new Bundle(context, beta);
        }
        bundle.beta = function(beta) {
            return custom(+beta);
        };
        return bundle;
    }(0.85);
    function point$1(that, x, y) {
        that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
    }
    function Cardinal(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6;
    }
    Cardinal.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            switch(this._point){
                case 2:
                    this._context.lineTo(this._x2, this._y2);
                    break;
                case 3:
                    point$1(this, this._x1, this._y1);
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    this._x1 = x, this._y1 = y;
                    break;
                case 2:
                    this._point = 3; // proceed
                default:
                    point$1(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var cardinal = function custom(tension) {
        function cardinal(context) {
            return new Cardinal(context, tension);
        }
        cardinal.tension = function(tension) {
            return custom(+tension);
        };
        return cardinal;
    }(0);
    function CardinalClosed(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6;
    }
    CardinalClosed.prototype = {
        areaStart: noop,
        areaEnd: noop,
        lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            switch(this._point){
                case 1:
                    {
                        this._context.moveTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                case 2:
                    {
                        this._context.lineTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                case 3:
                    {
                        this.point(this._x3, this._y3);
                        this.point(this._x4, this._y4);
                        this.point(this._x5, this._y5);
                        break;
                    }
            }
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._x3 = x, this._y3 = y;
                    break;
                case 1:
                    this._point = 2;
                    this._context.moveTo(this._x4 = x, this._y4 = y);
                    break;
                case 2:
                    this._point = 3;
                    this._x5 = x, this._y5 = y;
                    break;
                default:
                    point$1(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var cardinalClosed = function custom(tension) {
        function cardinal(context) {
            return new CardinalClosed(context, tension);
        }
        cardinal.tension = function(tension) {
            return custom(+tension);
        };
        return cardinal;
    }(0);
    function CardinalOpen(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6;
    }
    CardinalOpen.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                    break;
                case 3:
                    this._point = 4; // proceed
                default:
                    point$1(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var cardinalOpen = function custom(tension) {
        function cardinal(context) {
            return new CardinalOpen(context, tension);
        }
        cardinal.tension = function(tension) {
            return custom(+tension);
        };
        return cardinal;
    }(0);
    function point$2(that, x, y) {
        var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
        if (that._l01_a > epsilon$1) {
            var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
            x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
            y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
        }
        if (that._l23_a > epsilon$1) {
            var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
            x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
            y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
        }
        that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
    }
    function CatmullRom(context, alpha) {
        this._context = context;
        this._alpha = alpha;
    }
    CatmullRom.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
            switch(this._point){
                case 2:
                    this._context.lineTo(this._x2, this._y2);
                    break;
                case 3:
                    this.point(this, this._x2, this._y2);
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            if (this._point) {
                var x23 = this._x2 - x, y23 = this._y2 - y;
                this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3; // proceed
                default:
                    point$2(this, x, y);
                    break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var catmullRom = function custom(alpha) {
        function catmullRom(context) {
            return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
        }
        catmullRom.alpha = function(alpha) {
            return custom(+alpha);
        };
        return catmullRom;
    }(0.5);
    function CatmullRomClosed(context, alpha) {
        this._context = context;
        this._alpha = alpha;
    }
    CatmullRomClosed.prototype = {
        areaStart: noop,
        areaEnd: noop,
        lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
            switch(this._point){
                case 1:
                    {
                        this._context.moveTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                case 2:
                    {
                        this._context.lineTo(this._x3, this._y3);
                        this._context.closePath();
                        break;
                    }
                case 3:
                    {
                        this.point(this._x3, this._y3);
                        this.point(this._x4, this._y4);
                        this.point(this._x5, this._y5);
                        break;
                    }
            }
        },
        point: function(x, y) {
            x = +x, y = +y;
            if (this._point) {
                var x23 = this._x2 - x, y23 = this._y2 - y;
                this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._x3 = x, this._y3 = y;
                    break;
                case 1:
                    this._point = 2;
                    this._context.moveTo(this._x4 = x, this._y4 = y);
                    break;
                case 2:
                    this._point = 3;
                    this._x5 = x, this._y5 = y;
                    break;
                default:
                    point$2(this, x, y);
                    break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var catmullRomClosed = function custom(alpha) {
        function catmullRom(context) {
            return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
        }
        catmullRom.alpha = function(alpha) {
            return custom(+alpha);
        };
        return catmullRom;
    }(0.5);
    function CatmullRomOpen(context, alpha) {
        this._context = context;
        this._alpha = alpha;
    }
    CatmullRomOpen.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            if (this._point) {
                var x23 = this._x2 - x, y23 = this._y2 - y;
                this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch(this._point){
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                    break;
                case 3:
                    this._point = 4; // proceed
                default:
                    point$2(this, x, y);
                    break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var catmullRomOpen = function custom(alpha) {
        function catmullRom(context) {
            return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
        }
        catmullRom.alpha = function(alpha) {
            return custom(+alpha);
        };
        return catmullRom;
    }(0.5);
    function LinearClosed(context) {
        this._context = context;
    }
    LinearClosed.prototype = {
        areaStart: noop,
        areaEnd: noop,
        lineStart: function() {
            this._point = 0;
        },
        lineEnd: function() {
            if (this._point) this._context.closePath();
        },
        point: function(x, y) {
            x = +x, y = +y;
            if (this._point) this._context.lineTo(x, y);
            else this._point = 1, this._context.moveTo(x, y);
        }
    };
    function linearClosed(context) {
        return new LinearClosed(context);
    }
    function sign(x) {
        return x < 0 ? -1 : 1;
    }
    // Calculate the slopes of the tangents (Hermite-type interpolation) based on
    // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
    // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
    // NOV(II), P. 443, 1990.
    function slope3(that, x2, y2) {
        var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
        return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }
    // Calculate a one-sided slope.
    function slope2(that, t) {
        var h = that._x1 - that._x0;
        return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }
    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
    // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
    function point$3(that, t0, t1) {
        var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
        that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }
    function MonotoneX(context) {
        this._context = context;
    }
    MonotoneX.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            switch(this._point){
                case 2:
                    this._context.lineTo(this._x1, this._y1);
                    break;
                case 3:
                    point$3(this, this._t0, slope2(this, this._t0));
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function(x, y) {
            var t1 = NaN;
            x = +x, y = +y;
            if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);
                    break;
                default:
                    point$3(this, this._t0, t1 = slope3(this, x, y));
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
            this._t0 = t1;
        }
    };
    function MonotoneY(context) {
        this._context = new ReflectContext(context);
    }
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
        MonotoneX.prototype.point.call(this, y, x);
    };
    function ReflectContext(context) {
        this._context = context;
    }
    ReflectContext.prototype = {
        moveTo: function(x, y) {
            this._context.moveTo(y, x);
        },
        closePath: function() {
            this._context.closePath();
        },
        lineTo: function(x, y) {
            this._context.lineTo(y, x);
        },
        bezierCurveTo: function(x1, y1, x2, y2, x, y) {
            this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
        }
    };
    function monotoneX(context) {
        return new MonotoneX(context);
    }
    function monotoneY(context) {
        return new MonotoneY(context);
    }
    function Natural(context) {
        this._context = context;
    }
    Natural.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x = [];
            this._y = [];
        },
        lineEnd: function() {
            var x = this._x, y = this._y, n = x.length;
            if (n) {
                this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
                if (n === 2) {
                    this._context.lineTo(x[1], y[1]);
                } else {
                    var px = controlPoints(x), py = controlPoints(y);
                    for(var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1){
                        this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
                    }
                }
            }
            if (this._line || this._line !== 0 && n === 1) this._context.closePath();
            this._line = 1 - this._line;
            this._x = this._y = null;
        },
        point: function(x, y) {
            this._x.push(+x);
            this._y.push(+y);
        }
    };
    // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
    function controlPoints(x) {
        var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
        a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
        for(i = 1; i < n - 1; ++i)a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
        a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
        for(i = 1; i < n; ++i)m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
        a[n - 1] = r[n - 1] / b[n - 1];
        for(i = n - 2; i >= 0; --i)a[i] = (r[i] - a[i + 1]) / b[i];
        b[n - 1] = (x[n] + a[n - 1]) / 2;
        for(i = 0; i < n - 1; ++i)b[i] = 2 * x[i + 1] - a[i + 1];
        return [
            a,
            b
        ];
    }
    function natural(context) {
        return new Natural(context);
    }
    function Step(context, t) {
        this._context = context;
        this._t = t;
    }
    Step.prototype = {
        areaStart: function() {
            this._line = 0;
        },
        areaEnd: function() {
            this._line = NaN;
        },
        lineStart: function() {
            this._x = this._y = NaN;
            this._point = 0;
        },
        lineEnd: function() {
            if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
        },
        point: function(x, y) {
            x = +x, y = +y;
            switch(this._point){
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2; // proceed
                default:
                    {
                        if (this._t <= 0) {
                            this._context.lineTo(this._x, y);
                            this._context.lineTo(x, y);
                        } else {
                            var x1 = this._x * (1 - this._t) + x * this._t;
                            this._context.lineTo(x1, this._y);
                            this._context.lineTo(x1, y);
                        }
                        break;
                    }
            }
            this._x = x, this._y = y;
        }
    };
    function step(context) {
        return new Step(context, 0.5);
    }
    function stepBefore(context) {
        return new Step(context, 0);
    }
    function stepAfter(context) {
        return new Step(context, 1);
    }
    var slice$2 = Array.prototype.slice;
    function none(series, order) {
        if (!((n = series.length) > 1)) return;
        for(var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i){
            s0 = s1, s1 = series[order[i]];
            for(var j = 0; j < m; ++j){
                s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
            }
        }
    }
    function none$1(series) {
        var n = series.length, o = new Array(n);
        while(--n >= 0)o[n] = n;
        return o;
    }
    function stackValue(d, key) {
        return d[key];
    }
    function stack() {
        var keys = constant$1([]), order = none$1, offset = none, value = stackValue;
        function stack(data) {
            var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
            for(i = 0; i < n; ++i){
                for(var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j){
                    si[j] = sij = [
                        0,
                        +value(data[j], ki, j, data)
                    ];
                    sij.data = data[j];
                }
                si.key = ki;
            }
            for(i = 0, oz = order(sz); i < n; ++i){
                sz[oz[i]].index = i;
            }
            offset(sz, oz);
            return sz;
        }
        stack.keys = function(_) {
            return arguments.length ? (keys = typeof _ === "function" ? _ : constant$1(slice$2.call(_)), stack) : keys;
        };
        stack.value = function(_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), stack) : value;
        };
        stack.order = function(_) {
            return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant$1(slice$2.call(_)), stack) : order;
        };
        stack.offset = function(_) {
            return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
        };
        return stack;
    }
    function expand(series, order) {
        if (!((n = series.length) > 0)) return;
        for(var i, n, j = 0, m = series[0].length, y; j < m; ++j){
            for(y = i = 0; i < n; ++i)y += series[i][j][1] || 0;
            if (y) for(i = 0; i < n; ++i)series[i][j][1] /= y;
        }
        none(series, order);
    }
    function silhouette(series, order) {
        if (!((n = series.length) > 0)) return;
        for(var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j){
            for(var i = 0, y = 0; i < n; ++i)y += series[i][j][1] || 0;
            s0[j][1] += s0[j][0] = -y / 2;
        }
        none(series, order);
    }
    function wiggle(series, order) {
        if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
        for(var y = 0, j = 1, s0, m, n; j < m; ++j){
            for(var i = 0, s1 = 0, s2 = 0; i < n; ++i){
                var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
                for(var k = 0; k < i; ++k){
                    var sk = series[order[k]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
                    s3 += skj0 - skj1;
                }
                s1 += sij0, s2 += s3 * sij0;
            }
            s0[j - 1][1] += s0[j - 1][0] = y;
            if (s1) y -= s2 / s1;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        none(series, order);
    }
    function ascending$1(series) {
        var sums = series.map(sum$1);
        return none$1(series).sort(function(a, b) {
            return sums[a] - sums[b];
        });
    }
    function sum$1(series) {
        var s = 0, i = -1, n = series.length, v;
        while(++i < n)if (v = +series[i][1]) s += v;
        return s;
    }
    function descending$2(series) {
        return ascending$1(series).reverse();
    }
    function insideOut(series) {
        var n = series.length, i, j, sums = series.map(sum$1), order = none$1(series).sort(function(a, b) {
            return sums[b] - sums[a];
        }), top = 0, bottom = 0, tops = [], bottoms = [];
        for(i = 0; i < n; ++i){
            j = order[i];
            if (top < bottom) {
                top += sums[j];
                tops.push(j);
            } else {
                bottom += sums[j];
                bottoms.push(j);
            }
        }
        return bottoms.reverse().concat(tops);
    }
    function reverse(series) {
        return none$1(series).reverse();
    }
    function define1(constructor, factory, prototype) {
        constructor.prototype = factory.prototype = prototype;
        prototype.constructor = constructor;
    }
    function extend(parent, definition) {
        var prototype = Object.create(parent.prototype);
        for(var key in definition)prototype[key] = definition[key];
        return prototype;
    }
    function Color() {}
    var darker = 0.7;
    var brighter = 1 / darker;
    var reHex3 = /^#([0-9a-f]{3})$/;
    var reHex6 = /^#([0-9a-f]{6})$/;
    var reRgbInteger = /^rgb\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*\)$/;
    var reRgbPercent = /^rgb\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
    var reRgbaInteger = /^rgba\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    var reRgbaPercent = /^rgba\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    var reHslPercent = /^hsl\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
    var reHslaPercent = /^hsla\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    var named = {
        aliceblue: 0xf0f8ff,
        antiquewhite: 0xfaebd7,
        aqua: 0x00ffff,
        aquamarine: 0x7fffd4,
        azure: 0xf0ffff,
        beige: 0xf5f5dc,
        bisque: 0xffe4c4,
        black: 0x000000,
        blanchedalmond: 0xffebcd,
        blue: 0x0000ff,
        blueviolet: 0x8a2be2,
        brown: 0xa52a2a,
        burlywood: 0xdeb887,
        cadetblue: 0x5f9ea0,
        chartreuse: 0x7fff00,
        chocolate: 0xd2691e,
        coral: 0xff7f50,
        cornflowerblue: 0x6495ed,
        cornsilk: 0xfff8dc,
        crimson: 0xdc143c,
        cyan: 0x00ffff,
        darkblue: 0x00008b,
        darkcyan: 0x008b8b,
        darkgoldenrod: 0xb8860b,
        darkgray: 0xa9a9a9,
        darkgreen: 0x006400,
        darkgrey: 0xa9a9a9,
        darkkhaki: 0xbdb76b,
        darkmagenta: 0x8b008b,
        darkolivegreen: 0x556b2f,
        darkorange: 0xff8c00,
        darkorchid: 0x9932cc,
        darkred: 0x8b0000,
        darksalmon: 0xe9967a,
        darkseagreen: 0x8fbc8f,
        darkslateblue: 0x483d8b,
        darkslategray: 0x2f4f4f,
        darkslategrey: 0x2f4f4f,
        darkturquoise: 0x00ced1,
        darkviolet: 0x9400d3,
        deeppink: 0xff1493,
        deepskyblue: 0x00bfff,
        dimgray: 0x696969,
        dimgrey: 0x696969,
        dodgerblue: 0x1e90ff,
        firebrick: 0xb22222,
        floralwhite: 0xfffaf0,
        forestgreen: 0x228b22,
        fuchsia: 0xff00ff,
        gainsboro: 0xdcdcdc,
        ghostwhite: 0xf8f8ff,
        gold: 0xffd700,
        goldenrod: 0xdaa520,
        gray: 0x808080,
        green: 0x008000,
        greenyellow: 0xadff2f,
        grey: 0x808080,
        honeydew: 0xf0fff0,
        hotpink: 0xff69b4,
        indianred: 0xcd5c5c,
        indigo: 0x4b0082,
        ivory: 0xfffff0,
        khaki: 0xf0e68c,
        lavender: 0xe6e6fa,
        lavenderblush: 0xfff0f5,
        lawngreen: 0x7cfc00,
        lemonchiffon: 0xfffacd,
        lightblue: 0xadd8e6,
        lightcoral: 0xf08080,
        lightcyan: 0xe0ffff,
        lightgoldenrodyellow: 0xfafad2,
        lightgray: 0xd3d3d3,
        lightgreen: 0x90ee90,
        lightgrey: 0xd3d3d3,
        lightpink: 0xffb6c1,
        lightsalmon: 0xffa07a,
        lightseagreen: 0x20b2aa,
        lightskyblue: 0x87cefa,
        lightslategray: 0x778899,
        lightslategrey: 0x778899,
        lightsteelblue: 0xb0c4de,
        lightyellow: 0xffffe0,
        lime: 0x00ff00,
        limegreen: 0x32cd32,
        linen: 0xfaf0e6,
        magenta: 0xff00ff,
        maroon: 0x800000,
        mediumaquamarine: 0x66cdaa,
        mediumblue: 0x0000cd,
        mediumorchid: 0xba55d3,
        mediumpurple: 0x9370db,
        mediumseagreen: 0x3cb371,
        mediumslateblue: 0x7b68ee,
        mediumspringgreen: 0x00fa9a,
        mediumturquoise: 0x48d1cc,
        mediumvioletred: 0xc71585,
        midnightblue: 0x191970,
        mintcream: 0xf5fffa,
        mistyrose: 0xffe4e1,
        moccasin: 0xffe4b5,
        navajowhite: 0xffdead,
        navy: 0x000080,
        oldlace: 0xfdf5e6,
        olive: 0x808000,
        olivedrab: 0x6b8e23,
        orange: 0xffa500,
        orangered: 0xff4500,
        orchid: 0xda70d6,
        palegoldenrod: 0xeee8aa,
        palegreen: 0x98fb98,
        paleturquoise: 0xafeeee,
        palevioletred: 0xdb7093,
        papayawhip: 0xffefd5,
        peachpuff: 0xffdab9,
        peru: 0xcd853f,
        pink: 0xffc0cb,
        plum: 0xdda0dd,
        powderblue: 0xb0e0e6,
        purple: 0x800080,
        rebeccapurple: 0x663399,
        red: 0xff0000,
        rosybrown: 0xbc8f8f,
        royalblue: 0x4169e1,
        saddlebrown: 0x8b4513,
        salmon: 0xfa8072,
        sandybrown: 0xf4a460,
        seagreen: 0x2e8b57,
        seashell: 0xfff5ee,
        sienna: 0xa0522d,
        silver: 0xc0c0c0,
        skyblue: 0x87ceeb,
        slateblue: 0x6a5acd,
        slategray: 0x708090,
        slategrey: 0x708090,
        snow: 0xfffafa,
        springgreen: 0x00ff7f,
        steelblue: 0x4682b4,
        tan: 0xd2b48c,
        teal: 0x008080,
        thistle: 0xd8bfd8,
        tomato: 0xff6347,
        turquoise: 0x40e0d0,
        violet: 0xee82ee,
        wheat: 0xf5deb3,
        white: 0xffffff,
        whitesmoke: 0xf5f5f5,
        yellow: 0xffff00,
        yellowgreen: 0x9acd32
    };
    define1(Color, color, {
        displayable: function() {
            return this.rgb().displayable();
        },
        toString: function() {
            return this.rgb() + "";
        }
    });
    function color(format) {
        var m;
        format = (format + "").trim().toLowerCase();
        return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
        ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
         : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
         : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
         : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
         : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
         : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
         : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
         : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
    }
    function rgbn(n) {
        return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }
    function rgba(r, g, b, a) {
        if (a <= 0) r = g = b = NaN;
        return new Rgb(r, g, b, a);
    }
    function rgbConvert(o) {
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Rgb;
        o = o.rgb();
        return new Rgb(o.r, o.g, o.b, o.opacity);
    }
    function colorRgb(r, g, b, opacity) {
        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }
    function Rgb(r, g, b, opacity) {
        this.r = +r;
        this.g = +g;
        this.b = +b;
        this.opacity = +opacity;
    }
    define1(Rgb, colorRgb, extend(Color, {
        brighter: function(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        darker: function(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        rgb: function() {
            return this;
        },
        displayable: function() {
            return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
        },
        toString: function() {
            var a = this.opacity;
            a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
            return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
        }
    }));
    function hsla(h, s, l, a) {
        if (a <= 0) h = s = l = NaN;
        else if (l <= 0 || l >= 1) h = s = NaN;
        else if (s <= 0) h = NaN;
        return new Hsl(h, s, l, a);
    }
    function hslConvert(o) {
        if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Hsl;
        if (o instanceof Hsl) return o;
        o = o.rgb();
        var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
        if (s) {
            if (r === max) h = (g - b) / s + (g < b) * 6;
            else if (g === max) h = (b - r) / s + 2;
            else h = (r - g) / s + 4;
            s /= l < 0.5 ? max + min : 2 - max - min;
            h *= 60;
        } else {
            s = l > 0 && l < 1 ? 0 : h;
        }
        return new Hsl(h, s, l, o.opacity);
    }
    function colorHsl(h, s, l, opacity) {
        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }
    function Hsl(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
    }
    define1(Hsl, colorHsl, extend(Color, {
        brighter: function(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function() {
            var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
            return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
        },
        displayable: function() {
            return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
        }
    }));
    /* From FvD 13.37, CSS Color Module Level 3 */ function hsl2rgb(h, m1, m2) {
        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
    }
    var deg2rad = Math.PI / 180;
    var rad2deg = 180 / Math.PI;
    var Kn = 18;
    var Xn = 0.950470;
    var Yn = 1;
    var Zn = 1.088830;
    var t0 = 4 / 29;
    var t1 = 6 / 29;
    var t2 = 3 * t1 * t1;
    var t3 = t1 * t1 * t1;
    function labConvert(o) {
        if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
        if (o instanceof Hcl) {
            var h = o.h * deg2rad;
            return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
        }
        if (!(o instanceof Rgb)) o = rgbConvert(o);
        var b = rgb2xyz(o.r), a = rgb2xyz(o.g), l = rgb2xyz(o.b), x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn), y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn), z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
        return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }
    function lab(l, a, b, opacity) {
        return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }
    function Lab(l, a, b, opacity) {
        this.l = +l;
        this.a = +a;
        this.b = +b;
        this.opacity = +opacity;
    }
    define1(Lab, lab, extend(Color, {
        brighter: function(k) {
            return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        darker: function(k) {
            return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
        },
        rgb: function() {
            var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
            y = Yn * lab2xyz(y);
            x = Xn * lab2xyz(x);
            z = Zn * lab2xyz(z);
            return new Rgb(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
        }
    }));
    function xyz2lab(t) {
        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
    }
    function lab2xyz(t) {
        return t > t1 ? t * t * t : t2 * (t - t0);
    }
    function xyz2rgb(x) {
        return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
    }
    function rgb2xyz(x) {
        return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
    }
    function hclConvert(o) {
        if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
        if (!(o instanceof Lab)) o = labConvert(o);
        var h = Math.atan2(o.b, o.a) * rad2deg;
        return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }
    function colorHcl(h, c, l, opacity) {
        return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }
    function Hcl(h, c, l, opacity) {
        this.h = +h;
        this.c = +c;
        this.l = +l;
        this.opacity = +opacity;
    }
    define1(Hcl, colorHcl, extend(Color, {
        brighter: function(k) {
            return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
        },
        darker: function(k) {
            return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
        },
        rgb: function() {
            return labConvert(this).rgb();
        }
    }));
    var A = -0.14861;
    var B = +1.78277;
    var C = -0.29227;
    var D = -0.90649;
    var E = +1.97294;
    var ED = E * D;
    var EB = E * B;
    var BC_DA = B * C - D * A;
    function cubehelixConvert(o) {
        if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Rgb)) o = rgbConvert(o);
        var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }
    function cubehelix(h, s, l, opacity) {
        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }
    function Cubehelix(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
    }
    define1(Cubehelix, cubehelix, extend(Color, {
        brighter: function(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function() {
            var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
            return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
        }
    }));
    function basis$1(t1, v0, v1, v2, v3) {
        var t2 = t1 * t1, t3 = t2 * t1;
        return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
    }
    function basis$2(values) {
        var n = values.length - 1;
        return function(t) {
            var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
            return basis$1((t - i / n) * n, v0, v1, v2, v3);
        };
    }
    function basisClosed$1(values) {
        var n = values.length;
        return function(t) {
            var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
            return basis$1((t - i / n) * n, v0, v1, v2, v3);
        };
    }
    function constant$2(x) {
        return function() {
            return x;
        };
    }
    function linear$1(a, d) {
        return function(t) {
            return a + t * d;
        };
    }
    function exponential$1(a, b, y) {
        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
            return Math.pow(a + t * b, y);
        };
    }
    function hue(a, b) {
        var d = b - a;
        return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);
    }
    function gamma(y) {
        return (y = +y) === 1 ? nogamma : function(a, b) {
            return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);
        };
    }
    function nogamma(a, b) {
        var d = b - a;
        return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);
    }
    var interpolateRgb = function rgbGamma(y) {
        var color = gamma(y);
        function rgb(start, end) {
            var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = color(start.opacity, end.opacity);
            return function(t) {
                start.r = r(t);
                start.g = g(t);
                start.b = b(t);
                start.opacity = opacity(t);
                return start + "";
            };
        }
        rgb.gamma = rgbGamma;
        return rgb;
    }(1);
    function rgbSpline(spline) {
        return function(colors) {
            var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
            for(i = 0; i < n; ++i){
                color = colorRgb(colors[i]);
                r[i] = color.r || 0;
                g[i] = color.g || 0;
                b[i] = color.b || 0;
            }
            r = spline(r);
            g = spline(g);
            b = spline(b);
            color.opacity = 1;
            return function(t) {
                color.r = r(t);
                color.g = g(t);
                color.b = b(t);
                return color + "";
            };
        };
    }
    var rgbBasis = rgbSpline(basis$2);
    var rgbBasisClosed = rgbSpline(basisClosed$1);
    function array$1(a, b) {
        var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(nb), c = new Array(nb), i;
        for(i = 0; i < na; ++i)x[i] = interpolate(a[i], b[i]);
        for(; i < nb; ++i)c[i] = b[i];
        return function(t) {
            for(i = 0; i < na; ++i)c[i] = x[i](t);
            return c;
        };
    }
    function date(a, b) {
        var d = new Date;
        return a = +a, b -= a, function(t) {
            return d.setTime(a + b * t), d;
        };
    }
    function interpolateNumber(a, b) {
        return a = +a, b -= a, function(t) {
            return a + b * t;
        };
    }
    function object(a, b) {
        var i = {}, c = {}, k;
        if (a === null || typeof a !== "object") a = {};
        if (b === null || typeof b !== "object") b = {};
        for(k in b){
            if (k in a) {
                i[k] = interpolate(a[k], b[k]);
            } else {
                c[k] = b[k];
            }
        }
        return function(t) {
            for(k in i)c[k] = i[k](t);
            return c;
        };
    }
    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    var reB = new RegExp(reA.source, "g");
    function zero(b) {
        return function() {
            return b;
        };
    }
    function one(b) {
        return function(t) {
            return b(t) + "";
        };
    }
    function interpolateString(a, b) {
        var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = []; // number interpolators
        // Coerce inputs to strings.
        a = a + "", b = b + "";
        // Interpolate pairs of numbers in a & b.
        while((am = reA.exec(a)) && (bm = reB.exec(b))){
            if ((bs = bm.index) > bi) {
                bs = b.slice(bi, bs);
                if (s[i]) s[i] += bs; // coalesce with previous string
                else s[++i] = bs;
            }
            if ((am = am[0]) === (bm = bm[0])) {
                if (s[i]) s[i] += bm; // coalesce with previous string
                else s[++i] = bm;
            } else {
                s[++i] = null;
                q.push({
                    i: i,
                    x: interpolateNumber(am, bm)
                });
            }
            bi = reB.lastIndex;
        }
        // Add remains of b.
        if (bi < b.length) {
            bs = b.slice(bi);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
        }
        // Special optimization for only a single match.
        // Otherwise, interpolate each of the numbers and rejoin the string.
        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
            for(var i = 0, o; i < b; ++i)s[(o = q[i]).i] = o.x(t);
            return s.join("");
        });
    }
    function interpolate(a, b) {
        var t = typeof b, c;
        return b == null || t === "boolean" ? constant$2(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : Array.isArray(b) ? array$1 : isNaN(b) ? object : interpolateNumber)(a, b);
    }
    function interpolateRound(a, b) {
        return a = +a, b -= a, function(t) {
            return Math.round(a + b * t);
        };
    }
    var degrees = 180 / Math.PI;
    var identity$2 = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
    };
    function decompose(a, b, c, d, e, f) {
        var scaleX, scaleY, skewX;
        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
        return {
            translateX: e,
            translateY: f,
            rotate: Math.atan2(b, a) * degrees,
            skewX: Math.atan(skewX) * degrees,
            scaleX: scaleX,
            scaleY: scaleY
        };
    }
    var cssNode;
    var cssRoot;
    var cssView;
    var svgNode;
    function parseCss(value) {
        if (value === "none") return identity$2;
        if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
        cssNode.style.transform = value;
        value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
        cssRoot.removeChild(cssNode);
        value = value.slice(7, -1).split(",");
        return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
    }
    function parseSvg(value) {
        if (value == null) return identity$2;
        if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        svgNode.setAttribute("transform", value);
        if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
        value = value.matrix;
        return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }
    function interpolateTransform(parse, pxComma, pxParen, degParen) {
        function pop(s) {
            return s.length ? s.pop() + " " : "";
        }
        function translate(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
                var i = s.push("translate(", null, pxComma, null, pxParen);
                q.push({
                    i: i - 4,
                    x: interpolateNumber(xa, xb)
                }, {
                    i: i - 2,
                    x: interpolateNumber(ya, yb)
                });
            } else if (xb || yb) {
                s.push("translate(" + xb + pxComma + yb + pxParen);
            }
        }
        function rotate(a, b, s, q) {
            if (a !== b) {
                if (a - b > 180) b += 360;
                else if (b - a > 180) a += 360; // shortest path
                q.push({
                    i: s.push(pop(s) + "rotate(", null, degParen) - 2,
                    x: interpolateNumber(a, b)
                });
            } else if (b) {
                s.push(pop(s) + "rotate(" + b + degParen);
            }
        }
        function skewX(a, b, s, q) {
            if (a !== b) {
                q.push({
                    i: s.push(pop(s) + "skewX(", null, degParen) - 2,
                    x: interpolateNumber(a, b)
                });
            } else if (b) {
                s.push(pop(s) + "skewX(" + b + degParen);
            }
        }
        function scale(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
                var i = s.push(pop(s) + "scale(", null, ",", null, ")");
                q.push({
                    i: i - 4,
                    x: interpolateNumber(xa, xb)
                }, {
                    i: i - 2,
                    x: interpolateNumber(ya, yb)
                });
            } else if (xb !== 1 || yb !== 1) {
                s.push(pop(s) + "scale(" + xb + "," + yb + ")");
            }
        }
        return function(a, b) {
            var s = [], q = []; // number interpolators
            a = parse(a), b = parse(b);
            translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
            rotate(a.rotate, b.rotate, s, q);
            skewX(a.skewX, b.skewX, s, q);
            scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
            a = b = null; // gc
            return function(t) {
                var i = -1, n = q.length, o;
                while(++i < n)s[(o = q[i]).i] = o.x(t);
                return s.join("");
            };
        };
    }
    var interpolateTransform$1 = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransform$2 = interpolateTransform(parseSvg, ", ", ")", ")");
    var rho = Math.SQRT2;
    var rho2 = 2;
    var rho4 = 4;
    var epsilon2 = 1e-12;
    function cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2;
    }
    function sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2;
    }
    function tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function interpolateZoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
            S = Math.log(w1 / w0) / rho;
            i = function(t) {
                return [
                    ux0 + t * dx,
                    uy0 + t * dy,
                    w0 * Math.exp(rho * t * S)
                ];
            };
        } else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function(t) {
                var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                return [
                    ux0 + u * dx,
                    uy0 + u * dy,
                    w0 * coshr0 / cosh(rho * s + r0)
                ];
            };
        }
        i.duration = S * 1000;
        return i;
    }
    function hsl(hue) {
        return function(start, end) {
            var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
            return function(t) {
                start.h = h(t);
                start.s = s(t);
                start.l = l(t);
                start.opacity = opacity(t);
                return start + "";
            };
        };
    }
    var hsl$1 = hsl(hue);
    var hslLong = hsl(nogamma);
    function lab$1(start, end) {
        var l = nogamma((start = lab(start)).l, (end = lab(end)).l), a = nogamma(start.a, end.a), b = nogamma(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
            start.l = l(t);
            start.a = a(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
        };
    }
    function hcl(hue) {
        return function(start, end) {
            var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
            return function(t) {
                start.h = h(t);
                start.c = c(t);
                start.l = l(t);
                start.opacity = opacity(t);
                return start + "";
            };
        };
    }
    var hcl$1 = hcl(hue);
    var hclLong = hcl(nogamma);
    function cubehelix$1(hue) {
        return function cubehelixGamma(y) {
            y = +y;
            function cubehelix$$(start, end) {
                var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
                return function(t) {
                    start.h = h(t);
                    start.s = s(t);
                    start.l = l(Math.pow(t, y));
                    start.opacity = opacity(t);
                    return start + "";
                };
            }
            cubehelix$$.gamma = cubehelixGamma;
            return cubehelix$$;
        }(1);
    }
    var cubehelix$2 = cubehelix$1(hue);
    var interpolateCubehelixLong = cubehelix$1(nogamma);
    function quantize(interpolator, n) {
        var samples = new Array(n);
        for(var i = 0; i < n; ++i)samples[i] = interpolator(i / (n - 1));
        return samples;
    }
    var noop$1 = {
        value: function() {}
    };
    function dispatch() {
        for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){
            if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
            _[t] = [];
        }
        return new Dispatch(_);
    }
    function Dispatch(_) {
        this._ = _;
    }
    function parseTypenames(typenames, types) {
        return typenames.trim().split(/^|\s+/).map(function(t) {
            var name = "", i = t.indexOf(".");
            if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
            if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
            return {
                type: t,
                name: name
            };
        });
    }
    Dispatch.prototype = dispatch.prototype = {
        constructor: Dispatch,
        on: function(typename, callback) {
            var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
            // If no callback was specified, return the callback of the given type and name.
            if (arguments.length < 2) {
                while(++i < n)if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
                return;
            }
            // If a type was specified, set the callback for the given type and name.
            // Otherwise, if a null callback was specified, remove callbacks of the given name.
            if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
            while(++i < n){
                if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);
                else if (callback == null) for(t in _)_[t] = set$1(_[t], typename.name, null);
            }
            return this;
        },
        copy: function() {
            var copy = {}, _ = this._;
            for(var t in _)copy[t] = _[t].slice();
            return new Dispatch(copy);
        },
        call: function(type, that) {
            if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];
            if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
            for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
        },
        apply: function(type, that, args) {
            if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
            for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
        }
    };
    function get(type, name) {
        for(var i = 0, n = type.length, c; i < n; ++i){
            if ((c = type[i]).name === name) {
                return c.value;
            }
        }
    }
    function set$1(type, name, callback) {
        for(var i = 0, n = type.length; i < n; ++i){
            if (type[i].name === name) {
                type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
                break;
            }
        }
        if (callback != null) type.push({
            name: name,
            value: callback
        });
        return type;
    }
    function objectConverter(columns) {
        return new Function("d", "return {" + columns.map(function(name, i) {
            return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
    }
    function customConverter(columns, f) {
        var object = objectConverter(columns);
        return function(row, i) {
            return f(object(row), i, columns);
        };
    }
    // Compute unique columns in order of discovery.
    function inferColumns(rows) {
        var columnSet = Object.create(null), columns = [];
        rows.forEach(function(row) {
            for(var column in row){
                if (!(column in columnSet)) {
                    columns.push(columnSet[column] = column);
                }
            }
        });
        return columns;
    }
    function dsv(delimiter) {
        var reFormat = new RegExp("[\"" + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
        function parse(text, f) {
            var convert, columns, rows = parseRows(text, function(row, i) {
                if (convert) return convert(row, i - 1);
                columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
            });
            rows.columns = columns;
            return rows;
        }
        function parseRows(text, f) {
            var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol; // is the current token followed by EOL?
            function token() {
                if (I >= N) return EOF; // special case: end of file
                if (eol) return eol = false, EOL; // special case: end of line
                // special case: quotes
                var j = I, c;
                if (text.charCodeAt(j) === 34) {
                    var i = j;
                    while(i++ < N){
                        if (text.charCodeAt(i) === 34) {
                            if (text.charCodeAt(i + 1) !== 34) break;
                            ++i;
                        }
                    }
                    I = i + 2;
                    c = text.charCodeAt(i + 1);
                    if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(i + 2) === 10) ++I;
                    } else if (c === 10) {
                        eol = true;
                    }
                    return text.slice(j + 1, i).replace(/""/g, "\"");
                }
                // common case: find next delimiter or newline
                while(I < N){
                    var k = 1;
                    c = text.charCodeAt(I++);
                    if (c === 10) eol = true; // \n
                    else if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(I) === 10) ++I, ++k;
                    } else if (c !== delimiterCode) continue;
                    return text.slice(j, I - k);
                }
                // special case: last token before EOF
                return text.slice(j);
            }
            while((t = token()) !== EOF){
                var a = [];
                while(t !== EOL && t !== EOF){
                    a.push(t);
                    t = token();
                }
                if (f && (a = f(a, n++)) == null) continue;
                rows.push(a);
            }
            return rows;
        }
        function format(rows, columns) {
            if (columns == null) columns = inferColumns(rows);
            return [
                columns.map(formatValue).join(delimiter)
            ].concat(rows.map(function(row) {
                return columns.map(function(column) {
                    return formatValue(row[column]);
                }).join(delimiter);
            })).join("\n");
        }
        function formatRows(rows) {
            return rows.map(formatRow).join("\n");
        }
        function formatRow(row) {
            return row.map(formatValue).join(delimiter);
        }
        function formatValue(text) {
            return text == null ? "" : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\"" : text;
        }
        return {
            parse: parse,
            parseRows: parseRows,
            format: format,
            formatRows: formatRows
        };
    }
    var csv = dsv(",");
    var csvParse = csv.parse;
    var csvParseRows = csv.parseRows;
    var csvFormat = csv.format;
    var csvFormatRows = csv.formatRows;
    var tsv = dsv("\t");
    var tsvParse = tsv.parse;
    var tsvParseRows = tsv.parseRows;
    var tsvFormat = tsv.format;
    var tsvFormatRows = tsv.formatRows;
    function request(url, callback) {
        var request, event = dispatch("beforesend", "progress", "load", "error"), mimeType, headers = map$1(), xhr = new XMLHttpRequest, user = null, password = null, response, responseType, timeout = 0;
        // If IE does not support CORS, use XDomainRequest.
        if (typeof XDomainRequest !== "undefined" && !("withCredentials" in xhr) && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;
        "onload" in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function(o) {
            xhr.readyState > 3 && respond(o);
        };
        function respond(o) {
            var status = xhr.status, result;
            if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {
                if (response) {
                    try {
                        result = response.call(request, xhr);
                    } catch (e) {
                        event.call("error", request, e);
                        return;
                    }
                } else {
                    result = xhr;
                }
                event.call("load", request, result);
            } else {
                event.call("error", request, o);
            }
        }
        xhr.onprogress = function(e) {
            event.call("progress", request, e);
        };
        request = {
            header: function(name, value) {
                name = (name + "").toLowerCase();
                if (arguments.length < 2) return headers.get(name);
                if (value == null) headers.remove(name);
                else headers.set(name, value + "");
                return request;
            },
            // If mimeType is non-null and no Accept header is set, a default is used.
            mimeType: function(value) {
                if (!arguments.length) return mimeType;
                mimeType = value == null ? null : value + "";
                return request;
            },
            // Specifies what type the response value should take;
            // for instance, arraybuffer, blob, document, or text.
            responseType: function(value) {
                if (!arguments.length) return responseType;
                responseType = value;
                return request;
            },
            timeout: function(value) {
                if (!arguments.length) return timeout;
                timeout = +value;
                return request;
            },
            user: function(value) {
                return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
            },
            password: function(value) {
                return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
            },
            // Specify how to convert the response content to a specific type;
            // changes the callback value on "load" events.
            response: function(value) {
                response = value;
                return request;
            },
            // Alias for send("GET", …).
            get: function(data, callback) {
                return request.send("GET", data, callback);
            },
            // Alias for send("POST", …).
            post: function(data, callback) {
                return request.send("POST", data, callback);
            },
            // If callback is non-null, it will be used for error and load events.
            send: function(method, data, callback) {
                xhr.open(method, url, true, user, password);
                if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
                if (xhr.setRequestHeader) headers.each(function(value, name) {
                    xhr.setRequestHeader(name, value);
                });
                if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
                if (responseType != null) xhr.responseType = responseType;
                if (timeout > 0) xhr.timeout = timeout;
                if (callback == null && typeof data === "function") callback = data, data = null;
                if (callback != null && callback.length === 1) callback = fixCallback(callback);
                if (callback != null) request.on("error", callback).on("load", function(xhr) {
                    callback(null, xhr);
                });
                event.call("beforesend", request, xhr);
                xhr.send(data == null ? null : data);
                return request;
            },
            abort: function() {
                xhr.abort();
                return request;
            },
            on: function() {
                var value = event.on.apply(event, arguments);
                return value === event ? request : value;
            }
        };
        if (callback != null) {
            if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
            return request.get(callback);
        }
        return request;
    }
    function fixCallback(callback) {
        return function(error, xhr) {
            callback(error == null ? xhr : null);
        };
    }
    function hasResponse(xhr) {
        var type = xhr.responseType;
        return type && type !== "text" ? xhr.response // null on error
         : xhr.responseText; // "" on error
    }
    function type(defaultMimeType, response) {
        return function(url, callback) {
            var r = request(url).mimeType(defaultMimeType).response(response);
            if (callback != null) {
                if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
                return r.get(callback);
            }
            return r;
        };
    }
    var html = type("text/html", function(xhr) {
        return document.createRange().createContextualFragment(xhr.responseText);
    });
    var json = type("application/json", function(xhr) {
        return JSON.parse(xhr.responseText);
    });
    var text = type("text/plain", function(xhr) {
        return xhr.responseText;
    });
    var xml = type("application/xml", function(xhr) {
        var xml = xhr.responseXML;
        if (!xml) throw new Error("parse error");
        return xml;
    });
    function dsv$1(defaultMimeType, parse) {
        return function(url, row, callback) {
            if (arguments.length < 3) callback = row, row = null;
            var r = request(url).mimeType(defaultMimeType);
            r.row = function(_) {
                return arguments.length ? r.response(responseOf(parse, row = _)) : row;
            };
            r.row(row);
            return callback ? r.get(callback) : r;
        };
    }
    function responseOf(parse, row) {
        return function(request) {
            return parse(request.responseText, row);
        };
    }
    var csv$1 = dsv$1("text/csv", csvParse);
    var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);
    var frame = 0;
    var timeout = 0;
    var interval = 0;
    var pokeDelay = 1000;
    var taskHead;
    var taskTail;
    var clockLast = 0;
    var clockNow = 0;
    var clockSkew = 0;
    var clock = typeof performance === "object" && performance.now ? performance : Date;
    var setFrame = typeof requestAnimationFrame === "function" ? clock === Date ? function(f) {
        requestAnimationFrame(function() {
            f(clock.now());
        });
    } : requestAnimationFrame : function(f) {
        setTimeout(f, 17);
    };
    function now() {
        return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }
    function clearNow() {
        clockNow = 0;
    }
    function Timer() {
        this._call = this._time = this._next = null;
    }
    Timer.prototype = timer.prototype = {
        constructor: Timer,
        restart: function(callback, delay, time) {
            if (typeof callback !== "function") throw new TypeError("callback is not a function");
            time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
            if (!this._next && taskTail !== this) {
                if (taskTail) taskTail._next = this;
                else taskHead = this;
                taskTail = this;
            }
            this._call = callback;
            this._time = time;
            sleep();
        },
        stop: function() {
            if (this._call) {
                this._call = null;
                this._time = Infinity;
                sleep();
            }
        }
    };
    function timer(callback, delay, time) {
        var t = new Timer;
        t.restart(callback, delay, time);
        return t;
    }
    function timerFlush() {
        now(); // Get the current time, if not already set.
        ++frame; // Pretend we’ve set an alarm, if we haven’t already.
        var t = taskHead, e;
        while(t){
            if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
            t = t._next;
        }
        --frame;
    }
    function wake(time) {
        clockNow = (clockLast = time || clock.now()) + clockSkew;
        frame = timeout = 0;
        try {
            timerFlush();
        } finally{
            frame = 0;
            nap();
            clockNow = 0;
        }
    }
    function poke$1() {
        var now = clock.now(), delay = now - clockLast;
        if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }
    function nap() {
        var t0, t1 = taskHead, t2, time = Infinity;
        while(t1){
            if (t1._call) {
                if (time > t1._time) time = t1._time;
                t0 = t1, t1 = t1._next;
            } else {
                t2 = t1._next, t1._next = null;
                t1 = t0 ? t0._next = t2 : taskHead = t2;
            }
        }
        taskTail = t0;
        sleep(time);
    }
    function sleep(time) {
        if (frame) return; // Soonest alarm already set, or will be.
        if (timeout) timeout = clearTimeout(timeout);
        var delay = time - clockNow;
        if (delay > 24) {
            if (time < Infinity) timeout = setTimeout(wake, delay);
            if (interval) interval = clearInterval(interval);
        } else {
            if (!interval) interval = setInterval(poke$1, pokeDelay);
            frame = 1, setFrame(wake);
        }
    }
    function timeout$1(callback, delay, time) {
        var t = new Timer;
        delay = delay == null ? 0 : +delay;
        t.restart(function(elapsed) {
            t.stop();
            callback(elapsed + delay);
        }, delay, time);
        return t;
    }
    function interval$1(callback, delay, time) {
        var t = new Timer, total = delay;
        if (delay == null) return t.restart(callback, delay, time), t;
        delay = +delay, time = time == null ? now() : +time;
        t.restart(function tick(elapsed) {
            elapsed += total;
            t.restart(tick, total += delay, time);
            callback(elapsed);
        }, delay, time);
        return t;
    }
    var t0$1 = new Date;
    var t1$1 = new Date;
    function newInterval(floori, offseti, count, field) {
        function interval(date) {
            return floori(date = new Date(+date)), date;
        }
        interval.floor = interval;
        interval.ceil = function(date) {
            return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
        };
        interval.round = function(date) {
            var d0 = interval(date), d1 = interval.ceil(date);
            return date - d0 < d1 - date ? d0 : d1;
        };
        interval.offset = function(date, step) {
            return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
        };
        interval.range = function(start, stop, step) {
            var range = [];
            start = interval.ceil(start);
            step = step == null ? 1 : Math.floor(step);
            if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
            do range.push(new Date(+start));
            while (offseti(start, step), floori(start), start < stop)
            return range;
        };
        interval.filter = function(test) {
            return newInterval(function(date) {
                while(floori(date), !test(date))date.setTime(date - 1);
            }, function(date, step) {
                while(--step >= 0)while(offseti(date, 1), !test(date));
            });
        };
        if (count) {
            interval.count = function(start, end) {
                t0$1.setTime(+start), t1$1.setTime(+end);
                floori(t0$1), floori(t1$1);
                return Math.floor(count(t0$1, t1$1));
            };
            interval.every = function(step) {
                step = Math.floor(step);
                return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
                    return field(d) % step === 0;
                } : function(d) {
                    return interval.count(0, d) % step === 0;
                });
            };
        }
        return interval;
    }
    var millisecond = newInterval(function() {
    // noop
    }, function(date, step) {
        date.setTime(+date + step);
    }, function(start, end) {
        return end - start;
    });
    // An optimized implementation for this simple case.
    millisecond.every = function(k) {
        k = Math.floor(k);
        if (!isFinite(k) || !(k > 0)) return null;
        if (!(k > 1)) return millisecond;
        return newInterval(function(date) {
            date.setTime(Math.floor(date / k) * k);
        }, function(date, step) {
            date.setTime(+date + step * k);
        }, function(start, end) {
            return (end - start) / k;
        });
    };
    var milliseconds = millisecond.range;
    var durationSecond = 1e3;
    var durationMinute = 6e4;
    var durationHour = 36e5;
    var durationDay = 864e5;
    var durationWeek = 6048e5;
    var second = newInterval(function(date) {
        date.setTime(Math.floor(date / durationSecond) * durationSecond);
    }, function(date, step) {
        date.setTime(+date + step * durationSecond);
    }, function(start, end) {
        return (end - start) / durationSecond;
    }, function(date) {
        return date.getUTCSeconds();
    });
    var seconds = second.range;
    var minute = newInterval(function(date) {
        date.setTime(Math.floor(date / durationMinute) * durationMinute);
    }, function(date, step) {
        date.setTime(+date + step * durationMinute);
    }, function(start, end) {
        return (end - start) / durationMinute;
    }, function(date) {
        return date.getMinutes();
    });
    var minutes = minute.range;
    var hour = newInterval(function(date) {
        var offset = date.getTimezoneOffset() * durationMinute % durationHour;
        if (offset < 0) offset += durationHour;
        date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
    }, function(date, step) {
        date.setTime(+date + step * durationHour);
    }, function(start, end) {
        return (end - start) / durationHour;
    }, function(date) {
        return date.getHours();
    });
    var hours = hour.range;
    var day = newInterval(function(date) {
        date.setHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setDate(date.getDate() + step);
    }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
    }, function(date) {
        return date.getDate() - 1;
    });
    var days = day.range;
    function weekday(i) {
        return newInterval(function(date) {
            date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
            date.setHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setDate(date.getDate() + step * 7);
        }, function(start, end) {
            return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
        });
    }
    var timeWeek = weekday(0);
    var timeMonday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);
    var sundays = timeWeek.range;
    var mondays = timeMonday.range;
    var tuesdays = tuesday.range;
    var wednesdays = wednesday.range;
    var thursdays = thursday.range;
    var fridays = friday.range;
    var saturdays = saturday.range;
    var month = newInterval(function(date) {
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setMonth(date.getMonth() + step);
    }, function(start, end) {
        return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
        return date.getMonth();
    });
    var months = month.range;
    var year = newInterval(function(date) {
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
        return end.getFullYear() - start.getFullYear();
    }, function(date) {
        return date.getFullYear();
    });
    // An optimized implementation for this simple case.
    year.every = function(k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
            date.setFullYear(Math.floor(date.getFullYear() / k) * k);
            date.setMonth(0, 1);
            date.setHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setFullYear(date.getFullYear() + step * k);
        });
    };
    var years = year.range;
    var utcMinute = newInterval(function(date) {
        date.setUTCSeconds(0, 0);
    }, function(date, step) {
        date.setTime(+date + step * durationMinute);
    }, function(start, end) {
        return (end - start) / durationMinute;
    }, function(date) {
        return date.getUTCMinutes();
    });
    var utcMinutes = utcMinute.range;
    var utcHour = newInterval(function(date) {
        date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
        date.setTime(+date + step * durationHour);
    }, function(start, end) {
        return (end - start) / durationHour;
    }, function(date) {
        return date.getUTCHours();
    });
    var utcHours = utcHour.range;
    var utcDay = newInterval(function(date) {
        date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
        return (end - start) / durationDay;
    }, function(date) {
        return date.getUTCDate() - 1;
    });
    var utcDays = utcDay.range;
    function utcWeekday(i) {
        return newInterval(function(date) {
            date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
            date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setUTCDate(date.getUTCDate() + step * 7);
        }, function(start, end) {
            return (end - start) / durationWeek;
        });
    }
    var utcWeek = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);
    var utcSundays = utcWeek.range;
    var utcMondays = utcMonday.range;
    var utcTuesdays = utcTuesday.range;
    var utcWednesdays = utcWednesday.range;
    var utcThursdays = utcThursday.range;
    var utcFridays = utcFriday.range;
    var utcSaturdays = utcSaturday.range;
    var utcMonth = newInterval(function(date) {
        date.setUTCDate(1);
        date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
        return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
        return date.getUTCMonth();
    });
    var utcMonths = utcMonth.range;
    var utcYear = newInterval(function(date) {
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
        return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
        return date.getUTCFullYear();
    });
    // An optimized implementation for this simple case.
    utcYear.every = function(k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
            date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
            date.setUTCMonth(0, 1);
            date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
            date.setUTCFullYear(date.getUTCFullYear() + step * k);
        });
    };
    var utcYears = utcYear.range;
    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimal(1.23) returns ["123", 0].
    function formatDecimal(x, p) {
        if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
        var i, coefficient = x.slice(0, i);
        // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
        // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
        return [
            coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
            +x.slice(i + 1)
        ];
    }
    function exponent$1(x) {
        return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
    }
    function formatGroup(grouping, thousands) {
        return function(value, width) {
            var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
            while(i > 0 && g > 0){
                if (length + g + 1 > width) g = Math.max(1, width - length);
                t.push(value.substring(i -= g, i + g));
                if ((length += g + 1) > width) break;
                g = grouping[j = (j + 1) % grouping.length];
            }
            return t.reverse().join(thousands);
        };
    }
    function formatDefault(x, p) {
        x = x.toPrecision(p);
        out: for(var n = x.length, i = 1, i0 = -1, i1; i < n; ++i){
            switch(x[i]){
                case ".":
                    i0 = i1 = i;
                    break;
                case "0":
                    if (i0 === 0) i0 = i;
                    i1 = i;
                    break;
                case "e":
                    break out;
                default:
                    if (i0 > 0) i0 = 0;
                    break;
            }
        }
        return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
    }
    var prefixExponent;
    function formatPrefixAuto(x, p) {
        var d = formatDecimal(x, p);
        if (!d) return x + "";
        var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
        return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }
    function formatRounded(x, p) {
        var d = formatDecimal(x, p);
        if (!d) return x + "";
        var coefficient = d[0], exponent = d[1];
        return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }
    var formatTypes = {
        "": formatDefault,
        "%": function(x, p) {
            return (x * 100).toFixed(p);
        },
        "b": function(x) {
            return Math.round(x).toString(2);
        },
        "c": function(x) {
            return x + "";
        },
        "d": function(x) {
            return Math.round(x).toString(10);
        },
        "e": function(x, p) {
            return x.toExponential(p);
        },
        "f": function(x, p) {
            return x.toFixed(p);
        },
        "g": function(x, p) {
            return x.toPrecision(p);
        },
        "o": function(x) {
            return Math.round(x).toString(8);
        },
        "p": function(x, p) {
            return formatRounded(x * 100, p);
        },
        "r": formatRounded,
        "s": formatPrefixAuto,
        "X": function(x) {
            return Math.round(x).toString(16).toUpperCase();
        },
        "x": function(x) {
            return Math.round(x).toString(16);
        }
    };
    // [[fill]align][sign][symbol][0][width][,][.precision][type]
    var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
    function formatSpecifier(specifier) {
        return new FormatSpecifier(specifier);
    }
    function FormatSpecifier(specifier) {
        if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
        var match, fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zero = !!match[5], width = match[6] && +match[6], comma = !!match[7], precision = match[8] && +match[8].slice(1), type = match[9] || "";
        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";
        else if (!formatTypes[type]) type = "";
        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
        this.fill = fill;
        this.align = align;
        this.sign = sign;
        this.symbol = symbol;
        this.zero = zero;
        this.width = width;
        this.comma = comma;
        this.precision = precision;
        this.type = type;
    }
    FormatSpecifier.prototype.toString = function() {
        return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + this.type;
    };
    var prefixes = [
        "y",
        "z",
        "a",
        "f",
        "p",
        "n",
        "\xB5",
        "m",
        "",
        "k",
        "M",
        "G",
        "T",
        "P",
        "E",
        "Z",
        "Y"
    ];
    function identity$3(x) {
        return x;
    }
    function formatLocale(locale) {
        var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3, currency = locale.currency, decimal = locale.decimal;
        function newFormat(specifier) {
            specifier = formatSpecifier(specifier);
            var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type = specifier.type;
            // Compute the prefix and suffix.
            // For SI-prefix, the suffix is lazily computed.
            var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? "%" : "";
            // What format function should we use?
            // Is this an integer type?
            // Can this type generate exponential notation?
            var formatType = formatTypes[type], maybeSuffix = !type || /[defgprs%]/.test(type);
            // Set the default precision if not specified,
            // or clamp the specified precision to the supported range.
            // For significant precision, it must be in [1, 21].
            // For fixed precision, it must be in [0, 20].
            precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
            function format(value) {
                var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
                if (type === "c") {
                    valueSuffix = formatType(value) + valueSuffix;
                    value = "";
                } else {
                    value = +value;
                    // Convert negative to positive, and compute the prefix.
                    // Note that -0 is not less than 0, but 1 / -0 is!
                    var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
                    // Perform the initial formatting.
                    value = formatType(value, precision);
                    // If the original value was negative, it may be rounded to zero during
                    // formatting; treat this as (positive) zero.
                    if (valueNegative) {
                        i = -1, n = value.length;
                        valueNegative = false;
                        while(++i < n){
                            if (c = value.charCodeAt(i), 48 < c && c < 58 || type === "x" && 96 < c && c < 103 || type === "X" && 64 < c && c < 71) {
                                valueNegative = true;
                                break;
                            }
                        }
                    }
                    // Compute the prefix and suffix.
                    valuePrefix = (valueNegative ? sign === "(" ? sign : "-" : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                    valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");
                    // Break the formatted value into the integer “value” part that can be
                    // grouped, and fractional or exponential “suffix” part that is not.
                    if (maybeSuffix) {
                        i = -1, n = value.length;
                        while(++i < n){
                            if (c = value.charCodeAt(i), 48 > c || c > 57) {
                                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                                value = value.slice(0, i);
                                break;
                            }
                        }
                    }
                }
                // If the fill character is not "0", grouping is applied before padding.
                if (comma && !zero) value = group(value, Infinity);
                // Compute the padding.
                var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
                // If the fill character is "0", grouping is applied after padding.
                if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
                // Reconstruct the final output based on the desired alignment.
                switch(align){
                    case "<":
                        return valuePrefix + value + valueSuffix + padding;
                    case "=":
                        return valuePrefix + padding + value + valueSuffix;
                    case "^":
                        return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                }
                return padding + valuePrefix + value + valueSuffix;
            }
            format.toString = function() {
                return specifier + "";
            };
            return format;
        }
        function formatPrefix(specifier, value) {
            var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
            return function(value) {
                return f(k * value) + prefix;
            };
        }
        return {
            format: newFormat,
            formatPrefix: formatPrefix
        };
    }
    var locale;
    defaultLocale({
        decimal: ".",
        thousands: ",",
        grouping: [
            3
        ],
        currency: [
            "$",
            ""
        ]
    });
    function defaultLocale(definition) {
        locale = formatLocale(definition);
        exports1.format = locale.format;
        exports1.formatPrefix = locale.formatPrefix;
        return locale;
    }
    function precisionFixed(step) {
        return Math.max(0, -exponent$1(Math.abs(step)));
    }
    function precisionPrefix(step, value) {
        return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
    }
    function precisionRound(step, max) {
        step = Math.abs(step), max = Math.abs(max) - step;
        return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
    }
    function localDate(d) {
        if (0 <= d.y && d.y < 100) {
            var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
            date.setFullYear(d.y);
            return date;
        }
        return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }
    function utcDate(d) {
        if (0 <= d.y && d.y < 100) {
            var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
            date.setUTCFullYear(d.y);
            return date;
        }
        return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }
    function newYear(y) {
        return {
            y: y,
            m: 0,
            d: 1,
            H: 0,
            M: 0,
            S: 0,
            L: 0
        };
    }
    function formatLocale$1(locale) {
        var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
        var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
        var formats = {
            "a": formatShortWeekday,
            "A": formatWeekday,
            "b": formatShortMonth,
            "B": formatMonth,
            "c": null,
            "d": formatDayOfMonth,
            "e": formatDayOfMonth,
            "H": formatHour24,
            "I": formatHour12,
            "j": formatDayOfYear,
            "L": formatMilliseconds,
            "m": formatMonthNumber,
            "M": formatMinutes,
            "p": formatPeriod,
            "S": formatSeconds,
            "U": formatWeekNumberSunday,
            "w": formatWeekdayNumber,
            "W": formatWeekNumberMonday,
            "x": null,
            "X": null,
            "y": formatYear,
            "Y": formatFullYear,
            "Z": formatZone,
            "%": formatLiteralPercent
        };
        var utcFormats = {
            "a": formatUTCShortWeekday,
            "A": formatUTCWeekday,
            "b": formatUTCShortMonth,
            "B": formatUTCMonth,
            "c": null,
            "d": formatUTCDayOfMonth,
            "e": formatUTCDayOfMonth,
            "H": formatUTCHour24,
            "I": formatUTCHour12,
            "j": formatUTCDayOfYear,
            "L": formatUTCMilliseconds,
            "m": formatUTCMonthNumber,
            "M": formatUTCMinutes,
            "p": formatUTCPeriod,
            "S": formatUTCSeconds,
            "U": formatUTCWeekNumberSunday,
            "w": formatUTCWeekdayNumber,
            "W": formatUTCWeekNumberMonday,
            "x": null,
            "X": null,
            "y": formatUTCYear,
            "Y": formatUTCFullYear,
            "Z": formatUTCZone,
            "%": formatLiteralPercent
        };
        var parses = {
            "a": parseShortWeekday,
            "A": parseWeekday,
            "b": parseShortMonth,
            "B": parseMonth,
            "c": parseLocaleDateTime,
            "d": parseDayOfMonth,
            "e": parseDayOfMonth,
            "H": parseHour24,
            "I": parseHour24,
            "j": parseDayOfYear,
            "L": parseMilliseconds,
            "m": parseMonthNumber,
            "M": parseMinutes,
            "p": parsePeriod,
            "S": parseSeconds,
            "U": parseWeekNumberSunday,
            "w": parseWeekdayNumber,
            "W": parseWeekNumberMonday,
            "x": parseLocaleDate,
            "X": parseLocaleTime,
            "y": parseYear,
            "Y": parseFullYear,
            "Z": parseZone,
            "%": parseLiteralPercent
        };
        // These recursive directive definitions must be deferred.
        formats.x = newFormat(locale_date, formats);
        formats.X = newFormat(locale_time, formats);
        formats.c = newFormat(locale_dateTime, formats);
        utcFormats.x = newFormat(locale_date, utcFormats);
        utcFormats.X = newFormat(locale_time, utcFormats);
        utcFormats.c = newFormat(locale_dateTime, utcFormats);
        function newFormat(specifier, formats) {
            return function(date) {
                var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
                if (!(date instanceof Date)) date = new Date(+date);
                while(++i < n){
                    if (specifier.charCodeAt(i) === 37) {
                        string.push(specifier.slice(j, i));
                        if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
                        else pad = c === "e" ? " " : "0";
                        if (format = formats[c]) c = format(date, pad);
                        string.push(c);
                        j = i + 1;
                    }
                }
                string.push(specifier.slice(j, i));
                return string.join("");
            };
        }
        function newParse(specifier, newDate) {
            return function(string) {
                var d = newYear(1900), i = parseSpecifier(d, specifier, string += "", 0);
                if (i != string.length) return null;
                // The am-pm flag is 0 for AM, and 1 for PM.
                if ("p" in d) d.H = d.H % 12 + d.p * 12;
                // Convert day-of-week and week-of-year to day-of-year.
                if ("W" in d || "U" in d) {
                    if (!("w" in d)) d.w = "W" in d ? 1 : 0;
                    var day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
                    d.m = 0;
                    d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
                }
                // If a time zone is specified, all fields are interpreted as UTC and then
                // offset according to the specified time zone.
                if ("Z" in d) {
                    d.H += d.Z / 100 | 0;
                    d.M += d.Z % 100;
                    return utcDate(d);
                }
                // Otherwise, all fields are in local time.
                return newDate(d);
            };
        }
        function parseSpecifier(d, specifier, string, j) {
            var i = 0, n = specifier.length, m = string.length, c, parse;
            while(i < n){
                if (j >= m) return -1;
                c = specifier.charCodeAt(i++);
                if (c === 37) {
                    c = specifier.charAt(i++);
                    parse = parses[c in pads ? specifier.charAt(i++) : c];
                    if (!parse || (j = parse(d, string, j)) < 0) return -1;
                } else if (c != string.charCodeAt(j++)) {
                    return -1;
                }
            }
            return j;
        }
        function parsePeriod(d, string, i) {
            var n = periodRe.exec(string.slice(i));
            return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseShortWeekday(d, string, i) {
            var n = shortWeekdayRe.exec(string.slice(i));
            return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseWeekday(d, string, i) {
            var n = weekdayRe.exec(string.slice(i));
            return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseShortMonth(d, string, i) {
            var n = shortMonthRe.exec(string.slice(i));
            return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseMonth(d, string, i) {
            var n = monthRe.exec(string.slice(i));
            return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseLocaleDateTime(d, string, i) {
            return parseSpecifier(d, locale_dateTime, string, i);
        }
        function parseLocaleDate(d, string, i) {
            return parseSpecifier(d, locale_date, string, i);
        }
        function parseLocaleTime(d, string, i) {
            return parseSpecifier(d, locale_time, string, i);
        }
        function formatShortWeekday(d) {
            return locale_shortWeekdays[d.getDay()];
        }
        function formatWeekday(d) {
            return locale_weekdays[d.getDay()];
        }
        function formatShortMonth(d) {
            return locale_shortMonths[d.getMonth()];
        }
        function formatMonth(d) {
            return locale_months[d.getMonth()];
        }
        function formatPeriod(d) {
            return locale_periods[+(d.getHours() >= 12)];
        }
        function formatUTCShortWeekday(d) {
            return locale_shortWeekdays[d.getUTCDay()];
        }
        function formatUTCWeekday(d) {
            return locale_weekdays[d.getUTCDay()];
        }
        function formatUTCShortMonth(d) {
            return locale_shortMonths[d.getUTCMonth()];
        }
        function formatUTCMonth(d) {
            return locale_months[d.getUTCMonth()];
        }
        function formatUTCPeriod(d) {
            return locale_periods[+(d.getUTCHours() >= 12)];
        }
        return {
            format: function(specifier) {
                var f = newFormat(specifier += "", formats);
                f.toString = function() {
                    return specifier;
                };
                return f;
            },
            parse: function(specifier) {
                var p = newParse(specifier += "", localDate);
                p.toString = function() {
                    return specifier;
                };
                return p;
            },
            utcFormat: function(specifier) {
                var f = newFormat(specifier += "", utcFormats);
                f.toString = function() {
                    return specifier;
                };
                return f;
            },
            utcParse: function(specifier) {
                var p = newParse(specifier, utcDate);
                p.toString = function() {
                    return specifier;
                };
                return p;
            }
        };
    }
    var pads = {
        "-": "",
        "_": " ",
        "0": "0"
    };
    var numberRe = /^\s*\d+/;
    var percentRe = /^%/;
    var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    function pad(value, fill, width) {
        var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
        return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }
    function requote(s) {
        return s.replace(requoteRe, "\\$&");
    }
    function formatRe(names) {
        return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }
    function formatLookup(names) {
        var map = {}, i = -1, n = names.length;
        while(++i < n)map[names[i].toLowerCase()] = i;
        return map;
    }
    function parseWeekdayNumber(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.w = +n[0], i + n[0].length) : -1;
    }
    function parseWeekNumberSunday(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.U = +n[0], i + n[0].length) : -1;
    }
    function parseWeekNumberMonday(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.W = +n[0], i + n[0].length) : -1;
    }
    function parseFullYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 4));
        return n ? (d.y = +n[0], i + n[0].length) : -1;
    }
    function parseYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }
    function parseZone(d, string, i) {
        var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
        return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }
    function parseMonthNumber(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }
    function parseDayOfMonth(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.d = +n[0], i + n[0].length) : -1;
    }
    function parseDayOfYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }
    function parseHour24(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.H = +n[0], i + n[0].length) : -1;
    }
    function parseMinutes(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.M = +n[0], i + n[0].length) : -1;
    }
    function parseSeconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.S = +n[0], i + n[0].length) : -1;
    }
    function parseMilliseconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.L = +n[0], i + n[0].length) : -1;
    }
    function parseLiteralPercent(d, string, i) {
        var n = percentRe.exec(string.slice(i, i + 1));
        return n ? i + n[0].length : -1;
    }
    function formatDayOfMonth(d, p) {
        return pad(d.getDate(), p, 2);
    }
    function formatHour24(d, p) {
        return pad(d.getHours(), p, 2);
    }
    function formatHour12(d, p) {
        return pad(d.getHours() % 12 || 12, p, 2);
    }
    function formatDayOfYear(d, p) {
        return pad(1 + day.count(year(d), d), p, 3);
    }
    function formatMilliseconds(d, p) {
        return pad(d.getMilliseconds(), p, 3);
    }
    function formatMonthNumber(d, p) {
        return pad(d.getMonth() + 1, p, 2);
    }
    function formatMinutes(d, p) {
        return pad(d.getMinutes(), p, 2);
    }
    function formatSeconds(d, p) {
        return pad(d.getSeconds(), p, 2);
    }
    function formatWeekNumberSunday(d, p) {
        return pad(timeWeek.count(year(d), d), p, 2);
    }
    function formatWeekdayNumber(d) {
        return d.getDay();
    }
    function formatWeekNumberMonday(d, p) {
        return pad(timeMonday.count(year(d), d), p, 2);
    }
    function formatYear(d, p) {
        return pad(d.getFullYear() % 100, p, 2);
    }
    function formatFullYear(d, p) {
        return pad(d.getFullYear() % 10000, p, 4);
    }
    function formatZone(d) {
        var z = d.getTimezoneOffset();
        return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
    }
    function formatUTCDayOfMonth(d, p) {
        return pad(d.getUTCDate(), p, 2);
    }
    function formatUTCHour24(d, p) {
        return pad(d.getUTCHours(), p, 2);
    }
    function formatUTCHour12(d, p) {
        return pad(d.getUTCHours() % 12 || 12, p, 2);
    }
    function formatUTCDayOfYear(d, p) {
        return pad(1 + utcDay.count(utcYear(d), d), p, 3);
    }
    function formatUTCMilliseconds(d, p) {
        return pad(d.getUTCMilliseconds(), p, 3);
    }
    function formatUTCMonthNumber(d, p) {
        return pad(d.getUTCMonth() + 1, p, 2);
    }
    function formatUTCMinutes(d, p) {
        return pad(d.getUTCMinutes(), p, 2);
    }
    function formatUTCSeconds(d, p) {
        return pad(d.getUTCSeconds(), p, 2);
    }
    function formatUTCWeekNumberSunday(d, p) {
        return pad(utcWeek.count(utcYear(d), d), p, 2);
    }
    function formatUTCWeekdayNumber(d) {
        return d.getUTCDay();
    }
    function formatUTCWeekNumberMonday(d, p) {
        return pad(utcMonday.count(utcYear(d), d), p, 2);
    }
    function formatUTCYear(d, p) {
        return pad(d.getUTCFullYear() % 100, p, 2);
    }
    function formatUTCFullYear(d, p) {
        return pad(d.getUTCFullYear() % 10000, p, 4);
    }
    function formatUTCZone() {
        return "+0000";
    }
    function formatLiteralPercent() {
        return "%";
    }
    var locale$1;
    defaultLocale$1({
        dateTime: "%x, %X",
        date: "%-m/%-d/%Y",
        time: "%-I:%M:%S %p",
        periods: [
            "AM",
            "PM"
        ],
        days: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
        ],
        shortDays: [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat"
        ],
        months: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
        ],
        shortMonths: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
        ]
    });
    function defaultLocale$1(definition) {
        locale$1 = formatLocale$1(definition);
        exports1.timeFormat = locale$1.format;
        exports1.timeParse = locale$1.parse;
        exports1.utcFormat = locale$1.utcFormat;
        exports1.utcParse = locale$1.utcParse;
        return locale$1;
    }
    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
    function formatIsoNative(date) {
        return date.toISOString();
    }
    var formatIso = Date.prototype.toISOString ? formatIsoNative : exports1.utcFormat(isoSpecifier);
    function parseIsoNative(string) {
        var date = new Date(string);
        return isNaN(date) ? null : date;
    }
    var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : exports1.utcParse(isoSpecifier);
    var array$2 = Array.prototype;
    var map$2 = array$2.map;
    var slice$3 = array$2.slice;
    var implicit = {
        name: "implicit"
    };
    function ordinal(range) {
        var index = map$1(), domain = [], unknown = implicit;
        range = range == null ? [] : slice$3.call(range);
        function scale(d) {
            var key = d + "", i = index.get(key);
            if (!i) {
                if (unknown !== implicit) return unknown;
                index.set(key, i = domain.push(d));
            }
            return range[(i - 1) % range.length];
        }
        scale.domain = function(_) {
            if (!arguments.length) return domain.slice();
            domain = [], index = map$1();
            var i = -1, n = _.length, d, key;
            while(++i < n)if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
            return scale;
        };
        scale.range = function(_) {
            return arguments.length ? (range = slice$3.call(_), scale) : range.slice();
        };
        scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        scale.copy = function() {
            return ordinal().domain(domain).range(range).unknown(unknown);
        };
        return scale;
    }
    function band() {
        var scale = ordinal().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, range$$ = [
            0,
            1
        ], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
        delete scale.unknown;
        function rescale() {
            var n = domain().length, reverse = range$$[1] < range$$[0], start = range$$[reverse - 0], stop = range$$[1 - reverse];
            step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
            if (round) step = Math.floor(step);
            start += (stop - start - step * (n - paddingInner)) * align;
            bandwidth = step * (1 - paddingInner);
            if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
            var values = range(n).map(function(i) {
                return start + step * i;
            });
            return ordinalRange(reverse ? values.reverse() : values);
        }
        scale.domain = function(_) {
            return arguments.length ? (domain(_), rescale()) : domain();
        };
        scale.range = function(_) {
            return arguments.length ? (range$$ = [
                +_[0],
                +_[1]
            ], rescale()) : range$$.slice();
        };
        scale.rangeRound = function(_) {
            return range$$ = [
                +_[0],
                +_[1]
            ], round = true, rescale();
        };
        scale.bandwidth = function() {
            return bandwidth;
        };
        scale.step = function() {
            return step;
        };
        scale.round = function(_) {
            return arguments.length ? (round = !!_, rescale()) : round;
        };
        scale.padding = function(_) {
            return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
        };
        scale.paddingInner = function(_) {
            return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
        };
        scale.paddingOuter = function(_) {
            return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
        };
        scale.align = function(_) {
            return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
        };
        scale.copy = function() {
            return band().domain(domain()).range(range$$).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
        };
        return rescale();
    }
    function pointish(scale) {
        var copy = scale.copy;
        scale.padding = scale.paddingOuter;
        delete scale.paddingInner;
        delete scale.paddingOuter;
        scale.copy = function() {
            return pointish(copy());
        };
        return scale;
    }
    function point$4() {
        return pointish(band().paddingInner(1));
    }
    function constant$3(x) {
        return function() {
            return x;
        };
    }
    function number$1(x) {
        return +x;
    }
    var unit = [
        0,
        1
    ];
    function deinterpolate(a, b) {
        return (b -= a = +a) ? function(x) {
            return (x - a) / b;
        } : constant$3(b);
    }
    function deinterpolateClamp(deinterpolate) {
        return function(a, b) {
            var d = deinterpolate(a = +a, b = +b);
            return function(x) {
                return x <= a ? 0 : x >= b ? 1 : d(x);
            };
        };
    }
    function reinterpolateClamp(reinterpolate) {
        return function(a, b) {
            var r = reinterpolate(a = +a, b = +b);
            return function(t) {
                return t <= 0 ? a : t >= 1 ? b : r(t);
            };
        };
    }
    function bimap(domain, range, deinterpolate, reinterpolate) {
        var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
        if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
        else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
        return function(x) {
            return r0(d0(x));
        };
    }
    function polymap(domain, range, deinterpolate, reinterpolate) {
        var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
        // Reverse descending domains.
        if (domain[j] < domain[0]) {
            domain = domain.slice().reverse();
            range = range.slice().reverse();
        }
        while(++i < j){
            d[i] = deinterpolate(domain[i], domain[i + 1]);
            r[i] = reinterpolate(range[i], range[i + 1]);
        }
        return function(x) {
            var i = bisectRight(domain, x, 1, j) - 1;
            return r[i](d[i](x));
        };
    }
    function copy(source, target) {
        return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
    }
    // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
    function continuous(deinterpolate$$, reinterpolate) {
        var domain = unit, range = unit, interpolate$$ = interpolate, clamp = false, piecewise, output, input;
        function rescale() {
            piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
            output = input = null;
            return scale;
        }
        function scale(x) {
            return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);
        }
        scale.invert = function(y) {
            return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
        };
        scale.domain = function(_) {
            return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();
        };
        scale.range = function(_) {
            return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
        };
        scale.rangeRound = function(_) {
            return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();
        };
        scale.clamp = function(_) {
            return arguments.length ? (clamp = !!_, rescale()) : clamp;
        };
        scale.interpolate = function(_) {
            return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;
        };
        return rescale();
    }
    function tickFormat(domain, count, specifier) {
        var start = domain[0], stop = domain[domain.length - 1], step = tickStep(start, stop, count == null ? 10 : count), precision;
        specifier = formatSpecifier(specifier == null ? ",f" : specifier);
        switch(specifier.type){
            case "s":
                {
                    var value = Math.max(Math.abs(start), Math.abs(stop));
                    if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
                    return exports1.formatPrefix(specifier, value);
                }
            case "":
            case "e":
            case "g":
            case "p":
            case "r":
                {
                    if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
                    break;
                }
            case "f":
            case "%":
                {
                    if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
                    break;
                }
        }
        return exports1.format(specifier);
    }
    function linearish(scale) {
        var domain = scale.domain;
        scale.ticks = function(count) {
            var d = domain();
            return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
        };
        scale.tickFormat = function(count, specifier) {
            return tickFormat(domain(), count, specifier);
        };
        scale.nice = function(count) {
            var d = domain(), i = d.length - 1, n = count == null ? 10 : count, start = d[0], stop = d[i], step = tickStep(start, stop, n);
            if (step) {
                step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
                d[0] = Math.floor(start / step) * step;
                d[i] = Math.ceil(stop / step) * step;
                domain(d);
            }
            return scale;
        };
        return scale;
    }
    function linear$2() {
        var scale = continuous(deinterpolate, interpolateNumber);
        scale.copy = function() {
            return copy(scale, linear$2());
        };
        return linearish(scale);
    }
    function identity$4() {
        var domain = [
            0,
            1
        ];
        function scale(x) {
            return +x;
        }
        scale.invert = scale;
        scale.domain = scale.range = function(_) {
            return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();
        };
        scale.copy = function() {
            return identity$4().domain(domain);
        };
        return linearish(scale);
    }
    function nice(domain, interval) {
        domain = domain.slice();
        var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
        if (x1 < x0) {
            t = i0, i0 = i1, i1 = t;
            t = x0, x0 = x1, x1 = t;
        }
        domain[i0] = interval.floor(x0);
        domain[i1] = interval.ceil(x1);
        return domain;
    }
    function deinterpolate$1(a, b) {
        return (b = Math.log(b / a)) ? function(x) {
            return Math.log(x / a) / b;
        } : constant$3(b);
    }
    function reinterpolate(a, b) {
        return a < 0 ? function(t) {
            return -Math.pow(-b, t) * Math.pow(-a, 1 - t);
        } : function(t) {
            return Math.pow(b, t) * Math.pow(a, 1 - t);
        };
    }
    function pow10(x) {
        return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
    }
    function powp(base) {
        return base === 10 ? pow10 : base === Math.E ? Math.exp : function(x) {
            return Math.pow(base, x);
        };
    }
    function logp(base) {
        return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function(x) {
            return Math.log(x) / base;
        });
    }
    function reflect(f) {
        return function(x) {
            return -f(-x);
        };
    }
    function log() {
        var scale = continuous(deinterpolate$1, reinterpolate).domain([
            1,
            10
        ]), domain = scale.domain, base = 10, logs = logp(10), pows = powp(10);
        function rescale() {
            logs = logp(base), pows = powp(base);
            if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
            return scale;
        }
        scale.base = function(_) {
            return arguments.length ? (base = +_, rescale()) : base;
        };
        scale.domain = function(_) {
            return arguments.length ? (domain(_), rescale()) : domain();
        };
        scale.ticks = function(count) {
            var d = domain(), u = d[0], v = d[d.length - 1], r;
            if (r = v < u) i = u, u = v, v = i;
            var i = logs(u), j = logs(v), p, k, t, n = count == null ? 10 : +count, z = [];
            if (!(base % 1) && j - i < n) {
                i = Math.round(i) - 1, j = Math.round(j) + 1;
                if (u > 0) for(; i < j; ++i){
                    for(k = 1, p = pows(i); k < base; ++k){
                        t = p * k;
                        if (t < u) continue;
                        if (t > v) break;
                        z.push(t);
                    }
                }
                else for(; i < j; ++i){
                    for(k = base - 1, p = pows(i); k >= 1; --k){
                        t = p * k;
                        if (t < u) continue;
                        if (t > v) break;
                        z.push(t);
                    }
                }
            } else {
                z = ticks(i, j, Math.min(j - i, n)).map(pows);
            }
            return r ? z.reverse() : z;
        };
        scale.tickFormat = function(count, specifier) {
            if (specifier == null) specifier = base === 10 ? ".0e" : ",";
            if (typeof specifier !== "function") specifier = exports1.format(specifier);
            if (count === Infinity) return specifier;
            if (count == null) count = 10;
            var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
            return function(d) {
                var i = d / pows(Math.round(logs(d)));
                if (i * base < base - 0.5) i *= base;
                return i <= k ? specifier(d) : "";
            };
        };
        scale.nice = function() {
            return domain(nice(domain(), {
                floor: function(x) {
                    return pows(Math.floor(logs(x)));
                },
                ceil: function(x) {
                    return pows(Math.ceil(logs(x)));
                }
            }));
        };
        scale.copy = function() {
            return copy(scale, log().base(base));
        };
        return scale;
    }
    function raise(x, exponent) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    }
    function pow() {
        var exponent = 1, scale = continuous(deinterpolate, reinterpolate), domain = scale.domain;
        function deinterpolate(a, b) {
            return (b = raise(b, exponent) - (a = raise(a, exponent))) ? function(x) {
                return (raise(x, exponent) - a) / b;
            } : constant$3(b);
        }
        function reinterpolate(a, b) {
            b = raise(b, exponent) - (a = raise(a, exponent));
            return function(t) {
                return raise(a + b * t, 1 / exponent);
            };
        }
        scale.exponent = function(_) {
            return arguments.length ? (exponent = +_, domain(domain())) : exponent;
        };
        scale.copy = function() {
            return copy(scale, pow().exponent(exponent));
        };
        return linearish(scale);
    }
    function sqrt() {
        return pow().exponent(0.5);
    }
    function quantile() {
        var domain = [], range = [], thresholds = [];
        function rescale() {
            var i = 0, n = Math.max(1, range.length);
            thresholds = new Array(n - 1);
            while(++i < n)thresholds[i - 1] = threshold(domain, i / n);
            return scale;
        }
        function scale(x) {
            if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];
        }
        scale.invertExtent = function(y) {
            var i = range.indexOf(y);
            return i < 0 ? [
                NaN,
                NaN
            ] : [
                i > 0 ? thresholds[i - 1] : domain[0],
                i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
            ];
        };
        scale.domain = function(_) {
            if (!arguments.length) return domain.slice();
            domain = [];
            for(var i = 0, n = _.length, d; i < n; ++i)if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
            domain.sort(ascending);
            return rescale();
        };
        scale.range = function(_) {
            return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
        };
        scale.quantiles = function() {
            return thresholds.slice();
        };
        scale.copy = function() {
            return quantile().domain(domain).range(range);
        };
        return scale;
    }
    function quantize$1() {
        var x0 = 0, x1 = 1, n = 1, domain = [
            0.5
        ], range = [
            0,
            1
        ];
        function scale(x) {
            if (x <= x) return range[bisectRight(domain, x, 0, n)];
        }
        function rescale() {
            var i = -1;
            domain = new Array(n);
            while(++i < n)domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
            return scale;
        }
        scale.domain = function(_) {
            return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [
                x0,
                x1
            ];
        };
        scale.range = function(_) {
            return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();
        };
        scale.invertExtent = function(y) {
            var i = range.indexOf(y);
            return i < 0 ? [
                NaN,
                NaN
            ] : i < 1 ? [
                x0,
                domain[0]
            ] : i >= n ? [
                domain[n - 1],
                x1
            ] : [
                domain[i - 1],
                domain[i]
            ];
        };
        scale.copy = function() {
            return quantize$1().domain([
                x0,
                x1
            ]).range(range);
        };
        return linearish(scale);
    }
    function threshold$1() {
        var domain = [
            0.5
        ], range = [
            0,
            1
        ], n = 1;
        function scale(x) {
            if (x <= x) return range[bisectRight(domain, x, 0, n)];
        }
        scale.domain = function(_) {
            return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
        };
        scale.range = function(_) {
            return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
        };
        scale.invertExtent = function(y) {
            var i = range.indexOf(y);
            return [
                domain[i - 1],
                domain[i]
            ];
        };
        scale.copy = function() {
            return threshold$1().domain(domain).range(range);
        };
        return scale;
    }
    var durationSecond$1 = 1000;
    var durationMinute$1 = durationSecond$1 * 60;
    var durationHour$1 = durationMinute$1 * 60;
    var durationDay$1 = durationHour$1 * 24;
    var durationWeek$1 = durationDay$1 * 7;
    var durationMonth = durationDay$1 * 30;
    var durationYear = durationDay$1 * 365;
    function date$1(t) {
        return new Date(t);
    }
    function number$2(t) {
        return t instanceof Date ? +t : +new Date(+t);
    }
    function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
        var scale = continuous(deinterpolate, interpolateNumber), invert = scale.invert, domain = scale.domain;
        var formatMillisecond = format(".%L"), formatSecond = format(":%S"), formatMinute = format("%I:%M"), formatHour = format("%I %p"), formatDay = format("%a %d"), formatWeek = format("%b %d"), formatMonth = format("%B"), formatYear = format("%Y");
        var tickIntervals = [
            [
                second,
                1,
                durationSecond$1
            ],
            [
                second,
                5,
                5 * durationSecond$1
            ],
            [
                second,
                15,
                15 * durationSecond$1
            ],
            [
                second,
                30,
                30 * durationSecond$1
            ],
            [
                minute,
                1,
                durationMinute$1
            ],
            [
                minute,
                5,
                5 * durationMinute$1
            ],
            [
                minute,
                15,
                15 * durationMinute$1
            ],
            [
                minute,
                30,
                30 * durationMinute$1
            ],
            [
                hour,
                1,
                durationHour$1
            ],
            [
                hour,
                3,
                3 * durationHour$1
            ],
            [
                hour,
                6,
                6 * durationHour$1
            ],
            [
                hour,
                12,
                12 * durationHour$1
            ],
            [
                day,
                1,
                durationDay$1
            ],
            [
                day,
                2,
                2 * durationDay$1
            ],
            [
                week,
                1,
                durationWeek$1
            ],
            [
                month,
                1,
                durationMonth
            ],
            [
                month,
                3,
                3 * durationMonth
            ],
            [
                year,
                1,
                durationYear
            ]
        ];
        function tickFormat(date) {
            return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
        }
        function tickInterval(interval, start, stop, step) {
            if (interval == null) interval = 10;
            // If a desired tick count is specified, pick a reasonable tick interval
            // based on the extent of the domain and a rough estimate of tick size.
            // Otherwise, assume interval is already a time interval and use it.
            if (typeof interval === "number") {
                var target = Math.abs(stop - start) / interval, i = bisector(function(i) {
                    return i[2];
                }).right(tickIntervals, target);
                if (i === tickIntervals.length) {
                    step = tickStep(start / durationYear, stop / durationYear, interval);
                    interval = year;
                } else if (i) {
                    i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
                    step = i[1];
                    interval = i[0];
                } else {
                    step = tickStep(start, stop, interval);
                    interval = millisecond;
                }
            }
            return step == null ? interval : interval.every(step);
        }
        scale.invert = function(y) {
            return new Date(invert(y));
        };
        scale.domain = function(_) {
            return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);
        };
        scale.ticks = function(interval, step) {
            var d = domain(), t0 = d[0], t1 = d[d.length - 1], r = t1 < t0, t;
            if (r) t = t0, t0 = t1, t1 = t;
            t = tickInterval(interval, t0, t1, step);
            t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
            return r ? t.reverse() : t;
        };
        scale.tickFormat = function(count, specifier) {
            return specifier == null ? tickFormat : format(specifier);
        };
        scale.nice = function(interval, step) {
            var d = domain();
            return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale;
        };
        scale.copy = function() {
            return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
        };
        return scale;
    }
    function time() {
        return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, exports1.timeFormat).domain([
            new Date(2000, 0, 1),
            new Date(2000, 0, 2)
        ]);
    }
    function utcTime() {
        return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, exports1.utcFormat).domain([
            Date.UTC(2000, 0, 1),
            Date.UTC(2000, 0, 2)
        ]);
    }
    function colors(s) {
        return s.match(/.{6}/g).map(function(x) {
            return "#" + x;
        });
    }
    var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
    var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");
    var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");
    var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");
    var cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));
    var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
    var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
    var rainbow = cubehelix();
    function rainbow$1(t) {
        if (t < 0 || t > 1) t -= Math.floor(t);
        var ts = Math.abs(t - 0.5);
        rainbow.h = 360 * t - 100;
        rainbow.s = 1.5 - 1.5 * ts;
        rainbow.l = 0.8 - 0.9 * ts;
        return rainbow + "";
    }
    function ramp(range) {
        var n = range.length;
        return function(t) {
            return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
        };
    }
    var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
    var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
    var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
    var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
    function sequential(interpolator) {
        var x0 = 0, x1 = 1, clamp = false;
        function scale(x) {
            var t = (x - x0) / (x1 - x0);
            return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
        }
        scale.domain = function(_) {
            return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [
                x0,
                x1
            ];
        };
        scale.clamp = function(_) {
            return arguments.length ? (clamp = !!_, scale) : clamp;
        };
        scale.interpolator = function(_) {
            return arguments.length ? (interpolator = _, scale) : interpolator;
        };
        scale.copy = function() {
            return sequential(interpolator).domain([
                x0,
                x1
            ]).clamp(clamp);
        };
        return linearish(scale);
    }
    var xhtml = "http://www.w3.org/1999/xhtml";
    var namespaces = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: xhtml,
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
    };
    function namespace(name) {
        var prefix = name += "", i = prefix.indexOf(":");
        if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
        return namespaces.hasOwnProperty(prefix) ? {
            space: namespaces[prefix],
            local: name
        } : name;
    }
    function creatorInherit(name) {
        return function() {
            var document1 = this.ownerDocument, uri = this.namespaceURI;
            return uri === xhtml && document1.documentElement.namespaceURI === xhtml ? document1.createElement(name) : document1.createElementNS(uri, name);
        };
    }
    function creatorFixed(fullname) {
        return function() {
            return this.ownerDocument.createElementNS(fullname.space, fullname.local);
        };
    }
    function creator(name) {
        var fullname = namespace(name);
        return (fullname.local ? creatorFixed : creatorInherit)(fullname);
    }
    var nextId = 0;
    function local() {
        return new Local;
    }
    function Local() {
        this._ = "@" + (++nextId).toString(36);
    }
    Local.prototype = local.prototype = {
        constructor: Local,
        get: function(node) {
            var id = this._;
            while(!(id in node))if (!(node = node.parentNode)) return;
            return node[id];
        },
        set: function(node, value) {
            return node[this._] = value;
        },
        remove: function(node) {
            return this._ in node && delete node[this._];
        },
        toString: function() {
            return this._;
        }
    };
    var matcher = function(selector) {
        return function() {
            return this.matches(selector);
        };
    };
    if (typeof document !== "undefined") {
        var element = document.documentElement;
        if (!element.matches) {
            var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
            matcher = function(selector) {
                return function() {
                    return vendorMatches.call(this, selector);
                };
            };
        }
    }
    var matcher$1 = matcher;
    var filterEvents = {};
    exports1.event = null;
    if (typeof document !== "undefined") {
        var element$1 = document.documentElement;
        if (!("onmouseenter" in element$1)) {
            filterEvents = {
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            };
        }
    }
    function filterContextListener(listener, index, group) {
        listener = contextListener(listener, index, group);
        return function(event) {
            var related = event.relatedTarget;
            if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
                listener.call(this, event);
            }
        };
    }
    function contextListener(listener, index, group) {
        return function(event1) {
            var event0 = exports1.event; // Events can be reentrant (e.g., focus).
            exports1.event = event1;
            try {
                listener.call(this, this.__data__, index, group);
            } finally{
                exports1.event = event0;
            }
        };
    }
    function parseTypenames$1(typenames) {
        return typenames.trim().split(/^|\s+/).map(function(t) {
            var name = "", i = t.indexOf(".");
            if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
            return {
                type: t,
                name: name
            };
        });
    }
    function onRemove(typename) {
        return function() {
            var on = this.__on;
            if (!on) return;
            for(var j = 0, i = -1, m = on.length, o; j < m; ++j){
                if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
                    this.removeEventListener(o.type, o.listener, o.capture);
                } else {
                    on[++i] = o;
                }
            }
            if (++i) on.length = i;
            else delete this.__on;
        };
    }
    function onAdd(typename, value, capture) {
        var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
        return function(d, i, group) {
            var on = this.__on, o, listener = wrap(value, i, group);
            if (on) for(var j = 0, m = on.length; j < m; ++j){
                if ((o = on[j]).type === typename.type && o.name === typename.name) {
                    this.removeEventListener(o.type, o.listener, o.capture);
                    this.addEventListener(o.type, o.listener = listener, o.capture = capture);
                    o.value = value;
                    return;
                }
            }
            this.addEventListener(typename.type, listener, capture);
            o = {
                type: typename.type,
                name: typename.name,
                value: value,
                listener: listener,
                capture: capture
            };
            if (!on) this.__on = [
                o
            ];
            else on.push(o);
        };
    }
    function selection_on(typename, value, capture) {
        var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;
        if (arguments.length < 2) {
            var on = this.node().__on;
            if (on) for(var j = 0, m = on.length, o; j < m; ++j){
                for(i = 0, o = on[j]; i < n; ++i){
                    if ((t = typenames[i]).type === o.type && t.name === o.name) {
                        return o.value;
                    }
                }
            }
            return;
        }
        on = value ? onAdd : onRemove;
        if (capture == null) capture = false;
        for(i = 0; i < n; ++i)this.each(on(typenames[i], value, capture));
        return this;
    }
    function customEvent(event1, listener, that, args) {
        var event0 = exports1.event;
        event1.sourceEvent = exports1.event;
        exports1.event = event1;
        try {
            return listener.apply(that, args);
        } finally{
            exports1.event = event0;
        }
    }
    function sourceEvent() {
        var current = exports1.event, source;
        while(source = current.sourceEvent)current = source;
        return current;
    }
    function point$5(node, event) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
            var point = svg.createSVGPoint();
            point.x = event.clientX, point.y = event.clientY;
            point = point.matrixTransform(node.getScreenCTM().inverse());
            return [
                point.x,
                point.y
            ];
        }
        var rect = node.getBoundingClientRect();
        return [
            event.clientX - rect.left - node.clientLeft,
            event.clientY - rect.top - node.clientTop
        ];
    }
    function mouse(node) {
        var event = sourceEvent();
        if (event.changedTouches) event = event.changedTouches[0];
        return point$5(node, event);
    }
    function none$2() {}
    function selector(selector) {
        return selector == null ? none$2 : function() {
            return this.querySelector(selector);
        };
    }
    function selection_select(select) {
        if (typeof select !== "function") select = selector(select);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i){
                if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                    if ("__data__" in node) subnode.__data__ = node.__data__;
                    subgroup[i] = subnode;
                }
            }
        }
        return new Selection(subgroups, this._parents);
    }
    function empty() {
        return [];
    }
    function selectorAll(selector) {
        return selector == null ? empty : function() {
            return this.querySelectorAll(selector);
        };
    }
    function selection_selectAll(select) {
        if (typeof select !== "function") select = selectorAll(select);
        for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i){
                if (node = group[i]) {
                    subgroups.push(select.call(node, node.__data__, i, group));
                    parents.push(node);
                }
            }
        }
        return new Selection(subgroups, parents);
    }
    function selection_filter(match) {
        if (typeof match !== "function") match = matcher$1(match);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i){
                if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                    subgroup.push(node);
                }
            }
        }
        return new Selection(subgroups, this._parents);
    }
    function sparse(update) {
        return new Array(update.length);
    }
    function selection_enter() {
        return new Selection(this._enter || this._groups.map(sparse), this._parents);
    }
    function EnterNode(parent, datum) {
        this.ownerDocument = parent.ownerDocument;
        this.namespaceURI = parent.namespaceURI;
        this._next = null;
        this._parent = parent;
        this.__data__ = datum;
    }
    EnterNode.prototype = {
        constructor: EnterNode,
        appendChild: function(child) {
            return this._parent.insertBefore(child, this._next);
        },
        insertBefore: function(child, next) {
            return this._parent.insertBefore(child, next);
        },
        querySelector: function(selector) {
            return this._parent.querySelector(selector);
        },
        querySelectorAll: function(selector) {
            return this._parent.querySelectorAll(selector);
        }
    };
    function constant$4(x) {
        return function() {
            return x;
        };
    }
    var keyPrefix = "$"; // Protect against keys like “__proto__”.
    function bindIndex(parent, group, enter, update, exit, data) {
        var i = 0, node, groupLength = group.length, dataLength = data.length;
        // Put any non-null nodes that fit into update.
        // Put any null nodes into enter.
        // Put any remaining data into enter.
        for(; i < dataLength; ++i){
            if (node = group[i]) {
                node.__data__ = data[i];
                update[i] = node;
            } else {
                enter[i] = new EnterNode(parent, data[i]);
            }
        }
        // Put any non-null nodes that don’t fit into exit.
        for(; i < groupLength; ++i){
            if (node = group[i]) {
                exit[i] = node;
            }
        }
    }
    function bindKey(parent, group, enter, update, exit, data, key) {
        var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
        // Compute the key for each node.
        // If multiple nodes have the same key, the duplicates are added to exit.
        for(i = 0; i < groupLength; ++i){
            if (node = group[i]) {
                keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
                if (keyValue in nodeByKeyValue) {
                    exit[i] = node;
                } else {
                    nodeByKeyValue[keyValue] = node;
                }
            }
        }
        // Compute the key for each datum.
        // If there a node associated with this key, join and add it to update.
        // If there is not (or the key is a duplicate), add it to enter.
        for(i = 0; i < dataLength; ++i){
            keyValue = keyPrefix + key.call(parent, data[i], i, data);
            if (node = nodeByKeyValue[keyValue]) {
                update[i] = node;
                node.__data__ = data[i];
                nodeByKeyValue[keyValue] = null;
            } else {
                enter[i] = new EnterNode(parent, data[i]);
            }
        }
        // Add any remaining nodes that were not bound to data to exit.
        for(i = 0; i < groupLength; ++i){
            if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
                exit[i] = node;
            }
        }
    }
    function selection_data(value, key) {
        if (!value) {
            data = new Array(this.size()), j = -1;
            this.each(function(d) {
                data[++j] = d;
            });
            return data;
        }
        var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
        if (typeof value !== "function") value = constant$4(value);
        for(var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j){
            var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
            bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
            // Now connect the enter nodes to their following update node, such that
            // appendChild can insert the materialized enter node before this node,
            // rather than at the end of the parent node.
            for(var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0){
                if (previous = enterGroup[i0]) {
                    if (i0 >= i1) i1 = i0 + 1;
                    while(!(next = updateGroup[i1]) && ++i1 < dataLength);
                    previous._next = next || null;
                }
            }
        }
        update = new Selection(update, parents);
        update._enter = enter;
        update._exit = exit;
        return update;
    }
    function selection_exit() {
        return new Selection(this._exit || this._groups.map(sparse), this._parents);
    }
    function selection_merge(selection) {
        for(var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
            for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i){
                if (node = group0[i] || group1[i]) {
                    merge[i] = node;
                }
            }
        }
        for(; j < m0; ++j){
            merges[j] = groups0[j];
        }
        return new Selection(merges, this._parents);
    }
    function selection_order() {
        for(var groups = this._groups, j = -1, m = groups.length; ++j < m;){
            for(var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;){
                if (node = group[i]) {
                    if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
                    next = node;
                }
            }
        }
        return this;
    }
    function selection_sort(compare) {
        if (!compare) compare = ascending$2;
        function compareNode(a, b) {
            return a && b ? compare(a.__data__, b.__data__) : !a - !b;
        }
        for(var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i){
                if (node = group[i]) {
                    sortgroup[i] = node;
                }
            }
            sortgroup.sort(compareNode);
        }
        return new Selection(sortgroups, this._parents).order();
    }
    function ascending$2(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }
    function selection_call() {
        var callback = arguments[0];
        arguments[0] = this;
        callback.apply(null, arguments);
        return this;
    }
    function selection_nodes() {
        var nodes = new Array(this.size()), i = -1;
        this.each(function() {
            nodes[++i] = this;
        });
        return nodes;
    }
    function selection_node() {
        for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
            for(var group = groups[j], i = 0, n = group.length; i < n; ++i){
                var node = group[i];
                if (node) return node;
            }
        }
        return null;
    }
    function selection_size() {
        var size = 0;
        this.each(function() {
            ++size;
        });
        return size;
    }
    function selection_empty() {
        return !this.node();
    }
    function selection_each(callback) {
        for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
            for(var group = groups[j], i = 0, n = group.length, node; i < n; ++i){
                if (node = group[i]) callback.call(node, node.__data__, i, group);
            }
        }
        return this;
    }
    function attrRemove(name) {
        return function() {
            this.removeAttribute(name);
        };
    }
    function attrRemoveNS(fullname) {
        return function() {
            this.removeAttributeNS(fullname.space, fullname.local);
        };
    }
    function attrConstant(name, value) {
        return function() {
            this.setAttribute(name, value);
        };
    }
    function attrConstantNS(fullname, value) {
        return function() {
            this.setAttributeNS(fullname.space, fullname.local, value);
        };
    }
    function attrFunction(name, value) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) this.removeAttribute(name);
            else this.setAttribute(name, v);
        };
    }
    function attrFunctionNS(fullname, value) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
            else this.setAttributeNS(fullname.space, fullname.local, v);
        };
    }
    function selection_attr(name, value) {
        var fullname = namespace(name);
        if (arguments.length < 2) {
            var node = this.node();
            return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
        }
        return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
    }
    function window(node) {
        return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
         || node.document && node // node is a Window
         || node.defaultView; // node is a Document
    }
    function styleRemove(name) {
        return function() {
            this.style.removeProperty(name);
        };
    }
    function styleConstant(name, value, priority) {
        return function() {
            this.style.setProperty(name, value, priority);
        };
    }
    function styleFunction(name, value, priority) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) this.style.removeProperty(name);
            else this.style.setProperty(name, v, priority);
        };
    }
    function selection_style(name, value, priority) {
        var node;
        return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : window(node = this.node()).getComputedStyle(node, null).getPropertyValue(name);
    }
    function propertyRemove(name) {
        return function() {
            delete this[name];
        };
    }
    function propertyConstant(name, value) {
        return function() {
            this[name] = value;
        };
    }
    function propertyFunction(name, value) {
        return function() {
            var v = value.apply(this, arguments);
            if (v == null) delete this[name];
            else this[name] = v;
        };
    }
    function selection_property(name, value) {
        return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
    }
    function classArray(string) {
        return string.trim().split(/^|\s+/);
    }
    function classList(node) {
        return node.classList || new ClassList(node);
    }
    function ClassList(node) {
        this._node = node;
        this._names = classArray(node.getAttribute("class") || "");
    }
    ClassList.prototype = {
        add: function(name) {
            var i = this._names.indexOf(name);
            if (i < 0) {
                this._names.push(name);
                this._node.setAttribute("class", this._names.join(" "));
            }
        },
        remove: function(name) {
            var i = this._names.indexOf(name);
            if (i >= 0) {
                this._names.splice(i, 1);
                this._node.setAttribute("class", this._names.join(" "));
            }
        },
        contains: function(name) {
            return this._names.indexOf(name) >= 0;
        }
    };
    function classedAdd(node, names) {
        var list = classList(node), i = -1, n = names.length;
        while(++i < n)list.add(names[i]);
    }
    function classedRemove(node, names) {
        var list = classList(node), i = -1, n = names.length;
        while(++i < n)list.remove(names[i]);
    }
    function classedTrue(names) {
        return function() {
            classedAdd(this, names);
        };
    }
    function classedFalse(names) {
        return function() {
            classedRemove(this, names);
        };
    }
    function classedFunction(names, value) {
        return function() {
            (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
        };
    }
    function selection_classed(name, value) {
        var names = classArray(name + "");
        if (arguments.length < 2) {
            var list = classList(this.node()), i = -1, n = names.length;
            while(++i < n)if (!list.contains(names[i])) return false;
            return true;
        }
        return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
    }
    function textRemove() {
        this.textContent = "";
    }
    function textConstant(value) {
        return function() {
            this.textContent = value;
        };
    }
    function textFunction(value) {
        return function() {
            var v = value.apply(this, arguments);
            this.textContent = v == null ? "" : v;
        };
    }
    function selection_text(value) {
        return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
    }
    function htmlRemove() {
        this.innerHTML = "";
    }
    function htmlConstant(value) {
        return function() {
            this.innerHTML = value;
        };
    }
    function htmlFunction(value) {
        return function() {
            var v = value.apply(this, arguments);
            this.innerHTML = v == null ? "" : v;
        };
    }
    function selection_html(value) {
        return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
    }
    function raise$1() {
        if (this.nextSibling) this.parentNode.appendChild(this);
    }
    function selection_raise() {
        return this.each(raise$1);
    }
    function lower() {
        if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }
    function selection_lower() {
        return this.each(lower);
    }
    function selection_append(name) {
        var create = typeof name === "function" ? name : creator(name);
        return this.select(function() {
            return this.appendChild(create.apply(this, arguments));
        });
    }
    function constantNull() {
        return null;
    }
    function selection_insert(name, before) {
        var create = typeof name === "function" ? name : creator(name), select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
        return this.select(function() {
            return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
        });
    }
    function remove() {
        var parent = this.parentNode;
        if (parent) parent.removeChild(this);
    }
    function selection_remove() {
        return this.each(remove);
    }
    function selection_datum(value) {
        return arguments.length ? this.property("__data__", value) : this.node().__data__;
    }
    function dispatchEvent(node, type, params) {
        var window$$ = window(node), event = window$$.CustomEvent;
        if (event) {
            event = new event(type, params);
        } else {
            event = window$$.document.createEvent("Event");
            if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
            else event.initEvent(type, false, false);
        }
        node.dispatchEvent(event);
    }
    function dispatchConstant(type, params) {
        return function() {
            return dispatchEvent(this, type, params);
        };
    }
    function dispatchFunction(type, params) {
        return function() {
            return dispatchEvent(this, type, params.apply(this, arguments));
        };
    }
    function selection_dispatch(type, params) {
        return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
    }
    var root = [
        null
    ];
    function Selection(groups, parents) {
        this._groups = groups;
        this._parents = parents;
    }
    function selection() {
        return new Selection([
            [
                document.documentElement
            ]
        ], root);
    }
    Selection.prototype = selection.prototype = {
        constructor: Selection,
        select: selection_select,
        selectAll: selection_selectAll,
        filter: selection_filter,
        data: selection_data,
        enter: selection_enter,
        exit: selection_exit,
        merge: selection_merge,
        order: selection_order,
        sort: selection_sort,
        call: selection_call,
        nodes: selection_nodes,
        node: selection_node,
        size: selection_size,
        empty: selection_empty,
        each: selection_each,
        attr: selection_attr,
        style: selection_style,
        property: selection_property,
        classed: selection_classed,
        text: selection_text,
        html: selection_html,
        raise: selection_raise,
        lower: selection_lower,
        append: selection_append,
        insert: selection_insert,
        remove: selection_remove,
        datum: selection_datum,
        on: selection_on,
        dispatch: selection_dispatch
    };
    function select(selector) {
        return typeof selector === "string" ? new Selection([
            [
                document.querySelector(selector)
            ]
        ], [
            document.documentElement
        ]) : new Selection([
            [
                selector
            ]
        ], root);
    }
    function selectAll(selector) {
        return typeof selector === "string" ? new Selection([
            document.querySelectorAll(selector)
        ], [
            document.documentElement
        ]) : new Selection([
            selector == null ? [] : selector
        ], root);
    }
    function touch(node, touches, identifier) {
        if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;
        for(var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i){
            if ((touch = touches[i]).identifier === identifier) {
                return point$5(node, touch);
            }
        }
        return null;
    }
    function touches(node, touches) {
        if (touches == null) touches = sourceEvent().touches;
        for(var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i){
            points[i] = point$5(node, touches[i]);
        }
        return points;
    }
    var emptyOn = dispatch("start", "end", "interrupt");
    var emptyTween = [];
    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var ENDING = 4;
    var ENDED = 5;
    function schedule(node, name, id, index, group, timing) {
        var schedules = node.__transition;
        if (!schedules) node.__transition = {};
        else if (id in schedules) return;
        create(node, id, {
            name: name,
            index: index,
            group: group,
            on: emptyOn,
            tween: emptyTween,
            time: timing.time,
            delay: timing.delay,
            duration: timing.duration,
            ease: timing.ease,
            timer: null,
            state: CREATED
        });
    }
    function init(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
        return schedule;
    }
    function set$2(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
        return schedule;
    }
    function get$1(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
        return schedule;
    }
    function create(node, id, self) {
        var schedules = node.__transition, tween;
        // Initialize the self timer when the transition is created.
        // Note the actual delay is not known until the first callback!
        schedules[id] = self;
        self.timer = timer(schedule, 0, self.time);
        // If the delay is greater than this first sleep, sleep some more;
        // otherwise, start immediately.
        function schedule(elapsed) {
            self.state = SCHEDULED;
            if (self.delay <= elapsed) start(elapsed - self.delay);
            else self.timer.restart(start, self.delay, self.time);
        }
        function start(elapsed) {
            var i, j, n, o;
            for(i in schedules){
                o = schedules[i];
                if (o.name !== self.name) continue;
                // Interrupt the active transition, if any.
                // Dispatch the interrupt event.
                if (o.state === STARTED) {
                    o.state = ENDED;
                    o.timer.stop();
                    o.on.call("interrupt", node, node.__data__, o.index, o.group);
                    delete schedules[i];
                } else if (+i < id) {
                    o.state = ENDED;
                    o.timer.stop();
                    delete schedules[i];
                }
            }
            // Defer the first tick to end of the current frame; see mbostock/d3#1576.
            // Note the transition may be canceled after start and before the first tick!
            // Note this must be scheduled before the start event; see d3/d3-transition#16!
            // Assuming this is successful, subsequent callbacks go straight to tick.
            timeout$1(function() {
                if (self.state === STARTED) {
                    self.timer.restart(tick, self.delay, self.time);
                    tick(elapsed);
                }
            });
            // Dispatch the start event.
            // Note this must be done before the tween are initialized.
            self.state = STARTING;
            self.on.call("start", node, node.__data__, self.index, self.group);
            if (self.state !== STARTING) return; // interrupted
            self.state = STARTED;
            // Initialize the tween, deleting null tween.
            tween = new Array(n = self.tween.length);
            for(i = 0, j = -1; i < n; ++i){
                if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
                    tween[++j] = o;
                }
            }
            tween.length = j + 1;
        }
        function tick(elapsed) {
            var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1), i = -1, n = tween.length;
            while(++i < n){
                tween[i].call(null, t);
            }
            // Dispatch the end event.
            if (self.state === ENDING) {
                self.state = ENDED;
                self.timer.stop();
                self.on.call("end", node, node.__data__, self.index, self.group);
                for(i in schedules)if (+i !== id) return void delete schedules[id];
                delete node.__transition;
            }
        }
    }
    function interrupt(node, name) {
        var schedules = node.__transition, schedule, active, empty = true, i;
        if (!schedules) return;
        name = name == null ? null : name + "";
        for(i in schedules){
            if ((schedule = schedules[i]).name !== name) {
                empty = false;
                continue;
            }
            active = schedule.state === STARTED;
            schedule.state = ENDED;
            schedule.timer.stop();
            if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
            delete schedules[i];
        }
        if (empty) delete node.__transition;
    }
    function selection_interrupt(name) {
        return this.each(function() {
            interrupt(this, name);
        });
    }
    function tweenRemove(id, name) {
        var tween0, tween1;
        return function() {
            var schedule = set$2(this, id), tween = schedule.tween;
            // If this node shared tween with the previous node,
            // just assign the updated shared tween and we’re done!
            // Otherwise, copy-on-write.
            if (tween !== tween0) {
                tween1 = tween0 = tween;
                for(var i = 0, n = tween1.length; i < n; ++i){
                    if (tween1[i].name === name) {
                        tween1 = tween1.slice();
                        tween1.splice(i, 1);
                        break;
                    }
                }
            }
            schedule.tween = tween1;
        };
    }
    function tweenFunction(id, name, value) {
        var tween0, tween1;
        if (typeof value !== "function") throw new Error;
        return function() {
            var schedule = set$2(this, id), tween = schedule.tween;
            // If this node shared tween with the previous node,
            // just assign the updated shared tween and we’re done!
            // Otherwise, copy-on-write.
            if (tween !== tween0) {
                tween1 = (tween0 = tween).slice();
                for(var t = {
                    name: name,
                    value: value
                }, i = 0, n = tween1.length; i < n; ++i){
                    if (tween1[i].name === name) {
                        tween1[i] = t;
                        break;
                    }
                }
                if (i === n) tween1.push(t);
            }
            schedule.tween = tween1;
        };
    }
    function transition_tween(name, value) {
        var id = this._id;
        name += "";
        if (arguments.length < 2) {
            var tween = get$1(this.node(), id).tween;
            for(var i = 0, n = tween.length, t; i < n; ++i){
                if ((t = tween[i]).name === name) {
                    return t.value;
                }
            }
            return null;
        }
        return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    }
    function tweenValue(transition, name, value) {
        var id = transition._id;
        transition.each(function() {
            var schedule = set$2(this, id);
            (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
        });
        return function(node) {
            return get$1(node, id).value[name];
        };
    }
    function interpolate$1(a, b) {
        var c;
        return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
    }
    function attrRemove$1(name) {
        return function() {
            this.removeAttribute(name);
        };
    }
    function attrRemoveNS$1(fullname) {
        return function() {
            this.removeAttributeNS(fullname.space, fullname.local);
        };
    }
    function attrConstant$1(name, interpolate, value1) {
        var value00, interpolate0;
        return function() {
            var value0 = this.getAttribute(name);
            return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
        };
    }
    function attrConstantNS$1(fullname, interpolate, value1) {
        var value00, interpolate0;
        return function() {
            var value0 = this.getAttributeNS(fullname.space, fullname.local);
            return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
        };
    }
    function attrFunction$1(name, interpolate, value) {
        var value00, value10, interpolate0;
        return function() {
            var value0, value1 = value(this);
            if (value1 == null) return void this.removeAttribute(name);
            value0 = this.getAttribute(name);
            return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
        };
    }
    function attrFunctionNS$1(fullname, interpolate, value) {
        var value00, value10, interpolate0;
        return function() {
            var value0, value1 = value(this);
            if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
            value0 = this.getAttributeNS(fullname.space, fullname.local);
            return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
        };
    }
    function transition_attr(name, value) {
        var fullname = namespace(name), i = fullname === "transform" ? interpolateTransform$2 : interpolate$1;
        return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
    }
    function attrTweenNS(fullname, value) {
        function tween() {
            var node = this, i = value.apply(node, arguments);
            return i && function(t) {
                node.setAttributeNS(fullname.space, fullname.local, i(t));
            };
        }
        tween._value = value;
        return tween;
    }
    function attrTween(name, value) {
        function tween() {
            var node = this, i = value.apply(node, arguments);
            return i && function(t) {
                node.setAttribute(name, i(t));
            };
        }
        tween._value = value;
        return tween;
    }
    function transition_attrTween(name, value) {
        var key = "attr." + name;
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        var fullname = namespace(name);
        return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    }
    function delayFunction(id, value) {
        return function() {
            init(this, id).delay = +value.apply(this, arguments);
        };
    }
    function delayConstant(id, value) {
        return value = +value, function() {
            init(this, id).delay = value;
        };
    }
    function transition_delay(value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get$1(this.node(), id).delay;
    }
    function durationFunction(id, value) {
        return function() {
            set$2(this, id).duration = +value.apply(this, arguments);
        };
    }
    function durationConstant(id, value) {
        return value = +value, function() {
            set$2(this, id).duration = value;
        };
    }
    function transition_duration(value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get$1(this.node(), id).duration;
    }
    function easeConstant(id, value) {
        if (typeof value !== "function") throw new Error;
        return function() {
            set$2(this, id).ease = value;
        };
    }
    function transition_ease(value) {
        var id = this._id;
        return arguments.length ? this.each(easeConstant(id, value)) : get$1(this.node(), id).ease;
    }
    function transition_filter(match) {
        if (typeof match !== "function") match = matcher$1(match);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i){
                if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                    subgroup.push(node);
                }
            }
        }
        return new Transition(subgroups, this._parents, this._name, this._id);
    }
    function transition_merge(transition) {
        if (transition._id !== this._id) throw new Error;
        for(var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
            for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i){
                if (node = group0[i] || group1[i]) {
                    merge[i] = node;
                }
            }
        }
        for(; j < m0; ++j){
            merges[j] = groups0[j];
        }
        return new Transition(merges, this._parents, this._name, this._id);
    }
    function start$1(name) {
        return (name + "").trim().split(/^|\s+/).every(function(t) {
            var i = t.indexOf(".");
            if (i >= 0) t = t.slice(0, i);
            return !t || t === "start";
        });
    }
    function onFunction(id, name, listener) {
        var on0, on1, sit = start$1(name) ? init : set$2;
        return function() {
            var schedule = sit(this, id), on = schedule.on;
            // If this node shared a dispatch with the previous node,
            // just assign the updated shared dispatch and we’re done!
            // Otherwise, copy-on-write.
            if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
            schedule.on = on1;
        };
    }
    function transition_on(name, listener) {
        var id = this._id;
        return arguments.length < 2 ? get$1(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
    }
    function removeFunction(id) {
        return function() {
            var parent = this.parentNode;
            for(var i in this.__transition)if (+i !== id) return;
            if (parent) parent.removeChild(this);
        };
    }
    function transition_remove() {
        return this.on("end.remove", removeFunction(this._id));
    }
    function transition_select(select) {
        var name = this._name, id = this._id;
        if (typeof select !== "function") select = selector(select);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i){
                if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                    if ("__data__" in node) subnode.__data__ = node.__data__;
                    subgroup[i] = subnode;
                    schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
                }
            }
        }
        return new Transition(subgroups, this._parents, name, id);
    }
    function transition_selectAll(select) {
        var name = this._name, id = this._id;
        if (typeof select !== "function") select = selectorAll(select);
        for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i){
                if (node = group[i]) {
                    for(var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k){
                        if (child = children[k]) {
                            schedule(child, name, id, k, children, inherit);
                        }
                    }
                    subgroups.push(children);
                    parents.push(node);
                }
            }
        }
        return new Transition(subgroups, parents, name, id);
    }
    var Selection$1 = selection.prototype.constructor;
    function transition_selection() {
        return new Selection$1(this._groups, this._parents);
    }
    function styleRemove$1(name, interpolate) {
        var value00, value10, interpolate0;
        return function() {
            var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
            return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
        };
    }
    function styleRemoveEnd(name) {
        return function() {
            this.style.removeProperty(name);
        };
    }
    function styleConstant$1(name, interpolate, value1) {
        var value00, interpolate0;
        return function() {
            var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
            return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
        };
    }
    function styleFunction$1(name, interpolate, value) {
        var value00, value10, interpolate0;
        return function() {
            var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = value(this);
            if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
            return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
        };
    }
    function transition_style(name, value, priority) {
        var i = (name += "") === "transform" ? interpolateTransform$1 : interpolate$1;
        return value == null ? this.styleTween(name, styleRemove$1(name, i)).on("end.style." + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === "function" ? styleFunction$1(name, i, tweenValue(this, "style." + name, value)) : styleConstant$1(name, i, value), priority);
    }
    function styleTween(name, value, priority) {
        function tween() {
            var node = this, i = value.apply(node, arguments);
            return i && function(t) {
                node.style.setProperty(name, i(t), priority);
            };
        }
        tween._value = value;
        return tween;
    }
    function transition_styleTween(name, value, priority) {
        var key = "style." + (name += "");
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    }
    function textConstant$1(value) {
        return function() {
            this.textContent = value;
        };
    }
    function textFunction$1(value) {
        return function() {
            var value1 = value(this);
            this.textContent = value1 == null ? "" : value1;
        };
    }
    function transition_text(value) {
        return this.tween("text", typeof value === "function" ? textFunction$1(tweenValue(this, "text", value)) : textConstant$1(value == null ? "" : value + ""));
    }
    function transition_transition() {
        var name = this._name, id0 = this._id, id1 = newId();
        for(var groups = this._groups, m = groups.length, j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i){
                if (node = group[i]) {
                    var inherit = get$1(node, id0);
                    schedule(node, name, id1, i, group, {
                        time: inherit.time + inherit.delay + inherit.duration,
                        delay: 0,
                        duration: inherit.duration,
                        ease: inherit.ease
                    });
                }
            }
        }
        return new Transition(groups, this._parents, name, id1);
    }
    var id = 0;
    function Transition(groups, parents, name, id) {
        this._groups = groups;
        this._parents = parents;
        this._name = name;
        this._id = id;
    }
    function transition(name) {
        return selection().transition(name);
    }
    function newId() {
        return ++id;
    }
    var selection_prototype = selection.prototype;
    Transition.prototype = transition.prototype = {
        constructor: Transition,
        select: transition_select,
        selectAll: transition_selectAll,
        filter: transition_filter,
        merge: transition_merge,
        selection: transition_selection,
        transition: transition_transition,
        call: selection_prototype.call,
        nodes: selection_prototype.nodes,
        node: selection_prototype.node,
        size: selection_prototype.size,
        empty: selection_prototype.empty,
        each: selection_prototype.each,
        on: transition_on,
        attr: transition_attr,
        attrTween: transition_attrTween,
        style: transition_style,
        styleTween: transition_styleTween,
        text: transition_text,
        remove: transition_remove,
        tween: transition_tween,
        delay: transition_delay,
        duration: transition_duration,
        ease: transition_ease
    };
    var defaultTiming = {
        time: null,
        delay: 0,
        duration: 250,
        ease: easeCubicInOut
    };
    function inherit(node, id) {
        var timing;
        while(!(timing = node.__transition) || !(timing = timing[id])){
            if (!(node = node.parentNode)) {
                return defaultTiming.time = now(), defaultTiming;
            }
        }
        return timing;
    }
    function selection_transition(name) {
        var id, timing;
        if (name instanceof Transition) {
            id = name._id, name = name._name;
        } else {
            id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
        }
        for(var groups = this._groups, m = groups.length, j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i){
                if (node = group[i]) {
                    schedule(node, name, id, i, group, timing || inherit(node, id));
                }
            }
        }
        return new Transition(groups, this._parents, name, id);
    }
    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;
    var root$1 = [
        null
    ];
    function active(node, name) {
        var schedules = node.__transition, schedule, i;
        if (schedules) {
            name = name == null ? null : name + "";
            for(i in schedules){
                if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
                    return new Transition([
                        [
                            node
                        ]
                    ], root$1, name, +i);
                }
            }
        }
        return null;
    }
    var slice$4 = Array.prototype.slice;
    function identity$5(x) {
        return x;
    }
    var top = 1;
    var right = 2;
    var bottom = 3;
    var left = 4;
    var epsilon$2 = 1e-6;
    function translateX(scale0, scale1, d) {
        var x = scale0(d);
        return "translate(" + (isFinite(x) ? x : scale1(d)) + ",0)";
    }
    function translateY(scale0, scale1, d) {
        var y = scale0(d);
        return "translate(0," + (isFinite(y) ? y : scale1(d)) + ")";
    }
    function center(scale) {
        var offset = scale.bandwidth() / 2;
        if (scale.round()) offset = Math.round(offset);
        return function(d) {
            return scale(d) + offset;
        };
    }
    function entering() {
        return !this.__axis;
    }
    function axis(orient, scale) {
        var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3;
        function axis(context) {
            var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5 : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, transform = orient === top || orient === bottom ? translateX : translateY, range = scale.range(), range0 = range[0] + 0.5, range1 = range[range.length - 1] + 0.5, position = (scale.bandwidth ? center : identity$5)(scale.copy()), selection = context.selection ? context.selection() : context, path = selection.selectAll(".domain").data([
                null
            ]), tick = selection.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text"), k = orient === top || orient === left ? -1 : 1, x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x");
            path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "#000"));
            tick = tick.merge(tickEnter);
            line = line.merge(tickEnter.append("line").attr("stroke", "#000").attr(x + "2", k * tickSizeInner).attr(y + "1", 0.5).attr(y + "2", 0.5));
            text = text.merge(tickEnter.append("text").attr("fill", "#000").attr(x, k * spacing).attr(y, 0.5).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
            if (context !== selection) {
                path = path.transition(context);
                tick = tick.transition(context);
                line = line.transition(context);
                text = text.transition(context);
                tickExit = tickExit.transition(context).attr("opacity", epsilon$2).attr("transform", function(d) {
                    return transform(position, this.parentNode.__axis || position, d);
                });
                tickEnter.attr("opacity", epsilon$2).attr("transform", function(d) {
                    return transform(this.parentNode.__axis || position, position, d);
                });
            }
            tickExit.remove();
            path.attr("d", orient === left || orient == right ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);
            tick.attr("opacity", 1).attr("transform", function(d) {
                return transform(position, position, d);
            });
            line.attr(x + "2", k * tickSizeInner);
            text.attr(x, k * spacing).text(format);
            selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
            selection.each(function() {
                this.__axis = position;
            });
        }
        axis.scale = function(_) {
            return arguments.length ? (scale = _, axis) : scale;
        };
        axis.ticks = function() {
            return tickArguments = slice$4.call(arguments), axis;
        };
        axis.tickArguments = function(_) {
            return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();
        };
        axis.tickValues = function(_) {
            return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();
        };
        axis.tickFormat = function(_) {
            return arguments.length ? (tickFormat = _, axis) : tickFormat;
        };
        axis.tickSize = function(_) {
            return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
        };
        axis.tickSizeInner = function(_) {
            return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
        };
        axis.tickSizeOuter = function(_) {
            return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
        };
        axis.tickPadding = function(_) {
            return arguments.length ? (tickPadding = +_, axis) : tickPadding;
        };
        return axis;
    }
    function axisTop(scale) {
        return axis(top, scale);
    }
    function axisRight(scale) {
        return axis(right, scale);
    }
    function axisBottom(scale) {
        return axis(bottom, scale);
    }
    function axisLeft(scale) {
        return axis(left, scale);
    }
    function defaultSeparation(a, b) {
        return a.parent === b.parent ? 1 : 2;
    }
    function meanX(children) {
        return children.reduce(meanXReduce, 0) / children.length;
    }
    function meanXReduce(x, c) {
        return x + c.x;
    }
    function maxY(children) {
        return 1 + children.reduce(maxYReduce, 0);
    }
    function maxYReduce(y, c) {
        return Math.max(y, c.y);
    }
    function leafLeft(node) {
        var children;
        while(children = node.children)node = children[0];
        return node;
    }
    function leafRight(node) {
        var children;
        while(children = node.children)node = children[children.length - 1];
        return node;
    }
    function cluster() {
        var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
        function cluster(root) {
            var previousNode, x = 0;
            // First walk, computing the initial x & y values.
            root.eachAfter(function(node) {
                var children = node.children;
                if (children) {
                    node.x = meanX(children);
                    node.y = maxY(children);
                } else {
                    node.x = previousNode ? x += separation(node, previousNode) : 0;
                    node.y = 0;
                    previousNode = node;
                }
            });
            var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
            // Second walk, normalizing x & y to the desired size.
            return root.eachAfter(nodeSize ? function(node) {
                node.x = (node.x - root.x) * dx;
                node.y = (root.y - node.y) * dy;
            } : function(node) {
                node.x = (node.x - x0) / (x1 - x0) * dx;
                node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
            });
        }
        cluster.separation = function(x) {
            return arguments.length ? (separation = x, cluster) : separation;
        };
        cluster.size = function(x) {
            return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
                dx,
                dy
            ];
        };
        cluster.nodeSize = function(x) {
            return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
                dx,
                dy
            ] : null;
        };
        return cluster;
    }
    function node_each(callback) {
        var node = this, current, next = [
            node
        ], children, i, n;
        do {
            current = next.reverse(), next = [];
            while(node = current.pop()){
                callback(node), children = node.children;
                if (children) for(i = 0, n = children.length; i < n; ++i){
                    next.push(children[i]);
                }
            }
        }while (next.length)
        return this;
    }
    function node_eachBefore(callback) {
        var node = this, nodes = [
            node
        ], children, i;
        while(node = nodes.pop()){
            callback(node), children = node.children;
            if (children) for(i = children.length - 1; i >= 0; --i){
                nodes.push(children[i]);
            }
        }
        return this;
    }
    function node_eachAfter(callback) {
        var node = this, nodes = [
            node
        ], next = [], children, i, n;
        while(node = nodes.pop()){
            next.push(node), children = node.children;
            if (children) for(i = 0, n = children.length; i < n; ++i){
                nodes.push(children[i]);
            }
        }
        while(node = next.pop()){
            callback(node);
        }
        return this;
    }
    function node_sum(value) {
        return this.eachAfter(function(node) {
            var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
            while(--i >= 0)sum += children[i].value;
            node.value = sum;
        });
    }
    function node_sort(compare) {
        return this.eachBefore(function(node) {
            if (node.children) {
                node.children.sort(compare);
            }
        });
    }
    function node_path(end) {
        var start = this, ancestor = leastCommonAncestor(start, end), nodes = [
            start
        ];
        while(start !== ancestor){
            start = start.parent;
            nodes.push(start);
        }
        var k = nodes.length;
        while(end !== ancestor){
            nodes.splice(k, 0, end);
            end = end.parent;
        }
        return nodes;
    }
    function leastCommonAncestor(a, b) {
        if (a === b) return a;
        var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
        a = aNodes.pop();
        b = bNodes.pop();
        while(a === b){
            c = a;
            a = aNodes.pop();
            b = bNodes.pop();
        }
        return c;
    }
    function node_ancestors() {
        var node = this, nodes = [
            node
        ];
        while(node = node.parent){
            nodes.push(node);
        }
        return nodes;
    }
    function node_descendants() {
        var nodes = [];
        this.each(function(node) {
            nodes.push(node);
        });
        return nodes;
    }
    function node_leaves() {
        var leaves = [];
        this.eachBefore(function(node) {
            if (!node.children) {
                leaves.push(node);
            }
        });
        return leaves;
    }
    function node_links() {
        var root = this, links = [];
        root.each(function(node) {
            if (node !== root) {
                links.push({
                    source: node.parent,
                    target: node
                });
            }
        });
        return links;
    }
    function hierarchy(data, children) {
        var root = new Node(data), valued = +data.value && (root.value = data.value), node, nodes = [
            root
        ], child, childs, i, n;
        if (children == null) children = defaultChildren;
        while(node = nodes.pop()){
            if (valued) node.value = +node.data.value;
            if ((childs = children(node.data)) && (n = childs.length)) {
                node.children = new Array(n);
                for(i = n - 1; i >= 0; --i){
                    nodes.push(child = node.children[i] = new Node(childs[i]));
                    child.parent = node;
                    child.depth = node.depth + 1;
                }
            }
        }
        return root.eachBefore(computeHeight);
    }
    function node_copy() {
        return hierarchy(this).eachBefore(copyData);
    }
    function defaultChildren(d) {
        return d.children;
    }
    function copyData(node) {
        node.data = node.data.data;
    }
    function computeHeight(node) {
        var height = 0;
        do node.height = height;
        while ((node = node.parent) && node.height < ++height)
    }
    function Node(data) {
        this.data = data;
        this.depth = this.height = 0;
        this.parent = null;
    }
    Node.prototype = hierarchy.prototype = {
        constructor: Node,
        each: node_each,
        eachAfter: node_eachAfter,
        eachBefore: node_eachBefore,
        sum: node_sum,
        sort: node_sort,
        path: node_path,
        ancestors: node_ancestors,
        descendants: node_descendants,
        leaves: node_leaves,
        links: node_links,
        copy: node_copy
    };
    function Node$2(value) {
        this._ = value;
        this.next = null;
    }
    function shuffle$1(array) {
        var i, n = (array = array.slice()).length, head = null, node = head;
        while(n){
            var next = new Node$2(array[n - 1]);
            if (node) node = node.next = next;
            else node = head = next;
            array[i] = array[--n];
        }
        return {
            head: head,
            tail: node
        };
    }
    function enclose(circles) {
        return encloseN(shuffle$1(circles), []);
    }
    function encloses(a, b) {
        var dx = b.x - a.x, dy = b.y - a.y, dr = a.r - b.r;
        return dr * dr + 1e-6 > dx * dx + dy * dy;
    }
    // Returns the smallest circle that contains circles L and intersects circles B.
    function encloseN(L, B) {
        var circle, l0 = null, l1 = L.head, l2, p1;
        switch(B.length){
            case 1:
                circle = enclose1(B[0]);
                break;
            case 2:
                circle = enclose2(B[0], B[1]);
                break;
            case 3:
                circle = enclose3(B[0], B[1], B[2]);
                break;
        }
        while(l1){
            p1 = l1._, l2 = l1.next;
            if (!circle || !encloses(circle, p1)) {
                // Temporarily truncate L before l1.
                if (l0) L.tail = l0, l0.next = null;
                else L.head = L.tail = null;
                B.push(p1);
                circle = encloseN(L, B); // Note: reorders L!
                B.pop();
                // Move l1 to the front of L and reconnect the truncated list L.
                if (L.head) l1.next = L.head, L.head = l1;
                else l1.next = null, L.head = L.tail = l1;
                l0 = L.tail, l0.next = l2;
            } else {
                l0 = l1;
            }
            l1 = l2;
        }
        L.tail = l0;
        return circle;
    }
    function enclose1(a) {
        return {
            x: a.x,
            y: a.y,
            r: a.r
        };
    }
    function enclose2(a, b) {
        var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
        return {
            x: (x1 + x2 + x21 / l * r21) / 2,
            y: (y1 + y2 + y21 / l * r21) / 2,
            r: (l + r1 + r2) / 2
        };
    }
    function enclose3(a, b, c) {
        var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = 2 * (x1 - x2), b2 = 2 * (y1 - y2), c2 = 2 * (r2 - r1), d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2, a3 = 2 * (x1 - x3), b3 = 2 * (y1 - y3), c3 = 2 * (r3 - r1), d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d3 - b3 * d2) / ab - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d3) / ab - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (xa * xb + ya * yb + r1), C = xa * xa + ya * ya - r1 * r1, r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
        return {
            x: xa + xb * r + x1,
            y: ya + yb * r + y1,
            r: r
        };
    }
    function place(a, b, c) {
        var ax = a.x, ay = a.y, da = b.r + c.r, db = a.r + c.r, dx = b.x - ax, dy = b.y - ay, dc = dx * dx + dy * dy;
        if (dc) {
            var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
            c.x = ax + x * dx + y * dy;
            c.y = ay + x * dy - y * dx;
        } else {
            c.x = ax + db;
            c.y = ay;
        }
    }
    function intersects(a, b) {
        var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
        return dr * dr > dx * dx + dy * dy;
    }
    function distance2(circle, x, y) {
        var dx = circle.x - x, dy = circle.y - y;
        return dx * dx + dy * dy;
    }
    function Node$1(circle) {
        this._ = circle;
        this.next = null;
        this.previous = null;
    }
    function packEnclose(circles) {
        if (!(n = circles.length)) return 0;
        var a, b, c, n;
        // Place the first circle.
        a = circles[0], a.x = 0, a.y = 0;
        if (!(n > 1)) return a.r;
        // Place the second circle.
        b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
        if (!(n > 2)) return a.r + b.r;
        // Place the third circle.
        place(b, a, c = circles[2]);
        // Initialize the weighted centroid.
        var aa = a.r * a.r, ba = b.r * b.r, ca = c.r * c.r, oa = aa + ba + ca, ox = aa * a.x + ba * b.x + ca * c.x, oy = aa * a.y + ba * b.y + ca * c.y, cx, cy, i, j, k, sj, sk;
        // Initialize the front-chain using the first three circles a, b and c.
        a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
        a.next = c.previous = b;
        b.next = a.previous = c;
        c.next = b.previous = a;
        // Attempt to place each remaining circle…
        pack: for(i = 3; i < n; ++i){
            place(a._, b._, c = circles[i]), c = new Node$1(c);
            // If there are only three elements in the front-chain…
            if ((k = a.previous) === (j = b.next)) {
                // If the new circle intersects the third circle,
                // rotate the front chain to try the next position.
                if (intersects(j._, c._)) {
                    a = b, b = j, --i;
                    continue pack;
                }
            } else {
                sj = j._.r, sk = k._.r;
                do {
                    if (sj <= sk) {
                        if (intersects(j._, c._)) {
                            b = j, a.next = b, b.previous = a, --i;
                            continue pack;
                        }
                        j = j.next, sj += j._.r;
                    } else {
                        if (intersects(k._, c._)) {
                            a = k, a.next = b, b.previous = a, --i;
                            continue pack;
                        }
                        k = k.previous, sk += k._.r;
                    }
                }while (j !== k.next)
            }
            // Success! Insert the new circle c between a and b.
            c.previous = a, c.next = b, a.next = b.previous = b = c;
            // Update the weighted centroid.
            oa += ca = c._.r * c._.r;
            ox += ca * c._.x;
            oy += ca * c._.y;
            // Compute the new closest circle a to centroid.
            aa = distance2(a._, cx = ox / oa, cy = oy / oa);
            while((c = c.next) !== b){
                if ((ca = distance2(c._, cx, cy)) < aa) {
                    a = c, aa = ca;
                }
            }
            b = a.next;
        }
        // Compute the enclosing circle of the front chain.
        a = [
            b._
        ], c = b;
        while((c = c.next) !== b)a.push(c._);
        c = enclose(a);
        // Translate the circles to put the enclosing circle around the origin.
        for(i = 0; i < n; ++i)a = circles[i], a.x -= c.x, a.y -= c.y;
        return c.r;
    }
    function siblings(circles) {
        packEnclose(circles);
        return circles;
    }
    function optional(f) {
        return f == null ? null : required(f);
    }
    function required(f) {
        if (typeof f !== "function") throw new Error;
        return f;
    }
    function constantZero() {
        return 0;
    }
    function constant$5(x) {
        return function() {
            return x;
        };
    }
    function defaultRadius(d) {
        return Math.sqrt(d.value);
    }
    function index() {
        var radius = null, dx = 1, dy = 1, padding = constantZero;
        function pack(root) {
            root.x = dx / 2, root.y = dy / 2;
            if (radius) {
                root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
            } else {
                root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
            }
            return root;
        }
        pack.radius = function(x) {
            return arguments.length ? (radius = optional(x), pack) : radius;
        };
        pack.size = function(x) {
            return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [
                dx,
                dy
            ];
        };
        pack.padding = function(x) {
            return arguments.length ? (padding = typeof x === "function" ? x : constant$5(+x), pack) : padding;
        };
        return pack;
    }
    function radiusLeaf(radius) {
        return function(node) {
            if (!node.children) {
                node.r = Math.max(0, +radius(node) || 0);
            }
        };
    }
    function packChildren(padding, k) {
        return function(node) {
            if (children = node.children) {
                var children, i, n = children.length, r = padding(node) * k || 0, e;
                if (r) for(i = 0; i < n; ++i)children[i].r += r;
                e = packEnclose(children);
                if (r) for(i = 0; i < n; ++i)children[i].r -= r;
                node.r = e + r;
            }
        };
    }
    function translateChild(k) {
        return function(node) {
            var parent = node.parent;
            node.r *= k;
            if (parent) {
                node.x = parent.x + k * node.x;
                node.y = parent.y + k * node.y;
            }
        };
    }
    function roundNode(node) {
        node.x0 = Math.round(node.x0);
        node.y0 = Math.round(node.y0);
        node.x1 = Math.round(node.x1);
        node.y1 = Math.round(node.y1);
    }
    function treemapDice(parent, x0, y0, x1, y1) {
        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
        while(++i < n){
            node = nodes[i], node.y0 = y0, node.y1 = y1;
            node.x0 = x0, node.x1 = x0 += node.value * k;
        }
    }
    function partition() {
        var dx = 1, dy = 1, padding = 0, round = false;
        function partition(root) {
            var n = root.height + 1;
            root.x0 = root.y0 = padding;
            root.x1 = dx;
            root.y1 = dy / n;
            root.eachBefore(positionNode(dy, n));
            if (round) root.eachBefore(roundNode);
            return root;
        }
        function positionNode(dy, n) {
            return function(node) {
                if (node.children) {
                    treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
                }
                var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
                if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
                if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
                node.x0 = x0;
                node.y0 = y0;
                node.x1 = x1;
                node.y1 = y1;
            };
        }
        partition.round = function(x) {
            return arguments.length ? (round = !!x, partition) : round;
        };
        partition.size = function(x) {
            return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [
                dx,
                dy
            ];
        };
        partition.padding = function(x) {
            return arguments.length ? (padding = +x, partition) : padding;
        };
        return partition;
    }
    var keyPrefix$1 = "$";
    var preroot = {
        depth: -1
    };
    var ambiguous = {};
    function defaultId(d) {
        return d.id;
    }
    function defaultParentId(d) {
        return d.parentId;
    }
    function stratify() {
        var id = defaultId, parentId = defaultParentId;
        function stratify(data) {
            var d, i, n = data.length, root, parent, node, nodes = new Array(n), nodeId, nodeKey, nodeByKey = {};
            for(i = 0; i < n; ++i){
                d = data[i], node = nodes[i] = new Node(d);
                if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
                    nodeKey = keyPrefix$1 + (node.id = nodeId);
                    nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
                }
            }
            for(i = 0; i < n; ++i){
                node = nodes[i], nodeId = parentId(data[i], i, data);
                if (nodeId == null || !(nodeId += "")) {
                    if (root) throw new Error("multiple roots");
                    root = node;
                } else {
                    parent = nodeByKey[keyPrefix$1 + nodeId];
                    if (!parent) throw new Error("missing: " + nodeId);
                    if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
                    if (parent.children) parent.children.push(node);
                    else parent.children = [
                        node
                    ];
                    node.parent = parent;
                }
            }
            if (!root) throw new Error("no root");
            root.parent = preroot;
            root.eachBefore(function(node) {
                node.depth = node.parent.depth + 1;
                --n;
            }).eachBefore(computeHeight);
            root.parent = null;
            if (n > 0) throw new Error("cycle");
            return root;
        }
        stratify.id = function(x) {
            return arguments.length ? (id = required(x), stratify) : id;
        };
        stratify.parentId = function(x) {
            return arguments.length ? (parentId = required(x), stratify) : parentId;
        };
        return stratify;
    }
    function defaultSeparation$1(a, b) {
        return a.parent === b.parent ? 1 : 2;
    }
    // function radialSeparation(a, b) {
    //   return (a.parent === b.parent ? 1 : 2) / a.depth;
    // }
    // This function is used to traverse the left contour of a subtree (or
    // subforest). It returns the successor of v on this contour. This successor is
    // either given by the leftmost child of v or by the thread of v. The function
    // returns null if and only if v is on the highest level of its subtree.
    function nextLeft(v) {
        var children = v.children;
        return children ? children[0] : v.t;
    }
    // This function works analogously to nextLeft.
    function nextRight(v) {
        var children = v.children;
        return children ? children[children.length - 1] : v.t;
    }
    // Shifts the current subtree rooted at w+. This is done by increasing
    // prelim(w+) and mod(w+) by shift.
    function moveSubtree(wm, wp, shift) {
        var change = shift / (wp.i - wm.i);
        wp.c -= change;
        wp.s += shift;
        wm.c += change;
        wp.z += shift;
        wp.m += shift;
    }
    // All other shifts, applied to the smaller subtrees between w- and w+, are
    // performed by this function. To prepare the shifts, we have to adjust
    // change(w+), shift(w+), and change(w-).
    function executeShifts(v) {
        var shift = 0, change = 0, children = v.children, i = children.length, w;
        while(--i >= 0){
            w = children[i];
            w.z += shift;
            w.m += shift;
            shift += w.s + (change += w.c);
        }
    }
    // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
    // returns the specified (default) ancestor.
    function nextAncestor(vim, v, ancestor) {
        return vim.a.parent === v.parent ? vim.a : ancestor;
    }
    function TreeNode(node, i) {
        this._ = node;
        this.parent = null;
        this.children = null;
        this.A = null; // default ancestor
        this.a = this; // ancestor
        this.z = 0; // prelim
        this.m = 0; // mod
        this.c = 0; // change
        this.s = 0; // shift
        this.t = null; // thread
        this.i = i; // number
    }
    TreeNode.prototype = Object.create(Node.prototype);
    function treeRoot(root) {
        var tree = new TreeNode(root, 0), node, nodes = [
            tree
        ], child, children, i, n;
        while(node = nodes.pop()){
            if (children = node._.children) {
                node.children = new Array(n = children.length);
                for(i = n - 1; i >= 0; --i){
                    nodes.push(child = node.children[i] = new TreeNode(children[i], i));
                    child.parent = node;
                }
            }
        }
        (tree.parent = new TreeNode(null, 0)).children = [
            tree
        ];
        return tree;
    }
    // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
    function tree() {
        var separation = defaultSeparation$1, dx = 1, dy = 1, nodeSize = null;
        function tree(root) {
            var t = treeRoot(root);
            // Compute the layout using Buchheim et al.’s algorithm.
            t.eachAfter(firstWalk), t.parent.m = -t.z;
            t.eachBefore(secondWalk);
            // If a fixed node size is specified, scale x and y.
            if (nodeSize) root.eachBefore(sizeNode);
            else {
                var left = root, right = root, bottom = root;
                root.eachBefore(function(node) {
                    if (node.x < left.x) left = node;
                    if (node.x > right.x) right = node;
                    if (node.depth > bottom.depth) bottom = node;
                });
                var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
                root.eachBefore(function(node) {
                    node.x = (node.x + tx) * kx;
                    node.y = node.depth * ky;
                });
            }
            return root;
        }
        // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
        // applied recursively to the children of v, as well as the function
        // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
        // node v is placed to the midpoint of its outermost children.
        function firstWalk(v) {
            var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
            if (children) {
                executeShifts(v);
                var midpoint = (children[0].z + children[children.length - 1].z) / 2;
                if (w) {
                    v.z = w.z + separation(v._, w._);
                    v.m = v.z - midpoint;
                } else {
                    v.z = midpoint;
                }
            } else if (w) {
                v.z = w.z + separation(v._, w._);
            }
            v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
        }
        // Computes all real x-coordinates by summing up the modifiers recursively.
        function secondWalk(v) {
            v._.x = v.z + v.parent.m;
            v.m += v.parent.m;
        }
        // The core of the algorithm. Here, a new subtree is combined with the
        // previous subtrees. Threads are used to traverse the inside and outside
        // contours of the left and right subtree up to the highest common level. The
        // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
        // superscript o means outside and i means inside, the subscript - means left
        // subtree and + means right subtree. For summing up the modifiers along the
        // contour, we use respective variables si+, si-, so-, and so+. Whenever two
        // nodes of the inside contours conflict, we compute the left one of the
        // greatest uncommon ancestors using the function ANCESTOR and call MOVE
        // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
        // Finally, we add a new thread (if necessary).
        function apportion(v, w, ancestor) {
            if (w) {
                var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
                while(vim = nextRight(vim), vip = nextLeft(vip), vim && vip){
                    vom = nextLeft(vom);
                    vop = nextRight(vop);
                    vop.a = v;
                    shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                    if (shift > 0) {
                        moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                        sip += shift;
                        sop += shift;
                    }
                    sim += vim.m;
                    sip += vip.m;
                    som += vom.m;
                    sop += vop.m;
                }
                if (vim && !nextRight(vop)) {
                    vop.t = vim;
                    vop.m += sim - sop;
                }
                if (vip && !nextLeft(vom)) {
                    vom.t = vip;
                    vom.m += sip - som;
                    ancestor = v;
                }
            }
            return ancestor;
        }
        function sizeNode(node) {
            node.x *= dx;
            node.y = node.depth * dy;
        }
        tree.separation = function(x) {
            return arguments.length ? (separation = x, tree) : separation;
        };
        tree.size = function(x) {
            return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [
                dx,
                dy
            ];
        };
        tree.nodeSize = function(x) {
            return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [
                dx,
                dy
            ] : null;
        };
        return tree;
    }
    function treemapSlice(parent, x0, y0, x1, y1) {
        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
        while(++i < n){
            node = nodes[i], node.x0 = x0, node.x1 = x1;
            node.y0 = y0, node.y1 = y0 += node.value * k;
        }
    }
    var phi = (1 + Math.sqrt(5)) / 2;
    function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
        var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
        while(i0 < n){
            dx = x1 - x0, dy = y1 - y0;
            minValue = maxValue = sumValue = nodes[i0].value;
            alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
            beta = sumValue * sumValue * alpha;
            minRatio = Math.max(maxValue / beta, beta / minValue);
            // Keep adding nodes while the aspect ratio maintains or improves.
            for(i1 = i0 + 1; i1 < n; ++i1){
                sumValue += nodeValue = nodes[i1].value;
                if (nodeValue < minValue) minValue = nodeValue;
                if (nodeValue > maxValue) maxValue = nodeValue;
                beta = sumValue * sumValue * alpha;
                newRatio = Math.max(maxValue / beta, beta / minValue);
                if (newRatio > minRatio) {
                    sumValue -= nodeValue;
                    break;
                }
                minRatio = newRatio;
            }
            // Position and record the row orientation.
            rows.push(row = {
                value: sumValue,
                dice: dx < dy,
                children: nodes.slice(i0, i1)
            });
            if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
            else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
            value -= sumValue, i0 = i1;
        }
        return rows;
    }
    var squarify = function custom(ratio) {
        function squarify(parent, x0, y0, x1, y1) {
            squarifyRatio(ratio, parent, x0, y0, x1, y1);
        }
        squarify.ratio = function(x) {
            return custom((x = +x) > 1 ? x : 1);
        };
        return squarify;
    }(phi);
    function index$1() {
        var tile = squarify, round = false, dx = 1, dy = 1, paddingStack = [
            0
        ], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
        function treemap(root) {
            root.x0 = root.y0 = 0;
            root.x1 = dx;
            root.y1 = dy;
            root.eachBefore(positionNode);
            paddingStack = [
                0
            ];
            if (round) root.eachBefore(roundNode);
            return root;
        }
        function positionNode(node) {
            var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
            if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
            node.x0 = x0;
            node.y0 = y0;
            node.x1 = x1;
            node.y1 = y1;
            if (node.children) {
                p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
                x0 += paddingLeft(node) - p;
                y0 += paddingTop(node) - p;
                x1 -= paddingRight(node) - p;
                y1 -= paddingBottom(node) - p;
                if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
                if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
                tile(node, x0, y0, x1, y1);
            }
        }
        treemap.round = function(x) {
            return arguments.length ? (round = !!x, treemap) : round;
        };
        treemap.size = function(x) {
            return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [
                dx,
                dy
            ];
        };
        treemap.tile = function(x) {
            return arguments.length ? (tile = required(x), treemap) : tile;
        };
        treemap.padding = function(x) {
            return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
        };
        treemap.paddingInner = function(x) {
            return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$5(+x), treemap) : paddingInner;
        };
        treemap.paddingOuter = function(x) {
            return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
        };
        treemap.paddingTop = function(x) {
            return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$5(+x), treemap) : paddingTop;
        };
        treemap.paddingRight = function(x) {
            return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$5(+x), treemap) : paddingRight;
        };
        treemap.paddingBottom = function(x) {
            return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$5(+x), treemap) : paddingBottom;
        };
        treemap.paddingLeft = function(x) {
            return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$5(+x), treemap) : paddingLeft;
        };
        return treemap;
    }
    function binary(parent, x0, y0, x1, y1) {
        var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
        for(sums[0] = sum = i = 0; i < n; ++i){
            sums[i + 1] = sum += nodes[i].value;
        }
        partition(0, n, parent.value, x0, y0, x1, y1);
        function partition(i, j, value, x0, y0, x1, y1) {
            if (i >= j - 1) {
                var node = nodes[i];
                node.x0 = x0, node.y0 = y0;
                node.x1 = x1, node.y1 = y1;
                return;
            }
            var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
            while(k < hi){
                var mid = k + hi >>> 1;
                if (sums[mid] < valueTarget) k = mid + 1;
                else hi = mid;
            }
            var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
            if (y1 - y0 > x1 - x0) {
                var yk = (y0 * valueRight + y1 * valueLeft) / value;
                partition(i, k, valueLeft, x0, y0, x1, yk);
                partition(k, j, valueRight, x0, yk, x1, y1);
            } else {
                var xk = (x0 * valueRight + x1 * valueLeft) / value;
                partition(i, k, valueLeft, x0, y0, xk, y1);
                partition(k, j, valueRight, xk, y0, x1, y1);
            }
        }
    }
    function sliceDice(parent, x0, y0, x1, y1) {
        (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
    }
    var resquarify = function custom(ratio) {
        function resquarify(parent, x0, y0, x1, y1) {
            if ((rows = parent._squarify) && rows.ratio === ratio) {
                var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
                while(++j < m){
                    row = rows[j], nodes = row.children;
                    for(i = row.value = 0, n = nodes.length; i < n; ++i)row.value += nodes[i].value;
                    if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
                    else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
                    value -= row.value;
                }
            } else {
                parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
                rows.ratio = ratio;
            }
        }
        resquarify.ratio = function(x) {
            return custom((x = +x) > 1 ? x : 1);
        };
        return resquarify;
    }(phi);
    function center$1(x, y) {
        var nodes;
        if (x == null) x = 0;
        if (y == null) y = 0;
        function force() {
            var i, n = nodes.length, node, sx = 0, sy = 0;
            for(i = 0; i < n; ++i){
                node = nodes[i], sx += node.x, sy += node.y;
            }
            for(sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i){
                node = nodes[i], node.x -= sx, node.y -= sy;
            }
        }
        force.initialize = function(_) {
            nodes = _;
        };
        force.x = function(_) {
            return arguments.length ? (x = +_, force) : x;
        };
        force.y = function(_) {
            return arguments.length ? (y = +_, force) : y;
        };
        return force;
    }
    function constant$6(x) {
        return function() {
            return x;
        };
    }
    function jiggle() {
        return (Math.random() - 0.5) * 1e-6;
    }
    function x$1(d) {
        return d.x + d.vx;
    }
    function y$1(d) {
        return d.y + d.vy;
    }
    function collide(radius) {
        var nodes, radii, strength = 1, iterations = 1;
        if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);
        function force() {
            var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
            for(var k = 0; k < iterations; ++k){
                tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);
                for(i = 0; i < n; ++i){
                    node = nodes[i];
                    ri = radii[i], ri2 = ri * ri;
                    xi = node.x + node.vx;
                    yi = node.y + node.vy;
                    tree.visit(apply);
                }
            }
            function apply(quad, x0, y0, x1, y1) {
                var data = quad.data, rj = quad.r, r = ri + rj;
                if (data) {
                    if (data.index > i) {
                        var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;
                        if (l < r * r) {
                            if (x === 0) x = jiggle(), l += x * x;
                            if (y === 0) y = jiggle(), l += y * y;
                            l = (r - (l = Math.sqrt(l))) / l * strength;
                            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                            node.vy += (y *= l) * r;
                            data.vx -= x * (r = 1 - r);
                            data.vy -= y * r;
                        }
                    }
                    return;
                }
                return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
            }
        }
        function prepare(quad) {
            if (quad.data) return quad.r = radii[quad.data.index];
            for(var i = quad.r = 0; i < 4; ++i){
                if (quad[i] && quad[i].r > quad.r) {
                    quad.r = quad[i].r;
                }
            }
        }
        force.initialize = function(_) {
            var i, n = (nodes = _).length;
            radii = new Array(n);
            for(i = 0; i < n; ++i)radii[i] = +radius(nodes[i], i, nodes);
        };
        force.iterations = function(_) {
            return arguments.length ? (iterations = +_, force) : iterations;
        };
        force.strength = function(_) {
            return arguments.length ? (strength = +_, force) : strength;
        };
        force.radius = function(_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), force) : radius;
        };
        return force;
    }
    function index$2(d, i) {
        return i;
    }
    function link(links) {
        var id = index$2, strength = defaultStrength, strengths, distance = constant$6(30), distances, nodes, count, bias, iterations = 1;
        if (links == null) links = [];
        function defaultStrength(link) {
            return 1 / Math.min(count[link.source.index], count[link.target.index]);
        }
        function force(alpha) {
            for(var k = 0, n = links.length; k < iterations; ++k){
                for(var i = 0, link, source, target, x, y, l, b; i < n; ++i){
                    link = links[i], source = link.source, target = link.target;
                    x = target.x + target.vx - source.x - source.vx || jiggle();
                    y = target.y + target.vy - source.y - source.vy || jiggle();
                    l = Math.sqrt(x * x + y * y);
                    l = (l - distances[i]) / l * alpha * strengths[i];
                    x *= l, y *= l;
                    target.vx -= x * (b = bias[i]);
                    target.vy -= y * b;
                    source.vx += x * (b = 1 - b);
                    source.vy += y * b;
                }
            }
        }
        function initialize() {
            if (!nodes) return;
            var i, n = nodes.length, m = links.length, nodeById = map$1(nodes, id), link;
            for(i = 0, count = new Array(n); i < n; ++i){
                count[i] = 0;
            }
            for(i = 0; i < m; ++i){
                link = links[i], link.index = i;
                if (typeof link.source !== "object") link.source = nodeById.get(link.source);
                if (typeof link.target !== "object") link.target = nodeById.get(link.target);
                ++count[link.source.index], ++count[link.target.index];
            }
            for(i = 0, bias = new Array(m); i < m; ++i){
                link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
            }
            strengths = new Array(m), initializeStrength();
            distances = new Array(m), initializeDistance();
        }
        function initializeStrength() {
            if (!nodes) return;
            for(var i = 0, n = links.length; i < n; ++i){
                strengths[i] = +strength(links[i], i, links);
            }
        }
        function initializeDistance() {
            if (!nodes) return;
            for(var i = 0, n = links.length; i < n; ++i){
                distances[i] = +distance(links[i], i, links);
            }
        }
        force.initialize = function(_) {
            nodes = _;
            initialize();
        };
        force.links = function(_) {
            return arguments.length ? (links = _, initialize(), force) : links;
        };
        force.id = function(_) {
            return arguments.length ? (id = _, force) : id;
        };
        force.iterations = function(_) {
            return arguments.length ? (iterations = +_, force) : iterations;
        };
        force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
        };
        force.distance = function(_) {
            return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
        };
        return force;
    }
    function x$2(d) {
        return d.x;
    }
    function y$2(d) {
        return d.y;
    }
    var initialRadius = 10;
    var initialAngle = Math.PI * (3 - Math.sqrt(5));
    function simulation(nodes) {
        var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = map$1(), stepper = timer(step), event = dispatch("tick", "end");
        if (nodes == null) nodes = [];
        function step() {
            tick();
            event.call("tick", simulation);
            if (alpha < alphaMin) {
                stepper.stop();
                event.call("end", simulation);
            }
        }
        function tick() {
            var i, n = nodes.length, node;
            alpha += (alphaTarget - alpha) * alphaDecay;
            forces.each(function(force) {
                force(alpha);
            });
            for(i = 0; i < n; ++i){
                node = nodes[i];
                if (node.fx == null) node.x += node.vx *= velocityDecay;
                else node.x = node.fx, node.vx = 0;
                if (node.fy == null) node.y += node.vy *= velocityDecay;
                else node.y = node.fy, node.vy = 0;
            }
        }
        function initializeNodes() {
            for(var i = 0, n = nodes.length, node; i < n; ++i){
                node = nodes[i], node.index = i;
                if (isNaN(node.x) || isNaN(node.y)) {
                    var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
                    node.x = radius * Math.cos(angle);
                    node.y = radius * Math.sin(angle);
                }
                if (isNaN(node.vx) || isNaN(node.vy)) {
                    node.vx = node.vy = 0;
                }
            }
        }
        function initializeForce(force) {
            if (force.initialize) force.initialize(nodes);
            return force;
        }
        initializeNodes();
        return simulation = {
            tick: tick,
            restart: function() {
                return stepper.restart(step), simulation;
            },
            stop: function() {
                return stepper.stop(), simulation;
            },
            nodes: function(_) {
                return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
            },
            alpha: function(_) {
                return arguments.length ? (alpha = +_, simulation) : alpha;
            },
            alphaMin: function(_) {
                return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
            },
            alphaDecay: function(_) {
                return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
            },
            alphaTarget: function(_) {
                return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
            },
            velocityDecay: function(_) {
                return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
            },
            force: function(name, _) {
                return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
            },
            find: function(x, y, radius) {
                var i = 0, n = nodes.length, dx, dy, d2, node, closest;
                if (radius == null) radius = Infinity;
                else radius *= radius;
                for(i = 0; i < n; ++i){
                    node = nodes[i];
                    dx = x - node.x;
                    dy = y - node.y;
                    d2 = dx * dx + dy * dy;
                    if (d2 < radius) closest = node, radius = d2;
                }
                return closest;
            },
            on: function(name, _) {
                return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
            }
        };
    }
    function manyBody() {
        var nodes, node, alpha, strength = constant$6(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
        function force(_) {
            var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);
            for(alpha = _, i = 0; i < n; ++i)node = nodes[i], tree.visit(apply);
        }
        function initialize() {
            if (!nodes) return;
            var i, n = nodes.length;
            strengths = new Array(n);
            for(i = 0; i < n; ++i)strengths[i] = +strength(nodes[i], i, nodes);
        }
        function accumulate(quad) {
            var strength = 0, q, c, x, y, i;
            // For internal nodes, accumulate forces from child quadrants.
            if (quad.length) {
                for(x = y = i = 0; i < 4; ++i){
                    if ((q = quad[i]) && (c = q.value)) {
                        strength += c, x += c * q.x, y += c * q.y;
                    }
                }
                quad.x = x / strength;
                quad.y = y / strength;
            } else {
                q = quad;
                q.x = q.data.x;
                q.y = q.data.y;
                do strength += strengths[q.data.index];
                while (q = q.next)
            }
            quad.value = strength;
        }
        function apply(quad, x1, _, x2) {
            if (!quad.value) return true;
            var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;
            // Apply the Barnes-Hut approximation if possible.
            // Limit forces for very close nodes; randomize direction if coincident.
            if (w * w / theta2 < l) {
                if (l < distanceMax2) {
                    if (x === 0) x = jiggle(), l += x * x;
                    if (y === 0) y = jiggle(), l += y * y;
                    if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
                    node.vx += x * quad.value * alpha / l;
                    node.vy += y * quad.value * alpha / l;
                }
                return true;
            } else if (quad.length || l >= distanceMax2) return;
            // Limit forces for very close nodes; randomize direction if coincident.
            if (quad.data !== node || quad.next) {
                if (x === 0) x = jiggle(), l += x * x;
                if (y === 0) y = jiggle(), l += y * y;
                if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
            }
            do if (quad.data !== node) {
                w = strengths[quad.data.index] * alpha / l;
                node.vx += x * w;
                node.vy += y * w;
            }
            while (quad = quad.next)
        }
        force.initialize = function(_) {
            nodes = _;
            initialize();
        };
        force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
        };
        force.distanceMin = function(_) {
            return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
        };
        force.distanceMax = function(_) {
            return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
        };
        force.theta = function(_) {
            return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
        };
        return force;
    }
    function x$3(x) {
        var strength = constant$6(0.1), nodes, strengths, xz;
        if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);
        function force(alpha) {
            for(var i = 0, n = nodes.length, node; i < n; ++i){
                node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
            }
        }
        function initialize() {
            if (!nodes) return;
            var i, n = nodes.length;
            strengths = new Array(n);
            xz = new Array(n);
            for(i = 0; i < n; ++i){
                strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
            }
        }
        force.initialize = function(_) {
            nodes = _;
            initialize();
        };
        force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
        };
        force.x = function(_) {
            return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
        };
        return force;
    }
    function y$3(y) {
        var strength = constant$6(0.1), nodes, strengths, yz;
        if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);
        function force(alpha) {
            for(var i = 0, n = nodes.length, node; i < n; ++i){
                node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
            }
        }
        function initialize() {
            if (!nodes) return;
            var i, n = nodes.length;
            strengths = new Array(n);
            yz = new Array(n);
            for(i = 0; i < n; ++i){
                strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
            }
        }
        force.initialize = function(_) {
            nodes = _;
            initialize();
        };
        force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
        };
        force.y = function(_) {
            return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
        };
        return force;
    }
    function nopropagation() {
        exports1.event.stopImmediatePropagation();
    }
    function noevent() {
        exports1.event.preventDefault();
        exports1.event.stopImmediatePropagation();
    }
    function dragDisable(view) {
        var root = view.document.documentElement, selection = select(view).on("dragstart.drag", noevent, true);
        if ("onselectstart" in root) {
            selection.on("selectstart.drag", noevent, true);
        } else {
            root.__noselect = root.style.MozUserSelect;
            root.style.MozUserSelect = "none";
        }
    }
    function dragEnable(view, noclick) {
        var root = view.document.documentElement, selection = select(view).on("dragstart.drag", null);
        if (noclick) {
            selection.on("click.drag", noevent, true);
            setTimeout(function() {
                selection.on("click.drag", null);
            }, 0);
        }
        if ("onselectstart" in root) {
            selection.on("selectstart.drag", null);
        } else {
            root.style.MozUserSelect = root.__noselect;
            delete root.__noselect;
        }
    }
    function constant$7(x) {
        return function() {
            return x;
        };
    }
    function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
        this.target = target;
        this.type = type;
        this.subject = subject;
        this.identifier = id;
        this.active = active;
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
        this._ = dispatch;
    }
    DragEvent.prototype.on = function() {
        var value = this._.on.apply(this._, arguments);
        return value === this._ ? this : value;
    };
    // Ignore right-click, since that should open the context menu.
    function defaultFilter() {
        return !exports1.event.button;
    }
    function defaultContainer() {
        return this.parentNode;
    }
    function defaultSubject(d) {
        return d == null ? {
            x: exports1.event.x,
            y: exports1.event.y
        } : d;
    }
    function drag() {
        var filter = defaultFilter, container = defaultContainer, subject = defaultSubject, gestures = {}, listeners = dispatch("start", "drag", "end"), active = 0, mousemoving, touchending;
        function drag(selection) {
            selection.on("mousedown.drag", mousedowned).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
        }
        function mousedowned() {
            if (touchending || !filter.apply(this, arguments)) return;
            var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
            if (!gesture) return;
            select(exports1.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
            dragDisable(exports1.event.view);
            nopropagation();
            mousemoving = false;
            gesture("start");
        }
        function mousemoved() {
            noevent();
            mousemoving = true;
            gestures.mouse("drag");
        }
        function mouseupped() {
            select(exports1.event.view).on("mousemove.drag mouseup.drag", null);
            dragEnable(exports1.event.view, mousemoving);
            noevent();
            gestures.mouse("end");
        }
        function touchstarted() {
            if (!filter.apply(this, arguments)) return;
            var touches = exports1.event.changedTouches, c = container.apply(this, arguments), n = touches.length, i, gesture;
            for(i = 0; i < n; ++i){
                if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {
                    nopropagation();
                    gesture("start");
                }
            }
        }
        function touchmoved() {
            var touches = exports1.event.changedTouches, n = touches.length, i, gesture;
            for(i = 0; i < n; ++i){
                if (gesture = gestures[touches[i].identifier]) {
                    noevent();
                    gesture("drag");
                }
            }
        }
        function touchended() {
            var touches = exports1.event.changedTouches, n = touches.length, i, gesture;
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout(function() {
                touchending = null;
            }, 500); // Ghost clicks are delayed!
            for(i = 0; i < n; ++i){
                if (gesture = gestures[touches[i].identifier]) {
                    nopropagation();
                    gesture("end");
                }
            }
        }
        function beforestart(id, container, point, that, args) {
            var p = point(container, id), s, dx, dy, sublisteners = listeners.copy();
            if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
                if ((exports1.event.subject = s = subject.apply(that, args)) == null) return false;
                dx = s.x - p[0] || 0;
                dy = s.y - p[1] || 0;
                return true;
            })) return;
            return function gesture(type) {
                var p0 = p, n;
                switch(type){
                    case "start":
                        gestures[id] = gesture, n = active++;
                        break;
                    case "end":
                        delete gestures[id], --active; // nobreak
                    case "drag":
                        p = point(container, id), n = active;
                        break;
                }
                customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [
                    type,
                    that,
                    args
                ]);
            };
        }
        drag.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant$7(!!_), drag) : filter;
        };
        drag.container = function(_) {
            return arguments.length ? (container = typeof _ === "function" ? _ : constant$7(_), drag) : container;
        };
        drag.subject = function(_) {
            return arguments.length ? (subject = typeof _ === "function" ? _ : constant$7(_), drag) : subject;
        };
        drag.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? drag : value;
        };
        return drag;
    }
    function constant$8(x) {
        return function() {
            return x;
        };
    }
    function x$4(d) {
        return d[0];
    }
    function y$4(d) {
        return d[1];
    }
    function RedBlackTree() {
        this._ = null; // root node
    }
    function RedBlackNode(node) {
        node.U = node.C = node.L = node.R = node.P = node.N = null; // next node
    }
    RedBlackTree.prototype = {
        constructor: RedBlackTree,
        insert: function(after, node) {
            var parent, grandpa, uncle;
            if (after) {
                node.P = after;
                node.N = after.N;
                if (after.N) after.N.P = node;
                after.N = node;
                if (after.R) {
                    after = after.R;
                    while(after.L)after = after.L;
                    after.L = node;
                } else {
                    after.R = node;
                }
                parent = after;
            } else if (this._) {
                after = RedBlackFirst(this._);
                node.P = null;
                node.N = after;
                after.P = after.L = node;
                parent = after;
            } else {
                node.P = node.N = null;
                this._ = node;
                parent = null;
            }
            node.L = node.R = null;
            node.U = parent;
            node.C = true;
            after = node;
            while(parent && parent.C){
                grandpa = parent.U;
                if (parent === grandpa.L) {
                    uncle = grandpa.R;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa;
                    } else {
                        if (after === parent.R) {
                            RedBlackRotateLeft(this, parent);
                            after = parent;
                            parent = after.U;
                        }
                        parent.C = false;
                        grandpa.C = true;
                        RedBlackRotateRight(this, grandpa);
                    }
                } else {
                    uncle = grandpa.L;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa;
                    } else {
                        if (after === parent.L) {
                            RedBlackRotateRight(this, parent);
                            after = parent;
                            parent = after.U;
                        }
                        parent.C = false;
                        grandpa.C = true;
                        RedBlackRotateLeft(this, grandpa);
                    }
                }
                parent = after.U;
            }
            this._.C = false;
        },
        remove: function(node) {
            if (node.N) node.N.P = node.P;
            if (node.P) node.P.N = node.N;
            node.N = node.P = null;
            var parent = node.U, sibling, left = node.L, right = node.R, next, red;
            if (!left) next = right;
            else if (!right) next = left;
            else next = RedBlackFirst(right);
            if (parent) {
                if (parent.L === node) parent.L = next;
                else parent.R = next;
            } else {
                this._ = next;
            }
            if (left && right) {
                red = next.C;
                next.C = node.C;
                next.L = left;
                left.U = next;
                if (next !== right) {
                    parent = next.U;
                    next.U = node.U;
                    node = next.R;
                    parent.L = node;
                    next.R = right;
                    right.U = next;
                } else {
                    next.U = parent;
                    parent = next;
                    node = next.R;
                }
            } else {
                red = node.C;
                node = next;
            }
            if (node) node.U = parent;
            if (red) return;
            if (node && node.C) {
                node.C = false;
                return;
            }
            do {
                if (node === this._) break;
                if (node === parent.L) {
                    sibling = parent.R;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        RedBlackRotateLeft(this, parent);
                        sibling = parent.R;
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.R || !sibling.R.C) {
                            sibling.L.C = false;
                            sibling.C = true;
                            RedBlackRotateRight(this, sibling);
                            sibling = parent.R;
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.R.C = false;
                        RedBlackRotateLeft(this, parent);
                        node = this._;
                        break;
                    }
                } else {
                    sibling = parent.L;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        RedBlackRotateRight(this, parent);
                        sibling = parent.L;
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.L || !sibling.L.C) {
                            sibling.R.C = false;
                            sibling.C = true;
                            RedBlackRotateLeft(this, sibling);
                            sibling = parent.L;
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.L.C = false;
                        RedBlackRotateRight(this, parent);
                        node = this._;
                        break;
                    }
                }
                sibling.C = true;
                node = parent;
                parent = parent.U;
            }while (!node.C)
            if (node) node.C = false;
        }
    };
    function RedBlackRotateLeft(tree, node) {
        var p = node, q = node.R, parent = p.U;
        if (parent) {
            if (parent.L === p) parent.L = q;
            else parent.R = q;
        } else {
            tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.R = q.L;
        if (p.R) p.R.U = p;
        q.L = p;
    }
    function RedBlackRotateRight(tree, node) {
        var p = node, q = node.L, parent = p.U;
        if (parent) {
            if (parent.L === p) parent.L = q;
            else parent.R = q;
        } else {
            tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.L = q.R;
        if (p.L) p.L.U = p;
        q.R = p;
    }
    function RedBlackFirst(node) {
        while(node.L)node = node.L;
        return node;
    }
    function createEdge(left, right, v0, v1) {
        var edge = [
            null,
            null
        ], index = edges.push(edge) - 1;
        edge.left = left;
        edge.right = right;
        if (v0) setEdgeEnd(edge, left, right, v0);
        if (v1) setEdgeEnd(edge, right, left, v1);
        cells[left.index].halfedges.push(index);
        cells[right.index].halfedges.push(index);
        return edge;
    }
    function createBorderEdge(left, v0, v1) {
        var edge = [
            v0,
            v1
        ];
        edge.left = left;
        return edge;
    }
    function setEdgeEnd(edge, left, right, vertex) {
        if (!edge[0] && !edge[1]) {
            edge[0] = vertex;
            edge.left = left;
            edge.right = right;
        } else if (edge.left === right) {
            edge[1] = vertex;
        } else {
            edge[0] = vertex;
        }
    }
    // Liang–Barsky line clipping.
    function clipEdge(edge, x0, y0, x1, y1) {
        var a = edge[0], b = edge[1], ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
        r = x0 - ax;
        if (!dx && r > 0) return;
        r /= dx;
        if (dx < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dx > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = x1 - ax;
        if (!dx && r < 0) return;
        r /= dx;
        if (dx < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dx > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        r = y0 - ay;
        if (!dy && r > 0) return;
        r /= dy;
        if (dy < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dy > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = y1 - ay;
        if (!dy && r < 0) return;
        r /= dy;
        if (dy < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dy > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?
        if (t0 > 0) edge[0] = [
            ax + t0 * dx,
            ay + t0 * dy
        ];
        if (t1 < 1) edge[1] = [
            ax + t1 * dx,
            ay + t1 * dy
        ];
        return true;
    }
    function connectEdge(edge, x0, y0, x1, y1) {
        var v1 = edge[1];
        if (v1) return true;
        var v0 = edge[0], left = edge.left, right = edge.right, lx = left[0], ly = left[1], rx = right[0], ry = right[1], fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
        if (ry === ly) {
            if (fx < x0 || fx >= x1) return;
            if (lx > rx) {
                if (!v0) v0 = [
                    fx,
                    y0
                ];
                else if (v0[1] >= y1) return;
                v1 = [
                    fx,
                    y1
                ];
            } else {
                if (!v0) v0 = [
                    fx,
                    y1
                ];
                else if (v0[1] < y0) return;
                v1 = [
                    fx,
                    y0
                ];
            }
        } else {
            fm = (lx - rx) / (ry - ly);
            fb = fy - fm * fx;
            if (fm < -1 || fm > 1) {
                if (lx > rx) {
                    if (!v0) v0 = [
                        (y0 - fb) / fm,
                        y0
                    ];
                    else if (v0[1] >= y1) return;
                    v1 = [
                        (y1 - fb) / fm,
                        y1
                    ];
                } else {
                    if (!v0) v0 = [
                        (y1 - fb) / fm,
                        y1
                    ];
                    else if (v0[1] < y0) return;
                    v1 = [
                        (y0 - fb) / fm,
                        y0
                    ];
                }
            } else {
                if (ly < ry) {
                    if (!v0) v0 = [
                        x0,
                        fm * x0 + fb
                    ];
                    else if (v0[0] >= x1) return;
                    v1 = [
                        x1,
                        fm * x1 + fb
                    ];
                } else {
                    if (!v0) v0 = [
                        x1,
                        fm * x1 + fb
                    ];
                    else if (v0[0] < x0) return;
                    v1 = [
                        x0,
                        fm * x0 + fb
                    ];
                }
            }
        }
        edge[0] = v0;
        edge[1] = v1;
        return true;
    }
    function clipEdges(x0, y0, x1, y1) {
        var i = edges.length, edge;
        while(i--){
            if (!connectEdge(edge = edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3 || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {
                delete edges[i];
            }
        }
    }
    function createCell(site) {
        return cells[site.index] = {
            site: site,
            halfedges: []
        };
    }
    function cellHalfedgeAngle(cell, edge) {
        var site = cell.site, va = edge.left, vb = edge.right;
        if (site === vb) vb = va, va = site;
        if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
        if (site === va) va = edge[1], vb = edge[0];
        else va = edge[0], vb = edge[1];
        return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
    }
    function cellHalfedgeStart(cell, edge) {
        return edge[+(edge.left !== cell.site)];
    }
    function cellHalfedgeEnd(cell, edge) {
        return edge[+(edge.left === cell.site)];
    }
    function sortCellHalfedges() {
        for(var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i){
            if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
                var index = new Array(m), array = new Array(m);
                for(j = 0; j < m; ++j)index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
                index.sort(function(i, j) {
                    return array[j] - array[i];
                });
                for(j = 0; j < m; ++j)array[j] = halfedges[index[j]];
                for(j = 0; j < m; ++j)halfedges[j] = array[j];
            }
        }
    }
    function clipCells(x0, y0, x1, y1) {
        var nCells = cells.length, iCell, cell, site, iHalfedge, halfedges, nHalfedges, start, startX, startY, end, endX, endY, cover = true;
        for(iCell = 0; iCell < nCells; ++iCell){
            if (cell = cells[iCell]) {
                site = cell.site;
                halfedges = cell.halfedges;
                iHalfedge = halfedges.length;
                // Remove any dangling clipped edges.
                while(iHalfedge--){
                    if (!edges[halfedges[iHalfedge]]) {
                        halfedges.splice(iHalfedge, 1);
                    }
                }
                // Insert any border edges as necessary.
                iHalfedge = 0, nHalfedges = halfedges.length;
                while(iHalfedge < nHalfedges){
                    end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
                    start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
                    if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {
                        halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [
                            x0,
                            Math.abs(startX - x0) < epsilon$3 ? startY : y1
                        ] : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [
                            Math.abs(startY - y1) < epsilon$3 ? startX : x1,
                            y1
                        ] : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [
                            x1,
                            Math.abs(startX - x1) < epsilon$3 ? startY : y0
                        ] : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [
                            Math.abs(startY - y0) < epsilon$3 ? startX : x0,
                            y0
                        ] : null)) - 1);
                        ++nHalfedges;
                    }
                }
                if (nHalfedges) cover = false;
            }
        }
        // If there weren’t any edges, have the closest site cover the extent.
        // It doesn’t matter which corner of the extent we measure!
        if (cover) {
            var dx, dy, d2, dc = Infinity;
            for(iCell = 0, cover = null; iCell < nCells; ++iCell){
                if (cell = cells[iCell]) {
                    site = cell.site;
                    dx = site[0] - x0;
                    dy = site[1] - y0;
                    d2 = dx * dx + dy * dy;
                    if (d2 < dc) dc = d2, cover = cell;
                }
            }
            if (cover) {
                var v00 = [
                    x0,
                    y0
                ], v01 = [
                    x0,
                    y1
                ], v11 = [
                    x1,
                    y1
                ], v10 = [
                    x1,
                    y0
                ];
                cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1);
            }
        }
        // Lastly delete any cells with no edges; these were entirely clipped.
        for(iCell = 0; iCell < nCells; ++iCell){
            if (cell = cells[iCell]) {
                if (!cell.halfedges.length) {
                    delete cells[iCell];
                }
            }
        }
    }
    var circlePool = [];
    var firstCircle;
    function Circle() {
        RedBlackNode(this);
        this.x = this.y = this.arc = this.site = this.cy = null;
    }
    function attachCircle(arc) {
        var lArc = arc.P, rArc = arc.N;
        if (!lArc || !rArc) return;
        var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
        if (lSite === rSite) return;
        var bx = cSite[0], by = cSite[1], ax = lSite[0] - bx, ay = lSite[1] - by, cx = rSite[0] - bx, cy = rSite[1] - by;
        var d = 2 * (ax * cy - ay * cx);
        if (d >= -epsilon2$1) return;
        var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d;
        var circle = circlePool.pop() || new Circle;
        circle.arc = arc;
        circle.site = cSite;
        circle.x = x + bx;
        circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom
        arc.circle = circle;
        var before = null, node = circles._;
        while(node){
            if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
                if (node.L) node = node.L;
                else {
                    before = node.P;
                    break;
                }
            } else {
                if (node.R) node = node.R;
                else {
                    before = node;
                    break;
                }
            }
        }
        circles.insert(before, circle);
        if (!before) firstCircle = circle;
    }
    function detachCircle(arc) {
        var circle = arc.circle;
        if (circle) {
            if (!circle.P) firstCircle = circle.N;
            circles.remove(circle);
            circlePool.push(circle);
            RedBlackNode(circle);
            arc.circle = null;
        }
    }
    var beachPool = [];
    function Beach() {
        RedBlackNode(this);
        this.edge = this.site = this.circle = null;
    }
    function createBeach(site) {
        var beach = beachPool.pop() || new Beach;
        beach.site = site;
        return beach;
    }
    function detachBeach(beach) {
        detachCircle(beach);
        beaches.remove(beach);
        beachPool.push(beach);
        RedBlackNode(beach);
    }
    function removeBeach(beach) {
        var circle = beach.circle, x = circle.x, y = circle.cy, vertex = [
            x,
            y
        ], previous = beach.P, next = beach.N, disappearing = [
            beach
        ];
        detachBeach(beach);
        var lArc = previous;
        while(lArc.circle && Math.abs(x - lArc.circle.x) < epsilon$3 && Math.abs(y - lArc.circle.cy) < epsilon$3){
            previous = lArc.P;
            disappearing.unshift(lArc);
            detachBeach(lArc);
            lArc = previous;
        }
        disappearing.unshift(lArc);
        detachCircle(lArc);
        var rArc = next;
        while(rArc.circle && Math.abs(x - rArc.circle.x) < epsilon$3 && Math.abs(y - rArc.circle.cy) < epsilon$3){
            next = rArc.N;
            disappearing.push(rArc);
            detachBeach(rArc);
            rArc = next;
        }
        disappearing.push(rArc);
        detachCircle(rArc);
        var nArcs = disappearing.length, iArc;
        for(iArc = 1; iArc < nArcs; ++iArc){
            rArc = disappearing[iArc];
            lArc = disappearing[iArc - 1];
            setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
        }
        lArc = disappearing[0];
        rArc = disappearing[nArcs - 1];
        rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
        attachCircle(lArc);
        attachCircle(rArc);
    }
    function addBeach(site) {
        var x = site[0], directrix = site[1], lArc, rArc, dxl, dxr, node = beaches._;
        while(node){
            dxl = leftBreakPoint(node, directrix) - x;
            if (dxl > epsilon$3) node = node.L;
            else {
                dxr = x - rightBreakPoint(node, directrix);
                if (dxr > epsilon$3) {
                    if (!node.R) {
                        lArc = node;
                        break;
                    }
                    node = node.R;
                } else {
                    if (dxl > -epsilon$3) {
                        lArc = node.P;
                        rArc = node;
                    } else if (dxr > -epsilon$3) {
                        lArc = node;
                        rArc = node.N;
                    } else {
                        lArc = rArc = node;
                    }
                    break;
                }
            }
        }
        createCell(site);
        var newArc = createBeach(site);
        beaches.insert(lArc, newArc);
        if (!lArc && !rArc) return;
        if (lArc === rArc) {
            detachCircle(lArc);
            rArc = createBeach(lArc.site);
            beaches.insert(newArc, rArc);
            newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
            attachCircle(lArc);
            attachCircle(rArc);
            return;
        }
        if (!rArc) {
            newArc.edge = createEdge(lArc.site, newArc.site);
            return;
        }
        // else lArc !== rArc
        detachCircle(lArc);
        detachCircle(rArc);
        var lSite = lArc.site, ax = lSite[0], ay = lSite[1], bx = site[0] - ax, by = site[1] - ay, rSite = rArc.site, cx = rSite[0] - ax, cy = rSite[1] - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = [
            (cy * hb - by * hc) / d + ax,
            (bx * hc - cx * hb) / d + ay
        ];
        setEdgeEnd(rArc.edge, lSite, rSite, vertex);
        newArc.edge = createEdge(lSite, site, null, vertex);
        rArc.edge = createEdge(site, rSite, null, vertex);
        attachCircle(lArc);
        attachCircle(rArc);
    }
    function leftBreakPoint(arc, directrix) {
        var site = arc.site, rfocx = site[0], rfocy = site[1], pby2 = rfocy - directrix;
        if (!pby2) return rfocx;
        var lArc = arc.P;
        if (!lArc) return -Infinity;
        site = lArc.site;
        var lfocx = site[0], lfocy = site[1], plby2 = lfocy - directrix;
        if (!plby2) return lfocx;
        var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
        if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
        return (rfocx + lfocx) / 2;
    }
    function rightBreakPoint(arc, directrix) {
        var rArc = arc.N;
        if (rArc) return leftBreakPoint(rArc, directrix);
        var site = arc.site;
        return site[1] === directrix ? site[0] : Infinity;
    }
    var epsilon$3 = 1e-6;
    var epsilon2$1 = 1e-12;
    var beaches;
    var cells;
    var circles;
    var edges;
    function triangleArea(a, b, c) {
        return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
    }
    function lexicographic(a, b) {
        return b[1] - a[1] || b[0] - a[0];
    }
    function Diagram(sites, extent) {
        var site = sites.sort(lexicographic).pop(), x, y, circle;
        edges = [];
        cells = new Array(sites.length);
        beaches = new RedBlackTree;
        circles = new RedBlackTree;
        while(true){
            circle = firstCircle;
            if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
                if (site[0] !== x || site[1] !== y) {
                    addBeach(site);
                    x = site[0], y = site[1];
                }
                site = sites.pop();
            } else if (circle) {
                removeBeach(circle.arc);
            } else {
                break;
            }
        }
        sortCellHalfedges();
        if (extent) {
            var x0 = +extent[0][0], y0 = +extent[0][1], x1 = +extent[1][0], y1 = +extent[1][1];
            clipEdges(x0, y0, x1, y1);
            clipCells(x0, y0, x1, y1);
        }
        this.edges = edges;
        this.cells = cells;
        beaches = circles = edges = cells = null;
    }
    Diagram.prototype = {
        constructor: Diagram,
        polygons: function() {
            var edges = this.edges;
            return this.cells.map(function(cell) {
                var polygon = cell.halfedges.map(function(i) {
                    return cellHalfedgeStart(cell, edges[i]);
                });
                polygon.data = cell.site.data;
                return polygon;
            });
        },
        triangles: function() {
            var triangles = [], edges = this.edges;
            this.cells.forEach(function(cell, i) {
                var site = cell.site, halfedges = cell.halfedges, j = -1, m = halfedges.length, s0, e1 = edges[halfedges[m - 1]], s1 = e1.left === site ? e1.right : e1.left;
                while(++j < m){
                    s0 = s1;
                    e1 = edges[halfedges[j]];
                    s1 = e1.left === site ? e1.right : e1.left;
                    if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
                        triangles.push([
                            site.data,
                            s0.data,
                            s1.data
                        ]);
                    }
                }
            });
            return triangles;
        },
        links: function() {
            return this.edges.filter(function(edge) {
                return edge.right;
            }).map(function(edge) {
                return {
                    source: edge.left.data,
                    target: edge.right.data
                };
            });
        }
    };
    function voronoi() {
        var x = x$4, y = y$4, extent = null;
        function voronoi(data) {
            return new Diagram(data.map(function(d, i) {
                var s = [
                    Math.round(x(d, i, data) / epsilon$3) * epsilon$3,
                    Math.round(y(d, i, data) / epsilon$3) * epsilon$3
                ];
                s.index = i;
                s.data = d;
                return s;
            }), extent);
        }
        voronoi.polygons = function(data) {
            return voronoi(data).polygons();
        };
        voronoi.links = function(data) {
            return voronoi(data).links();
        };
        voronoi.triangles = function(data) {
            return voronoi(data).triangles();
        };
        voronoi.x = function(_) {
            return arguments.length ? (x = typeof _ === "function" ? _ : constant$8(+_), voronoi) : x;
        };
        voronoi.y = function(_) {
            return arguments.length ? (y = typeof _ === "function" ? _ : constant$8(+_), voronoi) : y;
        };
        voronoi.extent = function(_) {
            return arguments.length ? (extent = _ == null ? null : [
                [
                    +_[0][0],
                    +_[0][1]
                ],
                [
                    +_[1][0],
                    +_[1][1]
                ]
            ], voronoi) : extent && [
                [
                    extent[0][0],
                    extent[0][1]
                ],
                [
                    extent[1][0],
                    extent[1][1]
                ]
            ];
        };
        voronoi.size = function(_) {
            return arguments.length ? (extent = _ == null ? null : [
                [
                    0,
                    0
                ],
                [
                    +_[0],
                    +_[1]
                ]
            ], voronoi) : extent && [
                extent[1][0] - extent[0][0],
                extent[1][1] - extent[0][1]
            ];
        };
        return voronoi;
    }
    function constant$9(x) {
        return function() {
            return x;
        };
    }
    function ZoomEvent(target, type, transform) {
        this.target = target;
        this.type = type;
        this.transform = transform;
    }
    function Transform(k, x, y) {
        this.k = k;
        this.x = x;
        this.y = y;
    }
    Transform.prototype = {
        constructor: Transform,
        scale: function(k) {
            return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
        },
        translate: function(x, y) {
            return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
        },
        apply: function(point) {
            return [
                point[0] * this.k + this.x,
                point[1] * this.k + this.y
            ];
        },
        applyX: function(x) {
            return x * this.k + this.x;
        },
        applyY: function(y) {
            return y * this.k + this.y;
        },
        invert: function(location) {
            return [
                (location[0] - this.x) / this.k,
                (location[1] - this.y) / this.k
            ];
        },
        invertX: function(x) {
            return (x - this.x) / this.k;
        },
        invertY: function(y) {
            return (y - this.y) / this.k;
        },
        rescaleX: function(x) {
            return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
        },
        rescaleY: function(y) {
            return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
        },
        toString: function() {
            return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
        }
    };
    var identity$6 = new Transform(1, 0, 0);
    transform.prototype = Transform.prototype;
    function transform(node) {
        return node.__zoom || identity$6;
    }
    function nopropagation$1() {
        exports1.event.stopImmediatePropagation();
    }
    function noevent$1() {
        exports1.event.preventDefault();
        exports1.event.stopImmediatePropagation();
    }
    // Ignore right-click, since that should open the context menu.
    function defaultFilter$1() {
        return !exports1.event.button;
    }
    function defaultExtent() {
        var e = this, w, h;
        if (e instanceof SVGElement) {
            e = e.ownerSVGElement || e;
            w = e.width.baseVal.value;
            h = e.height.baseVal.value;
        } else {
            w = e.clientWidth;
            h = e.clientHeight;
        }
        return [
            [
                0,
                0
            ],
            [
                w,
                h
            ]
        ];
    }
    function defaultTransform() {
        return this.__zoom || identity$6;
    }
    function zoom() {
        var filter = defaultFilter$1, extent = defaultExtent, k0 = 0, k1 = Infinity, x0 = -k1, x1 = k1, y0 = x0, y1 = x1, duration = 250, gestures = [], listeners = dispatch("start", "zoom", "end"), touchstarting, touchending, touchDelay = 500, wheelDelay = 150;
        function zoom(selection) {
            selection.on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").property("__zoom", defaultTransform);
        }
        zoom.transform = function(collection, transform) {
            var selection = collection.selection ? collection.selection() : collection;
            selection.property("__zoom", defaultTransform);
            if (collection !== selection) {
                schedule(collection, transform);
            } else {
                selection.interrupt().each(function() {
                    gesture(this, arguments).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
                });
            }
        };
        zoom.scaleBy = function(selection, k) {
            zoom.scaleTo(selection, function() {
                var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return k0 * k1;
            });
        };
        zoom.scaleTo = function(selection, k) {
            zoom.transform(selection, function() {
                var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = centroid(e), p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return constrain(translate(scale(t0, k1), p0, p1), e);
            });
        };
        zoom.translateBy = function(selection, x, y) {
            zoom.transform(selection, function() {
                return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments));
            });
        };
        function scale(transform, k) {
            k = Math.max(k0, Math.min(k1, k));
            return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
        }
        function translate(transform, p0, p1) {
            var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
            return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
        }
        function constrain(transform, extent) {
            var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1), dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);
            return dx || dy ? transform.translate(dx, dy) : transform;
        }
        function centroid(extent) {
            return [
                (+extent[0][0] + +extent[1][0]) / 2,
                (+extent[0][1] + +extent[1][1]) / 2
            ];
        }
        function schedule(transition, transform, center) {
            transition.on("start.zoom", function() {
                gesture(this, arguments).start();
            }).on("interrupt.zoom end.zoom", function() {
                gesture(this, arguments).end();
            }).tween("zoom", function() {
                var that = this, args = arguments, g = gesture(that, args), e = extent.apply(that, args), p = center || centroid(e), w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === "function" ? transform.apply(that, args) : transform, i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
                return function(t) {
                    if (t === 1) t = b; // Avoid rounding error on end.
                    else {
                        var l = i(t), k = w / l[2];
                        t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
                    }
                    g.zoom(null, t);
                };
            });
        }
        function gesture(that, args) {
            for(var i = 0, n = gestures.length, g; i < n; ++i){
                if ((g = gestures[i]).that === that) {
                    return g;
                }
            }
            return new Gesture(that, args);
        }
        function Gesture(that, args) {
            this.that = that;
            this.args = args;
            this.index = -1;
            this.active = 0;
            this.extent = extent.apply(that, args);
        }
        Gesture.prototype = {
            start: function() {
                if (++this.active === 1) {
                    this.index = gestures.push(this) - 1;
                    this.emit("start");
                }
                return this;
            },
            zoom: function(key, transform) {
                if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
                if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
                if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
                this.that.__zoom = transform;
                this.emit("zoom");
                return this;
            },
            end: function() {
                if (--this.active === 0) {
                    gestures.splice(this.index, 1);
                    this.index = -1;
                    this.emit("end");
                }
                return this;
            },
            emit: function(type) {
                customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [
                    type,
                    this.that,
                    this.args
                ]);
            }
        };
        function wheeled() {
            if (!filter.apply(this, arguments)) return;
            var g = gesture(this, arguments), t = this.__zoom, k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports1.event.deltaY * (exports1.event.deltaMode ? 120 : 1) / 500))), p = mouse(this);
            // If the mouse is in the same location as before, reuse it.
            // If there were recent wheel events, reset the wheel idle timeout.
            if (g.wheel) {
                if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
                    g.mouse[1] = t.invert(g.mouse[0] = p);
                }
                clearTimeout(g.wheel);
            } else if (t.k === k) return;
            else {
                g.mouse = [
                    p,
                    t.invert(p)
                ];
                interrupt(this);
                g.start();
            }
            noevent$1();
            g.wheel = setTimeout(wheelidled, wheelDelay);
            g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));
            function wheelidled() {
                g.wheel = null;
                g.end();
            }
        }
        function mousedowned() {
            if (touchending || !filter.apply(this, arguments)) return;
            var g = gesture(this, arguments), v = select(exports1.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = mouse(this);
            dragDisable(exports1.event.view);
            nopropagation$1();
            g.mouse = [
                p,
                this.__zoom.invert(p)
            ];
            interrupt(this);
            g.start();
            function mousemoved() {
                noevent$1();
                g.moved = true;
                g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
            }
            function mouseupped() {
                v.on("mousemove.zoom mouseup.zoom", null);
                dragEnable(exports1.event.view, g.moved);
                noevent$1();
                g.end();
            }
        }
        function dblclicked() {
            if (!filter.apply(this, arguments)) return;
            var t0 = this.__zoom, p0 = mouse(this), p1 = t0.invert(p0), k1 = t0.k * (exports1.event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));
            noevent$1();
            if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
            else select(this).call(zoom.transform, t1);
        }
        function touchstarted() {
            if (!filter.apply(this, arguments)) return;
            var g = gesture(this, arguments), touches = exports1.event.changedTouches, n = touches.length, i, t, p;
            nopropagation$1();
            for(i = 0; i < n; ++i){
                t = touches[i], p = touch(this, touches, t.identifier);
                p = [
                    p,
                    this.__zoom.invert(p),
                    t.identifier
                ];
                if (!g.touch0) g.touch0 = p;
                else if (!g.touch1) g.touch1 = p;
            }
            if (touchstarting) {
                touchstarting = clearTimeout(touchstarting);
                if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);
            }
            if (exports1.event.touches.length === n) {
                touchstarting = setTimeout(function() {
                    touchstarting = null;
                }, touchDelay);
                interrupt(this);
                g.start();
            }
        }
        function touchmoved() {
            var g = gesture(this, arguments), touches = exports1.event.changedTouches, n = touches.length, i, t, p, l;
            noevent$1();
            if (touchstarting) touchstarting = clearTimeout(touchstarting);
            for(i = 0; i < n; ++i){
                t = touches[i], p = touch(this, touches, t.identifier);
                if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
                else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
            }
            t = g.that.__zoom;
            if (g.touch1) {
                var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
                t = scale(t, Math.sqrt(dp / dl));
                p = [
                    (p0[0] + p1[0]) / 2,
                    (p0[1] + p1[1]) / 2
                ];
                l = [
                    (l0[0] + l1[0]) / 2,
                    (l0[1] + l1[1]) / 2
                ];
            } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
            else return;
            g.zoom("touch", constrain(translate(t, p, l), g.extent));
        }
        function touchended() {
            var g = gesture(this, arguments), touches = exports1.event.changedTouches, n = touches.length, i, t;
            nopropagation$1();
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout(function() {
                touchending = null;
            }, touchDelay);
            for(i = 0; i < n; ++i){
                t = touches[i];
                if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
                else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
            }
            if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
            if (!g.touch0) g.end();
        }
        zoom.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant$9(!!_), zoom) : filter;
        };
        zoom.extent = function(_) {
            return arguments.length ? (extent = typeof _ === "function" ? _ : constant$9([
                [
                    +_[0][0],
                    +_[0][1]
                ],
                [
                    +_[1][0],
                    +_[1][1]
                ]
            ]), zoom) : extent;
        };
        zoom.scaleExtent = function(_) {
            return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [
                k0,
                k1
            ];
        };
        zoom.translateExtent = function(_) {
            return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [
                [
                    x0,
                    y0
                ],
                [
                    x1,
                    y1
                ]
            ];
        };
        zoom.duration = function(_) {
            return arguments.length ? (duration = +_, zoom) : duration;
        };
        zoom.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? zoom : value;
        };
        return zoom;
    }
    function constant$10(x) {
        return function() {
            return x;
        };
    }
    function BrushEvent(target, type, selection) {
        this.target = target;
        this.type = type;
        this.selection = selection;
    }
    function nopropagation$2() {
        exports1.event.stopImmediatePropagation();
    }
    function noevent$2() {
        exports1.event.preventDefault();
        exports1.event.stopImmediatePropagation();
    }
    var MODE_DRAG = {
        name: "drag"
    };
    var MODE_SPACE = {
        name: "space"
    };
    var MODE_HANDLE = {
        name: "handle"
    };
    var MODE_CENTER = {
        name: "center"
    };
    var X = {
        name: "x",
        handles: [
            "e",
            "w"
        ].map(type$1),
        input: function(x, e) {
            return x && [
                [
                    x[0],
                    e[0][1]
                ],
                [
                    x[1],
                    e[1][1]
                ]
            ];
        },
        output: function(xy) {
            return xy && [
                xy[0][0],
                xy[1][0]
            ];
        }
    };
    var Y = {
        name: "y",
        handles: [
            "n",
            "s"
        ].map(type$1),
        input: function(y, e) {
            return y && [
                [
                    e[0][0],
                    y[0]
                ],
                [
                    e[1][0],
                    y[1]
                ]
            ];
        },
        output: function(xy) {
            return xy && [
                xy[0][1],
                xy[1][1]
            ];
        }
    };
    var XY = {
        name: "xy",
        handles: [
            "n",
            "e",
            "s",
            "w",
            "nw",
            "ne",
            "se",
            "sw"
        ].map(type$1),
        input: function(xy) {
            return xy;
        },
        output: function(xy) {
            return xy;
        }
    };
    var cursors = {
        overlay: "crosshair",
        selection: "move",
        n: "ns-resize",
        e: "ew-resize",
        s: "ns-resize",
        w: "ew-resize",
        nw: "nwse-resize",
        ne: "nesw-resize",
        se: "nwse-resize",
        sw: "nesw-resize"
    };
    var flipX = {
        e: "w",
        w: "e",
        nw: "ne",
        ne: "nw",
        se: "sw",
        sw: "se"
    };
    var flipY = {
        n: "s",
        s: "n",
        nw: "sw",
        ne: "se",
        se: "ne",
        sw: "nw"
    };
    var signsX = {
        overlay: +1,
        selection: +1,
        n: null,
        e: +1,
        s: null,
        w: -1,
        nw: -1,
        ne: +1,
        se: +1,
        sw: -1
    };
    var signsY = {
        overlay: +1,
        selection: +1,
        n: -1,
        e: null,
        s: +1,
        w: null,
        nw: -1,
        ne: -1,
        se: +1,
        sw: +1
    };
    function type$1(t) {
        return {
            type: t
        };
    }
    // Ignore right-click, since that should open the context menu.
    function defaultFilter$2() {
        return !exports1.event.button;
    }
    function defaultExtent$1() {
        var svg = this.ownerSVGElement || this;
        return [
            [
                0,
                0
            ],
            [
                svg.width.baseVal.value,
                svg.height.baseVal.value
            ]
        ];
    }
    // Like d3.local, but with the name “__brush” rather than auto-generated.
    function local$1(node) {
        while(!node.__brush)if (!(node = node.parentNode)) return;
        return node.__brush;
    }
    function empty$1(extent) {
        return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
    }
    function brushSelection(node) {
        var state = node.__brush;
        return state ? state.dim.output(state.selection) : null;
    }
    function brushX() {
        return brush$1(X);
    }
    function brushY() {
        return brush$1(Y);
    }
    function brush() {
        return brush$1(XY);
    }
    function brush$1(dim) {
        var extent = defaultExtent$1, filter = defaultFilter$2, listeners = dispatch(brush, "start", "brush", "end"), handleSize = 6, touchending;
        function brush(group) {
            var overlay = group.property("__brush", initialize).selectAll(".overlay").data([
                type$1("overlay")
            ]);
            overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
                var extent = local$1(this).extent;
                select(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
            });
            group.selectAll(".selection").data([
                type$1("selection")
            ]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
            var handle = group.selectAll(".handle").data(dim.handles, function(d) {
                return d.type;
            });
            handle.exit().remove();
            handle.enter().append("rect").attr("class", function(d) {
                return "handle handle--" + d.type;
            }).attr("cursor", function(d) {
                return cursors[d.type];
            });
            group.each(redraw).attr("fill", "none").attr("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush touchstart.brush", started);
        }
        brush.move = function(group, selection) {
            if (group.selection) {
                group.on("start.brush", function() {
                    emitter(this, arguments).beforestart().start();
                }).on("interrupt.brush end.brush", function() {
                    emitter(this, arguments).end();
                }).tween("brush", function() {
                    var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent), i = interpolate(selection0, selection1);
                    function tween(t) {
                        state.selection = t === 1 && empty$1(selection1) ? null : i(t);
                        redraw.call(that);
                        emit.brush();
                    }
                    return selection0 && selection1 ? tween : tween(1);
                });
            } else {
                group.each(function() {
                    var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent), emit = emitter(that, args).beforestart();
                    interrupt(that);
                    state.selection = selection1 == null || empty$1(selection1) ? null : selection1;
                    redraw.call(that);
                    emit.start().brush().end();
                });
            }
        };
        function redraw() {
            var group = select(this), selection = local$1(this).selection;
            if (selection) {
                group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
                group.selectAll(".handle").style("display", null).attr("x", function(d) {
                    return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
                }).attr("y", function(d) {
                    return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
                }).attr("width", function(d) {
                    return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
                }).attr("height", function(d) {
                    return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
                });
            } else {
                group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
            }
        }
        function emitter(that, args) {
            return that.__brush.emitter || new Emitter(that, args);
        }
        function Emitter(that, args) {
            this.that = that;
            this.args = args;
            this.state = that.__brush;
            this.active = 0;
        }
        Emitter.prototype = {
            beforestart: function() {
                if (++this.active === 1) this.state.emitter = this, this.starting = true;
                return this;
            },
            start: function() {
                if (this.starting) this.starting = false, this.emit("start");
                return this;
            },
            brush: function() {
                this.emit("brush");
                return this;
            },
            end: function() {
                if (--this.active === 0) delete this.state.emitter, this.emit("end");
                return this;
            },
            emit: function(type) {
                customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [
                    type,
                    this.that,
                    this.args
                ]);
            }
        };
        function started() {
            if (exports1.event.touches) {
                if (exports1.event.changedTouches.length < exports1.event.touches.length) return noevent$2();
            } else if (touchending) return;
            if (!filter.apply(this, arguments)) return;
            var that = this, type = exports1.event.target.__data__.type, mode = (exports1.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : exports1.event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type], signY = dim === X ? null : signsY[type], state = local$1(that), extent = state.extent, selection = state.selection, W = extent[0][0], w0, w1, N = extent[0][1], n0, n1, E = extent[1][0], e0, e1, S = extent[1][1], s0, s1, dx, dy, moving, shifting = signX && signY && exports1.event.shiftKey, lockX, lockY, point0 = mouse(that), point = point0, emit = emitter(that, arguments).beforestart();
            if (type === "overlay") {
                state.selection = selection = [
                    [
                        w0 = dim === Y ? W : point0[0],
                        n0 = dim === X ? N : point0[1]
                    ],
                    [
                        e0 = dim === Y ? E : w0,
                        s0 = dim === X ? S : n0
                    ]
                ];
            } else {
                w0 = selection[0][0];
                n0 = selection[0][1];
                e0 = selection[1][0];
                s0 = selection[1][1];
            }
            w1 = w0;
            n1 = n0;
            e1 = e0;
            s1 = s0;
            var group = select(that).attr("pointer-events", "none");
            var overlay = group.selectAll(".overlay").attr("cursor", cursors[type]);
            if (exports1.event.touches) {
                group.on("touchmove.brush", moved, true).on("touchend.brush touchcancel.brush", ended, true);
            } else {
                var view = select(exports1.event.view).on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
                dragDisable(exports1.event.view);
            }
            nopropagation$2();
            interrupt(that);
            redraw.call(that);
            emit.start();
            function moved() {
                var point1 = mouse(that);
                if (shifting && !lockX && !lockY) {
                    if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
                    else lockX = true;
                }
                point = point1;
                moving = true;
                noevent$2();
                move();
            }
            function move() {
                var t;
                dx = point[0] - point0[0];
                dy = point[1] - point0[1];
                switch(mode){
                    case MODE_SPACE:
                    case MODE_DRAG:
                        {
                            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                            break;
                        }
                    case MODE_HANDLE:
                        {
                            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                            break;
                        }
                    case MODE_CENTER:
                        {
                            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
                            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
                            break;
                        }
                }
                if (e1 < w1) {
                    signX *= -1;
                    t = w0, w0 = e0, e0 = t;
                    t = w1, w1 = e1, e1 = t;
                    if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
                }
                if (s1 < n1) {
                    signY *= -1;
                    t = n0, n0 = s0, s0 = t;
                    t = n1, n1 = s1, s1 = t;
                    if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
                }
                selection = state.selection; // May be set by brush.move!
                if (lockX) w1 = selection[0][0], e1 = selection[1][0];
                if (lockY) n1 = selection[0][1], s1 = selection[1][1];
                if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
                    state.selection = [
                        [
                            w1,
                            n1
                        ],
                        [
                            e1,
                            s1
                        ]
                    ];
                    redraw.call(that);
                    emit.brush();
                }
            }
            function ended() {
                nopropagation$2();
                if (exports1.event.touches) {
                    if (exports1.event.touches.length) return;
                    if (touchending) clearTimeout(touchending);
                    touchending = setTimeout(function() {
                        touchending = null;
                    }, 500); // Ghost clicks are delayed!
                    group.on("touchmove.brush touchend.brush touchcancel.brush", null);
                } else {
                    dragEnable(exports1.event.view, moving);
                    view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
                }
                group.attr("pointer-events", "all");
                overlay.attr("cursor", cursors.overlay);
                if (empty$1(selection)) state.selection = null, redraw.call(that);
                emit.end();
            }
            function keydowned() {
                switch(exports1.event.keyCode){
                    case 16:
                        {
                            shifting = signX && signY;
                            break;
                        }
                    case 18:
                        {
                            if (mode === MODE_HANDLE) {
                                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                                mode = MODE_CENTER;
                                move();
                            }
                            break;
                        }
                    case 32:
                        {
                            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                                if (signX < 0) e0 = e1 - dx;
                                else if (signX > 0) w0 = w1 - dx;
                                if (signY < 0) s0 = s1 - dy;
                                else if (signY > 0) n0 = n1 - dy;
                                mode = MODE_SPACE;
                                overlay.attr("cursor", cursors.selection);
                                move();
                            }
                            break;
                        }
                    default:
                        return;
                }
                noevent$2();
            }
            function keyupped() {
                switch(exports1.event.keyCode){
                    case 16:
                        {
                            if (shifting) {
                                lockX = lockY = shifting = false;
                                move();
                            }
                            break;
                        }
                    case 18:
                        {
                            if (mode === MODE_CENTER) {
                                if (signX < 0) e0 = e1;
                                else if (signX > 0) w0 = w1;
                                if (signY < 0) s0 = s1;
                                else if (signY > 0) n0 = n1;
                                mode = MODE_HANDLE;
                                move();
                            }
                            break;
                        }
                    case 32:
                        {
                            if (mode === MODE_SPACE) {
                                if (exports1.event.altKey) {
                                    if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                                    if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                                    mode = MODE_CENTER;
                                } else {
                                    if (signX < 0) e0 = e1;
                                    else if (signX > 0) w0 = w1;
                                    if (signY < 0) s0 = s1;
                                    else if (signY > 0) n0 = n1;
                                    mode = MODE_HANDLE;
                                }
                                overlay.attr("cursor", cursors[type]);
                                move();
                            }
                            break;
                        }
                    default:
                        return;
                }
                noevent$2();
            }
        }
        function initialize() {
            var state = this.__brush || {
                selection: null
            };
            state.extent = extent.apply(this, arguments);
            state.dim = dim;
            return state;
        }
        brush.extent = function(_) {
            return arguments.length ? (extent = typeof _ === "function" ? _ : constant$10([
                [
                    +_[0][0],
                    +_[0][1]
                ],
                [
                    +_[1][0],
                    +_[1][1]
                ]
            ]), brush) : extent;
        };
        brush.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant$10(!!_), brush) : filter;
        };
        brush.handleSize = function(_) {
            return arguments.length ? (handleSize = +_, brush) : handleSize;
        };
        brush.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? brush : value;
        };
        return brush;
    }
    var cos = Math.cos;
    var sin = Math.sin;
    var pi$3 = Math.PI;
    var halfPi$2 = pi$3 / 2;
    var tau$3 = pi$3 * 2;
    var max$1 = Math.max;
    function compareValue(compare) {
        return function(a, b) {
            return compare(a.source.value + a.target.value, b.source.value + b.target.value);
        };
    }
    function chord() {
        var padAngle = 0, sortGroups = null, sortSubgroups = null, sortChords = null;
        function chord(matrix) {
            var n = matrix.length, groupSums = [], groupIndex = range(n), subgroupIndex = [], chords = [], groups = chords.groups = new Array(n), subgroups = new Array(n * n), k, x, x0, dx, i, j;
            // Compute the sum.
            k = 0, i = -1;
            while(++i < n){
                x = 0, j = -1;
                while(++j < n){
                    x += matrix[i][j];
                }
                groupSums.push(x);
                subgroupIndex.push(range(n));
                k += x;
            }
            // Sort groups…
            if (sortGroups) groupIndex.sort(function(a, b) {
                return sortGroups(groupSums[a], groupSums[b]);
            });
            // Sort subgroups…
            if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
                d.sort(function(a, b) {
                    return sortSubgroups(matrix[i][a], matrix[i][b]);
                });
            });
            // Convert the sum to scaling factor for [0, 2pi].
            // TODO Allow start and end angle to be specified?
            // TODO Allow padding to be specified as percentage?
            k = max$1(0, tau$3 - padAngle * n) / k;
            dx = k ? padAngle : tau$3 / n;
            // Compute the start and end angle for each group and subgroup.
            // Note: Opera has a bug reordering object literal properties!
            x = 0, i = -1;
            while(++i < n){
                x0 = x, j = -1;
                while(++j < n){
                    var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
                    subgroups[dj * n + di] = {
                        index: di,
                        subindex: dj,
                        startAngle: a0,
                        endAngle: a1,
                        value: v
                    };
                }
                groups[di] = {
                    index: di,
                    startAngle: x0,
                    endAngle: x,
                    value: groupSums[di]
                };
                x += dx;
            }
            // Generate chords for each (non-empty) subgroup-subgroup link.
            i = -1;
            while(++i < n){
                j = i - 1;
                while(++j < n){
                    var source = subgroups[j * n + i], target = subgroups[i * n + j];
                    if (source.value || target.value) {
                        chords.push(source.value < target.value ? {
                            source: target,
                            target: source
                        } : {
                            source: source,
                            target: target
                        });
                    }
                }
            }
            return sortChords ? chords.sort(sortChords) : chords;
        }
        chord.padAngle = function(_) {
            return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
        };
        chord.sortGroups = function(_) {
            return arguments.length ? (sortGroups = _, chord) : sortGroups;
        };
        chord.sortSubgroups = function(_) {
            return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
        };
        chord.sortChords = function(_) {
            return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
        };
        return chord;
    }
    var slice$5 = Array.prototype.slice;
    function constant$11(x) {
        return function() {
            return x;
        };
    }
    function defaultSource(d) {
        return d.source;
    }
    function defaultTarget(d) {
        return d.target;
    }
    function defaultRadius$1(d) {
        return d.radius;
    }
    function defaultStartAngle(d) {
        return d.startAngle;
    }
    function defaultEndAngle(d) {
        return d.endAngle;
    }
    function ribbon() {
        var source = defaultSource, target = defaultTarget, radius = defaultRadius$1, startAngle = defaultStartAngle, endAngle = defaultEndAngle, context = null;
        function ribbon() {
            var buffer, argv = slice$5.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv), sr = +radius.apply(this, (argv[0] = s, argv)), sa0 = startAngle.apply(this, argv) - halfPi$2, sa1 = endAngle.apply(this, argv) - halfPi$2, sx0 = sr * cos(sa0), sy0 = sr * sin(sa0), tr = +radius.apply(this, (argv[0] = t, argv)), ta0 = startAngle.apply(this, argv) - halfPi$2, ta1 = endAngle.apply(this, argv) - halfPi$2;
            if (!context) context = buffer = path();
            context.moveTo(sx0, sy0);
            context.arc(0, 0, sr, sa0, sa1);
            if (sa0 !== ta0 || sa1 !== ta1) {
                context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
                context.arc(0, 0, tr, ta0, ta1);
            }
            context.quadraticCurveTo(0, 0, sx0, sy0);
            context.closePath();
            if (buffer) return context = null, buffer + "" || null;
        }
        ribbon.radius = function(_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : constant$11(+_), ribbon) : radius;
        };
        ribbon.startAngle = function(_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$11(+_), ribbon) : startAngle;
        };
        ribbon.endAngle = function(_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$11(+_), ribbon) : endAngle;
        };
        ribbon.source = function(_) {
            return arguments.length ? (source = _, ribbon) : source;
        };
        ribbon.target = function(_) {
            return arguments.length ? (target = _, ribbon) : target;
        };
        ribbon.context = function(_) {
            return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
        };
        return ribbon;
    }
    // Adds floating point numbers with twice the normal precision.
    // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
    // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
    // 305–363 (1997).
    // Code adapted from GeographicLib by Charles F. F. Karney,
    // http://geographiclib.sourceforge.net/
    function adder() {
        return new Adder;
    }
    function Adder() {
        this.reset();
    }
    Adder.prototype = {
        constructor: Adder,
        reset: function() {
            this.s = this.t = 0; // exact error
        },
        add: function(y) {
            add$1(temp, y, this.t);
            add$1(this, temp.s, this.s);
            if (this.s) this.t += temp.t;
            else this.s = temp.t;
        },
        valueOf: function() {
            return this.s;
        }
    };
    var temp = new Adder;
    function add$1(adder, a, b) {
        var x = adder.s = a + b, bv = x - a, av = x - bv;
        adder.t = a - av + (b - bv);
    }
    var epsilon$4 = 1e-6;
    var epsilon2$2 = 1e-12;
    var pi$4 = Math.PI;
    var halfPi$3 = pi$4 / 2;
    var quarterPi = pi$4 / 4;
    var tau$4 = pi$4 * 2;
    var degrees$1 = 180 / pi$4;
    var radians = pi$4 / 180;
    var abs = Math.abs;
    var atan = Math.atan;
    var atan2 = Math.atan2;
    var cos$1 = Math.cos;
    var ceil = Math.ceil;
    var exp = Math.exp;
    var log$1 = Math.log;
    var pow$1 = Math.pow;
    var sin$1 = Math.sin;
    var sign$1 = Math.sign || function(x) {
        return x > 0 ? 1 : x < 0 ? -1 : 0;
    };
    var sqrt$1 = Math.sqrt;
    var tan = Math.tan;
    function acos(x) {
        return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
    }
    function asin$1(x) {
        return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);
    }
    function haversin(x) {
        return (x = sin$1(x / 2)) * x;
    }
    function noop$2() {}
    function streamGeometry(geometry, stream) {
        if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
            streamGeometryType[geometry.type](geometry, stream);
        }
    }
    var streamObjectType = {
        Feature: function(feature, stream) {
            streamGeometry(feature.geometry, stream);
        },
        FeatureCollection: function(object, stream) {
            var features = object.features, i = -1, n = features.length;
            while(++i < n)streamGeometry(features[i].geometry, stream);
        }
    };
    var streamGeometryType = {
        Sphere: function(object, stream) {
            stream.sphere();
        },
        Point: function(object, stream) {
            object = object.coordinates;
            stream.point(object[0], object[1], object[2]);
        },
        MultiPoint: function(object, stream) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while(++i < n)object = coordinates[i], stream.point(object[0], object[1], object[2]);
        },
        LineString: function(object, stream) {
            streamLine(object.coordinates, stream, 0);
        },
        MultiLineString: function(object, stream) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while(++i < n)streamLine(coordinates[i], stream, 0);
        },
        Polygon: function(object, stream) {
            streamPolygon(object.coordinates, stream);
        },
        MultiPolygon: function(object, stream) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while(++i < n)streamPolygon(coordinates[i], stream);
        },
        GeometryCollection: function(object, stream) {
            var geometries = object.geometries, i = -1, n = geometries.length;
            while(++i < n)streamGeometry(geometries[i], stream);
        }
    };
    function streamLine(coordinates, stream, closed) {
        var i = -1, n = coordinates.length - closed, coordinate;
        stream.lineStart();
        while(++i < n)coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
        stream.lineEnd();
    }
    function streamPolygon(coordinates, stream) {
        var i = -1, n = coordinates.length;
        stream.polygonStart();
        while(++i < n)streamLine(coordinates[i], stream, 1);
        stream.polygonEnd();
    }
    function geoStream(object, stream) {
        if (object && streamObjectType.hasOwnProperty(object.type)) {
            streamObjectType[object.type](object, stream);
        } else {
            streamGeometry(object, stream);
        }
    }
    var areaRingSum = adder();
    var areaSum = adder();
    var lambda00;
    var phi00;
    var lambda0;
    var cosPhi0;
    var sinPhi0;
    var areaStream = {
        point: noop$2,
        lineStart: noop$2,
        lineEnd: noop$2,
        polygonStart: function() {
            areaRingSum.reset();
            areaStream.lineStart = areaRingStart;
            areaStream.lineEnd = areaRingEnd;
        },
        polygonEnd: function() {
            var areaRing = +areaRingSum;
            areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);
            this.lineStart = this.lineEnd = this.point = noop$2;
        },
        sphere: function() {
            areaSum.add(tau$4);
        }
    };
    function areaRingStart() {
        areaStream.point = areaPointFirst;
    }
    function areaRingEnd() {
        areaPoint(lambda00, phi00);
    }
    function areaPointFirst(lambda, phi) {
        areaStream.point = areaPoint;
        lambda00 = lambda, phi00 = phi;
        lambda *= radians, phi *= radians;
        lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
    }
    function areaPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        phi = phi / 2 + quarterPi; // half the angular distance from south pole
        // Spherical excess E for a spherical triangle with vertices: south pole,
        // previous point, current point.  Uses a formula derived from Cagnoli’s
        // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
        var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos$1(phi), sinPhi = sin$1(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * cos$1(adLambda), v = k * sdLambda * sin$1(adLambda);
        areaRingSum.add(atan2(v, u));
        // Advance the previous points.
        lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
    }
    function area$2(object) {
        areaSum.reset();
        geoStream(object, areaStream);
        return areaSum * 2;
    }
    function spherical(cartesian) {
        return [
            atan2(cartesian[1], cartesian[0]),
            asin$1(cartesian[2])
        ];
    }
    function cartesian(spherical) {
        var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
        return [
            cosPhi * cos$1(lambda),
            cosPhi * sin$1(lambda),
            sin$1(phi)
        ];
    }
    function cartesianDot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    function cartesianCross(a, b) {
        return [
            a[1] * b[2] - a[2] * b[1],
            a[2] * b[0] - a[0] * b[2],
            a[0] * b[1] - a[1] * b[0]
        ];
    }
    // TODO return a
    function cartesianAddInPlace(a, b) {
        a[0] += b[0], a[1] += b[1], a[2] += b[2];
    }
    function cartesianScale(vector, k) {
        return [
            vector[0] * k,
            vector[1] * k,
            vector[2] * k
        ];
    }
    // TODO return d
    function cartesianNormalizeInPlace(d) {
        var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
        d[0] /= l, d[1] /= l, d[2] /= l;
    }
    var lambda0$1;
    var phi0;
    var lambda1;
    var phi1;
    var lambda2;
    var lambda00$1;
    var phi00$1;
    var p0;
    var deltaSum = adder();
    var ranges;
    var range$1;
    var boundsStream = {
        point: boundsPoint,
        lineStart: boundsLineStart,
        lineEnd: boundsLineEnd,
        polygonStart: function() {
            boundsStream.point = boundsRingPoint;
            boundsStream.lineStart = boundsRingStart;
            boundsStream.lineEnd = boundsRingEnd;
            deltaSum.reset();
            areaStream.polygonStart();
        },
        polygonEnd: function() {
            areaStream.polygonEnd();
            boundsStream.point = boundsPoint;
            boundsStream.lineStart = boundsLineStart;
            boundsStream.lineEnd = boundsLineEnd;
            if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
            else if (deltaSum > epsilon$4) phi1 = 90;
            else if (deltaSum < -epsilon$4) phi0 = -90;
            range$1[0] = lambda0$1, range$1[1] = lambda1;
        }
    };
    function boundsPoint(lambda, phi) {
        ranges.push(range$1 = [
            lambda0$1 = lambda,
            lambda1 = lambda
        ]);
        if (phi < phi0) phi0 = phi;
        if (phi > phi1) phi1 = phi;
    }
    function linePoint(lambda, phi) {
        var p = cartesian([
            lambda * radians,
            phi * radians
        ]);
        if (p0) {
            var normal = cartesianCross(p0, p), equatorial = [
                normal[1],
                -normal[0],
                0
            ], inflection = cartesianCross(equatorial, normal);
            cartesianNormalizeInPlace(inflection);
            inflection = spherical(inflection);
            var delta = lambda - lambda2, sign = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees$1 * sign, phii, antimeridian = abs(delta) > 180;
            if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
                phii = inflection[1] * degrees$1;
                if (phii > phi1) phi1 = phii;
            } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
                phii = -inflection[1] * degrees$1;
                if (phii < phi0) phi0 = phii;
            } else {
                if (phi < phi0) phi0 = phi;
                if (phi > phi1) phi1 = phi;
            }
            if (antimeridian) {
                if (lambda < lambda2) {
                    if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
                } else {
                    if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
                }
            } else {
                if (lambda1 >= lambda0$1) {
                    if (lambda < lambda0$1) lambda0$1 = lambda;
                    if (lambda > lambda1) lambda1 = lambda;
                } else {
                    if (lambda > lambda2) {
                        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
                    } else {
                        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
                    }
                }
            }
        } else {
            boundsPoint(lambda, phi);
        }
        p0 = p, lambda2 = lambda;
    }
    function boundsLineStart() {
        boundsStream.point = linePoint;
    }
    function boundsLineEnd() {
        range$1[0] = lambda0$1, range$1[1] = lambda1;
        boundsStream.point = boundsPoint;
        p0 = null;
    }
    function boundsRingPoint(lambda, phi) {
        if (p0) {
            var delta = lambda - lambda2;
            deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
        } else {
            lambda00$1 = lambda, phi00$1 = phi;
        }
        areaStream.point(lambda, phi);
        linePoint(lambda, phi);
    }
    function boundsRingStart() {
        areaStream.lineStart();
    }
    function boundsRingEnd() {
        boundsRingPoint(lambda00$1, phi00$1);
        areaStream.lineEnd();
        if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);
        range$1[0] = lambda0$1, range$1[1] = lambda1;
        p0 = null;
    }
    // Finds the left-right distance between two longitudes.
    // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
    // the distance between ±180° to be 360°.
    function angle(lambda0, lambda1) {
        return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
    }
    function rangeCompare(a, b) {
        return a[0] - b[0];
    }
    function rangeContains(range, x) {
        return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    function bounds(feature) {
        var i, n, a, b, merged, deltaMax, delta;
        phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
        ranges = [];
        geoStream(feature, boundsStream);
        // First, sort ranges by their minimum longitudes.
        if (n = ranges.length) {
            ranges.sort(rangeCompare);
            // Then, merge any ranges that overlap.
            for(i = 1, a = ranges[0], merged = [
                a
            ]; i < n; ++i){
                b = ranges[i];
                if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
                    if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
                    if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
                } else {
                    merged.push(a = b);
                }
            }
            // Finally, find the largest gap between the merged ranges.
            // The final bounding box will be the inverse of this gap.
            for(deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i){
                b = merged[i];
                if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
            }
        }
        ranges = range$1 = null;
        return lambda0$1 === Infinity || phi0 === Infinity ? [
            [
                NaN,
                NaN
            ],
            [
                NaN,
                NaN
            ]
        ] : [
            [
                lambda0$1,
                phi0
            ],
            [
                lambda1,
                phi1
            ]
        ];
    }
    var W0;
    var W1;
    var X0;
    var Y0;
    var Z0;
    var X1;
    var Y1;
    var Z1;
    var X2;
    var Y2;
    var Z2;
    var lambda00$2;
    var phi00$2;
    var x0;
    var y0;
    var z0;
    // previous point
    var centroidStream = {
        sphere: noop$2,
        point: centroidPoint,
        lineStart: centroidLineStart,
        lineEnd: centroidLineEnd,
        polygonStart: function() {
            centroidStream.lineStart = centroidRingStart;
            centroidStream.lineEnd = centroidRingEnd;
        },
        polygonEnd: function() {
            centroidStream.lineStart = centroidLineStart;
            centroidStream.lineEnd = centroidLineEnd;
        }
    };
    // Arithmetic mean of Cartesian vectors.
    function centroidPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi);
        centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
    }
    function centroidPointCartesian(x, y, z) {
        ++W0;
        X0 += (x - X0) / W0;
        Y0 += (y - Y0) / W0;
        Z0 += (z - Z0) / W0;
    }
    function centroidLineStart() {
        centroidStream.point = centroidLinePointFirst;
    }
    function centroidLinePointFirst(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi);
        x0 = cosPhi * cos$1(lambda);
        y0 = cosPhi * sin$1(lambda);
        z0 = sin$1(phi);
        centroidStream.point = centroidLinePoint;
        centroidPointCartesian(x0, y0, z0);
    }
    function centroidLinePoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi), x = cosPhi * cos$1(lambda), y = cosPhi * sin$1(lambda), z = sin$1(phi), w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
        W1 += w;
        X1 += w * (x0 + (x0 = x));
        Y1 += w * (y0 + (y0 = y));
        Z1 += w * (z0 + (z0 = z));
        centroidPointCartesian(x0, y0, z0);
    }
    function centroidLineEnd() {
        centroidStream.point = centroidPoint;
    }
    // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
    // J. Applied Mechanics 42, 239 (1975).
    function centroidRingStart() {
        centroidStream.point = centroidRingPointFirst;
    }
    function centroidRingEnd() {
        centroidRingPoint(lambda00$2, phi00$2);
        centroidStream.point = centroidPoint;
    }
    function centroidRingPointFirst(lambda, phi) {
        lambda00$2 = lambda, phi00$2 = phi;
        lambda *= radians, phi *= radians;
        centroidStream.point = centroidRingPoint;
        var cosPhi = cos$1(phi);
        x0 = cosPhi * cos$1(lambda);
        y0 = cosPhi * sin$1(lambda);
        z0 = sin$1(phi);
        centroidPointCartesian(x0, y0, z0);
    }
    function centroidRingPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos$1(phi), x = cosPhi * cos$1(lambda), y = cosPhi * sin$1(lambda), z = sin$1(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = sqrt$1(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -acos(u) / m, w = atan2(m, u); // line weight
        X2 += v * cx;
        Y2 += v * cy;
        Z2 += v * cz;
        W1 += w;
        X1 += w * (x0 + (x0 = x));
        Y1 += w * (y0 + (y0 = y));
        Z1 += w * (z0 + (z0 = z));
        centroidPointCartesian(x0, y0, z0);
    }
    function centroid$1(object) {
        W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
        geoStream(object, centroidStream);
        var x = X2, y = Y2, z = Z2, m = x * x + y * y + z * z;
        // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
        if (m < epsilon2$2) {
            x = X1, y = Y1, z = Z1;
            // If the feature has zero length, fall back to arithmetic mean of point vectors.
            if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;
            m = x * x + y * y + z * z;
            // If the feature still has an undefined ccentroid, then return.
            if (m < epsilon2$2) return [
                NaN,
                NaN
            ];
        }
        return [
            atan2(y, x) * degrees$1,
            asin$1(z / sqrt$1(m)) * degrees$1
        ];
    }
    function constant$12(x) {
        return function() {
            return x;
        };
    }
    function compose(a, b) {
        function compose(x, y) {
            return x = a(x, y), b(x[0], x[1]);
        }
        if (a.invert && b.invert) compose.invert = function(x, y) {
            return x = b.invert(x, y), x && a.invert(x[0], x[1]);
        };
        return compose;
    }
    function rotationIdentity(lambda, phi) {
        return [
            lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda,
            phi
        ];
    }
    rotationIdentity.invert = rotationIdentity;
    function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
        return (deltaLambda %= tau$4) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
    }
    function forwardRotationLambda(deltaLambda) {
        return function(lambda, phi) {
            return lambda += deltaLambda, [
                lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda,
                phi
            ];
        };
    }
    function rotationLambda(deltaLambda) {
        var rotation = forwardRotationLambda(deltaLambda);
        rotation.invert = forwardRotationLambda(-deltaLambda);
        return rotation;
    }
    function rotationPhiGamma(deltaPhi, deltaGamma) {
        var cosDeltaPhi = cos$1(deltaPhi), sinDeltaPhi = sin$1(deltaPhi), cosDeltaGamma = cos$1(deltaGamma), sinDeltaGamma = sin$1(deltaGamma);
        function rotation(lambda, phi) {
            var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
            return [
                atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
                asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
            ];
        }
        rotation.invert = function(lambda, phi) {
            var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
            return [
                atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
                asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
            ];
        };
        return rotation;
    }
    function rotation(rotate) {
        rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
        function forward(coordinates) {
            coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
            return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
        }
        forward.invert = function(coordinates) {
            coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
            return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
        };
        return forward;
    }
    // Generates a circle centered at [0°, 0°], with a given radius and precision.
    function circleStream(stream, radius, delta, direction, t0, t1) {
        if (!delta) return;
        var cosRadius = cos$1(radius), sinRadius = sin$1(radius), step = direction * delta;
        if (t0 == null) {
            t0 = radius + direction * tau$4;
            t1 = radius - step / 2;
        } else {
            t0 = circleRadius(cosRadius, t0);
            t1 = circleRadius(cosRadius, t1);
            if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;
        }
        for(var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step){
            point = spherical([
                cosRadius,
                -sinRadius * cos$1(t),
                -sinRadius * sin$1(t)
            ]);
            stream.point(point[0], point[1]);
        }
    }
    // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
    function circleRadius(cosRadius, point) {
        point = cartesian(point), point[0] -= cosRadius;
        cartesianNormalizeInPlace(point);
        var radius = acos(-point[1]);
        return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;
    }
    function circle$1() {
        var center = constant$12([
            0,
            0
        ]), radius = constant$12(90), precision = constant$12(6), ring, rotate, stream = {
            point: point
        };
        function point(x, y) {
            ring.push(x = rotate(x, y));
            x[0] *= degrees$1, x[1] *= degrees$1;
        }
        function circle() {
            var c = center.apply(this, arguments), r = radius.apply(this, arguments) * radians, p = precision.apply(this, arguments) * radians;
            ring = [];
            rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
            circleStream(stream, r, p, 1);
            c = {
                type: "Polygon",
                coordinates: [
                    ring
                ]
            };
            ring = rotate = null;
            return c;
        }
        circle.center = function(_) {
            return arguments.length ? (center = typeof _ === "function" ? _ : constant$12([
                +_[0],
                +_[1]
            ]), circle) : center;
        };
        circle.radius = function(_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : constant$12(+_), circle) : radius;
        };
        circle.precision = function(_) {
            return arguments.length ? (precision = typeof _ === "function" ? _ : constant$12(+_), circle) : precision;
        };
        return circle;
    }
    function clipBuffer() {
        var lines = [], line;
        return {
            point: function(x, y) {
                line.push([
                    x,
                    y
                ]);
            },
            lineStart: function() {
                lines.push(line = []);
            },
            lineEnd: noop$2,
            rejoin: function() {
                if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
            },
            result: function() {
                var result = lines;
                lines = [];
                line = null;
                return result;
            }
        };
    }
    function clipLine(a, b, x0, y0, x1, y1) {
        var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
        r = x0 - ax;
        if (!dx && r > 0) return;
        r /= dx;
        if (dx < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dx > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = x1 - ax;
        if (!dx && r < 0) return;
        r /= dx;
        if (dx < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dx > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        r = y0 - ay;
        if (!dy && r > 0) return;
        r /= dy;
        if (dy < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dy > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = y1 - ay;
        if (!dy && r < 0) return;
        r /= dy;
        if (dy < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dy > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
        if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
        return true;
    }
    function pointEqual(a, b) {
        return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;
    }
    function Intersection(point, points, other, entry) {
        this.x = point;
        this.z = points;
        this.o = other; // another intersection
        this.e = entry; // is an entry?
        this.v = false; // visited
        this.n = this.p = null; // next & previous
    }
    // A generalized polygon clipping algorithm: given a polygon that has been cut
    // into its visible line segments, and rejoins the segments by interpolating
    // along the clip edge.
    function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {
        var subject = [], clip = [], i, n;
        segments.forEach(function(segment) {
            if ((n = segment.length - 1) <= 0) return;
            var n, p0 = segment[0], p1 = segment[n], x;
            // If the first and last points of a segment are coincident, then treat as a
            // closed ring. TODO if all rings are closed, then the winding order of the
            // exterior ring should be checked.
            if (pointEqual(p0, p1)) {
                stream.lineStart();
                for(i = 0; i < n; ++i)stream.point((p0 = segment[i])[0], p0[1]);
                stream.lineEnd();
                return;
            }
            subject.push(x = new Intersection(p0, segment, null, true));
            clip.push(x.o = new Intersection(p0, null, x, false));
            subject.push(x = new Intersection(p1, segment, null, false));
            clip.push(x.o = new Intersection(p1, null, x, true));
        });
        if (!subject.length) return;
        clip.sort(compareIntersection);
        link$1(subject);
        link$1(clip);
        for(i = 0, n = clip.length; i < n; ++i){
            clip[i].e = startInside = !startInside;
        }
        var start = subject[0], points, point;
        while(1){
            // Find first unvisited intersection.
            var current = start, isSubject = true;
            while(current.v)if ((current = current.n) === start) return;
            points = current.z;
            stream.lineStart();
            do {
                current.v = current.o.v = true;
                if (current.e) {
                    if (isSubject) {
                        for(i = 0, n = points.length; i < n; ++i)stream.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.n.x, 1, stream);
                    }
                    current = current.n;
                } else {
                    if (isSubject) {
                        points = current.p.z;
                        for(i = points.length - 1; i >= 0; --i)stream.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.p.x, -1, stream);
                    }
                    current = current.p;
                }
                current = current.o;
                points = current.z;
                isSubject = !isSubject;
            }while (!current.v)
            stream.lineEnd();
        }
    }
    function link$1(array) {
        if (!(n = array.length)) return;
        var n, i = 0, a = array[0], b;
        while(++i < n){
            a.n = b = array[i];
            b.p = a;
            a = b;
        }
        a.n = b = array[0];
        b.p = a;
    }
    var clipMax = 1e9;
    var clipMin = -clipMax;
    // TODO Use d3-polygon’s polygonContains here for the ring check?
    // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?
    function clipExtent(x0, y0, x1, y1) {
        function visible(x, y) {
            return x0 <= x && x <= x1 && y0 <= y && y <= y1;
        }
        function interpolate(from, to, direction, stream) {
            var a = 0, a1 = 0;
            if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
                do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
                while ((a = (a + direction + 4) % 4) !== a1)
            } else {
                stream.point(to[0], to[1]);
            }
        }
        function corner(p, direction) {
            return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
        }
        function compareIntersection(a, b) {
            return comparePoint(a.x, b.x);
        }
        function comparePoint(a, b) {
            var ca = corner(a, 1), cb = corner(b, 1);
            return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
        }
        return function(stream) {
            var activeStream = stream, bufferStream = clipBuffer(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
            var clipStream = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: polygonStart,
                polygonEnd: polygonEnd
            };
            function point(x, y) {
                if (visible(x, y)) activeStream.point(x, y);
            }
            function polygonInside() {
                var winding = 0;
                for(var i = 0, n = polygon.length; i < n; ++i){
                    for(var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j){
                        a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                        if (a1 <= y1) {
                            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
                        } else {
                            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
                        }
                    }
                }
                return winding;
            }
            // Buffer geometry within a polygon and then clip it en masse.
            function polygonStart() {
                activeStream = bufferStream, segments = [], polygon = [], clean = true;
            }
            function polygonEnd() {
                var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = merge(segments)).length;
                if (cleanInside || visible) {
                    stream.polygonStart();
                    if (cleanInside) {
                        stream.lineStart();
                        interpolate(null, null, 1, stream);
                        stream.lineEnd();
                    }
                    if (visible) {
                        clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
                    }
                    stream.polygonEnd();
                }
                activeStream = stream, segments = polygon = ring = null;
            }
            function lineStart() {
                clipStream.point = linePoint;
                if (polygon) polygon.push(ring = []);
                first = true;
                v_ = false;
                x_ = y_ = NaN;
            }
            // TODO rather than special-case polygons, simply handle them separately.
            // Ideally, coincident intersection points should be jittered to avoid
            // clipping issues.
            function lineEnd() {
                if (segments) {
                    linePoint(x__, y__);
                    if (v__ && v_) bufferStream.rejoin();
                    segments.push(bufferStream.result());
                }
                clipStream.point = point;
                if (v_) activeStream.lineEnd();
            }
            function linePoint(x, y) {
                var v = visible(x, y);
                if (polygon) ring.push([
                    x,
                    y
                ]);
                if (first) {
                    x__ = x, y__ = y, v__ = v;
                    first = false;
                    if (v) {
                        activeStream.lineStart();
                        activeStream.point(x, y);
                    }
                } else {
                    if (v && v_) activeStream.point(x, y);
                    else {
                        var a = [
                            x_ = Math.max(clipMin, Math.min(clipMax, x_)),
                            y_ = Math.max(clipMin, Math.min(clipMax, y_))
                        ], b = [
                            x = Math.max(clipMin, Math.min(clipMax, x)),
                            y = Math.max(clipMin, Math.min(clipMax, y))
                        ];
                        if (clipLine(a, b, x0, y0, x1, y1)) {
                            if (!v_) {
                                activeStream.lineStart();
                                activeStream.point(a[0], a[1]);
                            }
                            activeStream.point(b[0], b[1]);
                            if (!v) activeStream.lineEnd();
                            clean = false;
                        } else if (v) {
                            activeStream.lineStart();
                            activeStream.point(x, y);
                            clean = false;
                        }
                    }
                }
                x_ = x, y_ = y, v_ = v;
            }
            return clipStream;
        };
    }
    function extent$1() {
        var x0 = 0, y0 = 0, x1 = 960, y1 = 500, cache, cacheStream, clip;
        return clip = {
            stream: function(stream) {
                return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
            },
            extent: function(_) {
                return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [
                    [
                        x0,
                        y0
                    ],
                    [
                        x1,
                        y1
                    ]
                ];
            }
        };
    }
    var lengthSum = adder();
    var lambda0$2;
    var sinPhi0$1;
    var cosPhi0$1;
    var lengthStream = {
        sphere: noop$2,
        point: noop$2,
        lineStart: lengthLineStart,
        lineEnd: noop$2,
        polygonStart: noop$2,
        polygonEnd: noop$2
    };
    function lengthLineStart() {
        lengthStream.point = lengthPointFirst;
        lengthStream.lineEnd = lengthLineEnd;
    }
    function lengthLineEnd() {
        lengthStream.point = lengthStream.lineEnd = noop$2;
    }
    function lengthPointFirst(lambda, phi) {
        lambda *= radians, phi *= radians;
        lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
        lengthStream.point = lengthPoint;
    }
    function lengthPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var sinPhi = sin$1(phi), cosPhi = cos$1(phi), delta = abs(lambda - lambda0$2), cosDelta = cos$1(delta), sinDelta = sin$1(delta), x = cosPhi * sinDelta, y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta, z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
        lengthSum.add(atan2(sqrt$1(x * x + y * y), z));
        lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
    }
    function length$2(object) {
        lengthSum.reset();
        geoStream(object, lengthStream);
        return +lengthSum;
    }
    var coordinates = [
        null,
        null
    ];
    var object$1 = {
        type: "LineString",
        coordinates: coordinates
    };
    function distance(a, b) {
        coordinates[0] = a;
        coordinates[1] = b;
        return length$2(object$1);
    }
    function graticuleX(y0, y1, dy) {
        var y = range(y0, y1 - epsilon$4, dy).concat(y1);
        return function(x) {
            return y.map(function(y) {
                return [
                    x,
                    y
                ];
            });
        };
    }
    function graticuleY(x0, x1, dx) {
        var x = range(x0, x1 - epsilon$4, dx).concat(x1);
        return function(y) {
            return x.map(function(x) {
                return [
                    x,
                    y
                ];
            });
        };
    }
    function graticule() {
        var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
        function graticule() {
            return {
                type: "MultiLineString",
                coordinates: lines()
            };
        }
        function lines() {
            return range(ceil(X0 / DX) * DX, X1, DX).map(X).concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
                return abs(x % DX) > epsilon$4;
            }).map(x)).concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
                return abs(y % DY) > epsilon$4;
            }).map(y));
        }
        graticule.lines = function() {
            return lines().map(function(coordinates) {
                return {
                    type: "LineString",
                    coordinates: coordinates
                };
            });
        };
        graticule.outline = function() {
            return {
                type: "Polygon",
                coordinates: [
                    X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))
                ]
            };
        };
        graticule.extent = function(_) {
            if (!arguments.length) return graticule.extentMinor();
            return graticule.extentMajor(_).extentMinor(_);
        };
        graticule.extentMajor = function(_) {
            if (!arguments.length) return [
                [
                    X0,
                    Y0
                ],
                [
                    X1,
                    Y1
                ]
            ];
            X0 = +_[0][0], X1 = +_[1][0];
            Y0 = +_[0][1], Y1 = +_[1][1];
            if (X0 > X1) _ = X0, X0 = X1, X1 = _;
            if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
            return graticule.precision(precision);
        };
        graticule.extentMinor = function(_) {
            if (!arguments.length) return [
                [
                    x0,
                    y0
                ],
                [
                    x1,
                    y1
                ]
            ];
            x0 = +_[0][0], x1 = +_[1][0];
            y0 = +_[0][1], y1 = +_[1][1];
            if (x0 > x1) _ = x0, x0 = x1, x1 = _;
            if (y0 > y1) _ = y0, y0 = y1, y1 = _;
            return graticule.precision(precision);
        };
        graticule.step = function(_) {
            if (!arguments.length) return graticule.stepMinor();
            return graticule.stepMajor(_).stepMinor(_);
        };
        graticule.stepMajor = function(_) {
            if (!arguments.length) return [
                DX,
                DY
            ];
            DX = +_[0], DY = +_[1];
            return graticule;
        };
        graticule.stepMinor = function(_) {
            if (!arguments.length) return [
                dx,
                dy
            ];
            dx = +_[0], dy = +_[1];
            return graticule;
        };
        graticule.precision = function(_) {
            if (!arguments.length) return precision;
            precision = +_;
            x = graticuleX(y0, y1, 90);
            y = graticuleY(x0, x1, precision);
            X = graticuleX(Y0, Y1, 90);
            Y = graticuleY(X0, X1, precision);
            return graticule;
        };
        return graticule.extentMajor([
            [
                -180,
                -90 + epsilon$4
            ],
            [
                180,
                90 - epsilon$4
            ]
        ]).extentMinor([
            [
                -180,
                -80 - epsilon$4
            ],
            [
                180,
                80 + epsilon$4
            ]
        ]);
    }
    function interpolate$2(a, b) {
        var x0 = a[0] * radians, y0 = a[1] * radians, x1 = b[0] * radians, y1 = b[1] * radians, cy0 = cos$1(y0), sy0 = sin$1(y0), cy1 = cos$1(y1), sy1 = sin$1(y1), kx0 = cy0 * cos$1(x0), ky0 = cy0 * sin$1(x0), kx1 = cy1 * cos$1(x1), ky1 = cy1 * sin$1(x1), d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))), k = sin$1(d);
        var interpolate = d ? function(t) {
            var B = sin$1(t *= d) / k, A = sin$1(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
            return [
                atan2(y, x) * degrees$1,
                atan2(z, sqrt$1(x * x + y * y)) * degrees$1
            ];
        } : function() {
            return [
                x0 * degrees$1,
                y0 * degrees$1
            ];
        };
        interpolate.distance = d;
        return interpolate;
    }
    function identity$7(x) {
        return x;
    }
    var areaSum$1 = adder();
    var areaRingSum$1 = adder();
    var x00;
    var y00;
    var x0$1;
    var y0$1;
    var areaStream$1 = {
        point: noop$2,
        lineStart: noop$2,
        lineEnd: noop$2,
        polygonStart: function() {
            areaStream$1.lineStart = areaRingStart$1;
            areaStream$1.lineEnd = areaRingEnd$1;
        },
        polygonEnd: function() {
            areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;
            areaSum$1.add(abs(areaRingSum$1));
            areaRingSum$1.reset();
        },
        result: function() {
            var area = areaSum$1 / 2;
            areaSum$1.reset();
            return area;
        }
    };
    function areaRingStart$1() {
        areaStream$1.point = areaPointFirst$1;
    }
    function areaPointFirst$1(x, y) {
        areaStream$1.point = areaPoint$1;
        x00 = x0$1 = x, y00 = y0$1 = y;
    }
    function areaPoint$1(x, y) {
        areaRingSum$1.add(y0$1 * x - x0$1 * y);
        x0$1 = x, y0$1 = y;
    }
    function areaRingEnd$1() {
        areaPoint$1(x00, y00);
    }
    var x0$2 = Infinity;
    var y0$2 = x0$2;
    var x1 = -x0$2;
    var y1 = x1;
    var boundsStream$1 = {
        point: boundsPoint$1,
        lineStart: noop$2,
        lineEnd: noop$2,
        polygonStart: noop$2,
        polygonEnd: noop$2,
        result: function() {
            var bounds = [
                [
                    x0$2,
                    y0$2
                ],
                [
                    x1,
                    y1
                ]
            ];
            x1 = y1 = -(y0$2 = x0$2 = Infinity);
            return bounds;
        }
    };
    function boundsPoint$1(x, y) {
        if (x < x0$2) x0$2 = x;
        if (x > x1) x1 = x;
        if (y < y0$2) y0$2 = y;
        if (y > y1) y1 = y;
    }
    var X0$1 = 0;
    var Y0$1 = 0;
    var Z0$1 = 0;
    var X1$1 = 0;
    var Y1$1 = 0;
    var Z1$1 = 0;
    var X2$1 = 0;
    var Y2$1 = 0;
    var Z2$1 = 0;
    var x00$1;
    var y00$1;
    var x0$3;
    var y0$3;
    var centroidStream$1 = {
        point: centroidPoint$1,
        lineStart: centroidLineStart$1,
        lineEnd: centroidLineEnd$1,
        polygonStart: function() {
            centroidStream$1.lineStart = centroidRingStart$1;
            centroidStream$1.lineEnd = centroidRingEnd$1;
        },
        polygonEnd: function() {
            centroidStream$1.point = centroidPoint$1;
            centroidStream$1.lineStart = centroidLineStart$1;
            centroidStream$1.lineEnd = centroidLineEnd$1;
        },
        result: function() {
            var centroid = Z2$1 ? [
                X2$1 / Z2$1,
                Y2$1 / Z2$1
            ] : Z1$1 ? [
                X1$1 / Z1$1,
                Y1$1 / Z1$1
            ] : Z0$1 ? [
                X0$1 / Z0$1,
                Y0$1 / Z0$1
            ] : [
                NaN,
                NaN
            ];
            X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
            return centroid;
        }
    };
    function centroidPoint$1(x, y) {
        X0$1 += x;
        Y0$1 += y;
        ++Z0$1;
    }
    function centroidLineStart$1() {
        centroidStream$1.point = centroidPointFirstLine;
    }
    function centroidPointFirstLine(x, y) {
        centroidStream$1.point = centroidPointLine;
        centroidPoint$1(x0$3 = x, y0$3 = y);
    }
    function centroidPointLine(x, y) {
        var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);
        X1$1 += z * (x0$3 + x) / 2;
        Y1$1 += z * (y0$3 + y) / 2;
        Z1$1 += z;
        centroidPoint$1(x0$3 = x, y0$3 = y);
    }
    function centroidLineEnd$1() {
        centroidStream$1.point = centroidPoint$1;
    }
    function centroidRingStart$1() {
        centroidStream$1.point = centroidPointFirstRing;
    }
    function centroidRingEnd$1() {
        centroidPointRing(x00$1, y00$1);
    }
    function centroidPointFirstRing(x, y) {
        centroidStream$1.point = centroidPointRing;
        centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
    }
    function centroidPointRing(x, y) {
        var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);
        X1$1 += z * (x0$3 + x) / 2;
        Y1$1 += z * (y0$3 + y) / 2;
        Z1$1 += z;
        z = y0$3 * x - x0$3 * y;
        X2$1 += z * (x0$3 + x);
        Y2$1 += z * (y0$3 + y);
        Z2$1 += z * 3;
        centroidPoint$1(x0$3 = x, y0$3 = y);
    }
    function PathContext(context) {
        var pointRadius = 4.5;
        var stream = {
            point: point,
            // While inside a line, override point to moveTo then lineTo.
            lineStart: function() {
                stream.point = pointLineStart;
            },
            lineEnd: lineEnd,
            // While inside a polygon, override lineEnd to closePath.
            polygonStart: function() {
                stream.lineEnd = lineEndPolygon;
            },
            polygonEnd: function() {
                stream.lineEnd = lineEnd;
                stream.point = point;
            },
            pointRadius: function(_) {
                pointRadius = _;
                return stream;
            },
            result: noop$2
        };
        function point(x, y) {
            context.moveTo(x + pointRadius, y);
            context.arc(x, y, pointRadius, 0, tau$4);
        }
        function pointLineStart(x, y) {
            context.moveTo(x, y);
            stream.point = pointLine;
        }
        function pointLine(x, y) {
            context.lineTo(x, y);
        }
        function lineEnd() {
            stream.point = point;
        }
        function lineEndPolygon() {
            context.closePath();
        }
        return stream;
    }
    function PathString() {
        var pointCircle = circle$2(4.5), string = [];
        var stream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                stream.lineEnd = lineEndPolygon;
            },
            polygonEnd: function() {
                stream.lineEnd = lineEnd;
                stream.point = point;
            },
            pointRadius: function(_) {
                pointCircle = circle$2(_);
                return stream;
            },
            result: function() {
                if (string.length) {
                    var result = string.join("");
                    string = [];
                    return result;
                }
            }
        };
        function point(x, y) {
            string.push("M", x, ",", y, pointCircle);
        }
        function pointLineStart(x, y) {
            string.push("M", x, ",", y);
            stream.point = pointLine;
        }
        function pointLine(x, y) {
            string.push("L", x, ",", y);
        }
        function lineStart() {
            stream.point = pointLineStart;
        }
        function lineEnd() {
            stream.point = point;
        }
        function lineEndPolygon() {
            string.push("Z");
        }
        return stream;
    }
    function circle$2(radius) {
        return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
    }
    function index$3() {
        var pointRadius = 4.5, projection, projectionStream, context, contextStream;
        function path(object) {
            if (object) {
                if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
                geoStream(object, projectionStream(contextStream));
            }
            return contextStream.result();
        }
        path.area = function(object) {
            geoStream(object, projectionStream(areaStream$1));
            return areaStream$1.result();
        };
        path.bounds = function(object) {
            geoStream(object, projectionStream(boundsStream$1));
            return boundsStream$1.result();
        };
        path.centroid = function(object) {
            geoStream(object, projectionStream(centroidStream$1));
            return centroidStream$1.result();
        };
        path.projection = function(_) {
            return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;
        };
        path.context = function(_) {
            if (!arguments.length) return context;
            contextStream = (context = _) == null ? new PathString : new PathContext(_);
            if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
            return path;
        };
        path.pointRadius = function(_) {
            if (!arguments.length) return pointRadius;
            pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
            return path;
        };
        return path.projection(null).context(null);
    }
    var sum$2 = adder();
    function polygonContains(polygon, point) {
        var lambda = point[0], phi = point[1], normal = [
            sin$1(lambda),
            -cos$1(lambda),
            0
        ], angle = 0, winding = 0;
        sum$2.reset();
        for(var i = 0, n = polygon.length; i < n; ++i){
            if (!(m = (ring = polygon[i]).length)) continue;
            var ring, m, point0 = ring[m - 1], lambda0 = point0[0], phi0 = point0[1] / 2 + quarterPi, sinPhi0 = sin$1(phi0), cosPhi0 = cos$1(phi0);
            for(var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1){
                var point1 = ring[j], lambda1 = point1[0], phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin$1(phi1), cosPhi1 = cos$1(phi1), delta = lambda1 - lambda0, sign = delta >= 0 ? 1 : -1, absDelta = sign * delta, antimeridian = absDelta > pi$4, k = sinPhi0 * sinPhi1;
                sum$2.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
                angle += antimeridian ? delta + sign * tau$4 : delta;
                // Are the longitudes either side of the point’s meridian (lambda),
                // and are the latitudes smaller than the parallel (phi)?
                if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                    var arc = cartesianCross(cartesian(point0), cartesian(point1));
                    cartesianNormalizeInPlace(arc);
                    var intersection = cartesianCross(normal, arc);
                    cartesianNormalizeInPlace(intersection);
                    var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
                    if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                        winding += antimeridian ^ delta >= 0 ? 1 : -1;
                    }
                }
            }
        }
        // First, determine whether the South pole is inside or outside:
        //
        // It is inside if:
        // * the polygon winds around it in a clockwise direction.
        // * the polygon does not (cumulatively) wind around it, but has a negative
        //   (counter-clockwise) area.
        //
        // Second, count the (signed) number of times a segment crosses a lambda
        // from the point to the South pole.  If it is zero, then the point is the
        // same side as the South pole.
        return (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ winding & 1;
    }
    function clip(pointVisible, clipLine, interpolate, start) {
        return function(rotate, sink) {
            var line = clipLine(sink), rotatedStart = rotate.invert(start[0], start[1]), ringBuffer = clipBuffer(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
            var clip = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function() {
                    clip.point = pointRing;
                    clip.lineStart = ringStart;
                    clip.lineEnd = ringEnd;
                    segments = [];
                    polygon = [];
                },
                polygonEnd: function() {
                    clip.point = point;
                    clip.lineStart = lineStart;
                    clip.lineEnd = lineEnd;
                    segments = merge(segments);
                    var startInside = polygonContains(polygon, rotatedStart);
                    if (segments.length) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
                    } else if (startInside) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        sink.lineStart();
                        interpolate(null, null, 1, sink);
                        sink.lineEnd();
                    }
                    if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                    segments = polygon = null;
                },
                sphere: function() {
                    sink.polygonStart();
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                    sink.polygonEnd();
                }
            };
            function point(lambda, phi) {
                var point = rotate(lambda, phi);
                if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
            }
            function pointLine(lambda, phi) {
                var point = rotate(lambda, phi);
                line.point(point[0], point[1]);
            }
            function lineStart() {
                clip.point = pointLine;
                line.lineStart();
            }
            function lineEnd() {
                clip.point = point;
                line.lineEnd();
            }
            function pointRing(lambda, phi) {
                ring.push([
                    lambda,
                    phi
                ]);
                var point = rotate(lambda, phi);
                ringSink.point(point[0], point[1]);
            }
            function ringStart() {
                ringSink.lineStart();
                ring = [];
            }
            function ringEnd() {
                pointRing(ring[0][0], ring[0][1]);
                ringSink.lineEnd();
                var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
                ring.pop();
                polygon.push(ring);
                ring = null;
                if (!n) return;
                // No intersections.
                if (clean & 1) {
                    segment = ringSegments[0];
                    if ((m = segment.length - 1) > 0) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        sink.lineStart();
                        for(i = 0; i < m; ++i)sink.point((point = segment[i])[0], point[1]);
                        sink.lineEnd();
                    }
                    return;
                }
                // Rejoin connected segments.
                // TODO reuse ringBuffer.rejoin()?
                if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
                segments.push(ringSegments.filter(validSegment));
            }
            return clip;
        };
    }
    function validSegment(segment) {
        return segment.length > 1;
    }
    // Intersections are sorted along the clip edge. For both antimeridian cutting
    // and circle clipping, the same comparison is used.
    function compareIntersection(a, b) {
        return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);
    }
    var clipAntimeridian = clip(function() {
        return true;
    }, clipAntimeridianLine, clipAntimeridianInterpolate, [
        -pi$4,
        -halfPi$3
    ]);
    // Takes a line and cuts into visible segments. Return values: 0 - there were
    // intersections or the line was empty; 1 - no intersections; 2 - there were
    // intersections, and the first and last segments should be rejoined.
    function clipAntimeridianLine(stream) {
        var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean; // no intersections
        return {
            lineStart: function() {
                stream.lineStart();
                clean = 1;
            },
            point: function(lambda1, phi1) {
                var sign1 = lambda1 > 0 ? pi$4 : -pi$4, delta = abs(lambda1 - lambda0);
                if (abs(delta - pi$4) < epsilon$4) {
                    stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);
                    stream.point(sign0, phi0);
                    stream.lineEnd();
                    stream.lineStart();
                    stream.point(sign1, phi0);
                    stream.point(lambda1, phi0);
                    clean = 0;
                } else if (sign0 !== sign1 && delta >= pi$4) {
                    if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies
                    if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;
                    phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                    stream.point(sign0, phi0);
                    stream.lineEnd();
                    stream.lineStart();
                    stream.point(sign1, phi0);
                    clean = 0;
                }
                stream.point(lambda0 = lambda1, phi0 = phi1);
                sign0 = sign1;
            },
            lineEnd: function() {
                stream.lineEnd();
                lambda0 = phi0 = NaN;
            },
            clean: function() {
                return 2 - clean; // if intersections, rejoin first and last segments
            }
        };
    }
    function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
        var cosPhi0, cosPhi1, sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
        return abs(sinLambda0Lambda1) > epsilon$4 ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
    }
    function clipAntimeridianInterpolate(from, to, direction, stream) {
        var phi;
        if (from == null) {
            phi = direction * halfPi$3;
            stream.point(-pi$4, phi);
            stream.point(0, phi);
            stream.point(pi$4, phi);
            stream.point(pi$4, 0);
            stream.point(pi$4, -phi);
            stream.point(0, -phi);
            stream.point(-pi$4, -phi);
            stream.point(-pi$4, 0);
            stream.point(-pi$4, phi);
        } else if (abs(from[0] - to[0]) > epsilon$4) {
            var lambda = from[0] < to[0] ? pi$4 : -pi$4;
            phi = direction * lambda / 2;
            stream.point(-lambda, phi);
            stream.point(0, phi);
            stream.point(lambda, phi);
        } else {
            stream.point(to[0], to[1]);
        }
    }
    function clipCircle(radius, delta) {
        var cr = cos$1(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case
        function interpolate(from, to, direction, stream) {
            circleStream(stream, radius, delta, direction, from, to);
        }
        function visible(lambda, phi) {
            return cos$1(lambda) * cos$1(phi) > cr;
        }
        // Takes a line and cuts into visible segments. Return values used for polygon
        // clipping: 0 - there were intersections or the line was empty; 1 - no
        // intersections 2 - there were intersections, and the first and last segments
        // should be rejoined.
        function clipLine(stream) {
            var point0, c0, v0, v00, clean; // no intersections
            return {
                lineStart: function() {
                    v00 = v0 = false;
                    clean = 1;
                },
                point: function(lambda, phi) {
                    var point1 = [
                        lambda,
                        phi
                    ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;
                    if (!point0 && (v00 = v0 = v)) stream.lineStart();
                    // Handle degeneracies.
                    // TODO ignore if not clipping polygons.
                    if (v !== v0) {
                        point2 = intersect(point0, point1);
                        if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
                            point1[0] += epsilon$4;
                            point1[1] += epsilon$4;
                            v = visible(point1[0], point1[1]);
                        }
                    }
                    if (v !== v0) {
                        clean = 0;
                        if (v) {
                            // outside going in
                            stream.lineStart();
                            point2 = intersect(point1, point0);
                            stream.point(point2[0], point2[1]);
                        } else {
                            // inside going out
                            point2 = intersect(point0, point1);
                            stream.point(point2[0], point2[1]);
                            stream.lineEnd();
                        }
                        point0 = point2;
                    } else if (notHemisphere && point0 && smallRadius ^ v) {
                        var t;
                        // If the codes for two points are different, or are both zero,
                        // and there this segment intersects with the small circle.
                        if (!(c & c0) && (t = intersect(point1, point0, true))) {
                            clean = 0;
                            if (smallRadius) {
                                stream.lineStart();
                                stream.point(t[0][0], t[0][1]);
                                stream.point(t[1][0], t[1][1]);
                                stream.lineEnd();
                            } else {
                                stream.point(t[1][0], t[1][1]);
                                stream.lineEnd();
                                stream.lineStart();
                                stream.point(t[0][0], t[0][1]);
                            }
                        }
                    }
                    if (v && (!point0 || !pointEqual(point0, point1))) {
                        stream.point(point1[0], point1[1]);
                    }
                    point0 = point1, v0 = v, c0 = c;
                },
                lineEnd: function() {
                    if (v0) stream.lineEnd();
                    point0 = null;
                },
                // Rejoin first and last segments if there were intersections and the first
                // and last points were visible.
                clean: function() {
                    return clean | (v00 && v0) << 1;
                }
            };
        }
        // Intersects the great circle between a and b with the clip circle.
        function intersect(a, b, two) {
            var pa = cartesian(a), pb = cartesian(b);
            // We have two planes, n1.p = d1 and n2.p = d2.
            // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
            var n1 = [
                1,
                0,
                0
            ], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
            // Two polar points.
            if (!determinant) return !two && a;
            var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
            cartesianAddInPlace(A, B);
            // Solve |p(t)|^2 = 1.
            var u = n1xn2, w = cartesianDot(A, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A, A) - 1);
            if (t2 < 0) return;
            var t = sqrt$1(t2), q = cartesianScale(u, (-w - t) / uu);
            cartesianAddInPlace(q, A);
            q = spherical(q);
            if (!two) return q;
            // Two intersection points.
            var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
            if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
            var delta = lambda1 - lambda0, polar = abs(delta - pi$4) < epsilon$4, meridian = polar || delta < epsilon$4;
            if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
            // Check that the first point is between a and b.
            if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
                var q1 = cartesianScale(u, (-w + t) / uu);
                cartesianAddInPlace(q1, A);
                return [
                    q,
                    spherical(q1)
                ];
            }
        }
        // Generates a 4-bit vector representing the location of a point relative to
        // the small circle's bounding box.
        function code(lambda, phi) {
            var r = smallRadius ? radius : pi$4 - radius, code = 0;
            if (lambda < -r) code |= 1; // left
            else if (lambda > r) code |= 2; // right
            if (phi < -r) code |= 4; // below
            else if (phi > r) code |= 8; // above
            return code;
        }
        return clip(visible, clipLine, interpolate, smallRadius ? [
            0,
            -radius
        ] : [
            -pi$4,
            radius - pi$4
        ]);
    }
    function transform$1(prototype) {
        return {
            stream: transform$2(prototype)
        };
    }
    function transform$2(prototype) {
        function T() {}
        var p = T.prototype = Object.create(Transform$1.prototype);
        for(var k in prototype)p[k] = prototype[k];
        return function(stream) {
            var t = new T;
            t.stream = stream;
            return t;
        };
    }
    function Transform$1() {}
    Transform$1.prototype = {
        point: function(x, y) {
            this.stream.point(x, y);
        },
        sphere: function() {
            this.stream.sphere();
        },
        lineStart: function() {
            this.stream.lineStart();
        },
        lineEnd: function() {
            this.stream.lineEnd();
        },
        polygonStart: function() {
            this.stream.polygonStart();
        },
        polygonEnd: function() {
            this.stream.polygonEnd();
        }
    };
    function fit(project, extent, object) {
        var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], clip = project.clipExtent && project.clipExtent();
        project.scale(150).translate([
            0,
            0
        ]);
        if (clip != null) project.clipExtent(null);
        geoStream(object, project.stream(boundsStream$1));
        var b = boundsStream$1.result(), k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        if (clip != null) project.clipExtent(clip);
        return project.scale(k * 150).translate([
            x,
            y
        ]);
    }
    function fitSize(project) {
        return function(size, object) {
            return fit(project, [
                [
                    0,
                    0
                ],
                size
            ], object);
        };
    }
    function fitExtent(project) {
        return function(extent, object) {
            return fit(project, extent, object);
        };
    }
    var maxDepth = 16;
    var cosMinDistance = cos$1(30 * radians);
    // cos(minimum angular distance)
    function resample(project, delta2) {
        return +delta2 ? resample$1(project, delta2) : resampleNone(project);
    }
    function resampleNone(project) {
        return transform$2({
            point: function(x, y) {
                x = project(x, y);
                this.stream.point(x[0], x[1]);
            }
        });
    }
    function resample$1(project, delta2) {
        function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
            var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
            if (d2 > 4 * delta2 && depth--) {
                var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = sqrt$1(a * a + b * b + c * c), phi2 = asin$1(c /= m), lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
                if (dz * dz / d2 > delta2 // perpendicular projected distance
                 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
                 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                    resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                    stream.point(x2, y2);
                    resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
                }
            }
        }
        return function(stream) {
            var lambda00, x00, y00, a00, b00, c00, lambda0, x0, y0, a0, b0, c0; // previous point
            var resampleStream = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function() {
                    stream.polygonStart();
                    resampleStream.lineStart = ringStart;
                },
                polygonEnd: function() {
                    stream.polygonEnd();
                    resampleStream.lineStart = lineStart;
                }
            };
            function point(x, y) {
                x = project(x, y);
                stream.point(x[0], x[1]);
            }
            function lineStart() {
                x0 = NaN;
                resampleStream.point = linePoint;
                stream.lineStart();
            }
            function linePoint(lambda, phi) {
                var c = cartesian([
                    lambda,
                    phi
                ]), p = project(lambda, phi);
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
                stream.point(x0, y0);
            }
            function lineEnd() {
                resampleStream.point = point;
                stream.lineEnd();
            }
            function ringStart() {
                lineStart();
                resampleStream.point = ringPoint;
                resampleStream.lineEnd = ringEnd;
            }
            function ringPoint(lambda, phi) {
                linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
                resampleStream.point = linePoint;
            }
            function ringEnd() {
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
                resampleStream.lineEnd = lineEnd;
                lineEnd();
            }
            return resampleStream;
        };
    }
    var transformRadians = transform$2({
        point: function(x, y) {
            this.stream.point(x * radians, y * radians);
        }
    });
    function projection(project) {
        return projectionMutator(function() {
            return project;
        })();
    }
    function projectionMutator(projectAt) {
        var project, k = 150, x = 480, y = 250, dx, dy, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, theta = null, preclip = clipAntimeridian, x0 = null, y0, x1, y1, postclip = identity$7, delta2 = 0.5, projectResample = resample(projectTransform, delta2), cache, cacheStream;
        function projection(point) {
            point = projectRotate(point[0] * radians, point[1] * radians);
            return [
                point[0] * k + dx,
                dy - point[1] * k
            ];
        }
        function invert(point) {
            point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
            return point && [
                point[0] * degrees$1,
                point[1] * degrees$1
            ];
        }
        function projectTransform(x, y) {
            return x = project(x, y), [
                x[0] * k + dx,
                dy - x[1] * k
            ];
        }
        projection.stream = function(stream) {
            return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
        };
        projection.clipAngle = function(_) {
            return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
        };
        projection.clipExtent = function(_) {
            return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
                [
                    x0,
                    y0
                ],
                [
                    x1,
                    y1
                ]
            ];
        };
        projection.scale = function(_) {
            return arguments.length ? (k = +_, recenter()) : k;
        };
        projection.translate = function(_) {
            return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
                x,
                y
            ];
        };
        projection.center = function(_) {
            return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [
                lambda * degrees$1,
                phi * degrees$1
            ];
        };
        projection.rotate = function(_) {
            return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [
                deltaLambda * degrees$1,
                deltaPhi * degrees$1,
                deltaGamma * degrees$1
            ];
        };
        projection.precision = function(_) {
            return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);
        };
        projection.fitExtent = fitExtent(projection);
        projection.fitSize = fitSize(projection);
        function recenter() {
            projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
            var center = project(lambda, phi);
            dx = x - center[0] * k;
            dy = y + center[1] * k;
            return reset();
        }
        function reset() {
            cache = cacheStream = null;
            return projection;
        }
        return function() {
            project = projectAt.apply(this, arguments);
            projection.invert = project.invert && invert;
            return recenter();
        };
    }
    function conicProjection(projectAt) {
        var phi0 = 0, phi1 = pi$4 / 3, m = projectionMutator(projectAt), p = m(phi0, phi1);
        p.parallels = function(_) {
            return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [
                phi0 * degrees$1,
                phi1 * degrees$1
            ];
        };
        return p;
    }
    function conicEqualAreaRaw(y0, y1) {
        var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2, c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$1(c) / n;
        function project(x, y) {
            var r = sqrt$1(c - 2 * n * sin$1(y)) / n;
            return [
                r * sin$1(x *= n),
                r0 - r * cos$1(x)
            ];
        }
        project.invert = function(x, y) {
            var r0y = r0 - y;
            return [
                atan2(x, r0y) / n,
                asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))
            ];
        };
        return project;
    }
    function conicEqualArea() {
        return conicProjection(conicEqualAreaRaw).scale(155.424).center([
            0,
            33.6442
        ]);
    }
    function albers() {
        return conicEqualArea().parallels([
            29.5,
            45.5
        ]).scale(1070).translate([
            480,
            250
        ]).rotate([
            96,
            0
        ]).center([
            -0.6,
            38.7
        ]);
    }
    // The projections must have mutually exclusive clip regions on the sphere,
    // as this will avoid emitting interleaving lines and polygons.
    function multiplex(streams) {
        var n = streams.length;
        return {
            point: function(x, y) {
                var i = -1;
                while(++i < n)streams[i].point(x, y);
            },
            sphere: function() {
                var i = -1;
                while(++i < n)streams[i].sphere();
            },
            lineStart: function() {
                var i = -1;
                while(++i < n)streams[i].lineStart();
            },
            lineEnd: function() {
                var i = -1;
                while(++i < n)streams[i].lineEnd();
            },
            polygonStart: function() {
                var i = -1;
                while(++i < n)streams[i].polygonStart();
            },
            polygonEnd: function() {
                var i = -1;
                while(++i < n)streams[i].polygonEnd();
            }
        };
    }
    // A composite projection for the United States, configured by default for
    // 960×500. The projection also works quite well at 960×600 if you change the
    // scale to 1285 and adjust the translate accordingly. The set of standard
    // parallels for each region comes from USGS, which is published here:
    // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
    function albersUsa() {
        var cache, cacheStream, lower48 = albers(), lower48Point, alaska = conicEqualArea().rotate([
            154,
            0
        ]).center([
            -2,
            58.5
        ]).parallels([
            55,
            65
        ]), alaskaPoint, hawaii = conicEqualArea().rotate([
            157,
            0
        ]).center([
            -3,
            19.9
        ]).parallels([
            8,
            18
        ]), hawaiiPoint, point, pointStream = {
            point: function(x, y) {
                point = [
                    x,
                    y
                ];
            }
        };
        function albersUsa(coordinates) {
            var x = coordinates[0], y = coordinates[1];
            return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
        }
        albersUsa.invert = function(coordinates) {
            var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
            return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
        };
        albersUsa.stream = function(stream) {
            return cache && cacheStream === stream ? cache : cache = multiplex([
                lower48.stream(cacheStream = stream),
                alaska.stream(stream),
                hawaii.stream(stream)
            ]);
        };
        albersUsa.precision = function(_) {
            if (!arguments.length) return lower48.precision();
            lower48.precision(_), alaska.precision(_), hawaii.precision(_);
            return albersUsa;
        };
        albersUsa.scale = function(_) {
            if (!arguments.length) return lower48.scale();
            lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
            return albersUsa.translate(lower48.translate());
        };
        albersUsa.translate = function(_) {
            if (!arguments.length) return lower48.translate();
            var k = lower48.scale(), x = +_[0], y = +_[1];
            lower48Point = lower48.translate(_).clipExtent([
                [
                    x - 0.455 * k,
                    y - 0.238 * k
                ],
                [
                    x + 0.455 * k,
                    y + 0.238 * k
                ]
            ]).stream(pointStream);
            alaskaPoint = alaska.translate([
                x - 0.307 * k,
                y + 0.201 * k
            ]).clipExtent([
                [
                    x - 0.425 * k + epsilon$4,
                    y + 0.120 * k + epsilon$4
                ],
                [
                    x - 0.214 * k - epsilon$4,
                    y + 0.234 * k - epsilon$4
                ]
            ]).stream(pointStream);
            hawaiiPoint = hawaii.translate([
                x - 0.205 * k,
                y + 0.212 * k
            ]).clipExtent([
                [
                    x - 0.214 * k + epsilon$4,
                    y + 0.166 * k + epsilon$4
                ],
                [
                    x - 0.115 * k - epsilon$4,
                    y + 0.234 * k - epsilon$4
                ]
            ]).stream(pointStream);
            return albersUsa;
        };
        albersUsa.fitExtent = fitExtent(albersUsa);
        albersUsa.fitSize = fitSize(albersUsa);
        return albersUsa.scale(1070);
    }
    function azimuthalRaw(scale) {
        return function(x, y) {
            var cx = cos$1(x), cy = cos$1(y), k = scale(cx * cy);
            return [
                k * cy * sin$1(x),
                k * sin$1(y)
            ];
        };
    }
    function azimuthalInvert(angle) {
        return function(x, y) {
            var z = sqrt$1(x * x + y * y), c = angle(z), sc = sin$1(c), cc = cos$1(c);
            return [
                atan2(x * sc, z * cc),
                asin$1(z && y * sc / z)
            ];
        };
    }
    var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
        return sqrt$1(2 / (1 + cxcy));
    });
    azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
        return 2 * asin$1(z / 2);
    });
    function azimuthalEqualArea() {
        return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
    }
    var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
        return (c = acos(c)) && c / sin$1(c);
    });
    azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
        return z;
    });
    function azimuthalEquidistant() {
        return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
    }
    function mercatorRaw(lambda, phi) {
        return [
            lambda,
            log$1(tan((halfPi$3 + phi) / 2))
        ];
    }
    mercatorRaw.invert = function(x, y) {
        return [
            x,
            2 * atan(exp(y)) - halfPi$3
        ];
    };
    function mercator() {
        return mercatorProjection(mercatorRaw).scale(961 / tau$4);
    }
    function mercatorProjection(project) {
        var m = projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
        m.scale = function(_) {
            return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
        };
        m.translate = function(_) {
            return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
        };
        m.clipExtent = function(_) {
            if (!arguments.length) return clipAuto ? null : clipExtent();
            if (clipAuto = _ == null) {
                var k = pi$4 * scale(), t = translate();
                _ = [
                    [
                        t[0] - k,
                        t[1] - k
                    ],
                    [
                        t[0] + k,
                        t[1] + k
                    ]
                ];
            }
            clipExtent(_);
            return m;
        };
        return m.clipExtent(null);
    }
    function tany(y) {
        return tan((halfPi$3 + y) / 2);
    }
    function conicConformalRaw(y0, y1) {
        var cy0 = cos$1(y0), n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)), f = cy0 * pow$1(tany(y0), n) / n;
        if (!n) return mercatorRaw;
        function project(x, y) {
            if (f > 0) {
                if (y < -halfPi$3 + epsilon$4) y = -halfPi$3 + epsilon$4;
            } else {
                if (y > halfPi$3 - epsilon$4) y = halfPi$3 - epsilon$4;
            }
            var r = f / pow$1(tany(y), n);
            return [
                r * sin$1(n * x),
                f - r * cos$1(n * x)
            ];
        }
        project.invert = function(x, y) {
            var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);
            return [
                atan2(x, fy) / n,
                2 * atan(pow$1(f / r, 1 / n)) - halfPi$3
            ];
        };
        return project;
    }
    function conicConformal() {
        return conicProjection(conicConformalRaw).scale(109.5).parallels([
            30,
            30
        ]);
    }
    function equirectangularRaw(lambda, phi) {
        return [
            lambda,
            phi
        ];
    }
    equirectangularRaw.invert = equirectangularRaw;
    function equirectangular() {
        return projection(equirectangularRaw).scale(152.63);
    }
    function conicEquidistantRaw(y0, y1) {
        var cy0 = cos$1(y0), n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0), g = cy0 / n + y0;
        if (abs(n) < epsilon$4) return equirectangularRaw;
        function project(x, y) {
            var gy = g - y, nx = n * x;
            return [
                gy * sin$1(nx),
                g - gy * cos$1(nx)
            ];
        }
        project.invert = function(x, y) {
            var gy = g - y;
            return [
                atan2(x, gy) / n,
                g - sign$1(n) * sqrt$1(x * x + gy * gy)
            ];
        };
        return project;
    }
    function conicEquidistant() {
        return conicProjection(conicEquidistantRaw).scale(131.154).center([
            0,
            13.9389
        ]);
    }
    function gnomonicRaw(x, y) {
        var cy = cos$1(y), k = cos$1(x) * cy;
        return [
            cy * sin$1(x) / k,
            sin$1(y) / k
        ];
    }
    gnomonicRaw.invert = azimuthalInvert(atan);
    function gnomonic() {
        return projection(gnomonicRaw).scale(144.049).clipAngle(60);
    }
    function orthographicRaw(x, y) {
        return [
            cos$1(y) * sin$1(x),
            sin$1(y)
        ];
    }
    orthographicRaw.invert = azimuthalInvert(asin$1);
    function orthographic() {
        return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$4);
    }
    function stereographicRaw(x, y) {
        var cy = cos$1(y), k = 1 + cos$1(x) * cy;
        return [
            cy * sin$1(x) / k,
            sin$1(y) / k
        ];
    }
    stereographicRaw.invert = azimuthalInvert(function(z) {
        return 2 * atan(z);
    });
    function stereographic() {
        return projection(stereographicRaw).scale(250).clipAngle(142);
    }
    function transverseMercatorRaw(lambda, phi) {
        return [
            log$1(tan((halfPi$3 + phi) / 2)),
            -lambda
        ];
    }
    transverseMercatorRaw.invert = function(x, y) {
        return [
            -y,
            2 * atan(exp(x)) - halfPi$3
        ];
    };
    function transverseMercator() {
        var m = mercatorProjection(transverseMercatorRaw), center = m.center, rotate = m.rotate;
        m.center = function(_) {
            return arguments.length ? center([
                -_[1],
                _[0]
            ]) : (_ = center(), [
                _[1],
                -_[0]
            ]);
        };
        m.rotate = function(_) {
            return arguments.length ? rotate([
                _[0],
                _[1],
                _.length > 2 ? _[2] + 90 : 90
            ]) : (_ = rotate(), [
                _[0],
                _[1],
                _[2] - 90
            ]);
        };
        return rotate([
            0,
            0,
            90
        ]).scale(159.155);
    }
    exports1.version = version;
    exports1.bisect = bisectRight;
    exports1.bisectRight = bisectRight;
    exports1.bisectLeft = bisectLeft;
    exports1.ascending = ascending;
    exports1.bisector = bisector;
    exports1.descending = descending;
    exports1.deviation = deviation;
    exports1.extent = extent;
    exports1.histogram = histogram;
    exports1.thresholdFreedmanDiaconis = freedmanDiaconis;
    exports1.thresholdScott = scott;
    exports1.thresholdSturges = sturges;
    exports1.max = max;
    exports1.mean = mean;
    exports1.median = median;
    exports1.merge = merge;
    exports1.min = min;
    exports1.pairs = pairs;
    exports1.permute = permute;
    exports1.quantile = threshold;
    exports1.range = range;
    exports1.scan = scan;
    exports1.shuffle = shuffle;
    exports1.sum = sum;
    exports1.ticks = ticks;
    exports1.tickStep = tickStep;
    exports1.transpose = transpose;
    exports1.variance = variance;
    exports1.zip = zip;
    exports1.entries = entries;
    exports1.keys = keys;
    exports1.values = values;
    exports1.map = map$1;
    exports1.set = set;
    exports1.nest = nest;
    exports1.randomUniform = uniform;
    exports1.randomNormal = normal;
    exports1.randomLogNormal = logNormal;
    exports1.randomBates = bates;
    exports1.randomIrwinHall = irwinHall;
    exports1.randomExponential = exponential;
    exports1.easeLinear = linear;
    exports1.easeQuad = quadInOut;
    exports1.easeQuadIn = quadIn;
    exports1.easeQuadOut = quadOut;
    exports1.easeQuadInOut = quadInOut;
    exports1.easeCubic = easeCubicInOut;
    exports1.easeCubicIn = cubicIn;
    exports1.easeCubicOut = cubicOut;
    exports1.easeCubicInOut = easeCubicInOut;
    exports1.easePoly = polyInOut;
    exports1.easePolyIn = polyIn;
    exports1.easePolyOut = polyOut;
    exports1.easePolyInOut = polyInOut;
    exports1.easeSin = sinInOut;
    exports1.easeSinIn = sinIn;
    exports1.easeSinOut = sinOut;
    exports1.easeSinInOut = sinInOut;
    exports1.easeExp = expInOut;
    exports1.easeExpIn = expIn;
    exports1.easeExpOut = expOut;
    exports1.easeExpInOut = expInOut;
    exports1.easeCircle = circleInOut;
    exports1.easeCircleIn = circleIn;
    exports1.easeCircleOut = circleOut;
    exports1.easeCircleInOut = circleInOut;
    exports1.easeBounce = bounceOut;
    exports1.easeBounceIn = bounceIn;
    exports1.easeBounceOut = bounceOut;
    exports1.easeBounceInOut = bounceInOut;
    exports1.easeBack = backInOut;
    exports1.easeBackIn = backIn;
    exports1.easeBackOut = backOut;
    exports1.easeBackInOut = backInOut;
    exports1.easeElastic = elasticOut;
    exports1.easeElasticIn = elasticIn;
    exports1.easeElasticOut = elasticOut;
    exports1.easeElasticInOut = elasticInOut;
    exports1.polygonArea = area;
    exports1.polygonCentroid = centroid;
    exports1.polygonHull = hull;
    exports1.polygonContains = contains;
    exports1.polygonLength = length$1;
    exports1.path = path;
    exports1.quadtree = quadtree;
    exports1.queue = queue;
    exports1.arc = arc;
    exports1.area = area$1;
    exports1.line = line;
    exports1.pie = pie;
    exports1.radialArea = radialArea;
    exports1.radialLine = radialLine$1;
    exports1.symbol = symbol;
    exports1.symbols = symbols;
    exports1.symbolCircle = circle;
    exports1.symbolCross = cross$1;
    exports1.symbolDiamond = diamond;
    exports1.symbolSquare = square;
    exports1.symbolStar = star;
    exports1.symbolTriangle = triangle;
    exports1.symbolWye = wye;
    exports1.curveBasisClosed = basisClosed;
    exports1.curveBasisOpen = basisOpen;
    exports1.curveBasis = basis;
    exports1.curveBundle = bundle;
    exports1.curveCardinalClosed = cardinalClosed;
    exports1.curveCardinalOpen = cardinalOpen;
    exports1.curveCardinal = cardinal;
    exports1.curveCatmullRomClosed = catmullRomClosed;
    exports1.curveCatmullRomOpen = catmullRomOpen;
    exports1.curveCatmullRom = catmullRom;
    exports1.curveLinearClosed = linearClosed;
    exports1.curveLinear = curveLinear;
    exports1.curveMonotoneX = monotoneX;
    exports1.curveMonotoneY = monotoneY;
    exports1.curveNatural = natural;
    exports1.curveStep = step;
    exports1.curveStepAfter = stepAfter;
    exports1.curveStepBefore = stepBefore;
    exports1.stack = stack;
    exports1.stackOffsetExpand = expand;
    exports1.stackOffsetNone = none;
    exports1.stackOffsetSilhouette = silhouette;
    exports1.stackOffsetWiggle = wiggle;
    exports1.stackOrderAscending = ascending$1;
    exports1.stackOrderDescending = descending$2;
    exports1.stackOrderInsideOut = insideOut;
    exports1.stackOrderNone = none$1;
    exports1.stackOrderReverse = reverse;
    exports1.color = color;
    exports1.rgb = colorRgb;
    exports1.hsl = colorHsl;
    exports1.lab = lab;
    exports1.hcl = colorHcl;
    exports1.cubehelix = cubehelix;
    exports1.interpolate = interpolate;
    exports1.interpolateArray = array$1;
    exports1.interpolateDate = date;
    exports1.interpolateNumber = interpolateNumber;
    exports1.interpolateObject = object;
    exports1.interpolateRound = interpolateRound;
    exports1.interpolateString = interpolateString;
    exports1.interpolateTransformCss = interpolateTransform$1;
    exports1.interpolateTransformSvg = interpolateTransform$2;
    exports1.interpolateZoom = interpolateZoom;
    exports1.interpolateRgb = interpolateRgb;
    exports1.interpolateRgbBasis = rgbBasis;
    exports1.interpolateRgbBasisClosed = rgbBasisClosed;
    exports1.interpolateHsl = hsl$1;
    exports1.interpolateHslLong = hslLong;
    exports1.interpolateLab = lab$1;
    exports1.interpolateHcl = hcl$1;
    exports1.interpolateHclLong = hclLong;
    exports1.interpolateCubehelix = cubehelix$2;
    exports1.interpolateCubehelixLong = interpolateCubehelixLong;
    exports1.interpolateBasis = basis$2;
    exports1.interpolateBasisClosed = basisClosed$1;
    exports1.quantize = quantize;
    exports1.dispatch = dispatch;
    exports1.dsvFormat = dsv;
    exports1.csvParse = csvParse;
    exports1.csvParseRows = csvParseRows;
    exports1.csvFormat = csvFormat;
    exports1.csvFormatRows = csvFormatRows;
    exports1.tsvParse = tsvParse;
    exports1.tsvParseRows = tsvParseRows;
    exports1.tsvFormat = tsvFormat;
    exports1.tsvFormatRows = tsvFormatRows;
    exports1.request = request;
    exports1.html = html;
    exports1.json = json;
    exports1.text = text;
    exports1.xml = xml;
    exports1.csv = csv$1;
    exports1.tsv = tsv$1;
    exports1.now = now;
    exports1.timer = timer;
    exports1.timerFlush = timerFlush;
    exports1.timeout = timeout$1;
    exports1.interval = interval$1;
    exports1.timeInterval = newInterval;
    exports1.timeMillisecond = millisecond;
    exports1.timeMilliseconds = milliseconds;
    exports1.timeSecond = second;
    exports1.timeSeconds = seconds;
    exports1.timeMinute = minute;
    exports1.timeMinutes = minutes;
    exports1.timeHour = hour;
    exports1.timeHours = hours;
    exports1.timeDay = day;
    exports1.timeDays = days;
    exports1.timeWeek = timeWeek;
    exports1.timeWeeks = sundays;
    exports1.timeSunday = timeWeek;
    exports1.timeSundays = sundays;
    exports1.timeMonday = timeMonday;
    exports1.timeMondays = mondays;
    exports1.timeTuesday = tuesday;
    exports1.timeTuesdays = tuesdays;
    exports1.timeWednesday = wednesday;
    exports1.timeWednesdays = wednesdays;
    exports1.timeThursday = thursday;
    exports1.timeThursdays = thursdays;
    exports1.timeFriday = friday;
    exports1.timeFridays = fridays;
    exports1.timeSaturday = saturday;
    exports1.timeSaturdays = saturdays;
    exports1.timeMonth = month;
    exports1.timeMonths = months;
    exports1.timeYear = year;
    exports1.timeYears = years;
    exports1.utcMillisecond = millisecond;
    exports1.utcMilliseconds = milliseconds;
    exports1.utcSecond = second;
    exports1.utcSeconds = seconds;
    exports1.utcMinute = utcMinute;
    exports1.utcMinutes = utcMinutes;
    exports1.utcHour = utcHour;
    exports1.utcHours = utcHours;
    exports1.utcDay = utcDay;
    exports1.utcDays = utcDays;
    exports1.utcWeek = utcWeek;
    exports1.utcWeeks = utcSundays;
    exports1.utcSunday = utcWeek;
    exports1.utcSundays = utcSundays;
    exports1.utcMonday = utcMonday;
    exports1.utcMondays = utcMondays;
    exports1.utcTuesday = utcTuesday;
    exports1.utcTuesdays = utcTuesdays;
    exports1.utcWednesday = utcWednesday;
    exports1.utcWednesdays = utcWednesdays;
    exports1.utcThursday = utcThursday;
    exports1.utcThursdays = utcThursdays;
    exports1.utcFriday = utcFriday;
    exports1.utcFridays = utcFridays;
    exports1.utcSaturday = utcSaturday;
    exports1.utcSaturdays = utcSaturdays;
    exports1.utcMonth = utcMonth;
    exports1.utcMonths = utcMonths;
    exports1.utcYear = utcYear;
    exports1.utcYears = utcYears;
    exports1.formatLocale = formatLocale;
    exports1.formatDefaultLocale = defaultLocale;
    exports1.formatSpecifier = formatSpecifier;
    exports1.precisionFixed = precisionFixed;
    exports1.precisionPrefix = precisionPrefix;
    exports1.precisionRound = precisionRound;
    exports1.isoFormat = formatIso;
    exports1.isoParse = parseIso;
    exports1.timeFormatLocale = formatLocale$1;
    exports1.timeFormatDefaultLocale = defaultLocale$1;
    exports1.scaleBand = band;
    exports1.scalePoint = point$4;
    exports1.scaleIdentity = identity$4;
    exports1.scaleLinear = linear$2;
    exports1.scaleLog = log;
    exports1.scaleOrdinal = ordinal;
    exports1.scaleImplicit = implicit;
    exports1.scalePow = pow;
    exports1.scaleSqrt = sqrt;
    exports1.scaleQuantile = quantile;
    exports1.scaleQuantize = quantize$1;
    exports1.scaleThreshold = threshold$1;
    exports1.scaleTime = time;
    exports1.scaleUtc = utcTime;
    exports1.schemeCategory10 = category10;
    exports1.schemeCategory20b = category20b;
    exports1.schemeCategory20c = category20c;
    exports1.schemeCategory20 = category20;
    exports1.scaleSequential = sequential;
    exports1.interpolateCubehelixDefault = cubehelix$3;
    exports1.interpolateRainbow = rainbow$1;
    exports1.interpolateWarm = warm;
    exports1.interpolateCool = cool;
    exports1.interpolateViridis = viridis;
    exports1.interpolateMagma = magma;
    exports1.interpolateInferno = inferno;
    exports1.interpolatePlasma = plasma;
    exports1.creator = creator;
    exports1.customEvent = customEvent;
    exports1.local = local;
    exports1.matcher = matcher$1;
    exports1.mouse = mouse;
    exports1.namespace = namespace;
    exports1.namespaces = namespaces;
    exports1.select = select;
    exports1.selectAll = selectAll;
    exports1.selection = selection;
    exports1.selector = selector;
    exports1.selectorAll = selectorAll;
    exports1.touch = touch;
    exports1.touches = touches;
    exports1.window = window;
    exports1.active = active;
    exports1.interrupt = interrupt;
    exports1.transition = transition;
    exports1.axisTop = axisTop;
    exports1.axisRight = axisRight;
    exports1.axisBottom = axisBottom;
    exports1.axisLeft = axisLeft;
    exports1.cluster = cluster;
    exports1.hierarchy = hierarchy;
    exports1.pack = index;
    exports1.packSiblings = siblings;
    exports1.packEnclose = enclose;
    exports1.partition = partition;
    exports1.stratify = stratify;
    exports1.tree = tree;
    exports1.treemap = index$1;
    exports1.treemapBinary = binary;
    exports1.treemapDice = treemapDice;
    exports1.treemapSlice = treemapSlice;
    exports1.treemapSliceDice = sliceDice;
    exports1.treemapSquarify = squarify;
    exports1.treemapResquarify = resquarify;
    exports1.forceCenter = center$1;
    exports1.forceCollide = collide;
    exports1.forceLink = link;
    exports1.forceManyBody = manyBody;
    exports1.forceSimulation = simulation;
    exports1.forceX = x$3;
    exports1.forceY = y$3;
    exports1.drag = drag;
    exports1.dragDisable = dragDisable;
    exports1.dragEnable = dragEnable;
    exports1.voronoi = voronoi;
    exports1.zoom = zoom;
    exports1.zoomIdentity = identity$6;
    exports1.zoomTransform = transform;
    exports1.brush = brush;
    exports1.brushX = brushX;
    exports1.brushY = brushY;
    exports1.brushSelection = brushSelection;
    exports1.chord = chord;
    exports1.ribbon = ribbon;
    exports1.geoAlbers = albers;
    exports1.geoAlbersUsa = albersUsa;
    exports1.geoArea = area$2;
    exports1.geoAzimuthalEqualArea = azimuthalEqualArea;
    exports1.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
    exports1.geoAzimuthalEquidistant = azimuthalEquidistant;
    exports1.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
    exports1.geoBounds = bounds;
    exports1.geoCentroid = centroid$1;
    exports1.geoCircle = circle$1;
    exports1.geoClipExtent = extent$1;
    exports1.geoConicConformal = conicConformal;
    exports1.geoConicConformalRaw = conicConformalRaw;
    exports1.geoConicEqualArea = conicEqualArea;
    exports1.geoConicEqualAreaRaw = conicEqualAreaRaw;
    exports1.geoConicEquidistant = conicEquidistant;
    exports1.geoConicEquidistantRaw = conicEquidistantRaw;
    exports1.geoDistance = distance;
    exports1.geoEquirectangular = equirectangular;
    exports1.geoEquirectangularRaw = equirectangularRaw;
    exports1.geoGnomonic = gnomonic;
    exports1.geoGnomonicRaw = gnomonicRaw;
    exports1.geoGraticule = graticule;
    exports1.geoInterpolate = interpolate$2;
    exports1.geoLength = length$2;
    exports1.geoMercator = mercator;
    exports1.geoMercatorRaw = mercatorRaw;
    exports1.geoOrthographic = orthographic;
    exports1.geoOrthographicRaw = orthographicRaw;
    exports1.geoPath = index$3;
    exports1.geoProjection = projection;
    exports1.geoProjectionMutator = projectionMutator;
    exports1.geoRotation = rotation;
    exports1.geoStereographic = stereographic;
    exports1.geoStereographicRaw = stereographicRaw;
    exports1.geoStream = geoStream;
    exports1.geoTransform = transform$1;
    exports1.geoTransverseMercator = transverseMercator;
    exports1.geoTransverseMercatorRaw = transverseMercatorRaw;
    Object.defineProperty(exports1, '__esModule', {
        value: true
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NoZXJwYS9saWIvZDMtNC4yLjIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9kM2pzLm9yZyBWZXJzaW9uIDQuMi4yLiBDb3B5cmlnaHQgMjAxNiBNaWtlIEJvc3RvY2suXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KChnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHZlcnNpb24gPSBcIjQuMi4yXCI7XG5cbiAgZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBiaXNlY3Rvcihjb21wYXJlKSB7XG4gICAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG87XG4gICAgICB9LFxuICAgICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG4gIHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbiAgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcblxuICBmdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBudW1iZXIoeCkge1xuICAgIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG4gIH1cblxuICBmdW5jdGlvbiB2YXJpYW5jZShhcnJheSwgZikge1xuICAgIHZhciBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBtID0gMCxcbiAgICAgICAgYSxcbiAgICAgICAgZCxcbiAgICAgICAgcyA9IDAsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgaiA9IDA7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIWlzTmFOKGEgPSBudW1iZXIoYXJyYXlbaV0pKSkge1xuICAgICAgICAgIGQgPSBhIC0gbTtcbiAgICAgICAgICBtICs9IGQgLyArK2o7XG4gICAgICAgICAgcyArPSBkICogKGEgLSBtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKCFpc05hTihhID0gbnVtYmVyKGYoYXJyYXlbaV0sIGksIGFycmF5KSkpKSB7XG4gICAgICAgICAgZCA9IGEgLSBtO1xuICAgICAgICAgIG0gKz0gZCAvICsrajtcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGogPiAxKSByZXR1cm4gcyAvIChqIC0gMSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXZpYXRpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgdiA9IHZhcmlhbmNlKGFycmF5LCBmKTtcbiAgICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbnQoYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBiLFxuICAgICAgICBjO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYyA9IGI7IGJyZWFrOyB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGEgPiBiKSBhID0gYjtcbiAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYiA+PSBiKSB7IGEgPSBjID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGEgPiBiKSBhID0gYjtcbiAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW2EsIGNdO1xuICB9XG5cbiAgdmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG4gIHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuICB2YXIgbWFwID0gYXJyYXkubWFwO1xuXG4gIGZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfVxuXG4gIHZhciBlMTAgPSBNYXRoLnNxcnQoNTApO1xuICB2YXIgZTUgPSBNYXRoLnNxcnQoMTApO1xuICB2YXIgZTIgPSBNYXRoLnNxcnQoMik7XG4gIGZ1bmN0aW9uIHRpY2tzKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICAgIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICByZXR1cm4gcmFuZ2UoXG4gICAgICBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKSAqIHN0ZXAsXG4gICAgICBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKSAqIHN0ZXAgKyBzdGVwIC8gMiwgLy8gaW5jbHVzaXZlXG4gICAgICBzdGVwXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICAgIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG4gIH1cblxuICBmdW5jdGlvbiBzdHVyZ2VzKHZhbHVlcykge1xuICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gaGlzdG9ncmFtKCkge1xuICAgIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgICBkb21haW4gPSBleHRlbnQsXG4gICAgICAgIHRocmVzaG9sZCA9IHN0dXJnZXM7XG5cbiAgICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHgsXG4gICAgICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgeHogPSBkb21haW4odmFsdWVzKSxcbiAgICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICAgIHgxID0geHpbMV0sXG4gICAgICAgICAgdHogPSB0aHJlc2hvbGQodmFsdWVzLCB4MCwgeDEpO1xuXG4gICAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkgdHogPSB0aWNrcyh4MCwgeDEsIHR6KTtcblxuICAgICAgLy8gUmVtb3ZlIGFueSB0aHJlc2hvbGRzIG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgICAgd2hpbGUgKHR6WzBdIDw9IHgwKSB0ei5zaGlmdCgpLCAtLW07XG4gICAgICB3aGlsZSAodHpbbSAtIDFdID49IHgxKSB0ei5wb3AoKSwgLS1tO1xuXG4gICAgICB2YXIgYmlucyA9IG5ldyBBcnJheShtICsgMSksXG4gICAgICAgICAgYmluO1xuXG4gICAgICAvLyBJbml0aWFsaXplIGJpbnMuXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICAgIGJpbi54MCA9IGkgPiAwID8gdHpbaSAtIDFdIDogeDA7XG4gICAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcbiAgICAgIH1cblxuICAgICAgLy8gQXNzaWduIGRhdGEgdG8gYmlucyBieSB2YWx1ZSwgaWdub3JpbmcgYW55IG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgICAgaWYgKHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICAgIGJpbnNbYmlzZWN0UmlnaHQodHosIHgsIDAsIG0pXS5wdXNoKGRhdGFbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiaW5zO1xuICAgIH1cblxuICAgIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHZhbHVlO1xuICAgIH07XG5cbiAgICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbX1swXSwgX1sxXV0pLCBoaXN0b2dyYW0pIDogZG9tYWluO1xuICAgIH07XG5cbiAgICBoaXN0b2dyYW0udGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB0aHJlc2hvbGQ7XG4gICAgfTtcblxuICAgIHJldHVybiBoaXN0b2dyYW07XG4gIH1cblxuICBmdW5jdGlvbiB0aHJlc2hvbGQoYXJyYXksIHAsIGYpIHtcbiAgICBpZiAoZiA9PSBudWxsKSBmID0gbnVtYmVyO1xuICAgIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XG4gICAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArZihhcnJheVswXSwgMCwgYXJyYXkpO1xuICAgIGlmIChwID49IDEpIHJldHVybiArZihhcnJheVtuIC0gMV0sIG4gLSAxLCBhcnJheSk7XG4gICAgdmFyIG4sXG4gICAgICAgIGggPSAobiAtIDEpICogcCxcbiAgICAgICAgaSA9IE1hdGguZmxvb3IoaCksXG4gICAgICAgIGEgPSArZihhcnJheVtpXSwgaSwgYXJyYXkpLFxuICAgICAgICBiID0gK2YoYXJyYXlbaSArIDFdLCBpICsgMSwgYXJyYXkpO1xuICAgIHJldHVybiBhICsgKGIgLSBhKSAqIChoIC0gaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmcmVlZG1hbkRpYWNvbmlzKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICB2YWx1ZXMgPSBtYXAuY2FsbCh2YWx1ZXMsIG51bWJlcikuc29ydChhc2NlbmRpbmcpO1xuICAgIHJldHVybiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoMiAqICh0aHJlc2hvbGQodmFsdWVzLCAwLjc1KSAtIHRocmVzaG9sZCh2YWx1ZXMsIDAuMjUpKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjb3R0KHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDMuNSAqIGRldmlhdGlvbih2YWx1ZXMpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF4KGFycmF5LCBmKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgYSxcbiAgICAgICAgYjtcblxuICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHsgYSA9IGI7IGJyZWFrOyB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+IGEpIGEgPSBiO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYoYXJyYXlbaV0sIGksIGFycmF5KSkgIT0gbnVsbCAmJiBiID49IGIpIHsgYSA9IGI7IGJyZWFrOyB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZihhcnJheVtpXSwgaSwgYXJyYXkpKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lYW4oYXJyYXksIGYpIHtcbiAgICB2YXIgcyA9IDAsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgaiA9IG47XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpc05hTihhID0gbnVtYmVyKGFycmF5W2ldKSkpIHMgKz0gYTsgZWxzZSAtLWo7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpc05hTihhID0gbnVtYmVyKGYoYXJyYXlbaV0sIGksIGFycmF5KSkpKSBzICs9IGE7IGVsc2UgLS1qO1xuICAgIH1cblxuICAgIGlmIChqKSByZXR1cm4gcyAvIGo7XG4gIH1cblxuICBmdW5jdGlvbiBtZWRpYW4oYXJyYXksIGYpIHtcbiAgICB2YXIgbnVtYmVycyA9IFtdLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBpID0gLTE7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpc05hTihhID0gbnVtYmVyKGFycmF5W2ldKSkpIG51bWJlcnMucHVzaChhKTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWlzTmFOKGEgPSBudW1iZXIoZihhcnJheVtpXSwgaSwgYXJyYXkpKSkpIG51bWJlcnMucHVzaChhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhyZXNob2xkKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UoYXJyYXlzKSB7XG4gICAgdmFyIG4gPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICBtLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIGogPSAwLFxuICAgICAgICBtZXJnZWQsXG4gICAgICAgIGFycmF5O1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgIGFycmF5ID0gYXJyYXlzW25dO1xuICAgICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlICgtLW0gPj0gMCkge1xuICAgICAgICBtZXJnZWRbLS1qXSA9IGFycmF5W21dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBtaW4oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBiO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBhID4gYikgYSA9IGI7XG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZihhcnJheVtpXSwgaSwgYXJyYXkpKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYjsgYnJlYWs7IH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFpcnMoYXJyYXkpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwID0gYXJyYXlbMF0sIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICAgIHdoaWxlIChpIDwgbikgcGFpcnNbaV0gPSBbcCwgcCA9IGFycmF5WysraV1dO1xuICAgIHJldHVybiBwYWlycztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcm11dGUoYXJyYXksIGluZGV4ZXMpIHtcbiAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuICAgIHJldHVybiBwZXJtdXRlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYW4oYXJyYXksIGNvbXBhcmUpIHtcbiAgICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbixcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIHhpLFxuICAgICAgICB4aiA9IGFycmF5W2pdO1xuXG4gICAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb21wYXJlKHhpID0gYXJyYXlbaV0sIHhqKSA8IDAgfHwgY29tcGFyZSh4aiwgeGopICE9PSAwKSB4aiA9IHhpLCBqID0gaTtcblxuICAgIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSwgaTAsIGkxKSB7XG4gICAgdmFyIG0gPSAoaTEgPT0gbnVsbCA/IGFycmF5Lmxlbmd0aCA6IGkxKSAtIChpMCA9IGkwID09IG51bGwgPyAwIDogK2kwKSxcbiAgICAgICAgdCxcbiAgICAgICAgaTtcblxuICAgIHdoaWxlIChtKSB7XG4gICAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgICB0ID0gYXJyYXlbbSArIGkwXTtcbiAgICAgIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdO1xuICAgICAgYXJyYXlbaSArIGkwXSA9IHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gc3VtKGFycmF5LCBmKSB7XG4gICAgdmFyIHMgPSAwLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBhLFxuICAgICAgICBpID0gLTE7XG5cbiAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGEgPSArYXJyYXlbaV0pIHMgKz0gYTsgLy8gTm90ZTogemVybyBhbmQgbnVsbCBhcmUgZXF1aXZhbGVudC5cbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoYSA9ICtmKGFycmF5W2ldLCBpLCBhcnJheSkpIHMgKz0gYTtcbiAgICB9XG5cbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zcG9zZShtYXRyaXgpIHtcbiAgICBpZiAoIShuID0gbWF0cml4Lmxlbmd0aCkpIHJldHVybiBbXTtcbiAgICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XG4gICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjspIHtcbiAgICAgICAgcm93W2pdID0gbWF0cml4W2pdW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNwb3NlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoKGQpIHtcbiAgICByZXR1cm4gZC5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiB6aXAoKSB7XG4gICAgcmV0dXJuIHRyYW5zcG9zZShhcmd1bWVudHMpO1xuICB9XG5cbiAgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG4gIGZ1bmN0aW9uIE1hcCgpIHt9XG5cbiAgTWFwLnByb3RvdHlwZSA9IG1hcCQxLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogTWFwLFxuICAgIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXlzID0gW107XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgICByZXR1cm4gZW50cmllcztcbiAgICB9LFxuICAgIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNpemUgPSAwO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICAgIHJldHVybiBzaXplO1xuICAgIH0sXG4gICAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFwJDEob2JqZWN0LCBmKSB7XG4gICAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICAgIG87XG5cbiAgICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICAgIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBuZXN0KCkge1xuICAgIHZhciBrZXlzID0gW10sXG4gICAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICAgIHJvbGx1cCxcbiAgICAgICAgbmVzdDtcblxuICAgIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHJvbGx1cCAhPSBudWxsXG4gICAgICAgICAgPyByb2xsdXAoYXJyYXkpIDogKHNvcnRWYWx1ZXMgIT0gbnVsbFxuICAgICAgICAgID8gYXJyYXkuc29ydChzb3J0VmFsdWVzKVxuICAgICAgICAgIDogYXJyYXkpO1xuXG4gICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCQxKCksXG4gICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5lc3QgPSB7XG4gICAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICAgIHJldHVybiBtYXAkMSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBTZXQoKSB7fVxuXG4gIHZhciBwcm90byA9IG1hcCQxLnByb3RvdHlwZTtcblxuICBTZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogU2V0LFxuICAgIGhhczogcHJvdG8uaGFzLFxuICAgIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gICAgdmFsdWVzOiBwcm90by5rZXlzLFxuICAgIHNpemU6IHByb3RvLnNpemUsXG4gICAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICAgIGVhY2g6IHByb3RvLmVhY2hcbiAgfTtcblxuICBmdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gICAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBrZXlzKG1hcCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZXMobWFwKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXApIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIGVudHJpZXMucHVzaCh7a2V5OiBrZXksIHZhbHVlOiBtYXBba2V5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5pZm9ybShtaW4sIG1heCkge1xuICAgIG1pbiA9IG1pbiA9PSBudWxsID8gMCA6ICttaW47XG4gICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xuICAgIGVsc2UgbWF4IC09IG1pbjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIG1heCArIG1pbjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsKG11LCBzaWdtYSkge1xuICAgIHZhciB4LCByO1xuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XG4gICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeTtcblxuICAgICAgLy8gSWYgYXZhaWxhYmxlLCB1c2UgdGhlIHNlY29uZCBwcmV2aW91c2x5LWdlbmVyYXRlZCB1bmlmb3JtIHJhbmRvbS5cbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgLy8gT3RoZXJ3aXNlLCBnZW5lcmF0ZSBhIG5ldyB4IGFuZCB5LlxuICAgICAgZWxzZSBkbyB7XG4gICAgICAgIHggPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsb2dOb3JtYWwoKSB7XG4gICAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb21Ob3JtYWwoKSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlyd2luSGFsbChuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgc3VtID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHN1bSArPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYmF0ZXMobikge1xuICAgIHZhciByYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGwobik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gTWF0aC5yYW5kb20oKSkgLyBsYW1iZGE7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhcih0KSB7XG4gICAgcmV0dXJuICt0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgICByZXR1cm4gdCAqIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgICByZXR1cm4gdCAqICgyIC0gdCk7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0IDogLS10ICogKDIgLSB0KSArIDEpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqIHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhc2VDdWJpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xuICB9XG5cbiAgdmFyIGV4cG9uZW50ID0gMztcblxuICB2YXIgcG9seUluID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gICAgZSA9ICtlO1xuXG4gICAgZnVuY3Rpb24gcG9seUluKHQpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgICB9XG5cbiAgICBwb2x5SW4uZXhwb25lbnQgPSBjdXN0b207XG5cbiAgICByZXR1cm4gcG9seUluO1xuICB9KShleHBvbmVudCk7XG5cbiAgdmFyIHBvbHlPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgICBlID0gK2U7XG5cbiAgICBmdW5jdGlvbiBwb2x5T3V0KHQpIHtcbiAgICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIGUpO1xuICAgIH1cblxuICAgIHBvbHlPdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgICByZXR1cm4gcG9seU91dDtcbiAgfSkoZXhwb25lbnQpO1xuXG4gIHZhciBwb2x5SW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgICBlID0gK2U7XG5cbiAgICBmdW5jdGlvbiBwb2x5SW5PdXQodCkge1xuICAgICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3codCwgZSkgOiAyIC0gTWF0aC5wb3coMiAtIHQsIGUpKSAvIDI7XG4gICAgfVxuXG4gICAgcG9seUluT3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gICAgcmV0dXJuIHBvbHlJbk91dDtcbiAgfSkoZXhwb25lbnQpO1xuXG4gIHZhciBwaSA9IE1hdGguUEk7XG4gIHZhciBoYWxmUGkgPSBwaSAvIDI7XG4gIGZ1bmN0aW9uIHNpbkluKHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmUGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gICAgcmV0dXJuICgxIC0gTWF0aC5jb3MocGkgKiB0KSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwSW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBPdXQodCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMiwgLTEwICogdCk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApIDogMiAtIE1hdGgucG93KDIsIDEwIC0gMTAgKiB0KSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlSW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGVPdXQodCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KSA6IE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpIC8gMjtcbiAgfVxuXG4gIHZhciBiMSA9IDQgLyAxMTtcbiAgdmFyIGIyID0gNiAvIDExO1xuICB2YXIgYjMgPSA4IC8gMTE7XG4gIHZhciBiNCA9IDMgLyA0O1xuICB2YXIgYjUgPSA5IC8gMTE7XG4gIHZhciBiNiA9IDEwIC8gMTE7XG4gIHZhciBiNyA9IDE1IC8gMTY7XG4gIHZhciBiOCA9IDIxIC8gMjI7XG4gIHZhciBiOSA9IDYzIC8gNjQ7XG4gIHZhciBiMCA9IDEgLyBiMSAvIGIxO1xuICBmdW5jdGlvbiBib3VuY2VJbih0KSB7XG4gICAgcmV0dXJuIDEgLSBib3VuY2VPdXQoMSAtIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmNlT3V0KHQpIHtcbiAgICByZXR1cm4gKHQgPSArdCkgPCBiMSA/IGIwICogdCAqIHQgOiB0IDwgYjMgPyBiMCAqICh0IC09IGIyKSAqIHQgKyBiNCA6IHQgPCBiNiA/IGIwICogKHQgLT0gYjUpICogdCArIGI3IDogYjAgKiAodCAtPSBiOCkgKiB0ICsgYjk7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gMSAtIGJvdW5jZU91dCgxIC0gdCkgOiBib3VuY2VPdXQodCAtIDEpICsgMSkgLyAyO1xuICB9XG5cbiAgdmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG5cbiAgdmFyIGJhY2tJbiA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICAgIHMgPSArcztcblxuICAgIGZ1bmN0aW9uIGJhY2tJbih0KSB7XG4gICAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgICB9XG5cbiAgICBiYWNrSW4ub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gICAgcmV0dXJuIGJhY2tJbjtcbiAgfSkob3ZlcnNob290KTtcblxuICB2YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICAgIHMgPSArcztcblxuICAgIGZ1bmN0aW9uIGJhY2tPdXQodCkge1xuICAgICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gICAgfVxuXG4gICAgYmFja091dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgICByZXR1cm4gYmFja091dDtcbiAgfSkob3ZlcnNob290KTtcblxuICB2YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gICAgcyA9ICtzO1xuXG4gICAgZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcbiAgICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICAgIH1cblxuICAgIGJhY2tJbk91dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgICByZXR1cm4gYmFja0luT3V0O1xuICB9KShvdmVyc2hvb3QpO1xuXG4gIHZhciB0YXUgPSAyICogTWF0aC5QSTtcbiAgdmFyIGFtcGxpdHVkZSA9IDE7XG4gIHZhciBwZXJpb2QgPSAwLjM7XG4gIHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICAgIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgICB9XG5cbiAgICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICAgIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgICByZXR1cm4gZWxhc3RpY0luO1xuICB9KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbiAgdmFyIGVsYXN0aWNPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICAgIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgICAgcmV0dXJuIDEgLSBhICogTWF0aC5wb3coMiwgLTEwICogKHQgPSArdCkpICogTWF0aC5zaW4oKHQgKyBzKSAvIHApO1xuICAgIH1cblxuICAgIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICAgIGVsYXN0aWNPdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gICAgcmV0dXJuIGVsYXN0aWNPdXQ7XG4gIH0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuICB2YXIgZWxhc3RpY0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gICAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgICBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXG4gICAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICAgIDogMiAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKChzICsgdCkgLyBwKSkgLyAyO1xuICAgIH1cblxuICAgIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gICAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICAgIHJldHVybiBlbGFzdGljSW5PdXQ7XG4gIH0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuICBmdW5jdGlvbiBhcmVhKHBvbHlnb24pIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgYXJlYSA9IDA7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gcG9seWdvbltpXTtcbiAgICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJlYSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZChwb2x5Z29uKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgICB4ID0gMCxcbiAgICAgICAgeSA9IDAsXG4gICAgICAgIGEsXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgYyxcbiAgICAgICAgayA9IDA7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gcG9seWdvbltpXTtcbiAgICAgIGsgKz0gYyA9IGFbMF0gKiBiWzFdIC0gYlswXSAqIGFbMV07XG4gICAgICB4ICs9IChhWzBdICsgYlswXSkgKiBjO1xuICAgICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgICB9XG5cbiAgICByZXR1cm4gayAqPSAzLCBbeCAvIGssIHkgLyBrXTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIDJEIGNyb3NzIHByb2R1Y3Qgb2YgQUIgYW5kIEFDIHZlY3RvcnMsIGkuZS4sIHRoZSB6LWNvbXBvbmVudCBvZlxuICAvLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuICAvLyByaWdodCwgK3kgaXMgdXApLiBSZXR1cm5zIGEgcG9zaXRpdmUgdmFsdWUgaWYgQUJDIGlzIGNvdW50ZXItY2xvY2t3aXNlLFxuICAvLyBuZWdhdGl2ZSBpZiBjbG9ja3dpc2UsIGFuZCB6ZXJvIGlmIHRoZSBwb2ludHMgYXJlIGNvbGxpbmVhci5cbiAgZnVuY3Rpb24gY3Jvc3MoYSwgYiwgYykge1xuICAgIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSAtIChiWzFdIC0gYVsxXSkgKiAoY1swXSAtIGFbMF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbGV4aWNvZ3JhcGhpY09yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG4gIH1cblxuICAvLyBDb21wdXRlcyB0aGUgdXBwZXIgY29udmV4IGh1bGwgcGVyIHRoZSBtb25vdG9uZSBjaGFpbiBhbGdvcml0aG0uXG4gIC8vIEFzc3VtZXMgcG9pbnRzLmxlbmd0aCA+PSAzLCBpcyBzb3J0ZWQgYnkgeCwgdW5pcXVlIGluIHkuXG4gIC8vIFJldHVybnMgYW4gYXJyYXkgb2YgaW5kaWNlcyBpbnRvIHBvaW50cyBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuICBmdW5jdGlvbiBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhwb2ludHMpIHtcbiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICAgIGluZGV4ZXMgPSBbMCwgMV0sXG4gICAgICAgIHNpemUgPSAyO1xuXG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyArK2kpIHtcbiAgICAgIHdoaWxlIChzaXplID4gMSAmJiBjcm9zcyhwb2ludHNbaW5kZXhlc1tzaXplIC0gMl1dLCBwb2ludHNbaW5kZXhlc1tzaXplIC0gMV1dLCBwb2ludHNbaV0pIDw9IDApIC0tc2l6ZTtcbiAgICAgIGluZGV4ZXNbc2l6ZSsrXSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4ZXMuc2xpY2UoMCwgc2l6ZSk7IC8vIHJlbW92ZSBwb3BwZWQgcG9pbnRzXG4gIH1cblxuICBmdW5jdGlvbiBodWxsKHBvaW50cykge1xuICAgIGlmICgobiA9IHBvaW50cy5sZW5ndGgpIDwgMykgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgaSxcbiAgICAgICAgbixcbiAgICAgICAgc29ydGVkUG9pbnRzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xuICAgIHNvcnRlZFBvaW50cy5zb3J0KGxleGljb2dyYXBoaWNPcmRlcik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgZmxpcHBlZFBvaW50c1tpXSA9IFtzb3J0ZWRQb2ludHNbaV1bMF0sIC1zb3J0ZWRQb2ludHNbaV1bMV1dO1xuXG4gICAgdmFyIHVwcGVySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHNvcnRlZFBvaW50cyksXG4gICAgICAgIGxvd2VySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKGZsaXBwZWRQb2ludHMpO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJJbmRleGVzWzBdID09PSB1cHBlckluZGV4ZXNbMF0sXG4gICAgICAgIHNraXBSaWdodCA9IGxvd2VySW5kZXhlc1tsb3dlckluZGV4ZXMubGVuZ3RoIC0gMV0gPT09IHVwcGVySW5kZXhlc1t1cHBlckluZGV4ZXMubGVuZ3RoIC0gMV0sXG4gICAgICAgIGh1bGwgPSBbXTtcblxuICAgIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXG4gICAgLy8gVGhlbiBhZGQgbG93ZXIgaHVsbCBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuICAgIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICAgIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VySW5kZXhlcy5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbbG93ZXJJbmRleGVzW2ldXVsyXV0pO1xuXG4gICAgcmV0dXJuIGh1bGw7XG4gIH1cblxuICBmdW5jdGlvbiBjb250YWlucyhwb2x5Z29uLCBwb2ludCkge1xuICAgIHZhciBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIHAgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sXG4gICAgICAgIHgwID0gcFswXSwgeTAgPSBwWzFdLFxuICAgICAgICB4MSwgeTEsXG4gICAgICAgIGluc2lkZSA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHAgPSBwb2x5Z29uW2ldLCB4MSA9IHBbMF0sIHkxID0gcFsxXTtcbiAgICAgIGlmICgoKHkxID4geSkgIT09ICh5MCA+IHkpKSAmJiAoeCA8ICh4MCAtIHgxKSAqICh5IC0geTEpIC8gKHkwIC0geTEpICsgeDEpKSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgeDAgPSB4MSwgeTAgPSB5MTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zaWRlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoJDEocG9seWdvbikge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgICB4YSxcbiAgICAgICAgeWEsXG4gICAgICAgIHhiID0gYlswXSxcbiAgICAgICAgeWIgPSBiWzFdLFxuICAgICAgICBwZXJpbWV0ZXIgPSAwO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHhhID0geGI7XG4gICAgICB5YSA9IHliO1xuICAgICAgYiA9IHBvbHlnb25baV07XG4gICAgICB4YiA9IGJbMF07XG4gICAgICB5YiA9IGJbMV07XG4gICAgICB4YSAtPSB4YjtcbiAgICAgIHlhIC09IHliO1xuICAgICAgcGVyaW1ldGVyICs9IE1hdGguc3FydCh4YSAqIHhhICsgeWEgKiB5YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlcmltZXRlcjtcbiAgfVxuXG52YXIgICBwaSQxID0gTWF0aC5QSTtcbnZhciAgIHRhdSQxID0gMiAqIHBpJDE7XG4gIHZhciBlcHNpbG9uID0gMWUtNjtcbiAgdmFyIHRhdUVwc2lsb24gPSB0YXUkMSAtIGVwc2lsb247XG4gIGZ1bmN0aW9uIFBhdGgoKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICAgIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gICAgdGhpcy5fID0gW107XG4gIH1cblxuICBmdW5jdGlvbiBwYXRoKCkge1xuICAgIHJldHVybiBuZXcgUGF0aDtcbiAgfVxuXG4gIFBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFBhdGgsXG4gICAgbW92ZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLl8ucHVzaChcIk1cIiwgdGhpcy5feDAgPSB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcbiAgICB9LFxuICAgIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5feDEgPSB0aGlzLl94MCwgdGhpcy5feTEgPSB0aGlzLl95MDtcbiAgICAgICAgdGhpcy5fLnB1c2goXCJaXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLl8ucHVzaChcIkxcIiwgdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kxID0gK3kpO1xuICAgIH0sXG4gICAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4LCB5KSB7XG4gICAgICB0aGlzLl8ucHVzaChcIlFcIiwgK3gxLCBcIixcIiwgK3kxLCBcIixcIiwgdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kxID0gK3kpO1xuICAgIH0sXG4gICAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICAgIHRoaXMuXy5wdXNoKFwiQ1wiLCAreDEsIFwiLFwiLCAreTEsIFwiLFwiLCAreDIsIFwiLFwiLCAreTIsIFwiLFwiLCB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTEgPSAreSk7XG4gICAgfSxcbiAgICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XG4gICAgICB2YXIgeDAgPSB0aGlzLl94MSxcbiAgICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICAgIHgyMSA9IHgyIC0geDEsXG4gICAgICAgICAgeTIxID0geTIgLSB5MSxcbiAgICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICAgICAgbDAxXzIgPSB4MDEgKiB4MDEgKyB5MDEgKiB5MDE7XG5cbiAgICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxuICAgICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiTVwiLCB0aGlzLl94MSA9IHgxLCBcIixcIiwgdGhpcy5feTEgPSB5MVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uKSk7XG5cbiAgICAgIC8vIE9yLCBhcmUgKHgwLHkwKSwgKHgxLHkxKSBhbmQgKHgyLHkyKSBjb2xsaW5lYXI/XG4gICAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgICBlbHNlIGlmICghKE1hdGguYWJzKHkwMSAqIHgyMSAtIHkyMSAqIHgwMSkgPiBlcHNpbG9uKSB8fCAhcikge1xuICAgICAgICB0aGlzLl8ucHVzaChcbiAgICAgICAgICBcIkxcIiwgdGhpcy5feDEgPSB4MSwgXCIsXCIsIHRoaXMuX3kxID0geTFcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgeDIwID0geDIgLSB4MCxcbiAgICAgICAgICAgIHkyMCA9IHkyIC0geTAsXG4gICAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxuICAgICAgICAgICAgbDIxID0gTWF0aC5zcXJ0KGwyMV8yKSxcbiAgICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSQxIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgICB0MjEgPSBsIC8gbDIxO1xuXG4gICAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgICAgXCJMXCIsIHgxICsgdDAxICogeDAxLCBcIixcIiwgeTEgKyB0MDEgKiB5MDFcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLDAsXCIsICsoeTAxICogeDIwID4geDAxICogeTIwKSwgXCIsXCIsIHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEsIFwiLFwiLCB0aGlzLl95MSA9IHkxICsgdDIxICogeTIxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhcmM6IGZ1bmN0aW9uKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyO1xuICAgICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiTVwiLCB4MCwgXCIsXCIsIHkwXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICAgIHRoaXMuXy5wdXNoKFxuICAgICAgICAgIFwiTFwiLCB4MCwgXCIsXCIsIHkwXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgICBpZiAoIXIpIHJldHVybjtcblxuICAgICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgICB0aGlzLl8ucHVzaChcbiAgICAgICAgICBcIkFcIiwgciwgXCIsXCIsIHIsIFwiLDAsMSxcIiwgY3csIFwiLFwiLCB4IC0gZHgsIFwiLFwiLCB5IC0gZHksXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLDEsXCIsIGN3LCBcIixcIiwgdGhpcy5feDEgPSB4MCwgXCIsXCIsIHRoaXMuX3kxID0geTBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1JDEgKyB0YXUkMTtcbiAgICAgICAgdGhpcy5fLnB1c2goXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLFwiLCArKGRhID49IHBpJDEpLCBcIixcIiwgY3csIFwiLFwiLCB0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpLCBcIixcIiwgdGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVjdDogZnVuY3Rpb24oeCwgeSwgdywgaCkge1xuICAgICAgdGhpcy5fLnB1c2goXCJNXCIsIHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSwgXCJoXCIsICt3LCBcInZcIiwgK2gsIFwiaFwiLCAtdywgXCJaXCIpO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5qb2luKFwiXCIpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB0cmVlX2FkZChkKSB7XG4gICAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgICB5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKTtcbiAgICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcbiAgICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybiB0cmVlOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICAgIHZhciBwYXJlbnQsXG4gICAgICAgIG5vZGUgPSB0cmVlLl9yb290LFxuICAgICAgICBsZWFmID0ge2RhdGE6IGR9LFxuICAgICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgICB5MCA9IHRyZWUuX3kwLFxuICAgICAgICB4MSA9IHRyZWUuX3gxLFxuICAgICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgICB4bSxcbiAgICAgICAgeW0sXG4gICAgICAgIHhwLFxuICAgICAgICB5cCxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIGJvdHRvbSxcbiAgICAgICAgaSxcbiAgICAgICAgajtcblxuICAgIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgICBpZiAoIW5vZGUpIHJldHVybiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAgIC8vIEZpbmQgdGhlIGV4aXN0aW5nIGxlYWYgZm9yIHRoZSBuZXcgcG9pbnQsIG9yIGFkZCBpdC5cbiAgICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGUgbmV3IHBvaW50IGlzIGV4YWN0bHkgY29pbmNpZGVudCB3aXRoIHRoZSBleGlzdGluZyBwb2ludD9cbiAgICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgICB5cCA9ICt0cmVlLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgICBpZiAoeCA9PT0geHAgJiYgeSA9PT0geXApIHJldHVybiBsZWFmLm5leHQgPSBub2RlLCBwYXJlbnQgPyBwYXJlbnRbaV0gPSBsZWFmIDogdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gICAgZG8ge1xuICAgICAgcGFyZW50ID0gcGFyZW50ID8gcGFyZW50W2ldID0gbmV3IEFycmF5KDQpIDogdHJlZS5fcm9vdCA9IG5ldyBBcnJheSg0KTtcbiAgICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCAoeHAgPj0geG0pKSk7XG4gICAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRBbGwoZGF0YSkge1xuICAgIHZhciBkLCBpLCBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHh6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5eiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeDAgPSBJbmZpbml0eSxcbiAgICAgICAgeTAgPSBJbmZpbml0eSxcbiAgICAgICAgeDEgPSAtSW5maW5pdHksXG4gICAgICAgIHkxID0gLUluZmluaXR5O1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQgPSBkYXRhW2ldKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSBjb250aW51ZTtcbiAgICAgIHh6W2ldID0geDtcbiAgICAgIHl6W2ldID0geTtcbiAgICAgIGlmICh4IDwgeDApIHgwID0geDtcbiAgICAgIGlmICh4ID4geDEpIHgxID0geDtcbiAgICAgIGlmICh5IDwgeTApIHkwID0geTtcbiAgICAgIGlmICh5ID4geTEpIHkxID0geTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlIG5vICh2YWxpZCkgcG9pbnRzLCBpbmhlcml0IHRoZSBleGlzdGluZyBleHRlbnQuXG4gICAgaWYgKHgxIDwgeDApIHgwID0gdGhpcy5feDAsIHgxID0gdGhpcy5feDE7XG4gICAgaWYgKHkxIDwgeTApIHkwID0gdGhpcy5feTAsIHkxID0gdGhpcy5feTE7XG5cbiAgICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gICAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgICAvLyBBZGQgdGhlIG5ldyBwb2ludHMuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX2NvdmVyKHgsIHkpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAgIC8vIElmIHRoZSBxdWFkdHJlZSBoYXMgbm8gZXh0ZW50LCBpbml0aWFsaXplIHRoZW0uXG4gICAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAgIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgICBpZiAoaXNOYU4oeDApKSB7XG4gICAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gICAgZWxzZSBpZiAoeDAgPiB4IHx8IHggPiB4MSB8fCB5MCA+IHkgfHwgeSA+IHkxKSB7XG4gICAgICB2YXIgeiA9IHgxIC0geDAsXG4gICAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgICAgcGFyZW50LFxuICAgICAgICAgIGk7XG5cbiAgICAgIHN3aXRjaCAoaSA9ICh5IDwgKHkwICsgeTEpIC8gMikgPDwgMSB8ICh4IDwgKHgwICsgeDEpIC8gMikpIHtcbiAgICAgICAgY2FzZSAwOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgxID0geDAgKyB6LCB5MSA9IHkwICsgeiwgeCA+IHgxIHx8IHkgPiB5MSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgwID0geDEgLSB6LCB5MSA9IHkwICsgeiwgeDAgPiB4IHx8IHkgPiB5MSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgxID0geDAgKyB6LCB5MCA9IHkxIC0geiwgeCA+IHgxIHx8IHkwID4geSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzOiB7XG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgwID0geDEgLSB6LCB5MCA9IHkxIC0geiwgeDAgPiB4IHx8IHkwID4geSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBxdWFkdHJlZSBjb3ZlcnMgdGhlIHBvaW50IGFscmVhZHksIGp1c3QgcmV0dXJuLlxuICAgIGVsc2UgcmV0dXJuIHRoaXM7XG5cbiAgICB0aGlzLl94MCA9IHgwO1xuICAgIHRoaXMuX3kwID0geTA7XG4gICAgdGhpcy5feDEgPSB4MTtcbiAgICB0aGlzLl95MSA9IHkxO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9kYXRhKCkge1xuICAgIHZhciBkYXRhID0gW107XG4gICAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyBkYXRhLnB1c2gobm9kZS5kYXRhKTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX2V4dGVudChfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgPyB0aGlzLmNvdmVyKCtfWzBdWzBdLCArX1swXVsxXSkuY292ZXIoK19bMV1bMF0sICtfWzFdWzFdKVxuICAgICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xuICB9XG5cbiAgZnVuY3Rpb24gUXVhZChub2RlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgdGhpcy54MCA9IHgwO1xuICAgIHRoaXMueTAgPSB5MDtcbiAgICB0aGlzLngxID0geDE7XG4gICAgdGhpcy55MSA9IHkxO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9maW5kKHgsIHksIHJhZGl1cykge1xuICAgIHZhciBkYXRhLFxuICAgICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIHgyLFxuICAgICAgICB5MixcbiAgICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgICAgcXVhZHMgPSBbXSxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHEsXG4gICAgICAgIGk7XG5cbiAgICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICAgIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gICAgZWxzZSB7XG4gICAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xuICAgICAgcmFkaXVzICo9IHJhZGl1cztcbiAgICB9XG5cbiAgICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG5cbiAgICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICAgIHx8ICh4MSA9IHEueDApID4geDNcbiAgICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXG4gICAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICAgIHx8ICh5MiA9IHEueTEpIDwgeTApIGNvbnRpbnVlO1xuXG4gICAgICAvLyBCaXNlY3QgdGhlIGN1cnJlbnQgcXVhZHJhbnQuXG4gICAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHhtID0gKHgxICsgeDIpIC8gMixcbiAgICAgICAgICAgIHltID0gKHkxICsgeTIpIC8gMjtcblxuICAgICAgICBxdWFkcy5wdXNoKFxuICAgICAgICAgIG5ldyBRdWFkKG5vZGVbM10sIHhtLCB5bSwgeDIsIHkyKSxcbiAgICAgICAgICBuZXcgUXVhZChub2RlWzJdLCB4MSwgeW0sIHhtLCB5MiksXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICAgIG5ldyBRdWFkKG5vZGVbMF0sIHgxLCB5MSwgeG0sIHltKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgICBpZiAoaSA9ICh5ID49IHltKSA8PCAxIHwgKHggPj0geG0pKSB7XG4gICAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXSA9IHE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVmlzaXQgdGhpcyBwb2ludC4gKFZpc2l0aW5nIGNvaW5jaWRlbnQgcG9pbnRzIGlzbuKAmXQgbmVjZXNzYXJ5ISlcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgICAgZHkgPSB5IC0gK3RoaXMuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQocmFkaXVzID0gZDIpO1xuICAgICAgICAgIHgwID0geCAtIGQsIHkwID0geSAtIGQ7XG4gICAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgICBkYXRhID0gbm9kZS5kYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3JlbW92ZShkKSB7XG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICAgIHZhciBwYXJlbnQsXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICByZXRhaW5lcixcbiAgICAgICAgcHJldmlvdXMsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICAgIHkxID0gdGhpcy5feTEsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIHhtLFxuICAgICAgICB5bSxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIGJvdHRvbSxcbiAgICAgICAgaSxcbiAgICAgICAgajtcblxuICAgIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xuXG4gICAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gICAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxuICAgIGlmIChub2RlLmxlbmd0aCkgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgICBpZiAoIShwYXJlbnQgPSBub2RlLCBub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gdGhpcztcbiAgICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XG4gICAgfVxuXG4gICAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICAgIHdoaWxlIChub2RlLmRhdGEgIT09IGQpIGlmICghKHByZXZpb3VzID0gbm9kZSwgbm9kZSA9IG5vZGUubmV4dCkpIHJldHVybiB0aGlzO1xuICAgIGlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gICAgaWYgKHByZXZpb3VzKSByZXR1cm4gKG5leHQgPyBwcmV2aW91cy5uZXh0ID0gbmV4dCA6IGRlbGV0ZSBwcmV2aW91cy5uZXh0KSwgdGhpcztcblxuICAgIC8vIElmIHRoaXMgaXMgdGhlIHJvb3QgcG9pbnQsIHJlbW92ZSBpdC5cbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gICAgLy8gUmVtb3ZlIHRoaXMgbGVhZi5cbiAgICBuZXh0ID8gcGFyZW50W2ldID0gbmV4dCA6IGRlbGV0ZSBwYXJlbnRbaV07XG5cbiAgICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICAgIGlmICgobm9kZSA9IHBhcmVudFswXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzJdIHx8IHBhcmVudFszXSlcbiAgICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcbiAgICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgICBpZiAocmV0YWluZXIpIHJldGFpbmVyW2pdID0gbm9kZTtcbiAgICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9yb290KCkge1xuICAgIHJldHVybiB0aGlzLl9yb290O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJlZV9zaXplKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5sZW5ndGgpIGRvICsrc2l6ZTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gICAgfSk7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3Zpc2l0KGNhbGxiYWNrKSB7XG4gICAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gICAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVfdmlzaXRBZnRlcihjYWxsYmFjaykge1xuICAgIHZhciBxdWFkcyA9IFtdLCBuZXh0ID0gW10sIHE7XG4gICAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgICB2YXIgbm9kZSA9IHEubm9kZTtcbiAgICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgICB2YXIgY2hpbGQsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSwgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICB9XG4gICAgICBuZXh0LnB1c2gocSk7XG4gICAgfVxuICAgIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2socS5ub2RlLCBxLngwLCBxLnkwLCBxLngxLCBxLnkxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3goXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gICAgcmV0dXJuIGRbMV07XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlX3koXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3kgPSBfLCB0aGlzKSA6IHRoaXMuX3k7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICAgIHZhciB0cmVlID0gbmV3IFF1YWR0cmVlKHggPT0gbnVsbCA/IGRlZmF1bHRYIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkgOiB5LCBOYU4sIE5hTiwgTmFOLCBOYU4pO1xuICAgIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFF1YWR0cmVlKHgsIHksIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdGhpcy5feCA9IHg7XG4gICAgdGhpcy5feSA9IHk7XG4gICAgdGhpcy5feDAgPSB4MDtcbiAgICB0aGlzLl95MCA9IHkwO1xuICAgIHRoaXMuX3gxID0geDE7XG4gICAgdGhpcy5feTEgPSB5MTtcbiAgICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZl9jb3B5KGxlYWYpIHtcbiAgICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkgbmV4dCA9IG5leHQubmV4dCA9IHtkYXRhOiBsZWFmLmRhdGF9O1xuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgdmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxuICB0cmVlUHJvdG8uY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIG5vZGVzLFxuICAgICAgICBjaGlsZDtcblxuICAgIGlmICghbm9kZSkgcmV0dXJuIGNvcHk7XG5cbiAgICBpZiAoIW5vZGUubGVuZ3RoKSByZXR1cm4gY29weS5fcm9vdCA9IGxlYWZfY29weShub2RlKSwgY29weTtcblxuICAgIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xuICAgICAgICAgIGVsc2Ugbm9kZS50YXJnZXRbaV0gPSBsZWFmX2NvcHkoY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcHk7XG4gIH07XG5cbiAgdHJlZVByb3RvLmFkZCA9IHRyZWVfYWRkO1xuICB0cmVlUHJvdG8uYWRkQWxsID0gYWRkQWxsO1xuICB0cmVlUHJvdG8uY292ZXIgPSB0cmVlX2NvdmVyO1xuICB0cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbiAgdHJlZVByb3RvLmV4dGVudCA9IHRyZWVfZXh0ZW50O1xuICB0cmVlUHJvdG8uZmluZCA9IHRyZWVfZmluZDtcbiAgdHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xuICB0cmVlUHJvdG8ucmVtb3ZlQWxsID0gcmVtb3ZlQWxsO1xuICB0cmVlUHJvdG8ucm9vdCA9IHRyZWVfcm9vdDtcbiAgdHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG4gIHRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG4gIHRyZWVQcm90by52aXNpdEFmdGVyID0gdHJlZV92aXNpdEFmdGVyO1xuICB0cmVlUHJvdG8ueCA9IHRyZWVfeDtcbiAgdHJlZVByb3RvLnkgPSB0cmVlX3k7XG5cbiAgdmFyIHNsaWNlJDEgPSBbXS5zbGljZTtcblxuICB2YXIgbm9hYm9ydCA9IHt9O1xuXG4gIGZ1bmN0aW9uIFF1ZXVlKHNpemUpIHtcbiAgICBpZiAoIShzaXplID49IDEpKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5fY2FsbCA9XG4gICAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX3Rhc2tzID0gW107XG4gICAgdGhpcy5fZGF0YSA9IFtdO1xuICAgIHRoaXMuX3dhaXRpbmcgPVxuICAgIHRoaXMuX2FjdGl2ZSA9XG4gICAgdGhpcy5fZW5kZWQgPVxuICAgIHRoaXMuX3N0YXJ0ID0gMDsgLy8gaW5zaWRlIGEgc3luY2hyb25vdXMgdGFzayBjYWxsYmFjaz9cbiAgfVxuXG4gIFF1ZXVlLnByb3RvdHlwZSA9IHF1ZXVlLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogUXVldWUsXG4gICAgZGVmZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIgfHwgdGhpcy5fY2FsbCkgdGhyb3cgbmV3IEVycm9yO1xuICAgICAgaWYgKHRoaXMuX2Vycm9yICE9IG51bGwpIHJldHVybiB0aGlzO1xuICAgICAgdmFyIHQgPSBzbGljZSQxLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHQucHVzaChjYWxsYmFjayk7XG4gICAgICArK3RoaXMuX3dhaXRpbmcsIHRoaXMuX3Rhc2tzLnB1c2godCk7XG4gICAgICBwb2tlKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fZXJyb3IgPT0gbnVsbCkgYWJvcnQodGhpcywgbmV3IEVycm9yKFwiYWJvcnRcIikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhd2FpdDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIiB8fCB0aGlzLl9jYWxsKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgICB0aGlzLl9jYWxsID0gZnVuY3Rpb24oZXJyb3IsIHJlc3VsdHMpIHsgY2FsbGJhY2suYXBwbHkobnVsbCwgW2Vycm9yXS5jb25jYXQocmVzdWx0cykpOyB9O1xuICAgICAgbWF5YmVOb3RpZnkodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGF3YWl0QWxsOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiIHx8IHRoaXMuX2NhbGwpIHRocm93IG5ldyBFcnJvcjtcbiAgICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICAgIG1heWJlTm90aWZ5KHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHBva2UocSkge1xuICAgIGlmICghcS5fc3RhcnQpIHRyeSB7IHN0YXJ0KHEpOyB9IC8vIGxldCB0aGUgY3VycmVudCB0YXNrIGNvbXBsZXRlXG4gICAgY2F0Y2ggKGUpIHsgaWYgKHEuX3Rhc2tzW3EuX2VuZGVkICsgcS5fYWN0aXZlIC0gMV0pIGFib3J0KHEsIGUpOyB9IC8vIHRhc2sgZXJyb3JlZCBzeW5jaHJvbm91c2x5XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChxKSB7XG4gICAgd2hpbGUgKHEuX3N0YXJ0ID0gcS5fd2FpdGluZyAmJiBxLl9hY3RpdmUgPCBxLl9zaXplKSB7XG4gICAgICB2YXIgaSA9IHEuX2VuZGVkICsgcS5fYWN0aXZlLFxuICAgICAgICAgIHQgPSBxLl90YXNrc1tpXSxcbiAgICAgICAgICBqID0gdC5sZW5ndGggLSAxLFxuICAgICAgICAgIGMgPSB0W2pdO1xuICAgICAgdFtqXSA9IGVuZChxLCBpKTtcbiAgICAgIC0tcS5fd2FpdGluZywgKytxLl9hY3RpdmU7XG4gICAgICB0ID0gYy5hcHBseShudWxsLCB0KTtcbiAgICAgIGlmICghcS5fdGFza3NbaV0pIGNvbnRpbnVlOyAvLyB0YXNrIGZpbmlzaGVkIHN5bmNocm9ub3VzbHlcbiAgICAgIHEuX3Rhc2tzW2ldID0gdCB8fCBub2Fib3J0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZChxLCBpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgIGlmICghcS5fdGFza3NbaV0pIHJldHVybjsgLy8gaWdub3JlIG11bHRpcGxlIGNhbGxiYWNrc1xuICAgICAgLS1xLl9hY3RpdmUsICsrcS5fZW5kZWQ7XG4gICAgICBxLl90YXNrc1tpXSA9IG51bGw7XG4gICAgICBpZiAocS5fZXJyb3IgIT0gbnVsbCkgcmV0dXJuOyAvLyBpZ25vcmUgc2Vjb25kYXJ5IGVycm9yc1xuICAgICAgaWYgKGUgIT0gbnVsbCkge1xuICAgICAgICBhYm9ydChxLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHEuX2RhdGFbaV0gPSByO1xuICAgICAgICBpZiAocS5fd2FpdGluZykgcG9rZShxKTtcbiAgICAgICAgZWxzZSBtYXliZU5vdGlmeShxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnQocSwgZSkge1xuICAgIHZhciBpID0gcS5fdGFza3MubGVuZ3RoLCB0O1xuICAgIHEuX2Vycm9yID0gZTsgLy8gaWdub3JlIGFjdGl2ZSBjYWxsYmFja3NcbiAgICBxLl9kYXRhID0gdW5kZWZpbmVkOyAvLyBhbGxvdyBnY1xuICAgIHEuX3dhaXRpbmcgPSBOYU47IC8vIHByZXZlbnQgc3RhcnRpbmdcblxuICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgaWYgKHQgPSBxLl90YXNrc1tpXSkge1xuICAgICAgICBxLl90YXNrc1tpXSA9IG51bGw7XG4gICAgICAgIGlmICh0LmFib3J0KSB0cnkgeyB0LmFib3J0KCk7IH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgLyogaWdub3JlICovIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxLl9hY3RpdmUgPSBOYU47IC8vIGFsbG93IG5vdGlmaWNhdGlvblxuICAgIG1heWJlTm90aWZ5KHEpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF5YmVOb3RpZnkocSkge1xuICAgIGlmICghcS5fYWN0aXZlICYmIHEuX2NhbGwpIHEuX2NhbGwocS5fZXJyb3IsIHEuX2RhdGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVldWUoY29uY3VycmVuY3kpIHtcbiAgICByZXR1cm4gbmV3IFF1ZXVlKGFyZ3VtZW50cy5sZW5ndGggPyArY29uY3VycmVuY3kgOiBJbmZpbml0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQxKHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVwc2lsb24kMSA9IDFlLTEyO1xuICB2YXIgcGkkMiA9IE1hdGguUEk7XG4gIHZhciBoYWxmUGkkMSA9IHBpJDIgLyAyO1xuICB2YXIgdGF1JDIgPSAyICogcGkkMjtcblxuICBmdW5jdGlvbiBhcmNJbm5lclJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIGQuaW5uZXJSYWRpdXM7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNPdXRlclJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIGQub3V0ZXJSYWRpdXM7XG4gIH1cblxuICBmdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjRW5kQW5nbGUoZCkge1xuICAgIHJldHVybiBkLmVuZEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjUGFkQW5nbGUoZCkge1xuICAgIHJldHVybiBkICYmIGQucGFkQW5nbGU7IC8vIE5vdGU6IG9wdGlvbmFsIVxuICB9XG5cbiAgZnVuY3Rpb24gYXNpbih4KSB7XG4gICAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSQxIDogeCA8PSAtMSA/IC1oYWxmUGkkMSA6IE1hdGguYXNpbih4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICB2YXIgeDEwID0geDEgLSB4MCwgeTEwID0geTEgLSB5MCxcbiAgICAgICAgeDMyID0geDMgLSB4MiwgeTMyID0geTMgLSB5MixcbiAgICAgICAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gKHkzMiAqIHgxMCAtIHgzMiAqIHkxMCk7XG4gICAgcmV0dXJuIFt4MCArIHQgKiB4MTAsIHkwICsgdCAqIHkxMF07XG4gIH1cblxuICAvLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuICAvLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcbiAgZnVuY3Rpb24gY29ybmVyVGFuZ2VudHMoeDAsIHkwLCB4MSwgeTEsIHIxLCByYywgY3cpIHtcbiAgICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBNYXRoLnNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgICAgb3ggPSBsbyAqIHkwMSxcbiAgICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICAgIHkxMSA9IHkwICsgb3ksXG4gICAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICAgIHgwMCA9ICh4MTEgKyB4MTApIC8gMixcbiAgICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgICAgZHkgPSB5MTAgLSB5MTEsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgICBEID0geDExICogeTEwIC0geDEwICogeTExLFxuICAgICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXG4gICAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxuICAgICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgICBkeTAgPSBjeTAgLSB5MDAsXG4gICAgICAgIGR4MSA9IGN4MSAtIHgwMCxcbiAgICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gICAgLy8gUGljayB0aGUgY2xvc2VyIG9mIHRoZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICAvLyBUT0RPIElzIHRoZXJlIGEgZmFzdGVyIHdheSB0byBkZXRlcm1pbmUgd2hpY2ggaW50ZXJzZWN0aW9uIHRvIHVzZT9cbiAgICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICAgIHJldHVybiB7XG4gICAgICBjeDogY3gwLFxuICAgICAgY3k6IGN5MCxcbiAgICAgIHgwMTogLW94LFxuICAgICAgeTAxOiAtb3ksXG4gICAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICAgIHkxMTogY3kwICogKHIxIC8gciAtIDEpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyYygpIHtcbiAgICB2YXIgaW5uZXJSYWRpdXMgPSBhcmNJbm5lclJhZGl1cyxcbiAgICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQkMSgwKSxcbiAgICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgICAgc3RhcnRBbmdsZSA9IGFyY1N0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlID0gYXJjRW5kQW5nbGUsXG4gICAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gYXJjKCkge1xuICAgICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgICByLFxuICAgICAgICAgIHIwID0gK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgcjEgPSArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSQxLFxuICAgICAgICAgIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSQxLFxuICAgICAgICAgIGRhID0gTWF0aC5hYnMoYTEgLSBhMCksXG4gICAgICAgICAgY3cgPSBhMSA+IGEwO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBvdXRlciByYWRpdXMgaXMgYWx3YXlzIGxhcmdlciB0aGFuIHRoZSBpbm5lciByYWRpdXMuXG4gICAgICBpZiAocjEgPCByMCkgciA9IHIxLCByMSA9IHIwLCByMCA9IHI7XG5cbiAgICAgIC8vIElzIGl0IGEgcG9pbnQ/XG4gICAgICBpZiAoIShyMSA+IGVwc2lsb24kMSkpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgICAvLyBPciBpcyBpdCBhIGNpcmNsZSBvciBhbm51bHVzP1xuICAgICAgZWxzZSBpZiAoZGEgPiB0YXUkMiAtIGVwc2lsb24kMSkge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMSAqIE1hdGguY29zKGEwKSwgcjEgKiBNYXRoLnNpbihhMCkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAsIGExLCAhY3cpO1xuICAgICAgICBpZiAocjAgPiBlcHNpbG9uJDEpIHtcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMCAqIE1hdGguY29zKGExKSwgcjAgKiBNYXRoLnNpbihhMSkpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMSwgYTAsIGN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyBpdCBhIGNpcmN1bGFyIG9yIGFubnVsYXIgc2VjdG9yP1xuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICAgIGExMSA9IGExLFxuICAgICAgICAgICAgYTAwID0gYTAsXG4gICAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICAgIGRhMCA9IGRhLFxuICAgICAgICAgICAgZGExID0gZGEsXG4gICAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgICAgcnAgPSAoYXAgPiBlcHNpbG9uJDEpICYmIChwYWRSYWRpdXMgPyArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBNYXRoLnNxcnQocjAgKiByMCArIHIxICogcjEpKSxcbiAgICAgICAgICAgIHJjID0gTWF0aC5taW4oTWF0aC5hYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgICAgcmMwID0gcmMsXG4gICAgICAgICAgICByYzEgPSByYyxcbiAgICAgICAgICAgIHQwLFxuICAgICAgICAgICAgdDE7XG5cbiAgICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXG4gICAgICAgIGlmIChycCA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHZhciBwMCA9IGFzaW4ocnAgLyByMCAqIE1hdGguc2luKGFwKSksXG4gICAgICAgICAgICAgIHAxID0gYXNpbihycCAvIHIxICogTWF0aC5zaW4oYXApKTtcbiAgICAgICAgICBpZiAoKGRhMCAtPSBwMCAqIDIpID4gZXBzaWxvbiQxKSBwMCAqPSAoY3cgPyAxIDogLTEpLCBhMDAgKz0gcDAsIGExMCAtPSBwMDtcbiAgICAgICAgICBlbHNlIGRhMCA9IDAsIGEwMCA9IGExMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24kMSkgcDEgKj0gKGN3ID8gMSA6IC0xKSwgYTAxICs9IHAxLCBhMTEgLT0gcDE7XG4gICAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHgwMSA9IHIxICogTWF0aC5jb3MoYTAxKSxcbiAgICAgICAgICAgIHkwMSA9IHIxICogTWF0aC5zaW4oYTAxKSxcbiAgICAgICAgICAgIHgxMCA9IHIwICogTWF0aC5jb3MoYTEwKSxcbiAgICAgICAgICAgIHkxMCA9IHIwICogTWF0aC5zaW4oYTEwKTtcblxuICAgICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICAgIGlmIChyYyA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHZhciB4MTEgPSByMSAqIE1hdGguY29zKGExMSksXG4gICAgICAgICAgICAgIHkxMSA9IHIxICogTWF0aC5zaW4oYTExKSxcbiAgICAgICAgICAgICAgeDAwID0gcjAgKiBNYXRoLmNvcyhhMDApLFxuICAgICAgICAgICAgICB5MDAgPSByMCAqIE1hdGguc2luKGEwMCk7XG5cbiAgICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgICBpZiAoZGEgPCBwaSQyKSB7XG4gICAgICAgICAgICB2YXIgb2MgPSBkYTAgPiBlcHNpbG9uJDEgPyBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApIDogW3gxMCwgeTEwXSxcbiAgICAgICAgICAgICAgICBheCA9IHgwMSAtIG9jWzBdLFxuICAgICAgICAgICAgICAgIGF5ID0geTAxIC0gb2NbMV0sXG4gICAgICAgICAgICAgICAgYnggPSB4MTEgLSBvY1swXSxcbiAgICAgICAgICAgICAgICBieSA9IHkxMSAtIG9jWzFdLFxuICAgICAgICAgICAgICAgIGtjID0gMSAvIE1hdGguc2luKE1hdGguYWNvcygoYXggKiBieCArIGF5ICogYnkpIC8gKE1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSkgKiBNYXRoLnNxcnQoYnggKiBieCArIGJ5ICogYnkpKSkgLyAyKSxcbiAgICAgICAgICAgICAgICBsYyA9IE1hdGguc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgICByYzAgPSBNYXRoLm1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgICAgcmMxID0gTWF0aC5taW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJcyB0aGUgc2VjdG9yIGNvbGxhcHNlZCB0byBhIGxpbmU/XG4gICAgICAgIGlmICghKGRhMSA+IGVwc2lsb24kMSkpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICAgIGVsc2UgaWYgKHJjMSA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDAwLCB5MDAsIHgwMSwgeTAxLCByMSwgcmMxLCBjdyk7XG4gICAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcblxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgICBpZiAocmMxIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBNYXRoLmF0YW4yKHQwLnkwMSwgdDAueDAxKSwgTWF0aC5hdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBNYXRoLmF0YW4yKHQwLnkwMSwgdDAueDAxKSwgTWF0aC5hdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgTWF0aC5hdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBNYXRoLmF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMSwgTWF0aC5hdGFuMih0MS55MTEsIHQxLngxMSksIE1hdGguYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICAgIGVsc2UgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpLCBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAxLCBhMTEsICFjdyk7XG5cbiAgICAgICAgLy8gSXMgdGhlcmUgbm8gaW5uZXIgcmluZywgYW5kIGl04oCZcyBhIGNpcmN1bGFyIHNlY3Rvcj9cbiAgICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgICBpZiAoIShyMCA+IGVwc2lsb24kMSkgfHwgIShkYTAgPiBlcHNpbG9uJDEpKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBpbm5lciByaW5nIChvciBwb2ludCkgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICAgIGVsc2UgaWYgKHJjMCA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDAxLCB5MDEsIHgwMCwgeTAwLCByMCwgLXJjMCwgY3cpO1xuXG4gICAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICAgIGlmIChyYzAgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIE1hdGguYXRhbjIodDAueTAxLCB0MC54MDEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIE1hdGguYXRhbjIodDAueTAxLCB0MC54MDEpLCBNYXRoLmF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBNYXRoLmF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIE1hdGguYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIE1hdGguYXRhbjIodDEueTExLCB0MS54MTEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgICBlbHNlIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMTAsIGEwMCwgY3cpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMixcbiAgICAgICAgICBhID0gKCtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyIC0gcGkkMiAvIDI7XG4gICAgICByZXR1cm4gW01hdGguY29zKGEpICogciwgTWF0aC5zaW4oYSkgKiByXTtcbiAgICB9O1xuXG4gICAgYXJjLmlubmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogaW5uZXJSYWRpdXM7XG4gICAgfTtcblxuICAgIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG91dGVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IG91dGVyUmFkaXVzO1xuICAgIH07XG5cbiAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29ybmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgICB9O1xuXG4gICAgYXJjLnBhZFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogcGFkUmFkaXVzO1xuICAgIH07XG5cbiAgICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogc3RhcnRBbmdsZTtcbiAgICB9O1xuXG4gICAgYXJjLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gICAgfTtcblxuICAgIGFyYy5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IHBhZEFuZ2xlO1xuICAgIH07XG5cbiAgICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBhcmMpIDogY29udGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGFyYztcbiAgfVxuXG4gIGZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBMaW5lYXIucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjdXJ2ZUxpbmVhcihjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiB4KHApIHtcbiAgICByZXR1cm4gcFswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHkocCkge1xuICAgIHJldHVybiBwWzFdO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZSgpIHtcbiAgICB2YXIgeCQkID0geCxcbiAgICAgICAgeSQkID0geSxcbiAgICAgICAgZGVmaW5lZCA9IGNvbnN0YW50JDEodHJ1ZSksXG4gICAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgICBvdXRwdXQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgZCxcbiAgICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICAgIGJ1ZmZlcjtcblxuICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreCQkKGQsIGksIGRhdGEpLCAreSQkKGQsIGksIGRhdGEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4JCQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBsaW5lKSA6IHgkJDtcbiAgICB9O1xuXG4gICAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSQkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgbGluZSkgOiB5JCQ7XG4gICAgfTtcblxuICAgIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICAgIH07XG5cbiAgICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcbiAgICB9O1xuXG4gICAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGxpbmUpIDogY29udGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmU7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhJDEoKSB7XG4gICAgdmFyIHgwID0geCxcbiAgICAgICAgeDEgPSBudWxsLFxuICAgICAgICB5MCA9IGNvbnN0YW50JDEoMCksXG4gICAgICAgIHkxID0geSxcbiAgICAgICAgZGVmaW5lZCA9IGNvbnN0YW50JDEodHJ1ZSksXG4gICAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgICBvdXRwdXQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGQsXG4gICAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgICAgaiA9IGk7XG4gICAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcbiAgICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgICAgcmV0dXJuIGxpbmUoKS5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlKS5jb250ZXh0KGNvbnRleHQpO1xuICAgIH1cblxuICAgIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICAgIH07XG5cbiAgICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmVhKSA6IHgwO1xuICAgIH07XG5cbiAgICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJlYSkgOiB4MTtcbiAgICB9O1xuXG4gICAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gICAgfTtcblxuICAgIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyZWEpIDogeTA7XG4gICAgfTtcblxuICAgIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmVhKSA6IHkxO1xuICAgIH07XG5cbiAgICBhcmVhLmxpbmVYMCA9XG4gICAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICAgIH07XG5cbiAgICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gICAgfTtcblxuICAgIGFyZWEubGluZVgxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgICB9O1xuXG4gICAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gICAgfTtcblxuICAgIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICAgIH07XG5cbiAgICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gYXJlYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc2NlbmRpbmckMShhLCBiKSB7XG4gICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkkMShkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH1cblxuICBmdW5jdGlvbiBwaWUoKSB7XG4gICAgdmFyIHZhbHVlID0gaWRlbnRpdHkkMSxcbiAgICAgICAgc29ydFZhbHVlcyA9IGRlc2NlbmRpbmckMSxcbiAgICAgICAgc29ydCA9IG51bGwsXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBjb25zdGFudCQxKDApLFxuICAgICAgICBlbmRBbmdsZSA9IGNvbnN0YW50JDEodGF1JDIpLFxuICAgICAgICBwYWRBbmdsZSA9IGNvbnN0YW50JDEoMCk7XG5cbiAgICBmdW5jdGlvbiBwaWUoZGF0YSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGosXG4gICAgICAgICAgayxcbiAgICAgICAgICBzdW0gPSAwLFxuICAgICAgICAgIGluZGV4ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgYTAgPSArc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIGRhID0gTWF0aC5taW4odGF1JDIsIE1hdGgubWF4KC10YXUkMiwgZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGEwKSksXG4gICAgICAgICAgYTEsXG4gICAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgIHBhID0gcCAqIChkYSA8IDAgPyAtMSA6IDEpLFxuICAgICAgICAgIHY7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh2ID0gYXJjc1tpbmRleFtpXSA9IGldID0gK3ZhbHVlKGRhdGFbaV0sIGksIGRhdGEpKSA+IDApIHtcbiAgICAgICAgICBzdW0gKz0gdjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPcHRpb25hbGx5IHNvcnQgdGhlIGFyY3MgYnkgcHJldmlvdXNseS1jb21wdXRlZCB2YWx1ZXMgb3IgYnkgZGF0YS5cbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgICBlbHNlIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTsgfSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGFyY3MhIFRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgb3JpZ2luYWwgZGF0YSdzIG9yZGVyLlxuICAgICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICAgIGogPSBpbmRleFtpXSwgdiA9IGFyY3Nbal0sIGExID0gYTAgKyAodiA+IDAgPyB2ICogayA6IDApICsgcGEsIGFyY3Nbal0gPSB7XG4gICAgICAgICAgZGF0YTogZGF0YVtqXSxcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgcGFkQW5nbGU6IHBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyY3M7XG4gICAgfVxuXG4gICAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogdmFsdWU7XG4gICAgfTtcblxuICAgIHBpZS5zb3J0VmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFZhbHVlcyA9IF8sIHNvcnQgPSBudWxsLCBwaWUpIDogc29ydFZhbHVlcztcbiAgICB9O1xuXG4gICAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0ID0gXywgc29ydFZhbHVlcyA9IG51bGwsIHBpZSkgOiBzb3J0O1xuICAgIH07XG5cbiAgICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgICB9O1xuXG4gICAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogZW5kQW5nbGU7XG4gICAgfTtcblxuICAgIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgcGllKSA6IHBhZEFuZ2xlO1xuICAgIH07XG5cbiAgICByZXR1cm4gcGllO1xuICB9XG5cbiAgdmFyIGN1cnZlUmFkaWFsTGluZWFyID0gY3VydmVSYWRpYWwoY3VydmVMaW5lYXIpO1xuXG4gIGZ1bmN0aW9uIFJhZGlhbChjdXJ2ZSkge1xuICAgIHRoaXMuX2N1cnZlID0gY3VydmU7XG4gIH1cblxuICBSYWRpYWwucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5hcmVhU3RhcnQoKTtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY3VydmUuYXJlYUVuZCgpO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2N1cnZlLmxpbmVTdGFydCgpO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5saW5lRW5kKCk7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgICAgdGhpcy5fY3VydmUucG9pbnQociAqIE1hdGguc2luKGEpLCByICogLU1hdGguY29zKGEpKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY3VydmVSYWRpYWwoY3VydmUpIHtcblxuICAgIGZ1bmN0aW9uIHJhZGlhbChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gICAgfVxuXG4gICAgcmFkaWFsLl9jdXJ2ZSA9IGN1cnZlO1xuXG4gICAgcmV0dXJuIHJhZGlhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhZGlhbExpbmUobCkge1xuICAgIHZhciBjID0gbC5jdXJ2ZTtcblxuICAgIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gICAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG5cbiAgICBsLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gICAgfTtcblxuICAgIHJldHVybiBsO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFkaWFsTGluZSQxKCkge1xuICAgIHJldHVybiByYWRpYWxMaW5lKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFkaWFsQXJlYSgpIHtcbiAgICB2YXIgYSA9IGFyZWEkMSgpLmN1cnZlKGN1cnZlUmFkaWFsTGluZWFyKSxcbiAgICAgICAgYyA9IGEuY3VydmUsXG4gICAgICAgIHgwID0gYS5saW5lWDAsXG4gICAgICAgIHgxID0gYS5saW5lWDEsXG4gICAgICAgIHkwID0gYS5saW5lWTAsXG4gICAgICAgIHkxID0gYS5saW5lWTE7XG5cbiAgICBhLmFuZ2xlID0gYS54LCBkZWxldGUgYS54O1xuICAgIGEuc3RhcnRBbmdsZSA9IGEueDAsIGRlbGV0ZSBhLngwO1xuICAgIGEuZW5kQW5nbGUgPSBhLngxLCBkZWxldGUgYS54MTtcbiAgICBhLnJhZGl1cyA9IGEueSwgZGVsZXRlIGEueTtcbiAgICBhLmlubmVyUmFkaXVzID0gYS55MCwgZGVsZXRlIGEueTA7XG4gICAgYS5vdXRlclJhZGl1cyA9IGEueTEsIGRlbGV0ZSBhLnkxO1xuICAgIGEubGluZVN0YXJ0QW5nbGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJhZGlhbExpbmUoeDAoKSk7IH0sIGRlbGV0ZSBhLmxpbmVYMDtcbiAgICBhLmxpbmVFbmRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmFkaWFsTGluZSh4MSgpKTsgfSwgZGVsZXRlIGEubGluZVgxO1xuICAgIGEubGluZUlubmVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiByYWRpYWxMaW5lKHkwKCkpOyB9LCBkZWxldGUgYS5saW5lWTA7XG4gICAgYS5saW5lT3V0ZXJSYWRpdXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJhZGlhbExpbmUoeTEoKSk7IH0sIGRlbGV0ZSBhLmxpbmVZMTtcblxuICAgIGEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgY2lyY2xlID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBwaSQyKTtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgciwgMCwgdGF1JDIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3Jvc3MkMSA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgICAgY29udGV4dC5tb3ZlVG8oLTMgKiByLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgLXIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhyLCAtMyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8ociwgLXIpO1xuICAgICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDMgKiByLCByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHIsIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXIsIDMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC1yLCByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdGFuMzAgPSBNYXRoLnNxcnQoMSAvIDMpO1xuICB2YXIgdGFuMzBfMiA9IHRhbjMwICogMjtcbiAgdmFyIGRpYW1vbmQgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICAgIHggPSB5ICogdGFuMzA7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCAteSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDAsIHkpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXgsIDApO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMDtcbiAgdmFyIGtyID0gTWF0aC5zaW4ocGkkMiAvIDEwKSAvIE1hdGguc2luKDcgKiBwaSQyIC8gMTApO1xuICB2YXIga3ggPSBNYXRoLnNpbih0YXUkMiAvIDEwKSAqIGtyO1xuICB2YXIga3kgPSAtTWF0aC5jb3ModGF1JDIgLyAxMCkgKiBrcjtcbiAgdmFyIHN0YXIgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAqIGthKSxcbiAgICAgICAgICB4ID0ga3ggKiByLFxuICAgICAgICAgIHkgPSBreSAqIHI7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XG4gICAgICAgIHZhciBhID0gdGF1JDIgKiBpIC8gNSxcbiAgICAgICAgICAgIGMgPSBNYXRoLmNvcyhhKSxcbiAgICAgICAgICAgIHMgPSBNYXRoLnNpbihhKTtcbiAgICAgICAgY29udGV4dC5saW5lVG8ocyAqIHIsIC1jICogcik7XG4gICAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4IC0gcyAqIHksIHMgKiB4ICsgYyAqIHkpO1xuICAgICAgfVxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNxdWFyZSA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgdyA9IE1hdGguc3FydChzaXplKSxcbiAgICAgICAgICB4ID0gLXcgLyAyO1xuICAgICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3FydDMgPSBNYXRoLnNxcnQoMyk7XG5cbiAgdmFyIHRyaWFuZ2xlID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciB5ID0gLU1hdGguc3FydChzaXplIC8gKHNxcnQzICogMykpO1xuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgeSAqIDIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgICAgY29udGV4dC5saW5lVG8oc3FydDMgKiB5LCAteSk7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgYyA9IC0wLjU7XG4gIHZhciBzID0gTWF0aC5zcXJ0KDMpIC8gMjtcbiAgdmFyIGsgPSAxIC8gTWF0aC5zcXJ0KDEyKTtcbiAgdmFyIGEgPSAoayAvIDIgKyAxKSAqIDM7XG4gIHZhciB3eWUgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIGEpLFxuICAgICAgICAgIHgwID0gciAvIDIsXG4gICAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgICB4MSA9IHgwLFxuICAgICAgICAgIHkxID0gciAqIGsgKyByLFxuICAgICAgICAgIHgyID0gLXgxLFxuICAgICAgICAgIHkyID0geTE7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHgyLCB5Mik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMgKiB5MCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgLSBzICogeTIsIHMgKiB4MiArIGMgKiB5Mik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgKyBzICogeTAsIGMgKiB5MCAtIHMgKiB4MCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgKyBzICogeTIsIGMgKiB5MiAtIHMgKiB4Mik7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3ltYm9scyA9IFtcbiAgICBjaXJjbGUsXG4gICAgY3Jvc3MkMSxcbiAgICBkaWFtb25kLFxuICAgIHNxdWFyZSxcbiAgICBzdGFyLFxuICAgIHRyaWFuZ2xlLFxuICAgIHd5ZVxuICBdO1xuXG4gIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICB2YXIgdHlwZSA9IGNvbnN0YW50JDEoY2lyY2xlKSxcbiAgICAgICAgc2l6ZSA9IGNvbnN0YW50JDEoNjQpLFxuICAgICAgICBjb250ZXh0ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICAgIHZhciBidWZmZXI7XG4gICAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG4gICAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHlwZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMShfKSwgc3ltYm9sKSA6IHR5cGU7XG4gICAgfTtcblxuICAgIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2l6ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHN5bWJvbCkgOiBzaXplO1xuICAgIH07XG5cbiAgICBzeW1ib2wuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXywgc3ltYm9sKSA6IGNvbnRleHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzeW1ib2w7XG4gIH1cblxuICBmdW5jdGlvbiBub29wKCkge31cblxuICBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgICAoMiAqIHRoYXQuX3kwICsgdGhhdC5feTEpIC8gMyxcbiAgICAgICh0aGF0Ll94MCArIDIgKiB0aGF0Ll94MSkgLyAzLFxuICAgICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgICAodGhhdC5feDAgKyA0ICogdGhhdC5feDEgKyB4KSAvIDYsXG4gICAgICAodGhhdC5feTAgKyA0ICogdGhhdC5feTEgKyB5KSAvIDZcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgQmFzaXMucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyAvLyBwcm9jZWVkXG4gICAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBiYXNpcyhjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJhc2lzQ2xvc2VkKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIEJhc2lzQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IG5vb3AsXG4gICAgYXJlYUVuZDogbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMToge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDIgKyAyICogdGhpcy5feDMpIC8gMywgKHRoaXMuX3kyICsgMiAqIHRoaXMuX3kzKSAvIDMpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHk7IHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2KTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYmFzaXNDbG9zZWQoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBCYXNpc09wZW4oY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgQmFzaXNPcGVuLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdmFyIHgwID0gKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCB5MCA9ICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNjsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgwLCB5MCkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4MCwgeTApOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBiYXNpc09wZW4oY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgICB0aGlzLl9iZXRhID0gYmV0YTtcbiAgfVxuXG4gIEJ1bmRsZS5wcm90b3R5cGUgPSB7XG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3ggPSBbXTtcbiAgICAgIHRoaXMuX3kgPSBbXTtcbiAgICAgIHRoaXMuX2Jhc2lzLmxpbmVTdGFydCgpO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgICAgaiA9IHgubGVuZ3RoIC0gMTtcblxuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgICB5MCA9IHlbMF0sXG4gICAgICAgICAgICBkeCA9IHhbal0gLSB4MCxcbiAgICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgICAgdDtcblxuICAgICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgICB0ID0gaSAvIGo7XG4gICAgICAgICAgdGhpcy5fYmFzaXMucG9pbnQoXG4gICAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgICAgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICAgICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgICB0aGlzLl95LnB1c2goK3kpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgYnVuZGxlID0gKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgICBmdW5jdGlvbiBidW5kbGUoY29udGV4dCkge1xuICAgICAgcmV0dXJuIGJldGEgPT09IDEgPyBuZXcgQmFzaXMoY29udGV4dCkgOiBuZXcgQnVuZGxlKGNvbnRleHQsIGJldGEpO1xuICAgIH1cblxuICAgIGJ1bmRsZS5iZXRhID0gZnVuY3Rpb24oYmV0YSkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrYmV0YSk7XG4gICAgfTtcblxuICAgIHJldHVybiBidW5kbGU7XG4gIH0pKDAuODUpO1xuXG4gIGZ1bmN0aW9uIHBvaW50JDEodGhhdCwgeCwgeSkge1xuICAgIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICAgIHRoYXQuX3gxICsgdGhhdC5fayAqICh0aGF0Ll94MiAtIHRoYXQuX3gwKSxcbiAgICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICAgIHRoYXQuX3gyICsgdGhhdC5fayAqICh0aGF0Ll94MSAtIHgpLFxuICAgICAgdGhhdC5feTIgKyB0aGF0Ll9rICogKHRoYXQuX3kxIC0geSksXG4gICAgICB0aGF0Ll94MixcbiAgICAgIHRoYXQuX3kyXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG4gIH1cblxuICBDYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBwb2ludCQxKHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDEgPSB4LCB0aGlzLl95MSA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OiBwb2ludCQxKHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhcmRpbmFsID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICAgIH1cblxuICAgIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhcmRpbmFsO1xuICB9KSgwKTtcblxuICBmdW5jdGlvbiBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xuICB9XG5cbiAgQ2FyZGluYWxDbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCxcbiAgICBhcmVhRW5kOiBub29wLFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMToge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzOiB7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDEodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2FyZGluYWxDbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICAgIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XG4gICAgfVxuXG4gICAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2FyZGluYWw7XG4gIH0pKDApO1xuXG4gIGZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xuICB9XG5cbiAgQ2FyZGluYWxPcGVuLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDEodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2FyZGluYWxPcGVuID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKTtcbiAgICB9XG5cbiAgICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gICAgfTtcblxuICAgIHJldHVybiBjYXJkaW5hbDtcbiAgfSkoMCk7XG5cbiAgZnVuY3Rpb24gcG9pbnQkMih0aGF0LCB4LCB5KSB7XG4gICAgdmFyIHgxID0gdGhhdC5feDEsXG4gICAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICAgIHkyID0gdGhhdC5feTI7XG5cbiAgICBpZiAodGhhdC5fbDAxX2EgPiBlcHNpbG9uJDEpIHtcbiAgICAgIHZhciBhID0gMiAqIHRoYXQuX2wwMV8yYSArIDMgKiB0aGF0Ll9sMDFfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICAgIG4gPSAzICogdGhhdC5fbDAxX2EgKiAodGhhdC5fbDAxX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgICB5MSA9ICh5MSAqIGEgLSB0aGF0Ll95MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3kyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgfVxuXG4gICAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbiQxKSB7XG4gICAgICB2YXIgYiA9IDIgKiB0aGF0Ll9sMjNfMmEgKyAzICogdGhhdC5fbDIzX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgICAgeDIgPSAoeDIgKiBiICsgdGhhdC5feDEgKiB0aGF0Ll9sMjNfMmEgLSB4ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gICAgICB5MiA9ICh5MiAqIGIgKyB0aGF0Ll95MSAqIHRoYXQuX2wyM18yYSAtIHkgKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgICB9XG5cbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHRoYXQuX3gyLCB0aGF0Ll95Mik7XG4gIH1cblxuICBmdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbiAgfVxuXG4gIENhdG11bGxSb20ucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMsIHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb20gPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbChjb250ZXh0LCAwKTtcbiAgICB9XG5cbiAgICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb207XG4gIH0pKDAuNSk7XG5cbiAgZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XG4gIH1cblxuICBDYXRtdWxsUm9tQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IG5vb3AsXG4gICAgYXJlYUVuZDogbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMToge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzOiB7XG4gICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb21DbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCAwKTtcbiAgICB9XG5cbiAgICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb207XG4gIH0pKDAuNSk7XG5cbiAgZnVuY3Rpb24gQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9hbHBoYSA9IGFscGhhO1xuICB9XG5cbiAgQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjYXRtdWxsUm9tT3BlbiA9IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgMCk7XG4gICAgfVxuXG4gICAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjYXRtdWxsUm9tO1xuICB9KSgwLjUpO1xuXG4gIGZ1bmN0aW9uIExpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBMaW5lYXJDbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCxcbiAgICBhcmVhRW5kOiBub29wLFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICBlbHNlIHRoaXMuX3BvaW50ID0gMSwgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBMaW5lYXJDbG9zZWQoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuICAvLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuICAvLyBJbnRlcnBvbGF0aW9uIGluIE9uZSBEaW1lbnNpb24uIEFzdHJvbm9teSBhbmQgQXN0cm9waHlzaWNzLCBWb2wuIDIzOSwgTk8uXG4gIC8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbiAgZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICAgIHZhciBoMCA9IHRoYXQuX3gxIC0gdGhhdC5feDAsXG4gICAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgICAgczEgPSAoeTIgLSB0aGF0Ll95MSkgLyAoaDEgfHwgaDAgPCAwICYmIC0wKSxcbiAgICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gICAgcmV0dXJuIChzaWduKHMwKSArIHNpZ24oczEpKSAqIE1hdGgubWluKE1hdGguYWJzKHMwKSwgTWF0aC5hYnMoczEpLCAwLjUgKiBNYXRoLmFicyhwKSkgfHwgMDtcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbiAgZnVuY3Rpb24gc2xvcGUyKHRoYXQsIHQpIHtcbiAgICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XG4gICAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xuICB9XG5cbiAgLy8gQWNjb3JkaW5nIHRvIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmljX0hlcm1pdGVfc3BsaW5lI1JlcHJlc2VudGF0aW9uc1xuICAvLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbiAgLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxuICBmdW5jdGlvbiBwb2ludCQzKHRoYXQsIHQwLCB0MSkge1xuICAgIHZhciB4MCA9IHRoYXQuX3gwLFxuICAgICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIE1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgICB0aGlzLl90MCA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHBvaW50JDModGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgdDEgPSBOYU47XG5cbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgcG9pbnQkMyh0aGlzLCBzbG9wZTIodGhpcywgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpLCB0MSk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiBwb2ludCQzKHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgICB0aGlzLl90MCA9IHQxO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIChNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJlZmxlY3RDb250ZXh0KGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIFJlZmxlY3RDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gICAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHsgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTsgfSxcbiAgICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5saW5lVG8oeSwgeCk7IH0sXG4gICAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBOYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feCA9IFtdO1xuICAgICAgdGhpcy5feSA9IFtdO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgICAgbiA9IHgubGVuZ3RoO1xuXG4gICAgICBpZiAobikge1xuICAgICAgICB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeFswXSwgeVswXSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4WzBdLCB5WzBdKTtcbiAgICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxuICAgICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDE7IGkxIDwgbjsgKytpMCwgKytpMSkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgbiA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICAgIHRoaXMuX3kucHVzaCgreSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXG4gIGZ1bmN0aW9uIGNvbnRyb2xQb2ludHMoeCkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0geC5sZW5ndGggLSAxLFxuICAgICAgICBtLFxuICAgICAgICBhID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pO1xuICAgIGFbMF0gPSAwLCBiWzBdID0gMiwgclswXSA9IHhbMF0gKyAyICogeFsxXTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XG4gICAgYVtuIC0gMV0gPSAyLCBiW24gLSAxXSA9IDcsIHJbbiAtIDFdID0gOCAqIHhbbiAtIDFdICsgeFtuXTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSBtID0gYVtpXSAvIGJbaSAtIDFdLCBiW2ldIC09IG0sIHJbaV0gLT0gbSAqIHJbaSAtIDFdO1xuICAgIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyAtLWkpIGFbaV0gPSAocltpXSAtIGFbaSArIDFdKSAvIGJbaV07XG4gICAgYltuIC0gMV0gPSAoeFtuXSArIGFbbiAtIDFdKSAvIDI7XG4gICAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcbiAgICByZXR1cm4gW2EsIGJdO1xuICB9XG5cbiAgZnVuY3Rpb24gbmF0dXJhbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBOYXR1cmFsKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gU3RlcChjb250ZXh0LCB0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fdCA9IHQ7XG4gIH1cblxuICBTdGVwLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgwIDwgdGhpcy5fdCAmJiB0aGlzLl90IDwgMSAmJiB0aGlzLl9wb2ludCA9PT0gMikgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgdGhpcy5feSk7XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGlmICh0aGlzLl90IDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgdGhpcy5feSk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl94ID0geCwgdGhpcy5feSA9IHk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0ZXAoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwLjUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcEJlZm9yZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcEFmdGVyKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG4gIH1cblxuICB2YXIgc2xpY2UkMiA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBub25lKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgICBmb3IgKHZhciBpID0gMSwgczAsIHMxID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMxLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgczAgPSBzMSwgczEgPSBzZXJpZXNbb3JkZXJbaV1dO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vbmUkMShzZXJpZXMpIHtcbiAgICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsIG8gPSBuZXcgQXJyYXkobik7XG4gICAgd2hpbGUgKC0tbiA+PSAwKSBvW25dID0gbjtcbiAgICByZXR1cm4gbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gICAgcmV0dXJuIGRba2V5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YWNrKCkge1xuICAgIHZhciBrZXlzID0gY29uc3RhbnQkMShbXSksXG4gICAgICAgIG9yZGVyID0gbm9uZSQxLFxuICAgICAgICBvZmZzZXQgPSBub25lLFxuICAgICAgICB2YWx1ZSA9IHN0YWNrVmFsdWU7XG5cbiAgICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgICB2YXIga3ogPSBrZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgaSxcbiAgICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgbiA9IGt6Lmxlbmd0aCxcbiAgICAgICAgICBzeiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBvejtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciBraSA9IGt6W2ldLCBzaSA9IHN6W2ldID0gbmV3IEFycmF5KG0pLCBqID0gMCwgc2lqOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgICAgc2lqLmRhdGEgPSBkYXRhW2pdO1xuICAgICAgICB9XG4gICAgICAgIHNpLmtleSA9IGtpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBveiA9IG9yZGVyKHN6KTsgaSA8IG47ICsraSkge1xuICAgICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgICAgfVxuXG4gICAgICBvZmZzZXQoc3osIG96KTtcbiAgICAgIHJldHVybiBzejtcbiAgICB9XG5cbiAgICBzdGFjay5rZXlzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMShzbGljZSQyLmNhbGwoXykpLCBzdGFjaykgOiBrZXlzO1xuICAgIH07XG5cbiAgICBzdGFjay52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgc3RhY2spIDogdmFsdWU7XG4gICAgfTtcblxuICAgIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3JkZXIgPSBfID09IG51bGwgPyBub25lJDEgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoc2xpY2UkMi5jYWxsKF8pKSwgc3RhY2spIDogb3JkZXI7XG4gICAgfTtcblxuICAgIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG9mZnNldCA9IF8gPT0gbnVsbCA/IG5vbmUgOiBfLCBzdGFjaykgOiBvZmZzZXQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzdGFjaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cGFuZChzZXJpZXMsIG9yZGVyKSB7XG4gICAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gICAgZm9yICh2YXIgaSwgbiwgaiA9IDAsIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCB5OyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHkgPSBpID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICAgIGlmICh5KSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzZXJpZXNbaV1bal1bMV0gLz0geTtcbiAgICB9XG4gICAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbGhvdWV0dGUoc2VyaWVzLCBvcmRlcikge1xuICAgIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBzMCA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMC5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCB5ID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICAgIHMwW2pdWzFdICs9IHMwW2pdWzBdID0gLXkgLyAyO1xuICAgIH1cbiAgICBub25lKHNlcmllcywgb3JkZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lnZ2xlKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkgfHwgISgobSA9IChzMCA9IHNlcmllc1tvcmRlclswXV0pLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICAgIGZvciAodmFyIHkgPSAwLCBqID0gMSwgczAsIG0sIG47IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBzMSA9IDAsIHMyID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICB2YXIgc2kgPSBzZXJpZXNbb3JkZXJbaV1dLFxuICAgICAgICAgICAgc2lqMCA9IHNpW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICBzaWoxID0gc2lbaiAtIDFdWzFdIHx8IDAsXG4gICAgICAgICAgICBzMyA9IChzaWowIC0gc2lqMSkgLyAyO1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGk7ICsraykge1xuICAgICAgICAgIHZhciBzayA9IHNlcmllc1tvcmRlcltrXV0sXG4gICAgICAgICAgICAgIHNrajAgPSBza1tqXVsxXSB8fCAwLFxuICAgICAgICAgICAgICBza2oxID0gc2tbaiAtIDFdWzFdIHx8IDA7XG4gICAgICAgICAgczMgKz0gc2tqMCAtIHNrajE7XG4gICAgICAgIH1cbiAgICAgICAgczEgKz0gc2lqMCwgczIgKz0gczMgKiBzaWowO1xuICAgICAgfVxuICAgICAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gICAgICBpZiAoczEpIHkgLT0gczIgLyBzMTtcbiAgICB9XG4gICAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gICAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzY2VuZGluZyQxKHNlcmllcykge1xuICAgIHZhciBzdW1zID0gc2VyaWVzLm1hcChzdW0kMSk7XG4gICAgcmV0dXJuIG5vbmUkMShzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc3Vtc1thXSAtIHN1bXNbYl07IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3VtJDEoc2VyaWVzKSB7XG4gICAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAodiA9ICtzZXJpZXNbaV1bMV0pIHMgKz0gdjtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc2NlbmRpbmckMihzZXJpZXMpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nJDEoc2VyaWVzKS5yZXZlcnNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNpZGVPdXQoc2VyaWVzKSB7XG4gICAgdmFyIG4gPSBzZXJpZXMubGVuZ3RoLFxuICAgICAgICBpLFxuICAgICAgICBqLFxuICAgICAgICBzdW1zID0gc2VyaWVzLm1hcChzdW0kMSksXG4gICAgICAgIG9yZGVyID0gbm9uZSQxKHNlcmllcykuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzdW1zW2JdIC0gc3Vtc1thXTsgfSksXG4gICAgICAgIHRvcCA9IDAsXG4gICAgICAgIGJvdHRvbSA9IDAsXG4gICAgICAgIHRvcHMgPSBbXSxcbiAgICAgICAgYm90dG9tcyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaiA9IG9yZGVyW2ldO1xuICAgICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgICB0b3AgKz0gc3Vtc1tqXTtcbiAgICAgICAgdG9wcy5wdXNoKGopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm90dG9tICs9IHN1bXNbal07XG4gICAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYm90dG9tcy5yZXZlcnNlKCkuY29uY2F0KHRvcHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJzZShzZXJpZXMpIHtcbiAgICByZXR1cm4gbm9uZSQxKHNlcmllcykucmV2ZXJzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmaW5lKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gICAgcmV0dXJuIHByb3RvdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbG9yKCkge31cblxuICB2YXIgZGFya2VyID0gMC43O1xuICB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG4gIHZhciByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC87XG4gIHZhciByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC87XG4gIHZhciByZVJnYkludGVnZXIgPSAvXnJnYlxcKFxccyooWy0rXT9cXGQrKVxccyosXFxzKihbLStdP1xcZCspXFxzKixcXHMqKFstK10/XFxkKylcXHMqXFwpJC87XG4gIHZhciByZVJnYlBlcmNlbnQgPSAvXnJnYlxcKFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqXFwpJC87XG4gIHZhciByZVJnYmFJbnRlZ2VyID0gL15yZ2JhXFwoXFxzKihbLStdP1xcZCspXFxzKixcXHMqKFstK10/XFxkKylcXHMqLFxccyooWy0rXT9cXGQrKVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKlxcKSQvO1xuICB2YXIgcmVSZ2JhUGVyY2VudCA9IC9ecmdiYVxcKFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KVxccypcXCkkLztcbiAgdmFyIHJlSHNsUGVyY2VudCA9IC9eaHNsXFwoXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKlxcKSQvO1xuICB2YXIgcmVIc2xhUGVyY2VudCA9IC9eaHNsYVxcKFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pJVxccyosXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKlxcKSQvO1xuICB2YXIgbmFtZWQgPSB7XG4gICAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICAgIGFxdWE6IDB4MDBmZmZmLFxuICAgIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICAgIGF6dXJlOiAweGYwZmZmZixcbiAgICBiZWlnZTogMHhmNWY1ZGMsXG4gICAgYmlzcXVlOiAweGZmZTRjNCxcbiAgICBibGFjazogMHgwMDAwMDAsXG4gICAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICAgIGJsdWU6IDB4MDAwMGZmLFxuICAgIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICAgIGJyb3duOiAweGE1MmEyYSxcbiAgICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICAgIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gICAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gICAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgICBjb3JhbDogMHhmZjdmNTAsXG4gICAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICAgIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgICBjcmltc29uOiAweGRjMTQzYyxcbiAgICBjeWFuOiAweDAwZmZmZixcbiAgICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gICAgZGFya2N5YW46IDB4MDA4YjhiLFxuICAgIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICAgIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICAgIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICAgIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gICAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gICAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gICAgZGFya3JlZDogMHg4YjAwMDAsXG4gICAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gICAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgICBkZWVwcGluazogMHhmZjE0OTMsXG4gICAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICAgIGRpbWdyYXk6IDB4Njk2OTY5LFxuICAgIGRpbWdyZXk6IDB4Njk2OTY5LFxuICAgIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICAgIGZpcmVicmljazogMHhiMjIyMjIsXG4gICAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICAgIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgICBmdWNoc2lhOiAweGZmMDBmZixcbiAgICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICAgIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICAgIGdvbGQ6IDB4ZmZkNzAwLFxuICAgIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gICAgZ3JheTogMHg4MDgwODAsXG4gICAgZ3JlZW46IDB4MDA4MDAwLFxuICAgIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgICBncmV5OiAweDgwODA4MCxcbiAgICBob25leWRldzogMHhmMGZmZjAsXG4gICAgaG90cGluazogMHhmZjY5YjQsXG4gICAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgICBpbmRpZ286IDB4NGIwMDgyLFxuICAgIGl2b3J5OiAweGZmZmZmMCxcbiAgICBraGFraTogMHhmMGU2OGMsXG4gICAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICAgIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICAgIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gICAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICAgIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICAgIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICAgIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gICAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gICAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICAgIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICAgIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gICAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICAgIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgICBsaW1lOiAweDAwZmYwMCxcbiAgICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICAgIGxpbmVuOiAweGZhZjBlNixcbiAgICBtYWdlbnRhOiAweGZmMDBmZixcbiAgICBtYXJvb246IDB4ODAwMDAwLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICAgIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICAgIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gICAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gICAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gICAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICAgIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gICAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICAgIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gICAgbmF2eTogMHgwMDAwODAsXG4gICAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gICAgb2xpdmU6IDB4ODA4MDAwLFxuICAgIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gICAgb3JhbmdlOiAweGZmYTUwMCxcbiAgICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICAgIG9yY2hpZDogMHhkYTcwZDYsXG4gICAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gICAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICAgIHBlcnU6IDB4Y2Q4NTNmLFxuICAgIHBpbms6IDB4ZmZjMGNiLFxuICAgIHBsdW06IDB4ZGRhMGRkLFxuICAgIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICAgIHB1cnBsZTogMHg4MDAwODAsXG4gICAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gICAgcmVkOiAweGZmMDAwMCxcbiAgICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICAgIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gICAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICAgIHNhbG1vbjogMHhmYTgwNzIsXG4gICAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gICAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICAgIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgICBzaWVubmE6IDB4YTA1MjJkLFxuICAgIHNpbHZlcjogMHhjMGMwYzAsXG4gICAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gICAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICAgIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gICAgc25vdzogMHhmZmZhZmEsXG4gICAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICAgIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gICAgdGFuOiAweGQyYjQ4YyxcbiAgICB0ZWFsOiAweDAwODA4MCxcbiAgICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgICB0b21hdG86IDB4ZmY2MzQ3LFxuICAgIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gICAgdmlvbGV0OiAweGVlODJlZSxcbiAgICB3aGVhdDogMHhmNWRlYjMsXG4gICAgd2hpdGU6IDB4ZmZmZmZmLFxuICAgIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICAgIHllbGxvdzogMHhmZmZmMDAsXG4gICAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG4gIH07XG5cbiAgZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICAgIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gICAgfSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZ2IoKSArIFwiXCI7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgICB2YXIgbTtcbiAgICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIChtID0gcmVIZXgzLmV4ZWMoZm9ybWF0KSkgPyAobSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweDBmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkpIC8vICNmMDBcbiAgICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgICAgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gcmdibihuKSB7XG4gICAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICAgIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICAgIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICAgIG8gPSBvLnJnYigpO1xuICAgIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvclJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICAgIHRoaXMuciA9ICtyO1xuICAgIHRoaXMuZyA9ICtnO1xuICAgIHRoaXMuYiA9ICtiO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKFJnYiwgY29sb3JSZ2IsIGV4dGVuZChDb2xvciwge1xuICAgIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKDAgPD0gdGhpcy5yICYmIHRoaXMuciA8PSAyNTUpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5iICYmIHRoaXMuYiA8PSAyNTUpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgICB9XG4gIH0pKTtcblxuICBmdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gICAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gICAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICAgIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICAgIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICAgIG8gPSBvLnJnYigpO1xuICAgIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICAgIGggPSBOYU4sXG4gICAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgaWYgKHMpIHtcbiAgICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICAgIGggKj0gNjA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29sb3JIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgICB0aGlzLmggPSAraDtcbiAgICB0aGlzLnMgPSArcztcbiAgICB0aGlzLmwgPSArbDtcbiAgICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbiAgfVxuXG4gIGRlZmluZShIc2wsIGNvbG9ySHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgICB0aGlzLm9wYWNpdHlcbiAgICAgICk7XG4gICAgfSxcbiAgICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gICAgfVxuICB9KSk7XG5cbiAgLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuICBmdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICAgIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgICA6IG0xKSAqIDI1NTtcbiAgfVxuXG4gIHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbiAgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuXG4gIHZhciBLbiA9IDE4O1xuICB2YXIgWG4gPSAwLjk1MDQ3MDtcbiAgdmFyIFluID0gMTtcbiAgdmFyIFpuID0gMS4wODg4MzA7XG4gIHZhciB0MCA9IDQgLyAyOTtcbiAgdmFyIHQxID0gNiAvIDI5O1xuICB2YXIgdDIgPSAzICogdDEgKiB0MTtcbiAgdmFyIHQzID0gdDEgKiB0MSAqIHQxO1xuICBmdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgICAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG4gICAgfVxuICAgIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgICB2YXIgYiA9IHJnYjJ4eXooby5yKSxcbiAgICAgICAgYSA9IHJnYjJ4eXooby5nKSxcbiAgICAgICAgbCA9IHJnYjJ4eXooby5iKSxcbiAgICAgICAgeCA9IHh5ejJsYWIoKDAuNDEyNDU2NCAqIGIgKyAwLjM1NzU3NjEgKiBhICsgMC4xODA0Mzc1ICogbCkgLyBYbiksXG4gICAgICAgIHkgPSB4eXoybGFiKCgwLjIxMjY3MjkgKiBiICsgMC43MTUxNTIyICogYSArIDAuMDcyMTc1MCAqIGwpIC8gWW4pLFxuICAgICAgICB6ID0geHl6MmxhYigoMC4wMTkzMzM5ICogYiArIDAuMTE5MTkyMCAqIGEgKyAwLjk1MDMwNDEgKiBsKSAvIFpuKTtcbiAgICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgICB0aGlzLmwgPSArbDtcbiAgICB0aGlzLmEgPSArYTtcbiAgICB0aGlzLmIgPSArYjtcbiAgICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbiAgfVxuXG4gIGRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCAtIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgICB4eXoycmdiKCAzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIDAuNDk4NTMxNCAqIHopLCAvLyBENjUgLT4gc1JHQlxuICAgICAgICB4eXoycmdiKC0wLjk2OTI2NjAgKiB4ICsgMS44NzYwMTA4ICogeSArIDAuMDQxNTU2MCAqIHopLFxuICAgICAgICB4eXoycmdiKCAwLjA1NTY0MzQgKiB4IC0gMC4yMDQwMjU5ICogeSArIDEuMDU3MjI1MiAqIHopLFxuICAgICAgICB0aGlzLm9wYWNpdHlcbiAgICAgICk7XG4gICAgfVxuICB9KSk7XG5cbiAgZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gICAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xuICB9XG5cbiAgZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gICAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG4gIH1cblxuICBmdW5jdGlvbiB4eXoycmdiKHgpIHtcbiAgICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJnYjJ4eXooeCkge1xuICAgIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICAgIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICAgIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvckhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICAgIHRoaXMuaCA9ICtoO1xuICAgIHRoaXMuYyA9ICtjO1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKEhjbCwgY29sb3JIY2wsIGV4dGVuZChDb2xvciwge1xuICAgIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xuICAgIH1cbiAgfSkpO1xuXG4gIHZhciBBID0gLTAuMTQ4NjE7XG4gIHZhciBCID0gKzEuNzgyNzc7XG4gIHZhciBDID0gLTAuMjkyMjc7XG4gIHZhciBEID0gLTAuOTA2NDk7XG4gIHZhciBFID0gKzEuOTcyOTQ7XG4gIHZhciBFRCA9IEUgKiBEO1xuICB2YXIgRUIgPSBFICogQjtcbiAgdmFyIEJDX0RBID0gQiAqIEMgLSBEICogQTtcbiAgZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICAgIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgICAgYmwgPSBiIC0gbCxcbiAgICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICAgIHRoaXMuaCA9ICtoO1xuICAgIHRoaXMucyA9ICtzO1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgICB0aGlzLm9wYWNpdHlcbiAgICAgICk7XG4gICAgfVxuICB9KSk7XG5cbiAgZnVuY3Rpb24gYmFzaXMkMSh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gICAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgICArIHQzICogdjMpIC8gNjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJhc2lzJDIodmFsdWVzKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICAgIHJldHVybiBiYXNpcyQxKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBiYXNpc0Nsb3NlZCQxKHZhbHVlcykge1xuICAgIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgICByZXR1cm4gYmFzaXMkMSgodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMih4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhciQxKGEsIGQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwb25lbnRpYWwkMShhLCBiLCB5KSB7XG4gICAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgICB2YXIgZCA9IGIgLSBhO1xuICAgIHJldHVybiBkID8gbGluZWFyJDEoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudCQyKGlzTmFOKGEpID8gYiA6IGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICAgIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbCQxKGEsIGIsIHkpIDogY29uc3RhbnQkMihpc05hTihhKSA/IGIgOiBhKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gICAgdmFyIGQgPSBiIC0gYTtcbiAgICByZXR1cm4gZCA/IGxpbmVhciQxKGEsIGQpIDogY29uc3RhbnQkMihpc05hTihhKSA/IGIgOiBhKTtcbiAgfVxuXG4gIHZhciBpbnRlcnBvbGF0ZVJnYiA9IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gICAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICAgIHJldHVybiByZ2I7XG4gIH0pKDEpO1xuXG4gIGZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgaSwgY29sb3I7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICAgIH1cbiAgICAgIHIgPSBzcGxpbmUocik7XG4gICAgICBnID0gc3BsaW5lKGcpO1xuICAgICAgYiA9IHNwbGluZShiKTtcbiAgICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyQyKTtcbiAgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkJDEpO1xuXG4gIGZ1bmN0aW9uIGFycmF5JDEoYSwgYikge1xuICAgIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgICB4ID0gbmV3IEFycmF5KG5iKSxcbiAgICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICAgIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IGludGVycG9sYXRlKGFbaV0sIGJbaV0pO1xuICAgIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRhdGUoYSwgYikge1xuICAgIHZhciBkID0gbmV3IERhdGU7XG4gICAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZC5zZXRUaW1lKGEgKyBiICogdCksIGQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBhICsgYiAqIHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9iamVjdChhLCBiKSB7XG4gICAgdmFyIGkgPSB7fSxcbiAgICAgICAgYyA9IHt9LFxuICAgICAgICBrO1xuXG4gICAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gICAgZm9yIChrIGluIGIpIHtcbiAgICAgIGlmIChrIGluIGEpIHtcbiAgICAgICAgaVtrXSA9IGludGVycG9sYXRlKGFba10sIGJba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY1trXSA9IGJba107XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cblxuICB2YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nO1xuICB2YXIgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG4gIGZ1bmN0aW9uIHplcm8oYikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBvbmUoYikge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlU3RyaW5nKGEsIGIpIHtcbiAgICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gICAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICAgIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gICAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICAgIH1cbiAgICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgICAgcS5wdXNoKHtpOiBpLCB4OiBpbnRlcnBvbGF0ZU51bWJlcihhbSwgYm0pfSk7XG4gICAgICB9XG4gICAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICAgIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgICA/IG9uZShxWzBdLngpXG4gICAgICAgIDogemVybyhiKSlcbiAgICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGEsIGIpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICAgIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudCQyKGIpXG4gICAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKSA6IGludGVycG9sYXRlU3RyaW5nKVxuICAgICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5JDFcbiAgICAgICAgOiBpc05hTihiKSA/IG9iamVjdFxuICAgICAgICA6IGludGVycG9sYXRlTnVtYmVyKShhLCBiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlUm91bmQoYSwgYikge1xuICAgIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG4gIHZhciBpZGVudGl0eSQyID0ge1xuICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgdHJhbnNsYXRlWTogMCxcbiAgICByb3RhdGU6IDAsXG4gICAgc2tld1g6IDAsXG4gICAgc2NhbGVYOiAxLFxuICAgIHNjYWxlWTogMVxuICB9O1xuXG4gIGZ1bmN0aW9uIGRlY29tcG9zZShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gICAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICAgIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICAgIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgICB0cmFuc2xhdGVZOiBmLFxuICAgICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICAgIHNjYWxlWDogc2NhbGVYLFxuICAgICAgc2NhbGVZOiBzY2FsZVlcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNzc05vZGU7XG4gIHZhciBjc3NSb290O1xuICB2YXIgY3NzVmlldztcbiAgdmFyIHN2Z05vZGU7XG4gIGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5JDI7XG4gICAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gICAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5JDI7XG4gICAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICAgIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eSQyO1xuICAgIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICAgIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICAgIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBpbnRlcnBvbGF0ZU51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBpbnRlcnBvbGF0ZU51bWJlcih5YSwgeWIpfSk7XG4gICAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogaW50ZXJwb2xhdGVOdW1iZXIoYSwgYil9KTtcbiAgICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IGludGVycG9sYXRlTnVtYmVyKGEsIGIpfSk7XG4gICAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBpbnRlcnBvbGF0ZU51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBpbnRlcnBvbGF0ZU51bWJlcih5YSwgeWIpfSk7XG4gICAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG4gIHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQyID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcblxuICB2YXIgcmhvID0gTWF0aC5TUVJUMjtcbiAgdmFyIHJobzIgPSAyO1xuICB2YXIgcmhvNCA9IDQ7XG4gIHZhciBlcHNpbG9uMiA9IDFlLTEyO1xuICBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG4gIH1cblxuICAvLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4gIC8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVab29tKHAwLCBwMSkge1xuICAgIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgICBpLFxuICAgICAgICBTO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gICAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdlbmVyYWwgY2FzZS5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHNsKGh1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhzbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhzbChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gbm9nYW1tYShzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgaHNsJDEgPSBoc2woaHVlKTtcbiAgdmFyIGhzbExvbmcgPSBoc2wobm9nYW1tYSk7XG5cbiAgZnVuY3Rpb24gbGFiJDEoc3RhcnQsIGVuZCkge1xuICAgIHZhciBsID0gbm9nYW1tYSgoc3RhcnQgPSBsYWIoc3RhcnQpKS5sLCAoZW5kID0gbGFiKGVuZCkpLmwpLFxuICAgICAgICBhID0gbm9nYW1tYShzdGFydC5hLCBlbmQuYSksXG4gICAgICAgIGIgPSBub2dhbW1hKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0LmEgPSBhKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhjbChodWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIY2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIY2woZW5kKSkuaCksXG4gICAgICAgICAgYyA9IG5vZ2FtbWEoc3RhcnQuYywgZW5kLmMpLFxuICAgICAgICAgIGwgPSBub2dhbW1hKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGhjbCQxID0gaGNsKGh1ZSk7XG4gIHZhciBoY2xMb25nID0gaGNsKG5vZ2FtbWEpO1xuXG4gIGZ1bmN0aW9uIGN1YmVoZWxpeCQxKGh1ZSkge1xuICAgIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgICAgeSA9ICt5O1xuXG4gICAgICBmdW5jdGlvbiBjdWJlaGVsaXgkJChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgICBzID0gbm9nYW1tYShzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGN1YmVoZWxpeCQkLmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICAgIHJldHVybiBjdWJlaGVsaXgkJDtcbiAgICB9KSgxKTtcbiAgfVxuXG4gIHZhciBjdWJlaGVsaXgkMiA9IGN1YmVoZWxpeCQxKGh1ZSk7XG4gIHZhciBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgkMShub2dhbW1hKTtcblxuICBmdW5jdGlvbiBxdWFudGl6ZShpbnRlcnBvbGF0b3IsIG4pIHtcbiAgICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgc2FtcGxlc1tpXSA9IGludGVycG9sYXRvcihpIC8gKG4gLSAxKSk7XG4gICAgcmV0dXJuIHNhbXBsZXM7XG4gIH1cblxuICB2YXIgbm9vcCQxID0ge3ZhbHVlOiBmdW5jdGlvbigpIHt9fTtcblxuICBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgICBfW3RdID0gW107XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG4gIH1cblxuICBmdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gICAgdGhpcy5fID0gXztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICAgIH0pO1xuICB9XG5cbiAgRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgICB0LFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldCQxKF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQkMShfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldCQxKHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICB0eXBlW2ldID0gbm9vcCQxLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG4gIGZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gICAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICAgIGNvbHVtbnMgPSBbXTtcblxuICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29sdW1ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXVwiKSxcbiAgICAgICAgZGVsaW1pdGVyQ29kZSA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gICAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgICAgfSk7XG4gICAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zO1xuICAgICAgcmV0dXJuIHJvd3M7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICAgIHZhciBFT0wgPSB7fSwgLy8gc2VudGluZWwgdmFsdWUgZm9yIGVuZC1vZi1saW5lXG4gICAgICAgICAgRU9GID0ge30sIC8vIHNlbnRpbmVsIHZhbHVlIGZvciBlbmQtb2YtZmlsZVxuICAgICAgICAgIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgICAgbiA9IDAsIC8vIHRoZSBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgICAgdCwgLy8gdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgICBlb2w7IC8vIGlzIHRoZSBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7IC8vIHNwZWNpYWwgY2FzZTogZW5kIG9mIGZpbGVcbiAgICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7IC8vIHNwZWNpYWwgY2FzZTogZW5kIG9mIGxpbmVcblxuICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IHF1b3Rlc1xuICAgICAgICB2YXIgaiA9IEksIGM7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG4gICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgICBjID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICBpZiAoYyA9PT0gMTMpIHtcbiAgICAgICAgICAgIGVvbCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAyKSA9PT0gMTApICsrSTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDEwKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21tb24gY2FzZTogZmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lXG4gICAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICAgIHZhciBrID0gMTtcbiAgICAgICAgICBjID0gdGV4dC5jaGFyQ29kZUF0KEkrKyk7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyAvLyBcXG5cbiAgICAgICAgICBlbHNlIGlmIChjID09PSAxMykgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSAxMCkgKytJLCArK2s7IH0gLy8gXFxyfFxcclxcblxuICAgICAgICAgIGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIEkgLSBrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZTogbGFzdCB0b2tlbiBiZWZvcmUgRU9GXG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGopO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICAgIHZhciBhID0gW107XG4gICAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSB7XG4gICAgICAgICAgYS5wdXNoKHQpO1xuICAgICAgICAgIHQgPSB0b2tlbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmICYmIChhID0gZihhLCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgcm93cy5wdXNoKGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcm93cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0Um93cyhyb3dzKSB7XG4gICAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcbiAgICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodGV4dCkge1xuICAgICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgICA6IHJlRm9ybWF0LnRlc3QodGV4dCArPSBcIlwiKSA/IFwiXFxcIlwiICsgdGV4dC5yZXBsYWNlKC9cXFwiL2csIFwiXFxcIlxcXCJcIikgKyBcIlxcXCJcIlxuICAgICAgICAgIDogdGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2U6IHBhcnNlLFxuICAgICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNzdiA9IGRzdihcIixcIik7XG5cbiAgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuICB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbiAgdmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG4gIHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG5cbiAgdmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuICB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG4gIHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuICB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbiAgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcblxuICBmdW5jdGlvbiByZXF1ZXN0KHVybCwgY2FsbGJhY2spIHtcbiAgICB2YXIgcmVxdWVzdCxcbiAgICAgICAgZXZlbnQgPSBkaXNwYXRjaChcImJlZm9yZXNlbmRcIiwgXCJwcm9ncmVzc1wiLCBcImxvYWRcIiwgXCJlcnJvclwiKSxcbiAgICAgICAgbWltZVR5cGUsXG4gICAgICAgIGhlYWRlcnMgPSBtYXAkMSgpLFxuICAgICAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QsXG4gICAgICAgIHVzZXIgPSBudWxsLFxuICAgICAgICBwYXNzd29yZCA9IG51bGwsXG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgICByZXNwb25zZVR5cGUsXG4gICAgICAgIHRpbWVvdXQgPSAwO1xuXG4gICAgLy8gSWYgSUUgZG9lcyBub3Qgc3VwcG9ydCBDT1JTLCB1c2UgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAmJiAhKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKVxuICAgICAgICAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3Q7XG5cbiAgICBcIm9ubG9hZFwiIGluIHhoclxuICAgICAgICA/IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSByZXNwb25kXG4gICAgICAgIDogeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKG8pIHsgeGhyLnJlYWR5U3RhdGUgPiAzICYmIHJlc3BvbmQobyk7IH07XG5cbiAgICBmdW5jdGlvbiByZXNwb25kKG8pIHtcbiAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzLCByZXN1bHQ7XG4gICAgICBpZiAoIXN0YXR1cyAmJiBoYXNSZXNwb25zZSh4aHIpXG4gICAgICAgICAgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDBcbiAgICAgICAgICB8fCBzdGF0dXMgPT09IDMwNCkge1xuICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzcG9uc2UuY2FsbChyZXF1ZXN0LCB4aHIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0geGhyO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LmNhbGwoXCJsb2FkXCIsIHJlcXVlc3QsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC5jYWxsKFwiZXJyb3JcIiwgcmVxdWVzdCwgbyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbihlKSB7XG4gICAgICBldmVudC5jYWxsKFwicHJvZ3Jlc3NcIiwgcmVxdWVzdCwgZSk7XG4gICAgfTtcblxuICAgIHJlcXVlc3QgPSB7XG4gICAgICBoZWFkZXI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIG5hbWUgPSAobmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgaGVhZGVycy5yZW1vdmUobmFtZSk7XG4gICAgICAgIGVsc2UgaGVhZGVycy5zZXQobmFtZSwgdmFsdWUgKyBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICAvLyBJZiBtaW1lVHlwZSBpcyBub24tbnVsbCBhbmQgbm8gQWNjZXB0IGhlYWRlciBpcyBzZXQsIGEgZGVmYXVsdCBpcyB1c2VkLlxuICAgICAgbWltZVR5cGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1pbWVUeXBlO1xuICAgICAgICBtaW1lVHlwZSA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIFNwZWNpZmllcyB3aGF0IHR5cGUgdGhlIHJlc3BvbnNlIHZhbHVlIHNob3VsZCB0YWtlO1xuICAgICAgLy8gZm9yIGluc3RhbmNlLCBhcnJheWJ1ZmZlciwgYmxvYiwgZG9jdW1lbnQsIG9yIHRleHQuXG4gICAgICByZXNwb25zZVR5cGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJlc3BvbnNlVHlwZTtcbiAgICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgICAgfSxcblxuICAgICAgdGltZW91dDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGltZW91dDtcbiAgICAgICAgdGltZW91dCA9ICt2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICB1c2VyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyB1c2VyIDogKHVzZXIgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIiwgcmVxdWVzdCk7XG4gICAgICB9LFxuXG4gICAgICBwYXNzd29yZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAxID8gcGFzc3dvcmQgOiAocGFzc3dvcmQgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIiwgcmVxdWVzdCk7XG4gICAgICB9LFxuXG4gICAgICAvLyBTcGVjaWZ5IGhvdyB0byBjb252ZXJ0IHRoZSByZXNwb25zZSBjb250ZW50IHRvIGEgc3BlY2lmaWMgdHlwZTtcbiAgICAgIC8vIGNoYW5nZXMgdGhlIGNhbGxiYWNrIHZhbHVlIG9uIFwibG9hZFwiIGV2ZW50cy5cbiAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXNwb25zZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEFsaWFzIGZvciBzZW5kKFwiR0VUXCIsIOKApikuXG4gICAgICBnZXQ6IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0LnNlbmQoXCJHRVRcIiwgZGF0YSwgY2FsbGJhY2spO1xuICAgICAgfSxcblxuICAgICAgLy8gQWxpYXMgZm9yIHNlbmQoXCJQT1NUXCIsIOKApikuXG4gICAgICBwb3N0OiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdC5zZW5kKFwiUE9TVFwiLCBkYXRhLCBjYWxsYmFjayk7XG4gICAgICB9LFxuXG4gICAgICAvLyBJZiBjYWxsYmFjayBpcyBub24tbnVsbCwgaXQgd2lsbCBiZSB1c2VkIGZvciBlcnJvciBhbmQgbG9hZCBldmVudHMuXG4gICAgICBzZW5kOiBmdW5jdGlvbihtZXRob2QsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlLCB1c2VyLCBwYXNzd29yZCk7XG4gICAgICAgIGlmIChtaW1lVHlwZSAhPSBudWxsICYmICFoZWFkZXJzLmhhcyhcImFjY2VwdFwiKSkgaGVhZGVycy5zZXQoXCJhY2NlcHRcIiwgbWltZVR5cGUgKyBcIiwqLypcIik7XG4gICAgICAgIGlmICh4aHIuc2V0UmVxdWVzdEhlYWRlcikgaGVhZGVycy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTsgfSk7XG4gICAgICAgIGlmIChtaW1lVHlwZSAhPSBudWxsICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKSB4aHIub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGUgIT0gbnVsbCkgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB4aHIudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsICYmIHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrID0gZGF0YSwgZGF0YSA9IG51bGw7XG4gICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkgY2FsbGJhY2sgPSBmaXhDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSByZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgY2FsbGJhY2spLm9uKFwibG9hZFwiLCBmdW5jdGlvbih4aHIpIHsgY2FsbGJhY2sobnVsbCwgeGhyKTsgfSk7XG4gICAgICAgIGV2ZW50LmNhbGwoXCJiZWZvcmVzZW5kXCIsIHJlcXVlc3QsIHhocik7XG4gICAgICAgIHhoci5zZW5kKGRhdGEgPT0gbnVsbCA/IG51bGwgOiBkYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIG9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZXZlbnQub24uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gZXZlbnQgPyByZXF1ZXN0IDogdmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHJlcXVlc3QuZ2V0KGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpeENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yLCB4aHIpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyB4aHIgOiBudWxsKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzUmVzcG9uc2UoeGhyKSB7XG4gICAgdmFyIHR5cGUgPSB4aHIucmVzcG9uc2VUeXBlO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiXG4gICAgICAgID8geGhyLnJlc3BvbnNlIC8vIG51bGwgb24gZXJyb3JcbiAgICAgICAgOiB4aHIucmVzcG9uc2VUZXh0OyAvLyBcIlwiIG9uIGVycm9yXG4gIH1cblxuICBmdW5jdGlvbiB0eXBlKGRlZmF1bHRNaW1lVHlwZSwgcmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHIgPSByZXF1ZXN0KHVybCkubWltZVR5cGUoZGVmYXVsdE1pbWVUeXBlKS5yZXNwb25zZShyZXNwb25zZSk7XG4gICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gci5nZXQoY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBodG1sID0gdHlwZShcInRleHQvaHRtbFwiLCBmdW5jdGlvbih4aHIpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoeGhyLnJlc3BvbnNlVGV4dCk7XG4gIH0pO1xuXG4gIHZhciBqc29uID0gdHlwZShcImFwcGxpY2F0aW9uL2pzb25cIiwgZnVuY3Rpb24oeGhyKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gIH0pO1xuXG4gIHZhciB0ZXh0ID0gdHlwZShcInRleHQvcGxhaW5cIiwgZnVuY3Rpb24oeGhyKSB7XG4gICAgcmV0dXJuIHhoci5yZXNwb25zZVRleHQ7XG4gIH0pO1xuXG4gIHZhciB4bWwgPSB0eXBlKFwiYXBwbGljYXRpb24veG1sXCIsIGZ1bmN0aW9uKHhocikge1xuICAgIHZhciB4bWwgPSB4aHIucmVzcG9uc2VYTUw7XG4gICAgaWYgKCF4bWwpIHRocm93IG5ldyBFcnJvcihcInBhcnNlIGVycm9yXCIpO1xuICAgIHJldHVybiB4bWw7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRzdiQxKGRlZmF1bHRNaW1lVHlwZSwgcGFyc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCByb3csIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGNhbGxiYWNrID0gcm93LCByb3cgPSBudWxsO1xuICAgICAgdmFyIHIgPSByZXF1ZXN0KHVybCkubWltZVR5cGUoZGVmYXVsdE1pbWVUeXBlKTtcbiAgICAgIHIucm93ID0gZnVuY3Rpb24oXykgeyByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHIucmVzcG9uc2UocmVzcG9uc2VPZihwYXJzZSwgcm93ID0gXykpIDogcm93OyB9O1xuICAgICAgci5yb3cocm93KTtcbiAgICAgIHJldHVybiBjYWxsYmFjayA/IHIuZ2V0KGNhbGxiYWNrKSA6IHI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3BvbnNlT2YocGFyc2UsIHJvdykge1xuICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIHJvdyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjc3YkMSA9IGRzdiQxKFwidGV4dC9jc3ZcIiwgY3N2UGFyc2UpO1xuXG4gIHZhciB0c3YkMSA9IGRzdiQxKFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiLCB0c3ZQYXJzZSk7XG5cbiAgdmFyIGZyYW1lID0gMDtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgaW50ZXJ2YWwgPSAwO1xuICB2YXIgcG9rZURlbGF5ID0gMTAwMDtcbiAgdmFyIHRhc2tIZWFkO1xuICB2YXIgdGFza1RhaWw7XG4gIHZhciBjbG9ja0xhc3QgPSAwO1xuICB2YXIgY2xvY2tOb3cgPSAwO1xuICB2YXIgY2xvY2tTa2V3ID0gMDtcbiAgdmFyIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZTtcbiAgdmFyIHNldEZyYW1lID0gdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyAoY2xvY2sgPT09IERhdGUgPyBmdW5jdGlvbihmKSB7IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHsgZihjbG9jay5ub3coKSk7IH0pOyB9IDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuICAgICAgICAgIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRpbWVyKCkge1xuICAgIHRoaXMuX2NhbGwgPVxuICAgIHRoaXMuX3RpbWUgPVxuICAgIHRoaXMuX25leHQgPSBudWxsO1xuICB9XG5cbiAgVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICAgIHNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIHZhciB0ID0gbmV3IFRpbWVyO1xuICAgIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICAgIHJldHVybiB0O1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICAgIHdoaWxlICh0KSB7XG4gICAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICAgIHQgPSB0Ll9uZXh0O1xuICAgIH1cbiAgICAtLWZyYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gd2FrZSh0aW1lKSB7XG4gICAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gdGltZSB8fCBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gICAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgICB0cnkge1xuICAgICAgdGltZXJGbHVzaCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBmcmFtZSA9IDA7XG4gICAgICBuYXAoKTtcbiAgICAgIGNsb2NrTm93ID0gMDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwb2tlJDEoKSB7XG4gICAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xuICB9XG5cbiAgZnVuY3Rpb24gbmFwKCkge1xuICAgIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgICB3aGlsZSAodDEpIHtcbiAgICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGFza1RhaWwgPSB0MDtcbiAgICBzbGVlcCh0aW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7XG4gICAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIGRlbGF5KTtcbiAgICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpbnRlcnZhbCkgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlJDEsIHBva2VEZWxheSk7XG4gICAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVvdXQkMShjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICAgIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgICB0LnN0b3AoKTtcbiAgICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gICAgfSwgZGVsYXksIHRpbWUpO1xuICAgIHJldHVybiB0O1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwkMShjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICB2YXIgdCA9IG5ldyBUaW1lciwgdG90YWwgPSBkZWxheTtcbiAgICBpZiAoZGVsYXkgPT0gbnVsbCkgcmV0dXJuIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpLCB0O1xuICAgIGRlbGF5ID0gK2RlbGF5LCB0aW1lID0gdGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZTtcbiAgICB0LnJlc3RhcnQoZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgICBlbGFwc2VkICs9IHRvdGFsO1xuICAgICAgdC5yZXN0YXJ0KHRpY2ssIHRvdGFsICs9IGRlbGF5LCB0aW1lKTtcbiAgICAgIGNhbGxiYWNrKGVsYXBzZWQpO1xuICAgIH0sIGRlbGF5LCB0aW1lKTtcbiAgICByZXR1cm4gdDtcbiAgfVxuXG52YXIgICB0MCQxID0gbmV3IERhdGU7XG52YXIgICB0MSQxID0gbmV3IERhdGU7XG4gIGZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICAgIH1cblxuICAgIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gICAgfTtcblxuICAgIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIHZhciByYW5nZSA9IFtdO1xuICAgICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgICAgZG8gcmFuZ2UucHVzaChuZXcgRGF0ZSgrc3RhcnQpKTsgd2hpbGUgKG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpLCBzdGFydCA8IHN0b3ApXG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfTtcblxuICAgIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgICB3aGlsZSAoLS1zdGVwID49IDApIHdoaWxlIChvZmZzZXRpKGRhdGUsIDEpLCAhdGVzdChkYXRlKSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdDAkMS5zZXRUaW1lKCtzdGFydCksIHQxJDEuc2V0VGltZSgrZW5kKTtcbiAgICAgICAgZmxvb3JpKHQwJDEpLCBmbG9vcmkodDEkMSk7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwJDEsIHQxJDEpKTtcbiAgICAgIH07XG5cbiAgICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVydmFsO1xuICB9XG5cbiAgdmFyIG1pbGxpc2Vjb25kID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgLy8gbm9vcFxuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZW5kIC0gc3RhcnQ7XG4gIH0pO1xuXG4gIC8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbiAgbWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gICAgayA9IE1hdGguZmxvb3Ioayk7XG4gICAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIG1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kLnJhbmdlO1xuXG4gIHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbiAgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuICB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbiAgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG4gIHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG5cbiAgdmFyIHNlY29uZCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25TZWNvbmQpICogZHVyYXRpb25TZWNvbmQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gIH0pO1xuXG4gIHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuXG4gIHZhciBtaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uTWludXRlKSAqIGR1cmF0aW9uTWludXRlKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xuICB9KTtcblxuICB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcblxuICB2YXIgaG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgb2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogZHVyYXRpb25NaW51dGUgJSBkdXJhdGlvbkhvdXI7XG4gICAgaWYgKG9mZnNldCA8IDApIG9mZnNldCArPSBkdXJhdGlvbkhvdXI7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoKCtkYXRlIC0gb2Zmc2V0KSAvIGR1cmF0aW9uSG91cikgKiBkdXJhdGlvbkhvdXIgKyBvZmZzZXQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG4gIH0pO1xuXG4gIHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG5cbiAgdmFyIGRheSA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG4gIH0pO1xuXG4gIHZhciBkYXlzID0gZGF5LnJhbmdlO1xuXG4gIGZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gICAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHRpbWVXZWVrID0gd2Vla2RheSgwKTtcbiAgdmFyIHRpbWVNb25kYXkgPSB3ZWVrZGF5KDEpO1xuICB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG4gIHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuICB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuICB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbiAgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuICB2YXIgc3VuZGF5cyA9IHRpbWVXZWVrLnJhbmdlO1xuICB2YXIgbW9uZGF5cyA9IHRpbWVNb25kYXkucmFuZ2U7XG4gIHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG4gIHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuICB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG4gIHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuICB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG5cbiAgdmFyIG1vbnRoID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZSgxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbiAgfSk7XG5cbiAgdmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuXG4gIHZhciB5ZWFyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfSk7XG5cbiAgLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxuICB5ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHllYXJzID0geWVhci5yYW5nZTtcblxuICB2YXIgdXRjTWludXRlID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xuICB9KTtcblxuICB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcblxuICB2YXIgdXRjSG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgfSk7XG5cbiAgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcblxuICB2YXIgdXRjRGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xuICB9KTtcblxuICB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcblxuICBmdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHV0Y1dlZWsgPSB1dGNXZWVrZGF5KDApO1xuICB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbiAgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuICB2YXIgdXRjV2VkbmVzZGF5ID0gdXRjV2Vla2RheSgzKTtcbiAgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbiAgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG4gIHZhciB1dGNTYXR1cmRheSA9IHV0Y1dlZWtkYXkoNik7XG5cbiAgdmFyIHV0Y1N1bmRheXMgPSB1dGNXZWVrLnJhbmdlO1xuICB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbiAgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbiAgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG4gIHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbiAgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG4gIHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcblxuICB2YXIgdXRjTW9udGggPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENNb250aCgpO1xuICB9KTtcblxuICB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG5cbiAgdmFyIHV0Y1llYXIgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB9KTtcblxuICAvLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG4gIHV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuXG4gIC8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbiAgLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4gIC8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuICBmdW5jdGlvbiBmb3JtYXREZWNpbWFsKHgsIHApIHtcbiAgICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gICAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAgIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gICAgcmV0dXJuIFtcbiAgICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgICAreC5zbGljZShpICsgMSlcbiAgICBdO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwb25lbnQkMSh4KSB7XG4gICAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRHcm91cChncm91cGluZywgdGhvdXNhbmRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgdCA9IFtdLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdERlZmF1bHQoeCwgcCkge1xuICAgIHggPSB4LnRvUHJlY2lzaW9uKHApO1xuXG4gICAgb3V0OiBmb3IgKHZhciBuID0geC5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgICAgc3dpdGNoICh4W2ldKSB7XG4gICAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlXCI6IGJyZWFrIG91dDtcbiAgICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaTAgPiAwID8geC5zbGljZSgwLCBpMCkgKyB4LnNsaWNlKGkxICsgMSkgOiB4O1xuICB9XG5cbiAgdmFyIHByZWZpeEV4cG9uZW50O1xuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeEF1dG8oeCwgcCkge1xuICAgIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um91bmRlZCh4LCBwKSB7XG4gICAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICAgIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICAgIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xuICB9XG5cbiAgdmFyIGZvcm1hdFR5cGVzID0ge1xuICAgIFwiXCI6IGZvcm1hdERlZmF1bHQsXG4gICAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICAgIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICAgIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXG4gICAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICAgIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxuICAgIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICAgIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICAgIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICAgIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICAgIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICAgIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxuICB9O1xuXG4gIC8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bdHlwZV1cbiAgdmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLVxcKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyhbYS16JV0pPyQvaTtcblxuICBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG5cbiAgICB2YXIgbWF0Y2gsXG4gICAgICAgIGZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIixcbiAgICAgICAgYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIixcbiAgICAgICAgc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiLFxuICAgICAgICBzeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiLFxuICAgICAgICB6ZXJvID0gISFtYXRjaFs1XSxcbiAgICAgICAgd2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl0sXG4gICAgICAgIGNvbW1hID0gISFtYXRjaFs3XSxcbiAgICAgICAgcHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpLFxuICAgICAgICB0eXBlID0gbWF0Y2hbOV0gfHwgXCJcIjtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIE1hcCBpbnZhbGlkIHR5cGVzIHRvIHRoZSBkZWZhdWx0IGZvcm1hdC5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHR5cGUgPSBcIlwiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICB0aGlzLmZpbGwgPSBmaWxsO1xuICAgIHRoaXMuYWxpZ24gPSBhbGlnbjtcbiAgICB0aGlzLnNpZ24gPSBzaWduO1xuICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICAgIHRoaXMuemVybyA9IHplcm87XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuY29tbWEgPSBjb21tYTtcbiAgICB0aGlzLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICB9XG5cbiAgRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICAgKyB0aGlzLmFsaWduXG4gICAgICAgICsgdGhpcy5zaWduXG4gICAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgICArICh0aGlzLndpZHRoID09IG51bGwgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICAgKyB0aGlzLnR5cGU7XG4gIH07XG5cbiAgdmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiXFx4QjVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuICBmdW5jdGlvbiBpZGVudGl0eSQzKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgJiYgbG9jYWxlLnRob3VzYW5kcyA/IGZvcm1hdEdyb3VwKGxvY2FsZS5ncm91cGluZywgbG9jYWxlLnRob3VzYW5kcykgOiBpZGVudGl0eSQzLFxuICAgICAgICBjdXJyZW5jeSA9IGxvY2FsZS5jdXJyZW5jeSxcbiAgICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsO1xuXG4gICAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVswXSA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IFwiJVwiIDogXCJcIjtcblxuICAgICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgICAgbWF5YmVTdWZmaXggPSAhdHlwZSB8fCAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gKHR5cGUgPyA2IDogMTIpXG4gICAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAgIC8vIENvbnZlcnQgbmVnYXRpdmUgdG8gcG9zaXRpdmUsIGFuZCBjb21wdXRlIHRoZSBwcmVmaXguXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcbiAgICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9ICh2YWx1ZSA8IDAgfHwgMSAvIHZhbHVlIDwgMCkgJiYgKHZhbHVlICo9IC0xLCB0cnVlKTtcblxuICAgICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgICB2YWx1ZSA9IGZvcm1hdFR5cGUodmFsdWUsIHByZWNpc2lvbik7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgb3JpZ2luYWwgdmFsdWUgd2FzIG5lZ2F0aXZlLCBpdCBtYXkgYmUgcm91bmRlZCB0byB6ZXJvIGR1cmluZ1xuICAgICAgICAgIC8vIGZvcm1hdHRpbmc7IHRyZWF0IHRoaXMgYXMgKHBvc2l0aXZlKSB6ZXJvLlxuICAgICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlKSB7XG4gICAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksICg0OCA8IGMgJiYgYyA8IDU4KVxuICAgICAgICAgICAgICAgICAgfHwgKHR5cGUgPT09IFwieFwiICYmIDk2IDwgYyAmJiBjIDwgMTAzKVxuICAgICAgICAgICAgICAgICAgfHwgKHR5cGUgPT09IFwiWFwiICYmIDY0IDwgYyAmJiBjIDwgNzEpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVOZWdhdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgICAgdmFsdWVTdWZmaXggPSB2YWx1ZVN1ZmZpeCArICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICAgIGNhc2UgXCI8XCI6IHJldHVybiB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nO1xuICAgICAgICAgIGNhc2UgXCI9XCI6IHJldHVybiB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgIGNhc2UgXCJeXCI6IHJldHVybiBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4O1xuICAgICAgfVxuXG4gICAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCQxKHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgICB9O1xuICB9XG5cbiAgdmFyIGxvY2FsZTtcbiAgZGVmYXVsdExvY2FsZSh7XG4gICAgZGVjaW1hbDogXCIuXCIsXG4gICAgdGhvdXNhbmRzOiBcIixcIixcbiAgICBncm91cGluZzogWzNdLFxuICAgIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICAgIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgICBleHBvcnRzLmZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gICAgZXhwb3J0cy5mb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICAgIHJldHVybiBsb2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVjaXNpb25GaXhlZChzdGVwKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudCQxKE1hdGguYWJzKHN0ZXApKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQkMSh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50JDEoTWF0aC5hYnMoc3RlcCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWNpc2lvblJvdW5kKHN0ZXAsIG1heCkge1xuICAgIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50JDEobWF4KSAtIGV4cG9uZW50JDEoc3RlcCkpICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gICAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gIH1cblxuICBmdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3WWVhcih5KSB7XG4gICAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdExvY2FsZSQxKGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICAgIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsXG4gICAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICAgIGxvY2FsZV93ZWVrZGF5cyA9IGxvY2FsZS5kYXlzLFxuICAgICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgICBsb2NhbGVfc2hvcnRNb250aHMgPSBsb2NhbGUuc2hvcnRNb250aHM7XG5cbiAgICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICAgIHdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICAgIHNob3J0V2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICAgIHNob3J0TW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydE1vbnRocyksXG4gICAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICAgIHZhciBmb3JtYXRzID0ge1xuICAgICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcbiAgICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgICBcIkJcIjogZm9ybWF0TW9udGgsXG4gICAgICBcImNcIjogbnVsbCxcbiAgICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXG4gICAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyLFxuICAgICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgICBcInhcIjogbnVsbCxcbiAgICAgIFwiWFwiOiBudWxsLFxuICAgICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICAgIH07XG5cbiAgICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgICAgXCJjXCI6IG51bGwsXG4gICAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICAgIFwiSVwiOiBmb3JtYXRVVENIb3VyMTIsXG4gICAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICAgIFwibVwiOiBmb3JtYXRVVENNb250aE51bWJlcixcbiAgICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgICBcIndcIjogZm9ybWF0VVRDV2Vla2RheU51bWJlcixcbiAgICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgICAgXCJ4XCI6IG51bGwsXG4gICAgICBcIlhcIjogbnVsbCxcbiAgICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgICAgXCJaXCI6IGZvcm1hdFVUQ1pvbmUsXG4gICAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuXG4gICAgdmFyIHBhcnNlcyA9IHtcbiAgICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgICBcImJcIjogcGFyc2VTaG9ydE1vbnRoLFxuICAgICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICAgIFwiZFwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyLFxuICAgICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gICAgfTtcblxuICAgIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICAgIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gICAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gICAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICAgIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gICAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBwYWQsXG4gICAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHZhciBkID0gbmV3WWVhcigxOTAwKSxcbiAgICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKTtcbiAgICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgICBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgICB2YXIgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3WWVhcihkLnkpKS5nZXRVVENEYXkoKSA6IG5ld0RhdGUobmV3WWVhcihkLnkpKS5nZXREYXkoKTtcbiAgICAgICAgICBkLm0gPSAwO1xuICAgICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgICAgcmV0dXJuIG5ld0RhdGUoZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYXJzZTtcblxuICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5KGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRNb250aChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRVVENQZXJpb2QoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH0sXG4gICAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9LFxuICAgICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIHV0Y0Zvcm1hdHMpO1xuICAgICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICAgIHJldHVybiBmO1xuICAgICAgfSxcbiAgICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIsIHV0Y0RhdGUpO1xuICAgICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9O1xuICB2YXIgbnVtYmVyUmUgPSAvXlxccypcXGQrLztcbiAgdmFyIHBlcmNlbnRSZSA9IC9eJS87XG4gIHZhciByZXF1b3RlUmUgPSAvW1xcXFxcXF5cXCRcXCpcXCtcXD9cXHxcXFtcXF1cXChcXClcXC5cXHtcXH1dL2c7XG4gIGZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICAgIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gICAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86XFw6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gICAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoMSArIGRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKHRpbWVXZWVrLmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXIoZCkge1xuICAgIHJldHVybiBkLmdldERheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICAgIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpXG4gICAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh1dGNXZWVrLmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXIoZCkge1xuICAgIHJldHVybiBkLmdldFVUQ0RheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDWWVhcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDWm9uZSgpIHtcbiAgICByZXR1cm4gXCIrMDAwMFwiO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TGl0ZXJhbFBlcmNlbnQoKSB7XG4gICAgcmV0dXJuIFwiJVwiO1xuICB9XG5cbiAgdmFyIGxvY2FsZSQxO1xuICBkZWZhdWx0TG9jYWxlJDEoe1xuICAgIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICAgIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICAgIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gICAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICAgIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gZGVmYXVsdExvY2FsZSQxKGRlZmluaXRpb24pIHtcbiAgICBsb2NhbGUkMSA9IGZvcm1hdExvY2FsZSQxKGRlZmluaXRpb24pO1xuICAgIGV4cG9ydHMudGltZUZvcm1hdCA9IGxvY2FsZSQxLmZvcm1hdDtcbiAgICBleHBvcnRzLnRpbWVQYXJzZSA9IGxvY2FsZSQxLnBhcnNlO1xuICAgIGV4cG9ydHMudXRjRm9ybWF0ID0gbG9jYWxlJDEudXRjRm9ybWF0O1xuICAgIGV4cG9ydHMudXRjUGFyc2UgPSBsb2NhbGUkMS51dGNQYXJzZTtcbiAgICByZXR1cm4gbG9jYWxlJDE7XG4gIH1cblxuICB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuICBmdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cblxuICB2YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgICA6IGV4cG9ydHMudXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbiAgZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICAgIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xuICB9XG5cbiAgdmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgICA6IGV4cG9ydHMudXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuICB2YXIgYXJyYXkkMiA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgbWFwJDIgPSBhcnJheSQyLm1hcDtcbiAgdmFyIHNsaWNlJDMgPSBhcnJheSQyLnNsaWNlO1xuXG4gIHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG4gIGZ1bmN0aW9uIG9yZGluYWwocmFuZ2UpIHtcbiAgICB2YXIgaW5kZXggPSBtYXAkMSgpLFxuICAgICAgICBkb21haW4gPSBbXSxcbiAgICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gICAgcmFuZ2UgPSByYW5nZSA9PSBudWxsID8gW10gOiBzbGljZSQzLmNhbGwocmFuZ2UpO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgICBpZiAoIWkpIHtcbiAgICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCQxKCk7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gb3JkaW5hbCgpXG4gICAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAgIC51bmtub3duKHVua25vd24pO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBiYW5kKCkge1xuICAgIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXG4gICAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICAgIHJhbmdlJCQgPSBbMCwgMV0sXG4gICAgICAgIHN0ZXAsXG4gICAgICAgIGJhbmR3aWR0aCxcbiAgICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgICByZXZlcnNlID0gcmFuZ2UkJFsxXSA8IHJhbmdlJCRbMF0sXG4gICAgICAgICAgc3RhcnQgPSByYW5nZSQkW3JldmVyc2UgLSAwXSxcbiAgICAgICAgICBzdG9wID0gcmFuZ2UkJFsxIC0gcmV2ZXJzZV07XG4gICAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgICB2YXIgdmFsdWVzID0gcmFuZ2UobikubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7IH0pO1xuICAgICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UkJCA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2UkJC5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIHJhbmdlJCQgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgICB9O1xuXG4gICAgc2NhbGUuc3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfTtcblxuICAgIHNjYWxlLnJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgICB9O1xuXG4gICAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgICB9O1xuXG4gICAgc2NhbGUucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICAgIH07XG5cbiAgICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gICAgfTtcblxuICAgIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJhbmQoKVxuICAgICAgICAgIC5kb21haW4oZG9tYWluKCkpXG4gICAgICAgICAgLnJhbmdlKHJhbmdlJCQpXG4gICAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAgIC5wYWRkaW5nT3V0ZXIocGFkZGluZ091dGVyKVxuICAgICAgICAgIC5hbGlnbihhbGlnbik7XG4gICAgfTtcblxuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICAgIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICAgIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gICAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBvaW50aXNoKGNvcHkoKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50JDQoKSB7XG4gICAgcmV0dXJuIHBvaW50aXNoKGJhbmQoKS5wYWRkaW5nSW5uZXIoMSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMyh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG51bWJlciQxKHgpIHtcbiAgICByZXR1cm4gK3g7XG4gIH1cblxuICB2YXIgdW5pdCA9IFswLCAxXTtcblxuICBmdW5jdGlvbiBkZWludGVycG9sYXRlKGEsIGIpIHtcbiAgICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgICAgOiBjb25zdGFudCQzKGIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgdmFyIGQgPSBkZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB4IDw9IGEgPyAwIDogeCA+PSBiID8gMSA6IGQoeCk7IH07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHZhciByID0gcmVpbnRlcnBvbGF0ZShhID0gK2EsIGIgPSArYik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XG4gICAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgICBpZiAoZDEgPCBkMCkgZDAgPSBkZWludGVycG9sYXRlKGQxLCBkMCksIHIwID0gcmVpbnRlcnBvbGF0ZShyMSwgcjApO1xuICAgIGVsc2UgZDAgPSBkZWludGVycG9sYXRlKGQwLCBkMSksIHIwID0gcmVpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG4gIH1cblxuICBmdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgICBpID0gLTE7XG5cbiAgICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIH1cblxuICAgIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgICBkW2ldID0gZGVpbnRlcnBvbGF0ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgICAgcltpXSA9IHJlaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHZhciBpID0gYmlzZWN0UmlnaHQoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXRcbiAgICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpO1xuICB9XG5cbiAgLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuICAvLyByZWludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0uXG4gIGZ1bmN0aW9uIGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSQkLCByZWludGVycG9sYXRlKSB7XG4gICAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgICAgaW50ZXJwb2xhdGUkJCA9IGludGVycG9sYXRlLFxuICAgICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgICBwaWVjZXdpc2UsXG4gICAgICAgIG91dHB1dCxcbiAgICAgICAgaW5wdXQ7XG5cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4sIHJhbmdlLCBjbGFtcCA/IGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlJCQpIDogZGVpbnRlcnBvbGF0ZSQkLCBpbnRlcnBvbGF0ZSQkKSkpKCt4KTtcbiAgICB9XG5cbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4gKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLCBkZWludGVycG9sYXRlLCBjbGFtcCA/IHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSA6IHJlaW50ZXJwb2xhdGUpKSkoK3kpO1xuICAgIH07XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAkMi5jYWxsKF8sIG51bWJlciQxKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkMy5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiByYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgaW50ZXJwb2xhdGUkJCA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9ICEhXywgcmVzY2FsZSgpKSA6IGNsYW1wO1xuICAgIH07XG5cbiAgICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlJCQgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGUkJDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZG9tYWluLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgICBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSxcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCksXG4gICAgICAgIHByZWNpc2lvbjtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICAgIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5mb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiXCI6XG4gICAgICBjYXNlIFwiZVwiOlxuICAgICAgY2FzZSBcImdcIjpcbiAgICAgIGNhc2UgXCJwXCI6XG4gICAgICBjYXNlIFwiclwiOiB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZlwiOlxuICAgICAgY2FzZSBcIiVcIjoge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0cy5mb3JtYXQoc3BlY2lmaWVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICAgIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgICAgcmV0dXJuIHRpY2tGb3JtYXQoZG9tYWluKCksIGNvdW50LCBzcGVjaWZpZXIpO1xuICAgIH07XG5cbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgICAgaSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgICBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsXG4gICAgICAgICAgc3RhcnQgPSBkWzBdLFxuICAgICAgICAgIHN0b3AgPSBkW2ldLFxuICAgICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgbik7XG5cbiAgICAgIGlmIChzdGVwKSB7XG4gICAgICAgIHN0ZXAgPSB0aWNrU3RlcChNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwLCBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcCwgbik7XG4gICAgICAgIGRbMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgICBkW2ldID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIGRvbWFpbihkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lYXIkMigpIHtcbiAgICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlTnVtYmVyKTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIkMigpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpZGVudGl0eSQ0KCkge1xuICAgIHZhciBkb21haW4gPSBbMCwgMV07XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gK3g7XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0ID0gc2NhbGU7XG5cbiAgICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcCQyLmNhbGwoXywgbnVtYmVyJDEpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlkZW50aXR5JDQoKS5kb21haW4oZG9tYWluKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBuaWNlKGRvbWFpbiwgaW50ZXJ2YWwpIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcblxuICAgIHZhciBpMCA9IDAsXG4gICAgICAgIGkxID0gZG9tYWluLmxlbmd0aCAtIDEsXG4gICAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgICB0O1xuXG4gICAgaWYgKHgxIDwgeDApIHtcbiAgICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgICAgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG4gICAgfVxuXG4gICAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgICBkb21haW5baTFdID0gaW50ZXJ2YWwuY2VpbCh4MSk7XG4gICAgcmV0dXJuIGRvbWFpbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGUkMShhLCBiKSB7XG4gICAgcmV0dXJuIChiID0gTWF0aC5sb2coYiAvIGEpKVxuICAgICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHggLyBhKSAvIGI7IH1cbiAgICAgICAgOiBjb25zdGFudCQzKGIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCAwXG4gICAgICAgID8gZnVuY3Rpb24odCkgeyByZXR1cm4gLU1hdGgucG93KC1iLCB0KSAqIE1hdGgucG93KC1hLCAxIC0gdCk7IH1cbiAgICAgICAgOiBmdW5jdGlvbih0KSB7IHJldHVybiBNYXRoLnBvdyhiLCB0KSAqIE1hdGgucG93KGEsIDEgLSB0KTsgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvdzEwKHgpIHtcbiAgICByZXR1cm4gaXNGaW5pdGUoeCkgPyArKFwiMWVcIiArIHgpIDogeCA8IDAgPyAwIDogeDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvd3AoYmFzZSkge1xuICAgIHJldHVybiBiYXNlID09PSAxMCA/IHBvdzEwXG4gICAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcbiAgICAgICAgOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnBvdyhiYXNlLCB4KTsgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ3AoYmFzZSkge1xuICAgIHJldHVybiBiYXNlID09PSBNYXRoLkUgPyBNYXRoLmxvZ1xuICAgICAgICA6IGJhc2UgPT09IDEwICYmIE1hdGgubG9nMTBcbiAgICAgICAgfHwgYmFzZSA9PT0gMiAmJiBNYXRoLmxvZzJcbiAgICAgICAgfHwgKGJhc2UgPSBNYXRoLmxvZyhiYXNlKSwgZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5sb2coeCkgLyBiYXNlOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gLWYoLXgpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsb2coKSB7XG4gICAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlJDEsIHJlaW50ZXJwb2xhdGUpLmRvbWFpbihbMSwgMTBdKSxcbiAgICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgICBiYXNlID0gMTAsXG4gICAgICAgIGxvZ3MgPSBsb2dwKDEwKSxcbiAgICAgICAgcG93cyA9IHBvd3AoMTApO1xuXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIGxvZ3MgPSBsb2dwKGJhc2UpLCBwb3dzID0gcG93cChiYXNlKTtcbiAgICAgIGlmIChkb21haW4oKVswXSA8IDApIGxvZ3MgPSByZWZsZWN0KGxvZ3MpLCBwb3dzID0gcmVmbGVjdChwb3dzKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYmFzZSA9ICtfLCByZXNjYWxlKCkpIDogYmFzZTtcbiAgICB9O1xuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgICAgdSA9IGRbMF0sXG4gICAgICAgICAgdiA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgICByO1xuXG4gICAgICBpZiAociA9IHYgPCB1KSBpID0gdSwgdSA9IHYsIHYgPSBpO1xuXG4gICAgICB2YXIgaSA9IGxvZ3ModSksXG4gICAgICAgICAgaiA9IGxvZ3ModiksXG4gICAgICAgICAgcCxcbiAgICAgICAgICBrLFxuICAgICAgICAgIHQsXG4gICAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6ICtjb3VudCxcbiAgICAgICAgICB6ID0gW107XG5cbiAgICAgIGlmICghKGJhc2UgJSAxKSAmJiBqIC0gaSA8IG4pIHtcbiAgICAgICAgaSA9IE1hdGgucm91bmQoaSkgLSAxLCBqID0gTWF0aC5yb3VuZChqKSArIDE7XG4gICAgICAgIGlmICh1ID4gMCkgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgICBmb3IgKGsgPSAxLCBwID0gcG93cyhpKTsgayA8IGJhc2U7ICsraykge1xuICAgICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XG4gICAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgICBmb3IgKGsgPSBiYXNlIC0gMSwgcCA9IHBvd3MoaSk7IGsgPj0gMTsgLS1rKSB7XG4gICAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHogPSB0aWNrcyhpLCBqLCBNYXRoLm1pbihqIC0gaSwgbikpLm1hcChwb3dzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgICAgaWYgKHR5cGVvZiBzcGVjaWZpZXIgIT09IFwiZnVuY3Rpb25cIikgc3BlY2lmaWVyID0gZXhwb3J0cy5mb3JtYXQoc3BlY2lmaWVyKTtcbiAgICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcbiAgICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIGNvdW50IC8gc2NhbGUudGlja3MoKS5sZW5ndGgpOyAvLyBUT0RPIGZhc3QgZXN0aW1hdGU/XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgaSA9IGQgLyBwb3dzKE1hdGgucm91bmQobG9ncyhkKSkpO1xuICAgICAgICBpZiAoaSAqIGJhc2UgPCBiYXNlIC0gMC41KSBpICo9IGJhc2U7XG4gICAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRvbWFpbihuaWNlKGRvbWFpbigpLCB7XG4gICAgICAgIGZsb29yOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguZmxvb3IobG9ncyh4KSkpOyB9LFxuICAgICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxvZygpLmJhc2UoYmFzZSkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiByYWlzZSh4LCBleHBvbmVudCkge1xuICAgIHJldHVybiB4IDwgMCA/IC1NYXRoLnBvdygteCwgZXhwb25lbnQpIDogTWF0aC5wb3coeCwgZXhwb25lbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG93KCkge1xuICAgIHZhciBleHBvbmVudCA9IDEsXG4gICAgICAgIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSxcbiAgICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gICAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgICByZXR1cm4gKGIgPSByYWlzZShiLCBleHBvbmVudCkgLSAoYSA9IHJhaXNlKGEsIGV4cG9uZW50KSkpXG4gICAgICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAocmFpc2UoeCwgZXhwb25lbnQpIC0gYSkgLyBiOyB9XG4gICAgICAgICAgOiBjb25zdGFudCQzKGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGUoYSwgYikge1xuICAgICAgYiA9IHJhaXNlKGIsIGV4cG9uZW50KSAtIChhID0gcmFpc2UoYSwgZXhwb25lbnQpKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7IHJldHVybiByYWlzZShhICsgYiAqIHQsIDEgLyBleHBvbmVudCk7IH07XG4gICAgfVxuXG4gICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHBvbmVudCA9ICtfLCBkb21haW4oZG9tYWluKCkpKSA6IGV4cG9uZW50O1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29weShzY2FsZSwgcG93KCkuZXhwb25lbnQoZXhwb25lbnQpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzcXJ0KCkge1xuICAgIHJldHVybiBwb3coKS5leHBvbmVudCgwLjUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhbnRpbGUoKSB7XG4gICAgdmFyIGRvbWFpbiA9IFtdLFxuICAgICAgICByYW5nZSA9IFtdLFxuICAgICAgICB0aHJlc2hvbGRzID0gW107XG5cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgdmFyIGkgPSAwLCBuID0gTWF0aC5tYXgoMSwgcmFuZ2UubGVuZ3RoKTtcbiAgICAgIHRocmVzaG9sZHMgPSBuZXcgQXJyYXkobiAtIDEpO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHRocmVzaG9sZHNbaSAtIDFdID0gdGhyZXNob2xkKGRvbWFpbiwgaSAvIG4pO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIGlmICghaXNOYU4oeCA9ICt4KSkgcmV0dXJuIHJhbmdlW2Jpc2VjdFJpZ2h0KHRocmVzaG9sZHMsIHgpXTtcbiAgICB9XG5cbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dIDogW1xuICAgICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxuICAgICAgICBpIDwgdGhyZXNob2xkcy5sZW5ndGggPyB0aHJlc2hvbGRzW2ldIDogZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXVxuICAgICAgXTtcbiAgICB9O1xuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgICBkb21haW4gPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gXy5sZW5ndGgsIGQ7IGkgPCBuOyArK2kpIGlmIChkID0gX1tpXSwgZCAhPSBudWxsICYmICFpc05hTihkID0gK2QpKSBkb21haW4ucHVzaChkKTtcbiAgICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkMy5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucXVhbnRpbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcXVhbnRpbGUoKVxuICAgICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAgIC5yYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YW50aXplJDEoKSB7XG4gICAgdmFyIHgwID0gMCxcbiAgICAgICAgeDEgPSAxLFxuICAgICAgICBuID0gMSxcbiAgICAgICAgZG9tYWluID0gWzAuNV0sXG4gICAgICAgIHJhbmdlID0gWzAsIDFdO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgaWYgKHggPD0geCkgcmV0dXJuIHJhbmdlW2Jpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMCwgbildO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgZG9tYWluID0gbmV3IEFycmF5KG4pO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGRvbWFpbltpXSA9ICgoaSArIDEpICogeDEgLSAoaSAtIG4pICogeDApIC8gKG4gKyAxKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdLCB4MSA9ICtfWzFdLCByZXNjYWxlKCkpIDogW3gwLCB4MV07XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobiA9IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSkubGVuZ3RoIC0gMSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl1cbiAgICAgICAgICA6IGkgPCAxID8gW3gwLCBkb21haW5bMF1dXG4gICAgICAgICAgOiBpID49IG4gPyBbZG9tYWluW24gLSAxXSwgeDFdXG4gICAgICAgICAgOiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHF1YW50aXplJDEoKVxuICAgICAgICAgIC5kb21haW4oW3gwLCB4MV0pXG4gICAgICAgICAgLnJhbmdlKHJhbmdlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aHJlc2hvbGQkMSgpIHtcbiAgICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgICBuID0gMTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIGlmICh4IDw9IHgpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodChkb21haW4sIHgsIDAsIG4pXTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBzbGljZSQzLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogZG9tYWluLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZSQzLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgcmV0dXJuIFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhyZXNob2xkJDEoKVxuICAgICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAgIC5yYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG52YXIgICBkdXJhdGlvblNlY29uZCQxID0gMTAwMDtcbnZhciAgIGR1cmF0aW9uTWludXRlJDEgPSBkdXJhdGlvblNlY29uZCQxICogNjA7XG52YXIgICBkdXJhdGlvbkhvdXIkMSA9IGR1cmF0aW9uTWludXRlJDEgKiA2MDtcbnZhciAgIGR1cmF0aW9uRGF5JDEgPSBkdXJhdGlvbkhvdXIkMSAqIDI0O1xudmFyICAgZHVyYXRpb25XZWVrJDEgPSBkdXJhdGlvbkRheSQxICogNztcbiAgdmFyIGR1cmF0aW9uTW9udGggPSBkdXJhdGlvbkRheSQxICogMzA7XG4gIHZhciBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSQxICogMzY1O1xuICBmdW5jdGlvbiBkYXRlJDEodCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG51bWJlciQyKHQpIHtcbiAgICByZXR1cm4gdCBpbnN0YW5jZW9mIERhdGUgPyArdCA6ICtuZXcgRGF0ZSgrdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkge1xuICAgIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGVOdW1iZXIpLFxuICAgICAgICBpbnZlcnQgPSBzY2FsZS5pbnZlcnQsXG4gICAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICAgIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgICAgZm9ybWF0U2Vjb25kID0gZm9ybWF0KFwiOiVTXCIpLFxuICAgICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcbiAgICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgICBmb3JtYXREYXkgPSBmb3JtYXQoXCIlYSAlZFwiKSxcbiAgICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxuICAgICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgICBmb3JtYXRZZWFyID0gZm9ybWF0KFwiJVlcIik7XG5cbiAgICB2YXIgdGlja0ludGVydmFscyA9IFtcbiAgICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kJDFdLFxuICAgICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmQkMV0sXG4gICAgICBbc2Vjb25kLCAxNSwgMTUgKiBkdXJhdGlvblNlY29uZCQxXSxcbiAgICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kJDFdLFxuICAgICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGUkMV0sXG4gICAgICBbbWludXRlLCAgNSwgIDUgKiBkdXJhdGlvbk1pbnV0ZSQxXSxcbiAgICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlJDFdLFxuICAgICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGUkMV0sXG4gICAgICBbICBob3VyLCAgMSwgICAgICBkdXJhdGlvbkhvdXIkMSAgXSxcbiAgICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciQxICBdLFxuICAgICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyJDEgIF0sXG4gICAgICBbICBob3VyLCAxMiwgMTIgKiBkdXJhdGlvbkhvdXIkMSAgXSxcbiAgICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5JDEgICBdLFxuICAgICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkkMSAgIF0sXG4gICAgICBbICB3ZWVrLCAgMSwgICAgICBkdXJhdGlvbldlZWskMSAgXSxcbiAgICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICAgIFsgbW9udGgsICAzLCAgMyAqIGR1cmF0aW9uTW9udGggXSxcbiAgICAgIFsgIHllYXIsICAxLCAgICAgIGR1cmF0aW9uWWVhciAgXVxuICAgIF07XG5cbiAgICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRhdGUpIHtcbiAgICAgIHJldHVybiAoc2Vjb25kKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbGxpc2Vjb25kXG4gICAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgICAgOiBob3VyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1pbnV0ZVxuICAgICAgICAgIDogZGF5KGRhdGUpIDwgZGF0ZSA/IGZvcm1hdEhvdXJcbiAgICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgICAgOiB5ZWFyKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdE1vbnRoXG4gICAgICAgICAgOiBmb3JtYXRZZWFyKShkYXRlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwgPT0gbnVsbCkgaW50ZXJ2YWwgPSAxMDtcblxuICAgICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgICAvLyBiYXNlZCBvbiB0aGUgZXh0ZW50IG9mIHRoZSBkb21haW4gYW5kIGEgcm91Z2ggZXN0aW1hdGUgb2YgdGljayBzaXplLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaW50ZXJ2YWwgaXMgYWxyZWFkeSBhIHRpbWUgaW50ZXJ2YWwgYW5kIHVzZSBpdC5cbiAgICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBpbnRlcnZhbCxcbiAgICAgICAgICAgIGkgPSBiaXNlY3RvcihmdW5jdGlvbihpKSB7IHJldHVybiBpWzJdOyB9KS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGludGVydmFsKTtcbiAgICAgICAgICBpbnRlcnZhbCA9IHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICAgIGkgPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgICAgaW50ZXJ2YWwgPSBpWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgaW50ZXJ2YWwpO1xuICAgICAgICAgIGludGVydmFsID0gbWlsbGlzZWNvbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0ZXAgPT0gbnVsbCA/IGludGVydmFsIDogaW50ZXJ2YWwuZXZlcnkoc3RlcCk7XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGludmVydCh5KSk7XG4gICAgfTtcblxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZG9tYWluKG1hcCQyLmNhbGwoXywgbnVtYmVyJDIpKSA6IGRvbWFpbigpLm1hcChkYXRlJDEpO1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgICByID0gdDEgPCB0MCxcbiAgICAgICAgICB0O1xuICAgICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgICAgdCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgdDAsIHQxLCBzdGVwKTtcbiAgICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gICAgfTtcblxuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xuICAgICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICAgIHJldHVybiAoaW50ZXJ2YWwgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgc3RlcCkpXG4gICAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpXG4gICAgICAgICAgOiBzY2FsZTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNvcHkoc2NhbGUsIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWUoKSB7XG4gICAgcmV0dXJuIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB0aW1lV2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGV4cG9ydHMudGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHV0Y1RpbWUoKSB7XG4gICAgcmV0dXJuIGNhbGVuZGFyKHV0Y1llYXIsIHV0Y01vbnRoLCB1dGNXZWVrLCB1dGNEYXksIHV0Y0hvdXIsIHV0Y01pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZXhwb3J0cy51dGNGb3JtYXQpLmRvbWFpbihbRGF0ZS5VVEMoMjAwMCwgMCwgMSksIERhdGUuVVRDKDIwMDAsIDAsIDIpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvcnMocykge1xuICAgIHJldHVybiBzLm1hdGNoKC8uezZ9L2cpLm1hcChmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gXCIjXCIgKyB4O1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGNhdGVnb3J5MTAgPSBjb2xvcnMoXCIxZjc3YjRmZjdmMGUyY2EwMmNkNjI3Mjg5NDY3YmQ4YzU2NGJlMzc3YzI3ZjdmN2ZiY2JkMjIxN2JlY2ZcIik7XG5cbiAgdmFyIGNhdGVnb3J5MjBiID0gY29sb3JzKFwiMzkzYjc5NTI1NGEzNmI2ZWNmOWM5ZWRlNjM3OTM5OGNhMjUyYjVjZjZiY2VkYjljOGM2ZDMxYmQ5ZTM5ZTdiYTUyZTdjYjk0ODQzYzM5YWQ0OTRhZDY2MTZiZTc5NjljN2I0MTczYTU1MTk0Y2U2ZGJkZGU5ZWQ2XCIpO1xuXG4gIHZhciBjYXRlZ29yeTIwYyA9IGNvbG9ycyhcIjMxODJiZDZiYWVkNjllY2FlMWM2ZGJlZmU2NTUwZGZkOGQzY2ZkYWU2YmZkZDBhMjMxYTM1NDc0YzQ3NmExZDk5YmM3ZTljMDc1NmJiMTllOWFjOGJjYmRkY2RhZGFlYjYzNjM2Mzk2OTY5NmJkYmRiZGQ5ZDlkOVwiKTtcblxuICB2YXIgY2F0ZWdvcnkyMCA9IGNvbG9ycyhcIjFmNzdiNGFlYzdlOGZmN2YwZWZmYmI3ODJjYTAyYzk4ZGY4YWQ2MjcyOGZmOTg5Njk0NjdiZGM1YjBkNThjNTY0YmM0OWM5NGUzNzdjMmY3YjZkMjdmN2Y3ZmM3YzdjN2JjYmQyMmRiZGI4ZDE3YmVjZjllZGFlNVwiKTtcblxuICB2YXIgY3ViZWhlbGl4JDMgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDMwMCwgMC41LCAwLjApLCBjdWJlaGVsaXgoLTI0MCwgMC41LCAxLjApKTtcblxuICB2YXIgd2FybSA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbiAgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbiAgdmFyIHJhaW5ib3cgPSBjdWJlaGVsaXgoKTtcblxuICBmdW5jdGlvbiByYWluYm93JDEodCkge1xuICAgIGlmICh0IDwgMCB8fCB0ID4gMSkgdCAtPSBNYXRoLmZsb29yKHQpO1xuICAgIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICAgIHJhaW5ib3cuaCA9IDM2MCAqIHQgLSAxMDA7XG4gICAgcmFpbmJvdy5zID0gMS41IC0gMS41ICogdHM7XG4gICAgcmFpbmJvdy5sID0gMC44IC0gMC45ICogdHM7XG4gICAgcmV0dXJuIHJhaW5ib3cgKyBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFtcChyYW5nZSkge1xuICAgIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICAgIH07XG4gIH1cblxuICB2YXIgdmlyaWRpcyA9IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxuICB2YXIgbWFnbWEgPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwOTAyMDIwYjAyMDIwZDAzMDMwZjAzMDMxMjA0MDQxNDA1MDQxNjA2MDUxODA2MDUxYTA3MDYxYzA4MDcxZTA5MDcyMDBhMDgyMjBiMDkyNDBjMDkyNjBkMGEyOTBlMGIyYjEwMGIyZDExMGMyZjEyMGQzMTEzMGQzNDE0MGUzNjE1MGUzODE2MGYzYjE4MGYzZDE5MTAzZjFhMTA0MjFjMTA0NDFkMTE0NzFlMTE0OTIwMTE0YjIxMTE0ZTIyMTE1MDI0MTI1MzI1MTI1NTI3MTI1ODI5MTE1YTJhMTE1YzJjMTE1ZjJkMTE2MTJmMTE2MzMxMTE2NTMzMTA2NzM0MTA2OTM2MTA2YjM4MTA2YzM5MGY2ZTNiMGY3MDNkMGY3MTNmMGY3MjQwMGY3NDQyMGY3NTQ0MGY3NjQ1MTA3NzQ3MTA3ODQ5MTA3ODRhMTA3OTRjMTE3YTRlMTE3YjRmMTI3YjUxMTI3YzUyMTM3YzU0MTM3ZDU2MTQ3ZDU3MTU3ZTU5MTU3ZTVhMTY3ZTVjMTY3ZjVkMTc3ZjVmMTg3ZjYwMTg4MDYyMTk4MDY0MWE4MDY1MWE4MDY3MWI4MDY4MWM4MTZhMWM4MTZiMWQ4MTZkMWQ4MTZlMWU4MTcwMWY4MTcyMWY4MTczMjA4MTc1MjE4MTc2MjE4MTc4MjI4MTc5MjI4MjdiMjM4MjdjMjM4MjdlMjQ4MjgwMjU4MjgxMjU4MTgzMjY4MTg0MjY4MTg2Mjc4MTg4Mjc4MTg5Mjg4MThiMjk4MThjMjk4MThlMmE4MTkwMmE4MTkxMmI4MTkzMmI4MDk0MmM4MDk2MmM4MDk4MmQ4MDk5MmQ4MDliMmU3ZjljMmU3ZjllMmY3ZmEwMmY3ZmExMzA3ZWEzMzA3ZWE1MzE3ZWE2MzE3ZGE4MzI3ZGFhMzM3ZGFiMzM3Y2FkMzQ3Y2FlMzQ3YmIwMzU3YmIyMzU3YmIzMzY3YWI1MzY3YWI3Mzc3OWI4Mzc3OWJhMzg3OGJjMzk3OGJkMzk3N2JmM2E3N2MwM2E3NmMyM2I3NWM0M2M3NWM1M2M3NGM3M2Q3M2M4M2U3M2NhM2U3MmNjM2Y3MWNkNDA3MWNmNDA3MGQwNDE2ZmQyNDI2ZmQzNDM2ZWQ1NDQ2ZGQ2NDU2Y2Q4NDU2Y2Q5NDY2YmRiNDc2YWRjNDg2OWRlNDk2OGRmNGE2OGUwNGM2N2UyNGQ2NmUzNGU2NWU0NGY2NGU1NTA2NGU3NTI2M2U4NTM2MmU5NTQ2MmVhNTY2MWViNTc2MGVjNTg2MGVkNWE1ZmVlNWI1ZWVmNWQ1ZWYwNWY1ZWYxNjA1ZGYyNjI1ZGYyNjQ1Y2YzNjU1Y2Y0Njc1Y2Y0Njk1Y2Y1NmI1Y2Y2NmM1Y2Y2NmU1Y2Y3NzA1Y2Y3NzI1Y2Y4NzQ1Y2Y4NzY1Y2Y5Nzg1ZGY5Nzk1ZGY5N2I1ZGZhN2Q1ZWZhN2Y1ZWZhODE1ZmZiODM1ZmZiODU2MGZiODc2MWZjODk2MWZjOGE2MmZjOGM2M2ZjOGU2NGZjOTA2NWZkOTI2NmZkOTQ2N2ZkOTY2OGZkOTg2OWZkOWE2YWZkOWI2YmZlOWQ2Y2ZlOWY2ZGZlYTE2ZWZlYTM2ZmZlYTU3MWZlYTc3MmZlYTk3M2ZlYWE3NGZlYWM3NmZlYWU3N2ZlYjA3OGZlYjI3YWZlYjQ3YmZlYjY3Y2ZlYjc3ZWZlYjk3ZmZlYmI4MWZlYmQ4MmZlYmY4NGZlYzE4NWZlYzI4N2ZlYzQ4OGZlYzY4YWZlYzg4Y2ZlY2E4ZGZlY2M4ZmZlY2Q5MGZlY2Y5MmZlZDE5NGZlZDM5NWZlZDU5N2ZlZDc5OWZlZDg5YWZkZGE5Y2ZkZGM5ZWZkZGVhMGZkZTBhMWZkZTJhM2ZkZTNhNWZkZTVhN2ZkZTdhOWZkZTlhYWZkZWJhY2ZjZWNhZWZjZWViMGZjZjBiMmZjZjJiNGZjZjRiNmZjZjZiOGZjZjdiOWZjZjliYmZjZmJiZGZjZmRiZlwiKSk7XG5cbiAgdmFyIGluZmVybm8gPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwYTAyMDIwYzAyMDIwZTAzMDIxMDA0MDMxMjA0MDMxNDA1MDQxNzA2MDQxOTA3MDUxYjA4MDUxZDA5MDYxZjBhMDcyMjBiMDcyNDBjMDgyNjBkMDgyOTBlMDkyYjEwMDkyZDExMGEzMDEyMGEzMjE0MGIzNDE1MGIzNzE2MGIzOTE4MGMzYzE5MGMzZTFiMGM0MTFjMGM0MzFlMGM0NTFmMGM0ODIxMGM0YTIzMGM0YzI0MGM0ZjI2MGM1MTI4MGI1MzI5MGI1NTJiMGI1NzJkMGI1OTJmMGE1YjMxMGE1YzMyMGE1ZTM0MGE1ZjM2MDk2MTM4MDk2MjM5MDk2MzNiMDk2NDNkMDk2NTNlMDk2NjQwMGE2NzQyMGE2ODQ0MGE2ODQ1MGE2OTQ3MGI2YTQ5MGI2YTRhMGM2YjRjMGM2YjRkMGQ2YzRmMGQ2YzUxMGU2YzUyMGU2ZDU0MGY2ZDU1MGY2ZDU3MTA2ZTU5MTA2ZTVhMTE2ZTVjMTI2ZTVkMTI2ZTVmMTM2ZTYxMTM2ZTYyMTQ2ZTY0MTU2ZTY1MTU2ZTY3MTY2ZTY5MTY2ZTZhMTc2ZTZjMTg2ZTZkMTg2ZTZmMTk2ZTcxMTk2ZTcyMWE2ZTc0MWE2ZTc1MWI2ZTc3MWM2ZDc4MWM2ZDdhMWQ2ZDdjMWQ2ZDdkMWU2ZDdmMWU2YzgwMWY2YzgyMjA2Yzg0MjA2Yjg1MjE2Yjg3MjE2Yjg4MjI2YThhMjI2YThjMjM2OThkMjM2OThmMjQ2OTkwMjU2ODkyMjU2ODkzMjY2Nzk1MjY2Nzk3Mjc2Njk4Mjc2NjlhMjg2NTliMjk2NDlkMjk2NDlmMmE2M2EwMmE2M2EyMmI2MmEzMmM2MWE1MmM2MGE2MmQ2MGE4MmU1ZmE5MmU1ZWFiMmY1ZWFkMzA1ZGFlMzA1Y2IwMzE1YmIxMzI1YWIzMzI1YWI0MzM1OWI2MzQ1OGI3MzU1N2I5MzU1NmJhMzY1NWJjMzc1NGJkMzg1M2JmMzk1MmMwM2E1MWMxM2E1MGMzM2I0ZmM0M2M0ZWM2M2Q0ZGM3M2U0Y2M4M2Y0YmNhNDA0YWNiNDE0OWNjNDI0OGNlNDM0N2NmNDQ0NmQwNDU0NWQyNDY0NGQzNDc0M2Q0NDg0MmQ1NGE0MWQ3NGIzZmQ4NGMzZWQ5NGQzZGRhNGUzY2RiNTAzYmRkNTEzYWRlNTIzOGRmNTMzN2UwNTUzNmUxNTYzNWUyNTczNGUzNTkzM2U0NWEzMWU1NWMzMGU2NWQyZmU3NWUyZWU4NjAyZGU5NjEyYmVhNjMyYWViNjQyOWViNjYyOGVjNjcyNmVkNjkyNWVlNmEyNGVmNmMyM2VmNmUyMWYwNmYyMGYxNzExZmYxNzMxZGYyNzQxY2YzNzYxYmYzNzgxOWY0NzkxOGY1N2IxN2Y1N2QxNWY2N2UxNGY2ODAxM2Y3ODIxMmY3ODQxMGY4ODUwZmY4ODcwZWY4ODkwY2Y5OGIwYmY5OGMwYWY5OGUwOWZhOTAwOGZhOTIwN2ZhOTQwN2ZiOTYwNmZiOTcwNmZiOTkwNmZiOWIwNmZiOWQwN2ZjOWYwN2ZjYTEwOGZjYTMwOWZjYTUwYWZjYTYwY2ZjYTgwZGZjYWEwZmZjYWMxMWZjYWUxMmZjYjAxNGZjYjIxNmZjYjQxOGZiYjYxYWZiYjgxZGZiYmExZmZiYmMyMWZiYmUyM2ZhYzAyNmZhYzIyOGZhYzQyYWZhYzYyZGY5YzcyZmY5YzkzMmY5Y2IzNWY4Y2QzN2Y4Y2YzYWY3ZDEzZGY3ZDM0MGY2ZDU0M2Y2ZDc0NmY1ZDk0OWY1ZGI0Y2Y0ZGQ0ZmY0ZGY1M2Y0ZTE1NmYzZTM1YWYzZTU1ZGYyZTY2MWYyZTg2NWYyZWE2OWYxZWM2ZGYxZWQ3MWYxZWY3NWYxZjE3OWYyZjI3ZGYyZjQ4MmYzZjU4NmYzZjY4YWY0Zjg4ZWY1Zjk5MmY2ZmE5NmY4ZmI5YWY5ZmM5ZGZhZmRhMWZjZmZhNFwiKSk7XG5cbiAgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcblxuICBmdW5jdGlvbiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikge1xuICAgIHZhciB4MCA9IDAsXG4gICAgICAgIHgxID0gMSxcbiAgICAgICAgY2xhbXAgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHZhciB0ID0gKHggLSB4MCkgLyAoeDEgLSB4MCk7XG4gICAgICByZXR1cm4gaW50ZXJwb2xhdG9yKGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpIDogdCk7XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgc2NhbGUpIDogW3gwLCB4MV07XG4gICAgfTtcblxuICAgIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICAgIH07XG5cbiAgICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikuZG9tYWluKFt4MCwgeDFdKS5jbGFtcChjbGFtcCk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbiAgdmFyIG5hbWVzcGFjZXMgPSB7XG4gICAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgeGh0bWw6IHhodG1sLFxuICAgIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxuICB9O1xuXG4gIGZ1bmN0aW9uIG5hbWVzcGFjZShuYW1lKSB7XG4gICAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRvcihuYW1lKSB7XG4gICAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICAgIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xuICB9XG5cbiAgdmFyIG5leHRJZCA9IDA7XG5cbiAgZnVuY3Rpb24gbG9jYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIExvY2FsKCkge1xuICAgIHRoaXMuXyA9IFwiQFwiICsgKCsrbmV4dElkKS50b1N0cmluZygzNik7XG4gIH1cblxuICBMb2NhbC5wcm90b3R5cGUgPSBsb2NhbC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IExvY2FsLFxuICAgIGdldDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGlkID0gdGhpcy5fO1xuICAgICAgd2hpbGUgKCEoaWQgaW4gbm9kZSkpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gICAgICByZXR1cm4gbm9kZVtpZF07XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZVt0aGlzLl9dID0gdmFsdWU7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl8gaW4gbm9kZSAmJiBkZWxldGUgbm9kZVt0aGlzLl9dO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXztcbiAgICB9XG4gIH07XG5cbiAgdmFyIG1hdGNoZXIgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIH07XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGlmICghZWxlbWVudC5tYXRjaGVzKSB7XG4gICAgICB2YXIgdmVuZG9yTWF0Y2hlcyA9IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvclxuICAgICAgICAgIHx8IGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgICAgfHwgZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgICAgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdmVuZG9yTWF0Y2hlcy5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIG1hdGNoZXIkMSA9IG1hdGNoZXI7XG5cbiAgdmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG4gIGV4cG9ydHMuZXZlbnQgPSBudWxsO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZWxlbWVudCQxID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCQxKSkge1xuICAgICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgICAgdmFyIGV2ZW50MCA9IGV4cG9ydHMuZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQxO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXMkMSh0eXBlbmFtZXMpIHtcbiAgICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgICAgaWYgKCFvbikgcmV0dXJuO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgICBlbHNlIG9uLnB1c2gobyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9vbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXMkMSh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICAgIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICAgIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50O1xuICAgIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV4cG9ydHMuZXZlbnQ7XG4gICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNvdXJjZUV2ZW50KCkge1xuICAgIHZhciBjdXJyZW50ID0gZXhwb3J0cy5ldmVudCwgc291cmNlO1xuICAgIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnQkNShub2RlLCBldmVudCkge1xuICAgIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlKG5vZGUpIHtcbiAgICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICByZXR1cm4gcG9pbnQkNShub2RlLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBub25lJDIoKSB7fVxuXG4gIGZ1bmN0aW9uIHNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lJDIgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0KHNlbGVjdCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0QWxsKHNlbGVjdCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZmlsdGVyKG1hdGNoKSB7XG4gICAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIkMShtYXRjaCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGFyc2UodXBkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9lbnRlcigpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gICAgdGhpcy5fbmV4dCA9IG51bGw7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbiAgfVxuXG4gIEVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICAgIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gICAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDQoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICB2YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG4gIGZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBub2RlLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gICAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gICAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICAgIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICAgIHZhciBpLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAgICBrZXlWYWx1ZTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAgIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgICAgaWYgKGtleVZhbHVlIGluIG5vZGVCeUtleVZhbHVlKSB7XG4gICAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAgIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSkge1xuICAgICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICAgIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9kYXRhKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGQpIHsgZGF0YVsrK2pdID0gZDsgfSk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQkNCh2YWx1ZSk7XG5cbiAgICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdLFxuICAgICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICAgIGRhdGEgPSB2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cyksXG4gICAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gICAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICAgIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gICAgcmV0dXJuIHVwZGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9leGl0KCkge1xuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9tZXJnZShzZWxlY3Rpb24pIHtcblxuICAgIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX29yZGVyKCkge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3NvcnQoY29tcGFyZSkge1xuICAgIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZyQyO1xuXG4gICAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICAgIH1cblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNjZW5kaW5nJDIoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9jYWxsKCkge1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fbm9kZXMoKSB7XG4gICAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICAgIHJldHVybiBub2RlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9ub2RlKCkge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc2l6ZSgpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICAgIHJldHVybiBzaXplO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2VtcHR5KCkge1xuICAgIHJldHVybiAhdGhpcy5ub2RlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZWFjaChjYWxsYmFjaykge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2F0dHIobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxuICAgICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TIDogYXR0ckNvbnN0YW50KSkpKGZ1bGxuYW1lLCB2YWx1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2luZG93KG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbm9kZTtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgICAgOiB3aW5kb3cobm9kZSA9IHRoaXMubm9kZSgpKVxuICAgICAgICAgICAgLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbClcbiAgICAgICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fcHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gICAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gICAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG4gIH1cblxuICBDbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICAgIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3RleHQodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25faHRtbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFpc2UkMSgpIHtcbiAgICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3JhaXNlKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2gocmFpc2UkMSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb3dlcigpIHtcbiAgICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2xvd2VyKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2FwcGVuZChuYW1lKSB7XG4gICAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25faW5zZXJ0KG5hbWUsIGJlZm9yZSkge1xuICAgIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3JlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZGF0dW0odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gICAgdmFyIHdpbmRvdyQkID0gd2luZG93KG5vZGUpLFxuICAgICAgICBldmVudCA9IHdpbmRvdyQkLkN1c3RvbUV2ZW50O1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudCA9IHdpbmRvdyQkLmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9kaXNwYXRjaCh0eXBlLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG4gIH1cblxuICB2YXIgcm9vdCA9IFtudWxsXTtcblxuICBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gICAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICAgIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xuICB9XG5cbiAgU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gICAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICAgIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICAgIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICAgIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gICAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICAgIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICAgIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICAgIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gICAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gICAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gICAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICAgIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICAgIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICAgIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICAgIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gICAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gICAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICAgIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICAgIG9uOiBzZWxlY3Rpb25fb24sXG4gICAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0QWxsKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IG5ldyBTZWxlY3Rpb24oW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoKG5vZGUsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBwb2ludCQ1KG5vZGUsIHRvdWNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZXMobm9kZSwgdG91Y2hlcykge1xuICAgIGlmICh0b3VjaGVzID09IG51bGwpIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLnRvdWNoZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHBvaW50cyA9IG5ldyBBcnJheShuKTsgaSA8IG47ICsraSkge1xuICAgICAgcG9pbnRzW2ldID0gcG9pbnQkNShub2RlLCB0b3VjaGVzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgdmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xuICB2YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG4gIHZhciBDUkVBVEVEID0gMDtcbiAgdmFyIFNDSEVEVUxFRCA9IDE7XG4gIHZhciBTVEFSVElORyA9IDI7XG4gIHZhciBTVEFSVEVEID0gMztcbiAgdmFyIEVORElORyA9IDQ7XG4gIHZhciBFTkRFRCA9IDU7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICAgIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICAgIGNyZWF0ZShub2RlLCBpZCwge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgICBvbjogZW1wdHlPbixcbiAgICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgICAgdGltZXI6IG51bGwsXG4gICAgICBzdGF0ZTogQ1JFQVRFRFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkgfHwgc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZVwiKTtcbiAgICByZXR1cm4gc2NoZWR1bGU7XG4gIH1cblxuICBmdW5jdGlvbiBzZXQkMihub2RlLCBpZCkge1xuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkgfHwgc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORykgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGVcIik7XG4gICAgcmV0dXJuIHNjaGVkdWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0JDEobm9kZSwgaWQpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZVwiKTtcbiAgICByZXR1cm4gc2NoZWR1bGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICAgIHR3ZWVuO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gICAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gICAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gICAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGRlbGF5IGlzIGdyZWF0ZXIgdGhhbiB0aGlzIGZpcnN0IHNsZWVwLCBzbGVlcCBzb21lIG1vcmU7XG4gICAgLy8gb3RoZXJ3aXNlLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICAgICAgZWxzZSBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBpbnRlcnJ1cHQgZXZlbnQuXG4gICAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBjYW5jZWxsZWQgdHJhbnNpdGlvbnMgbmV2ZXIgc3RhcnRlZC4gTm90ZSB0aGF0IHRoaXMgYWxzb1xuICAgICAgICAvLyByZW1vdmVzIHRoaXMgdHJhbnNpdGlvbiBmcm9tIHRoZSBwZW5kaW5nIGxpc3QhXG4gICAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBtYm9zdG9jay9kMyMxNTc2LlxuICAgICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICAgIHRpbWVvdXQkMShmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgdHdlZW5baV0uY2FsbChudWxsLCB0KTtcbiAgICAgIH1cblxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSBpZiAoK2kgIT09IGlkKSByZXR1cm4gdm9pZCBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICAgICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdChub2RlLCBuYW1lKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgICBzY2hlZHVsZSxcbiAgICAgICAgYWN0aXZlLFxuICAgICAgICBlbXB0eSA9IHRydWUsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gICAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID09PSBTVEFSVEVEO1xuICAgICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgfVxuXG4gICAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25faW50ZXJydXB0KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0JDIodGhpcywgaWQpLFxuICAgICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQkMih0aGlzLCBpZCksXG4gICAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fdHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIG5hbWUgKz0gXCJcIjtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIHR3ZWVuID0gZ2V0JDEodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gICAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0JDIodGhpcywgaWQpO1xuICAgICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBnZXQkMShub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlJDEoYSwgYikge1xuICAgIHZhciBjO1xuICAgIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmUkMShuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmVOUyQxKGZ1bGxuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQkMShuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gICAgdmFyIHZhbHVlMDAsXG4gICAgICAgIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TJDEoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbiQxKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICAgIHZhciB2YWx1ZTAwLFxuICAgICAgICB2YWx1ZTEwLFxuICAgICAgICBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMkMShmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlMDAsXG4gICAgICAgIHZhbHVlMTAsXG4gICAgICAgIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMiA6IGludGVycG9sYXRlJDE7XG4gICAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMkMSA6IGF0dHJGdW5jdGlvbiQxKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyQxIDogYXR0clJlbW92ZSQxKShmdWxsbmFtZSlcbiAgICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyQxIDogYXR0ckNvbnN0YW50JDEpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gICAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgICB9O1xuICAgIH1cbiAgICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdHdlZW47XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9hdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9kZWxheSh2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgICAgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xuICB9XG5cbiAgZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZXQkMih0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgc2V0JDIodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fZHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICAgIDogZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZXQkMih0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX2Vhc2UodmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgICA6IGdldCQxKHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fZmlsdGVyKG1hdGNoKSB7XG4gICAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIkMShtYXRjaCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fbWVyZ2UodHJhbnNpdGlvbikge1xuICAgIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICAgIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQkMShuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICAgIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQkMShuYW1lKSA/IGluaXQgOiBzZXQkMjtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX29uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgICAgPyBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXG4gICAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fcmVtb3ZlKCkge1xuICAgIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zZWxlY3Qoc2VsZWN0KSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldCQxKG5vZGUsIGlkKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdEFsbChzZWxlY3QpIHtcbiAgICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0JDEobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG4gIH1cblxuICB2YXIgU2VsZWN0aW9uJDEgPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fc2VsZWN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uJDEodGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlUmVtb3ZlJDEobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgdmFsdWUxMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLFxuICAgICAgICAgIHZhbHVlMCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSksXG4gICAgICAgICAgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlUmVtb3ZlRW5kKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZUNvbnN0YW50JDEobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICAgIHZhciB2YWx1ZTAwLFxuICAgICAgICBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlMCA9IHdpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24kMShuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsdWUwMCxcbiAgICAgICAgdmFsdWUxMCxcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLFxuICAgICAgICAgIHZhbHVlMCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSksXG4gICAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICBpZiAodmFsdWUxID09IG51bGwpIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpKTtcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxIDogaW50ZXJwb2xhdGUkMTtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgICAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlUmVtb3ZlJDEobmFtZSwgaSkpXG4gICAgICAgICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZUVuZChuYW1lKSlcbiAgICAgICAgOiB0aGlzLnN0eWxlVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvbiQxKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCQxKG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHRDb25zdGFudCQxKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0RnVuY3Rpb24kMSh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fdGV4dCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IHRleHRGdW5jdGlvbiQxKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgICAgOiB0ZXh0Q29uc3RhbnQkMSh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl90cmFuc2l0aW9uKCkge1xuICAgIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB2YXIgaW5oZXJpdCA9IGdldCQxKG5vZGUsIGlkMCk7XG4gICAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xuICB9XG5cbiAgdmFyIGlkID0gMDtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gICAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICAgIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3SWQoKSB7XG4gICAgcmV0dXJuICsraWQ7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICAgIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gICAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gICAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gICAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICAgIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gICAgb246IHRyYW5zaXRpb25fb24sXG4gICAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICAgIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gICAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gICAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICAgIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICAgIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICAgIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICAgIGVhc2U6IHRyYW5zaXRpb25fZWFzZVxuICB9O1xuXG4gIHZhciBkZWZhdWx0VGltaW5nID0ge1xuICAgIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gICAgZGVsYXk6IDAsXG4gICAgZHVyYXRpb246IDI1MCxcbiAgICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxuICB9O1xuXG4gIGZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgICB2YXIgdGltaW5nO1xuICAgIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aW1pbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb25fdHJhbnNpdGlvbihuYW1lKSB7XG4gICAgdmFyIGlkLFxuICAgICAgICB0aW1pbmc7XG5cbiAgICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xuICB9XG5cbiAgc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuICBzZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcblxuICB2YXIgcm9vdCQxID0gW251bGxdO1xuXG4gIGZ1bmN0aW9uIGFjdGl2ZShub2RlLCBuYW1lKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgICBzY2hlZHVsZSxcbiAgICAgICAgaTtcblxuICAgIGlmIChzY2hlZHVsZXMpIHtcbiAgICAgIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gICAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLnN0YXRlID4gU0NIRURVTEVEICYmIHNjaGVkdWxlLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oW1tub2RlXV0sIHJvb3QkMSwgbmFtZSwgK2kpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgc2xpY2UkNCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBpZGVudGl0eSQ1KHgpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuXG4gIHZhciB0b3AgPSAxO1xuICB2YXIgcmlnaHQgPSAyO1xuICB2YXIgYm90dG9tID0gMztcbiAgdmFyIGxlZnQgPSA0O1xudmFyICAgZXBzaWxvbiQyID0gMWUtNjtcbiAgZnVuY3Rpb24gdHJhbnNsYXRlWChzY2FsZTAsIHNjYWxlMSwgZCkge1xuICAgIHZhciB4ID0gc2NhbGUwKGQpO1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIChpc0Zpbml0ZSh4KSA/IHggOiBzY2FsZTEoZCkpICsgXCIsMClcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZVkoc2NhbGUwLCBzY2FsZTEsIGQpIHtcbiAgICB2YXIgeSA9IHNjYWxlMChkKTtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArIChpc0Zpbml0ZSh5KSA/IHkgOiBzY2FsZTEoZCkpICsgXCIpXCI7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIoc2NhbGUpIHtcbiAgICB2YXIgb2Zmc2V0ID0gc2NhbGUuYmFuZHdpZHRoKCkgLyAyO1xuICAgIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBzY2FsZShkKSArIG9mZnNldDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gICAgcmV0dXJuICF0aGlzLl9fYXhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICAgIHZhciB0aWNrQXJndW1lbnRzID0gW10sXG4gICAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgICAgdGlja1NpemVJbm5lciA9IDYsXG4gICAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgICB0aWNrUGFkZGluZyA9IDM7XG5cbiAgICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSQ1KSA6IHRpY2tGb3JtYXQsXG4gICAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgICAgdHJhbnNmb3JtID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBib3R0b20gPyB0cmFuc2xhdGVYIDogdHJhbnNsYXRlWSxcbiAgICAgICAgICByYW5nZSA9IHNjYWxlLnJhbmdlKCksXG4gICAgICAgICAgcmFuZ2UwID0gcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgICAgcmFuZ2UxID0gcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogaWRlbnRpdHkkNSkoc2NhbGUuY29weSgpKSxcbiAgICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgICAgdGljayA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIudGlja1wiKS5kYXRhKHZhbHVlcywgc2NhbGUpLm9yZGVyKCksXG4gICAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICAgIGxpbmUgPSB0aWNrLnNlbGVjdChcImxpbmVcIiksXG4gICAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKSxcbiAgICAgICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgICAgIHgsIHkgPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/ICh4ID0gXCJ4XCIsIFwieVwiKSA6ICh4ID0gXCJ5XCIsIFwieFwiKTtcblxuICAgICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb21haW5cIilcbiAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIikpO1xuXG4gICAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKVxuICAgICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpXG4gICAgICAgICAgLmF0dHIoeSArIFwiMVwiLCAwLjUpXG4gICAgICAgICAgLmF0dHIoeSArIFwiMlwiLCAwLjUpKTtcblxuICAgICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjMDAwXCIpXG4gICAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgICAgLmF0dHIoeSwgMC41KVxuICAgICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbiQyKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uLCB0aGlzLnBhcmVudE5vZGUuX19heGlzIHx8IHBvc2l0aW9uLCBkKTsgfSk7XG5cbiAgICAgICAgdGlja0VudGVyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbiQyKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHRoaXMucGFyZW50Tm9kZS5fX2F4aXMgfHwgcG9zaXRpb24sIHBvc2l0aW9uLCBkKTsgfSk7XG4gICAgICB9XG5cbiAgICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgICBwYXRoXG4gICAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgICAgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyXG4gICAgICAgICAgICAgIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlcik7XG5cbiAgICAgIHRpY2tcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24sIHBvc2l0aW9uLCBkKTsgfSk7XG5cbiAgICAgIGxpbmVcbiAgICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKTtcblxuICAgICAgdGV4dFxuICAgICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAgIC50ZXh0KGZvcm1hdCk7XG5cbiAgICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgICBzZWxlY3Rpb25cbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gICAgfVxuXG4gICAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZSQ0LmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UkNC5jYWxsKF8pLCBheGlzKSA6IHRpY2tBcmd1bWVudHMuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1ZhbHVlcyA9IF8gPT0gbnVsbCA/IG51bGwgOiBzbGljZSQ0LmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gICAgfTtcblxuICAgIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gICAgfTtcblxuICAgIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gICAgfTtcblxuICAgIHJldHVybiBheGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICAgIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gICAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgICByZXR1cm4gYXhpcyhib3R0b20sIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gICAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICAgIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lYW5YKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShtZWFuWFJlZHVjZSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBtZWFuWFJlZHVjZSh4LCBjKSB7XG4gICAgcmV0dXJuIHggKyBjLng7XG4gIH1cblxuICBmdW5jdGlvbiBtYXhZKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIDEgKyBjaGlsZHJlbi5yZWR1Y2UobWF4WVJlZHVjZSwgMCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXhZUmVkdWNlKHksIGMpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoeSwgYy55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWZMZWZ0KG5vZGUpIHtcbiAgICB2YXIgY2hpbGRyZW47XG4gICAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuWzBdO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZlJpZ2h0KG5vZGUpIHtcbiAgICB2YXIgY2hpbGRyZW47XG4gICAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2x1c3RlcigpIHtcbiAgICB2YXIgc2VwYXJhdGlvbiA9IGRlZmF1bHRTZXBhcmF0aW9uLFxuICAgICAgICBkeCA9IDEsXG4gICAgICAgIGR5ID0gMSxcbiAgICAgICAgbm9kZVNpemUgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNsdXN0ZXIocm9vdCkge1xuICAgICAgdmFyIHByZXZpb3VzTm9kZSxcbiAgICAgICAgICB4ID0gMDtcblxuICAgICAgLy8gRmlyc3Qgd2FsaywgY29tcHV0aW5nIHRoZSBpbml0aWFsIHggJiB5IHZhbHVlcy5cbiAgICAgIHJvb3QuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgbm9kZS54ID0gbWVhblgoY2hpbGRyZW4pO1xuICAgICAgICAgIG5vZGUueSA9IG1heFkoY2hpbGRyZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcbiAgICAgICAgICBub2RlLnkgPSAwO1xuICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbGVmdCA9IGxlYWZMZWZ0KHJvb3QpLFxuICAgICAgICAgIHJpZ2h0ID0gbGVhZlJpZ2h0KHJvb3QpLFxuICAgICAgICAgIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICAgIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcblxuICAgICAgLy8gU2Vjb25kIHdhbGssIG5vcm1hbGl6aW5nIHggJiB5IHRvIHRoZSBkZXNpcmVkIHNpemUuXG4gICAgICByZXR1cm4gcm9vdC5lYWNoQWZ0ZXIobm9kZVNpemUgPyBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogZHg7XG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogZHk7XG4gICAgICB9IDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogZHg7XG4gICAgICAgIG5vZGUueSA9ICgxIC0gKHJvb3QueSA/IG5vZGUueSAvIHJvb3QueSA6IDEpKSAqIGR5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2x1c3Rlci5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIGNsdXN0ZXIpIDogc2VwYXJhdGlvbjtcbiAgICB9O1xuXG4gICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICAgIH07XG5cbiAgICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBjbHVzdGVyKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBjbHVzdGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9lYWNoKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50ID0gbmV4dC5yZXZlcnNlKCksIG5leHQgPSBbXTtcbiAgICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9lYWNoQmVmb3JlKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgY2hpbGRyZW4sIGk7XG4gICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9lYWNoQWZ0ZXIoY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBuZXh0ID0gW10sIGNoaWxkcmVuLCBpLCBuO1xuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfc3VtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gICAgICBub2RlLnZhbHVlID0gc3VtO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9zb3J0KGNvbXBhcmUpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfcGF0aChlbmQpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXG4gICAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcbiAgICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICAgIH1cbiAgICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgICBlbmQgPSBlbmQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gICAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICAgIGMgPSBudWxsO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgICB3aGlsZSAoYSA9PT0gYikge1xuICAgICAgYyA9IGE7XG4gICAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX2FuY2VzdG9ycygpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICAgIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfZGVzY2VuZGFudHMoKSB7XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZV9sZWF2ZXMoKSB7XG4gICAgdmFyIGxlYXZlcyA9IFtdO1xuICAgIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxlYXZlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfbGlua3MoKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICAgIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZSAhPT0gcm9vdCkgeyAvLyBEb27igJl0IGluY2x1ZGUgdGhlIHJvb3TigJlzIHBhcmVudCwgaWYgYW55LlxuICAgICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbGlua3M7XG4gIH1cblxuICBmdW5jdGlvbiBoaWVyYXJjaHkoZGF0YSwgY2hpbGRyZW4pIHtcbiAgICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIGNoaWxkcyxcbiAgICAgICAgaSxcbiAgICAgICAgbjtcblxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcblxuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgICAgaWYgKChjaGlsZHMgPSBjaGlsZHJlbihub2RlLmRhdGEpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobik7XG4gICAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IE5vZGUoY2hpbGRzW2ldKSk7XG4gICAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3QuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgICByZXR1cm4gZC5jaGlsZHJlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgICBub2RlLmRhdGEgPSBub2RlLmRhdGEuZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHQobm9kZSkge1xuICAgIHZhciBoZWlnaHQgPSAwO1xuICAgIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiAobm9kZS5oZWlnaHQgPCArK2hlaWdodCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmRlcHRoID1cbiAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICB9XG5cbiAgTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBOb2RlLFxuICAgIGVhY2g6IG5vZGVfZWFjaCxcbiAgICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICAgIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgICBzdW06IG5vZGVfc3VtLFxuICAgIHNvcnQ6IG5vZGVfc29ydCxcbiAgICBwYXRoOiBub2RlX3BhdGgsXG4gICAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcbiAgICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICAgIGxpbmtzOiBub2RlX2xpbmtzLFxuICAgIGNvcHk6IG5vZGVfY29weVxuICB9O1xuXG4gIGZ1bmN0aW9uIE5vZGUkMih2YWx1ZSkge1xuICAgIHRoaXMuXyA9IHZhbHVlO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBzaHVmZmxlJDEoYXJyYXkpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IChhcnJheSA9IGFycmF5LnNsaWNlKCkpLmxlbmd0aCxcbiAgICAgICAgaGVhZCA9IG51bGwsXG4gICAgICAgIG5vZGUgPSBoZWFkO1xuXG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIHZhciBuZXh0ID0gbmV3IE5vZGUkMihhcnJheVtuIC0gMV0pO1xuICAgICAgaWYgKG5vZGUpIG5vZGUgPSBub2RlLm5leHQgPSBuZXh0O1xuICAgICAgZWxzZSBub2RlID0gaGVhZCA9IG5leHQ7XG4gICAgICBhcnJheVtpXSA9IGFycmF5Wy0tbl07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhlYWQ6IGhlYWQsXG4gICAgICB0YWlsOiBub2RlXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2UoY2lyY2xlcykge1xuICAgIHJldHVybiBlbmNsb3NlTihzaHVmZmxlJDEoY2lyY2xlcyksIFtdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2VzKGEsIGIpIHtcbiAgICB2YXIgZHggPSBiLnggLSBhLngsXG4gICAgICAgIGR5ID0gYi55IC0gYS55LFxuICAgICAgICBkciA9IGEuciAtIGIucjtcbiAgICByZXR1cm4gZHIgKiBkciArIDFlLTYgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIHNtYWxsZXN0IGNpcmNsZSB0aGF0IGNvbnRhaW5zIGNpcmNsZXMgTCBhbmQgaW50ZXJzZWN0cyBjaXJjbGVzIEIuXG4gIGZ1bmN0aW9uIGVuY2xvc2VOKEwsIEIpIHtcbiAgICB2YXIgY2lyY2xlLFxuICAgICAgICBsMCA9IG51bGwsXG4gICAgICAgIGwxID0gTC5oZWFkLFxuICAgICAgICBsMixcbiAgICAgICAgcDE7XG5cbiAgICBzd2l0Y2ggKEIubGVuZ3RoKSB7XG4gICAgICBjYXNlIDE6IGNpcmNsZSA9IGVuY2xvc2UxKEJbMF0pOyBicmVhaztcbiAgICAgIGNhc2UgMjogY2lyY2xlID0gZW5jbG9zZTIoQlswXSwgQlsxXSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBjaXJjbGUgPSBlbmNsb3NlMyhCWzBdLCBCWzFdLCBCWzJdKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgd2hpbGUgKGwxKSB7XG4gICAgICBwMSA9IGwxLl8sIGwyID0gbDEubmV4dDtcbiAgICAgIGlmICghY2lyY2xlIHx8ICFlbmNsb3NlcyhjaXJjbGUsIHAxKSkge1xuXG4gICAgICAgIC8vIFRlbXBvcmFyaWx5IHRydW5jYXRlIEwgYmVmb3JlIGwxLlxuICAgICAgICBpZiAobDApIEwudGFpbCA9IGwwLCBsMC5uZXh0ID0gbnVsbDtcbiAgICAgICAgZWxzZSBMLmhlYWQgPSBMLnRhaWwgPSBudWxsO1xuXG4gICAgICAgIEIucHVzaChwMSk7XG4gICAgICAgIGNpcmNsZSA9IGVuY2xvc2VOKEwsIEIpOyAvLyBOb3RlOiByZW9yZGVycyBMIVxuICAgICAgICBCLnBvcCgpO1xuXG4gICAgICAgIC8vIE1vdmUgbDEgdG8gdGhlIGZyb250IG9mIEwgYW5kIHJlY29ubmVjdCB0aGUgdHJ1bmNhdGVkIGxpc3QgTC5cbiAgICAgICAgaWYgKEwuaGVhZCkgbDEubmV4dCA9IEwuaGVhZCwgTC5oZWFkID0gbDE7XG4gICAgICAgIGVsc2UgbDEubmV4dCA9IG51bGwsIEwuaGVhZCA9IEwudGFpbCA9IGwxO1xuICAgICAgICBsMCA9IEwudGFpbCwgbDAubmV4dCA9IGwyO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsMCA9IGwxO1xuICAgICAgfVxuICAgICAgbDEgPSBsMjtcbiAgICB9XG5cbiAgICBMLnRhaWwgPSBsMDtcbiAgICByZXR1cm4gY2lyY2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jbG9zZTEoYSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBhLngsXG4gICAgICB5OiBhLnksXG4gICAgICByOiBhLnJcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jbG9zZTIoYSwgYikge1xuICAgIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLCB5MjEgPSB5MiAtIHkxLCByMjEgPSByMiAtIHIxLFxuICAgICAgICBsID0gTWF0aC5zcXJ0KHgyMSAqIHgyMSArIHkyMSAqIHkyMSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6ICh4MSArIHgyICsgeDIxIC8gbCAqIHIyMSkgLyAyLFxuICAgICAgeTogKHkxICsgeTIgKyB5MjEgLyBsICogcjIxKSAvIDIsXG4gICAgICByOiAobCArIHIxICsgcjIpIC8gMlxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbmNsb3NlMyhhLCBiLCBjKSB7XG4gICAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICAgIHgyID0gYi54LCB5MiA9IGIueSwgcjIgPSBiLnIsXG4gICAgICAgIHgzID0gYy54LCB5MyA9IGMueSwgcjMgPSBjLnIsXG4gICAgICAgIGEyID0gMiAqICh4MSAtIHgyKSxcbiAgICAgICAgYjIgPSAyICogKHkxIC0geTIpLFxuICAgICAgICBjMiA9IDIgKiAocjIgLSByMSksXG4gICAgICAgIGQyID0geDEgKiB4MSArIHkxICogeTEgLSByMSAqIHIxIC0geDIgKiB4MiAtIHkyICogeTIgKyByMiAqIHIyLFxuICAgICAgICBhMyA9IDIgKiAoeDEgLSB4MyksXG4gICAgICAgIGIzID0gMiAqICh5MSAtIHkzKSxcbiAgICAgICAgYzMgPSAyICogKHIzIC0gcjEpLFxuICAgICAgICBkMyA9IHgxICogeDEgKyB5MSAqIHkxIC0gcjEgKiByMSAtIHgzICogeDMgLSB5MyAqIHkzICsgcjMgKiByMyxcbiAgICAgICAgYWIgPSBhMyAqIGIyIC0gYTIgKiBiMyxcbiAgICAgICAgeGEgPSAoYjIgKiBkMyAtIGIzICogZDIpIC8gYWIgLSB4MSxcbiAgICAgICAgeGIgPSAoYjMgKiBjMiAtIGIyICogYzMpIC8gYWIsXG4gICAgICAgIHlhID0gKGEzICogZDIgLSBhMiAqIGQzKSAvIGFiIC0geTEsXG4gICAgICAgIHliID0gKGEyICogYzMgLSBhMyAqIGMyKSAvIGFiLFxuICAgICAgICBBID0geGIgKiB4YiArIHliICogeWIgLSAxLFxuICAgICAgICBCID0gMiAqICh4YSAqIHhiICsgeWEgKiB5YiArIHIxKSxcbiAgICAgICAgQyA9IHhhICogeGEgKyB5YSAqIHlhIC0gcjEgKiByMSxcbiAgICAgICAgciA9ICgtQiAtIE1hdGguc3FydChCICogQiAtIDQgKiBBICogQykpIC8gKDIgKiBBKTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeGEgKyB4YiAqIHIgKyB4MSxcbiAgICAgIHk6IHlhICsgeWIgKiByICsgeTEsXG4gICAgICByOiByXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlKGEsIGIsIGMpIHtcbiAgICB2YXIgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBkYSA9IGIuciArIGMucixcbiAgICAgICAgZGIgPSBhLnIgKyBjLnIsXG4gICAgICAgIGR4ID0gYi54IC0gYXgsXG4gICAgICAgIGR5ID0gYi55IC0gYXksXG4gICAgICAgIGRjID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgaWYgKGRjKSB7XG4gICAgICB2YXIgeCA9IDAuNSArICgoZGIgKj0gZGIpIC0gKGRhICo9IGRhKSkgLyAoMiAqIGRjKSxcbiAgICAgICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIDIgKiBkYSAqIChkYiArIGRjKSAtIChkYiAtPSBkYykgKiBkYiAtIGRhICogZGEpKSAvICgyICogZGMpO1xuICAgICAgYy54ID0gYXggKyB4ICogZHggKyB5ICogZHk7XG4gICAgICBjLnkgPSBheSArIHggKiBkeSAtIHkgKiBkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgYy54ID0gYXggKyBkYjtcbiAgICAgIGMueSA9IGF5O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdHMoYSwgYikge1xuICAgIHZhciBkeCA9IGIueCAtIGEueCxcbiAgICAgICAgZHkgPSBiLnkgLSBhLnksXG4gICAgICAgIGRyID0gYS5yICsgYi5yO1xuICAgIHJldHVybiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXN0YW5jZTIoY2lyY2xlLCB4LCB5KSB7XG4gICAgdmFyIGR4ID0gY2lyY2xlLnggLSB4LFxuICAgICAgICBkeSA9IGNpcmNsZS55IC0geTtcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cblxuICBmdW5jdGlvbiBOb2RlJDEoY2lyY2xlKSB7XG4gICAgdGhpcy5fID0gY2lyY2xlO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgdGhpcy5wcmV2aW91cyA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gICAgaWYgKCEobiA9IGNpcmNsZXMubGVuZ3RoKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgYSwgYiwgYywgbjtcblxuICAgIC8vIFBsYWNlIHRoZSBmaXJzdCBjaXJjbGUuXG4gICAgYSA9IGNpcmNsZXNbMF0sIGEueCA9IDAsIGEueSA9IDA7XG4gICAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gICAgLy8gUGxhY2UgdGhlIHNlY29uZCBjaXJjbGUuXG4gICAgYiA9IGNpcmNsZXNbMV0sIGEueCA9IC1iLnIsIGIueCA9IGEuciwgYi55ID0gMDtcbiAgICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgICAvLyBQbGFjZSB0aGUgdGhpcmQgY2lyY2xlLlxuICAgIHBsYWNlKGIsIGEsIGMgPSBjaXJjbGVzWzJdKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHdlaWdodGVkIGNlbnRyb2lkLlxuICAgIHZhciBhYSA9IGEuciAqIGEucixcbiAgICAgICAgYmEgPSBiLnIgKiBiLnIsXG4gICAgICAgIGNhID0gYy5yICogYy5yLFxuICAgICAgICBvYSA9IGFhICsgYmEgKyBjYSxcbiAgICAgICAgb3ggPSBhYSAqIGEueCArIGJhICogYi54ICsgY2EgKiBjLngsXG4gICAgICAgIG95ID0gYWEgKiBhLnkgKyBiYSAqIGIueSArIGNhICogYy55LFxuICAgICAgICBjeCwgY3ksIGksIGosIGssIHNqLCBzaztcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gICAgYSA9IG5ldyBOb2RlJDEoYSksIGIgPSBuZXcgTm9kZSQxKGIpLCBjID0gbmV3IE5vZGUkMShjKTtcbiAgICBhLm5leHQgPSBjLnByZXZpb3VzID0gYjtcbiAgICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgICBjLm5leHQgPSBiLnByZXZpb3VzID0gYTtcblxuICAgIC8vIEF0dGVtcHQgdG8gcGxhY2UgZWFjaCByZW1haW5pbmcgY2lyY2xl4oCmXG4gICAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgICAgcGxhY2UoYS5fLCBiLl8sIGMgPSBjaXJjbGVzW2ldKSwgYyA9IG5ldyBOb2RlJDEoYyk7XG5cbiAgICAgIC8vIElmIHRoZXJlIGFyZSBvbmx5IHRocmVlIGVsZW1lbnRzIGluIHRoZSBmcm9udC1jaGFpbuKAplxuICAgICAgaWYgKChrID0gYS5wcmV2aW91cykgPT09IChqID0gYi5uZXh0KSkge1xuICAgICAgICAvLyBJZiB0aGUgbmV3IGNpcmNsZSBpbnRlcnNlY3RzIHRoZSB0aGlyZCBjaXJjbGUsXG4gICAgICAgIC8vIHJvdGF0ZSB0aGUgZnJvbnQgY2hhaW4gdG8gdHJ5IHRoZSBuZXh0IHBvc2l0aW9uLlxuICAgICAgICBpZiAoaW50ZXJzZWN0cyhqLl8sIGMuXykpIHtcbiAgICAgICAgICBhID0gYiwgYiA9IGosIC0taTtcbiAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW5nIGNpcmNsZSBvbiB0aGUgZnJvbnQtY2hhaW4sIGlmIGFueS5cbiAgICAgIGVsc2Uge1xuICAgICAgICBzaiA9IGouXy5yLCBzayA9IGsuXy5yO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHNqIDw9IHNrKSB7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0cyhqLl8sIGMuXykpIHtcbiAgICAgICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqID0gai5uZXh0LCBzaiArPSBqLl8ucjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoay5fLCBjLl8pKSB7XG4gICAgICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgayA9IGsucHJldmlvdXMsIHNrICs9IGsuXy5yO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoaiAhPT0gay5uZXh0KTtcbiAgICAgIH1cblxuICAgICAgLy8gU3VjY2VzcyEgSW5zZXJ0IHRoZSBuZXcgY2lyY2xlIGMgYmV0d2VlbiBhIGFuZCBiLlxuICAgICAgYy5wcmV2aW91cyA9IGEsIGMubmV4dCA9IGIsIGEubmV4dCA9IGIucHJldmlvdXMgPSBiID0gYztcblxuICAgICAgLy8gVXBkYXRlIHRoZSB3ZWlnaHRlZCBjZW50cm9pZC5cbiAgICAgIG9hICs9IGNhID0gYy5fLnIgKiBjLl8ucjtcbiAgICAgIG94ICs9IGNhICogYy5fLng7XG4gICAgICBveSArPSBjYSAqIGMuXy55O1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBuZXcgY2xvc2VzdCBjaXJjbGUgYSB0byBjZW50cm9pZC5cbiAgICAgIGFhID0gZGlzdGFuY2UyKGEuXywgY3ggPSBveCAvIG9hLCBjeSA9IG95IC8gb2EpO1xuICAgICAgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikge1xuICAgICAgICBpZiAoKGNhID0gZGlzdGFuY2UyKGMuXywgY3gsIGN5KSkgPCBhYSkge1xuICAgICAgICAgIGEgPSBjLCBhYSA9IGNhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiID0gYS5uZXh0O1xuICAgIH1cblxuICAgIC8vIENvbXB1dGUgdGhlIGVuY2xvc2luZyBjaXJjbGUgb2YgdGhlIGZyb250IGNoYWluLlxuICAgIGEgPSBbYi5fXSwgYyA9IGI7IHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIGEucHVzaChjLl8pOyBjID0gZW5jbG9zZShhKTtcblxuICAgIC8vIFRyYW5zbGF0ZSB0aGUgY2lyY2xlcyB0byBwdXQgdGhlIGVuY2xvc2luZyBjaXJjbGUgYXJvdW5kIHRoZSBvcmlnaW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XG5cbiAgICByZXR1cm4gYy5yO1xuICB9XG5cbiAgZnVuY3Rpb24gc2libGluZ3MoY2lyY2xlcykge1xuICAgIHBhY2tFbmNsb3NlKGNpcmNsZXMpO1xuICAgIHJldHVybiBjaXJjbGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gb3B0aW9uYWwoZikge1xuICAgIHJldHVybiBmID09IG51bGwgPyBudWxsIDogcmVxdWlyZWQoZik7XG4gIH1cblxuICBmdW5jdGlvbiByZXF1aXJlZChmKSB7XG4gICAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICByZXR1cm4gZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50WmVybygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDUoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGQudmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgdmFyIHJhZGl1cyA9IG51bGwsXG4gICAgICAgIGR4ID0gMSxcbiAgICAgICAgZHkgPSAxLFxuICAgICAgICBwYWRkaW5nID0gY29uc3RhbnRaZXJvO1xuXG4gICAgZnVuY3Rpb24gcGFjayhyb290KSB7XG4gICAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYocmFkaXVzKSlcbiAgICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIDAuNSkpXG4gICAgICAgICAgICAuZWFjaEJlZm9yZSh0cmFuc2xhdGVDaGlsZCgxKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihkZWZhdWx0UmFkaXVzKSlcbiAgICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKGNvbnN0YW50WmVybywgMSkpXG4gICAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCByb290LnIgLyBNYXRoLm1pbihkeCwgZHkpKSlcbiAgICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gb3B0aW9uYWwoeCksIHBhY2spIDogcmFkaXVzO1xuICAgIH07XG5cbiAgICBwYWNrLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYWNrKSA6IFtkeCwgZHldO1xuICAgIH07XG5cbiAgICBwYWNrLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xuICAgIH07XG5cbiAgICByZXR1cm4gcGFjaztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhZGl1c0xlYWYocmFkaXVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBub2RlLnIgPSBNYXRoLm1heCgwLCArcmFkaXVzKG5vZGUpIHx8IDApO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYWNrQ2hpbGRyZW4ocGFkZGluZywgaykge1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgICAgciA9IHBhZGRpbmcobm9kZSkgKiBrIHx8IDAsXG4gICAgICAgICAgICBlO1xuXG4gICAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yICs9IHI7XG4gICAgICAgIGUgPSBwYWNrRW5jbG9zZShjaGlsZHJlbik7XG4gICAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yIC09IHI7XG4gICAgICAgIG5vZGUuciA9IGUgKyByO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGVDaGlsZChrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICAgIG5vZGUuciAqPSBrO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBub2RlLnggPSBwYXJlbnQueCArIGsgKiBub2RlLng7XG4gICAgICAgIG5vZGUueSA9IHBhcmVudC55ICsgayAqIG5vZGUueTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcm91bmROb2RlKG5vZGUpIHtcbiAgICBub2RlLngwID0gTWF0aC5yb3VuZChub2RlLngwKTtcbiAgICBub2RlLnkwID0gTWF0aC5yb3VuZChub2RlLnkwKTtcbiAgICBub2RlLngxID0gTWF0aC5yb3VuZChub2RlLngxKTtcbiAgICBub2RlLnkxID0gTWF0aC5yb3VuZChub2RlLnkxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyZWVtYXBEaWNlKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeDEgLSB4MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MTtcbiAgICAgIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgwICs9IG5vZGUudmFsdWUgKiBrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnRpdGlvbigpIHtcbiAgICB2YXIgZHggPSAxLFxuICAgICAgICBkeSA9IDEsXG4gICAgICAgIHBhZGRpbmcgPSAwLFxuICAgICAgICByb3VuZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcGFydGl0aW9uKHJvb3QpIHtcbiAgICAgIHZhciBuID0gcm9vdC5oZWlnaHQgKyAxO1xuICAgICAgcm9vdC54MCA9XG4gICAgICByb290LnkwID0gcGFkZGluZztcbiAgICAgIHJvb3QueDEgPSBkeDtcbiAgICAgIHJvb3QueTEgPSBkeSAvIG47XG4gICAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKGR5LCBuKSk7XG4gICAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKGR5LCBuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIHRyZWVtYXBEaWNlKG5vZGUsIG5vZGUueDAsIGR5ICogKG5vZGUuZGVwdGggKyAxKSAvIG4sIG5vZGUueDEsIGR5ICogKG5vZGUuZGVwdGggKyAyKSAvIG4pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4MCA9IG5vZGUueDAsXG4gICAgICAgICAgICB5MCA9IG5vZGUueTAsXG4gICAgICAgICAgICB4MSA9IG5vZGUueDEgLSBwYWRkaW5nLFxuICAgICAgICAgICAgeTEgPSBub2RlLnkxIC0gcGFkZGluZztcbiAgICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICAgIG5vZGUueDAgPSB4MDtcbiAgICAgICAgbm9kZS55MCA9IHkwO1xuICAgICAgICBub2RlLngxID0geDE7XG4gICAgICAgIG5vZGUueTEgPSB5MTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcGFydGl0aW9uLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHBhcnRpdGlvbikgOiByb3VuZDtcbiAgICB9O1xuXG4gICAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYXJ0aXRpb24pIDogW2R4LCBkeV07XG4gICAgfTtcblxuICAgIHBhcnRpdGlvbi5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9ICt4LCBwYXJ0aXRpb24pIDogcGFkZGluZztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBhcnRpdGlvbjtcbiAgfVxuXG52YXIgICBrZXlQcmVmaXgkMSA9IFwiJFwiO1xuICB2YXIgcHJlcm9vdCA9IHtkZXB0aDogLTF9O1xuICB2YXIgYW1iaWd1b3VzID0ge307XG4gIGZ1bmN0aW9uIGRlZmF1bHRJZChkKSB7XG4gICAgcmV0dXJuIGQuaWQ7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0UGFyZW50SWQoZCkge1xuICAgIHJldHVybiBkLnBhcmVudElkO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyYXRpZnkoKSB7XG4gICAgdmFyIGlkID0gZGVmYXVsdElkLFxuICAgICAgICBwYXJlbnRJZCA9IGRlZmF1bHRQYXJlbnRJZDtcblxuICAgIGZ1bmN0aW9uIHN0cmF0aWZ5KGRhdGEpIHtcbiAgICAgIHZhciBkLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgcGFyZW50LFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgbm9kZXMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgbm9kZUlkLFxuICAgICAgICAgIG5vZGVLZXksXG4gICAgICAgICAgbm9kZUJ5S2V5ID0ge307XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgZCA9IGRhdGFbaV0sIG5vZGUgPSBub2Rlc1tpXSA9IG5ldyBOb2RlKGQpO1xuICAgICAgICBpZiAoKG5vZGVJZCA9IGlkKGQsIGksIGRhdGEpKSAhPSBudWxsICYmIChub2RlSWQgKz0gXCJcIikpIHtcbiAgICAgICAgICBub2RlS2V5ID0ga2V5UHJlZml4JDEgKyAobm9kZS5pZCA9IG5vZGVJZCk7XG4gICAgICAgICAgbm9kZUJ5S2V5W25vZGVLZXldID0gbm9kZUtleSBpbiBub2RlQnlLZXkgPyBhbWJpZ3VvdXMgOiBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlSWQgPSBwYXJlbnRJZChkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgICAgaWYgKG5vZGVJZCA9PSBudWxsIHx8ICEobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgICAgaWYgKHJvb3QpIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIHJvb3RzXCIpO1xuICAgICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudCA9IG5vZGVCeUtleVtrZXlQcmVmaXgkMSArIG5vZGVJZF07XG4gICAgICAgICAgaWYgKCFwYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgICBpZiAocGFyZW50ID09PSBhbWJpZ3VvdXMpIHRocm93IG5ldyBFcnJvcihcImFtYmlndW91czogXCIgKyBub2RlSWQpO1xuICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICAgIGVsc2UgcGFyZW50LmNoaWxkcmVuID0gW25vZGVdO1xuICAgICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcm9vdFwiKTtcbiAgICAgIHJvb3QucGFyZW50ID0gcHJlcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7IG5vZGUuZGVwdGggPSBub2RlLnBhcmVudC5kZXB0aCArIDE7IC0tbjsgfSkuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbiAgICAgIHJvb3QucGFyZW50ID0gbnVsbDtcbiAgICAgIGlmIChuID4gMCkgdGhyb3cgbmV3IEVycm9yKFwiY3ljbGVcIik7XG5cbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIHN0cmF0aWZ5LmlkID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogaWQ7XG4gICAgfTtcblxuICAgIHN0cmF0aWZ5LnBhcmVudElkID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFyZW50SWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogcGFyZW50SWQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJhdGlmeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xuICAvLyAgIHJldHVybiAoYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDIpIC8gYS5kZXB0aDtcbiAgLy8gfVxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgbGVmdCBjb250b3VyIG9mIGEgc3VidHJlZSAob3JcbiAgLy8gc3ViZm9yZXN0KS4gSXQgcmV0dXJucyB0aGUgc3VjY2Vzc29yIG9mIHYgb24gdGhpcyBjb250b3VyLiBUaGlzIHN1Y2Nlc3NvciBpc1xuICAvLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbiAgLy8gcmV0dXJucyBudWxsIGlmIGFuZCBvbmx5IGlmIHYgaXMgb24gdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgaXRzIHN1YnRyZWUuXG4gIGZ1bmN0aW9uIG5leHRMZWZ0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogdi50O1xuICB9XG5cbiAgLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbiAgZnVuY3Rpb24gbmV4dFJpZ2h0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xuICB9XG5cbiAgLy8gU2hpZnRzIHRoZSBjdXJyZW50IHN1YnRyZWUgcm9vdGVkIGF0IHcrLiBUaGlzIGlzIGRvbmUgYnkgaW5jcmVhc2luZ1xuICAvLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuICBmdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XG4gICAgdmFyIGNoYW5nZSA9IHNoaWZ0IC8gKHdwLmkgLSB3bS5pKTtcbiAgICB3cC5jIC09IGNoYW5nZTtcbiAgICB3cC5zICs9IHNoaWZ0O1xuICAgIHdtLmMgKz0gY2hhbmdlO1xuICAgIHdwLnogKz0gc2hpZnQ7XG4gICAgd3AubSArPSBzaGlmdDtcbiAgfVxuXG4gIC8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuICAvLyBwZXJmb3JtZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gcHJlcGFyZSB0aGUgc2hpZnRzLCB3ZSBoYXZlIHRvIGFkanVzdFxuICAvLyBjaGFuZ2UodyspLCBzaGlmdCh3KyksIGFuZCBjaGFuZ2Uody0pLlxuICBmdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgICB2YXIgc2hpZnQgPSAwLFxuICAgICAgICBjaGFuZ2UgPSAwLFxuICAgICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgIHc7XG4gICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgICB3LnogKz0gc2hpZnQ7XG4gICAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdmkt4oCZcyBhbmNlc3RvciBpcyBhIHNpYmxpbmcgb2YgdiwgcmV0dXJucyB2aS3igJlzIGFuY2VzdG9yLiBPdGhlcndpc2UsXG4gIC8vIHJldHVybnMgdGhlIHNwZWNpZmllZCAoZGVmYXVsdCkgYW5jZXN0b3IuXG4gIGZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gICAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICAgIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcbiAgICB0aGlzLmEgPSB0aGlzOyAvLyBhbmNlc3RvclxuICAgIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICAgIHRoaXMubSA9IDA7IC8vIG1vZFxuICAgIHRoaXMuYyA9IDA7IC8vIGNoYW5nZVxuICAgIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gICAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXG4gICAgdGhpcy5pID0gaTsgLy8gbnVtYmVyXG4gIH1cblxuICBUcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiB0cmVlUm9vdChyb290KSB7XG4gICAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG5vZGVzID0gW3RyZWVdLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGksXG4gICAgICAgIG47XG5cbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgICBpZiAoY2hpbGRyZW4gPSBub2RlLl8uY2hpbGRyZW4pIHtcbiAgICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgVHJlZU5vZGUoY2hpbGRyZW5baV0sIGkpKTtcbiAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgKHRyZWUucGFyZW50ID0gbmV3IFRyZWVOb2RlKG51bGwsIDApKS5jaGlsZHJlbiA9IFt0cmVlXTtcbiAgICByZXR1cm4gdHJlZTtcbiAgfVxuXG4gIC8vIE5vZGUtbGluayB0cmVlIGRpYWdyYW0gdXNpbmcgdGhlIFJlaW5nb2xkLVRpbGZvcmQgXCJ0aWR5XCIgYWxnb3JpdGhtXG4gIGZ1bmN0aW9uIHRyZWUoKSB7XG4gICAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbiQxLFxuICAgICAgICBkeCA9IDEsXG4gICAgICAgIGR5ID0gMSxcbiAgICAgICAgbm9kZVNpemUgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBsYXlvdXQgdXNpbmcgQnVjaGhlaW0gZXQgYWwu4oCZcyBhbGdvcml0aG0uXG4gICAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgICAgLy8gSWYgYSBmaXhlZCBub2RlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5LlxuICAgICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGxlZnQtbW9zdCwgcmlnaHQtbW9zdCwgYW5kIGRlcHRoLW1vc3Qgbm9kZXMgZm9yIGV4dGVudHMuXG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIGxlZnQgPSByb290LFxuICAgICAgICAgICAgcmlnaHQgPSByb290LFxuICAgICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcbiAgICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAgICBreCA9IGR4IC8gKHJpZ2h0LnggKyBzICsgdHgpLFxuICAgICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuICAgICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIC8vIENvbXB1dGVzIGEgcHJlbGltaW5hcnkgeC1jb29yZGluYXRlIGZvciB2LiBCZWZvcmUgdGhhdCwgRklSU1QgV0FMSyBpc1xuICAgIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gICAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gICAgLy8gbm9kZSB2IGlzIHBsYWNlZCB0byB0aGUgbWlkcG9pbnQgb2YgaXRzIG91dGVybW9zdCBjaGlsZHJlbi5cbiAgICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgICBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLFxuICAgICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgZXhlY3V0ZVNoaWZ0cyh2KTtcbiAgICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdi56ID0gbWlkcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgIH1cbiAgICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gICAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG4gICAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgICB9XG5cbiAgICAvLyBUaGUgY29yZSBvZiB0aGUgYWxnb3JpdGhtLiBIZXJlLCBhIG5ldyBzdWJ0cmVlIGlzIGNvbWJpbmVkIHdpdGggdGhlXG4gICAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAgIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gICAgLy8gdmVydGljZXMgdXNlZCBmb3IgdGhlIHRyYXZlcnNhbHMgYXJlIHZpKywgdmktLCB2by0sIGFuZCB2byssIHdoZXJlIHRoZVxuICAgIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gICAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAgIC8vIGNvbnRvdXIsIHdlIHVzZSByZXNwZWN0aXZlIHZhcmlhYmxlcyBzaSssIHNpLSwgc28tLCBhbmQgc28rLiBXaGVuZXZlciB0d29cbiAgICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgICAvLyBTVUJUUkVFIHRvIHNoaWZ0IHRoZSBzdWJ0cmVlIGFuZCBwcmVwYXJlIHRoZSBzaGlmdHMgb2Ygc21hbGxlciBzdWJ0cmVlcy5cbiAgICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICAgIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgICAgaWYgKHcpIHtcbiAgICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgICAgdmltID0gdyxcbiAgICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICAgIHNvcCA9IHZvcC5tLFxuICAgICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICAgIHNoaWZ0O1xuICAgICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICAgIHZvcCA9IG5leHRSaWdodCh2b3ApO1xuICAgICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgICAgdm9tLnQgPSB2aXA7XG4gICAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFuY2VzdG9yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICAgIG5vZGUueCAqPSBkeDtcbiAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBkeTtcbiAgICB9XG5cbiAgICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgdHJlZSkgOiBzZXBhcmF0aW9uO1xuICAgIH07XG5cbiAgICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gICAgfTtcblxuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRyZWU7XG4gIH1cblxuICBmdW5jdGlvbiB0cmVlbWFwU2xpY2UocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgbm9kZSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBrID0gcGFyZW50LnZhbHVlICYmICh5MSAtIHkwKSAvIHBhcmVudC52YWx1ZTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgICAgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbiAgZnVuY3Rpb24gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciByb3dzID0gW10sXG4gICAgICAgIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgICByb3csXG4gICAgICAgIG5vZGVWYWx1ZSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgZHgsIGR5LFxuICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgICAgc3VtVmFsdWUsXG4gICAgICAgIG1pblZhbHVlLFxuICAgICAgICBtYXhWYWx1ZSxcbiAgICAgICAgbmV3UmF0aW8sXG4gICAgICAgIG1pblJhdGlvLFxuICAgICAgICBhbHBoYSxcbiAgICAgICAgYmV0YTtcblxuICAgIHdoaWxlIChpMCA8IG4pIHtcbiAgICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuICAgICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlID0gbm9kZXNbaTBdLnZhbHVlO1xuICAgICAgYWxwaGEgPSBNYXRoLm1heChkeSAvIGR4LCBkeCAvIGR5KSAvICh2YWx1ZSAqIHJhdGlvKTtcbiAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcblxuICAgICAgLy8gS2VlcCBhZGRpbmcgbm9kZXMgd2hpbGUgdGhlIGFzcGVjdCByYXRpbyBtYWludGFpbnMgb3IgaW1wcm92ZXMuXG4gICAgICBmb3IgKGkxID0gaTAgKyAxOyBpMSA8IG47ICsraTEpIHtcbiAgICAgICAgc3VtVmFsdWUgKz0gbm9kZVZhbHVlID0gbm9kZXNbaTFdLnZhbHVlO1xuICAgICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxuICAgICAgICBtaW5SYXRpbyA9IG5ld1JhdGlvO1xuICAgICAgfVxuXG4gICAgICAvLyBQb3NpdGlvbiBhbmQgcmVjb3JkIHRoZSByb3cgb3JpZW50YXRpb24uXG4gICAgICByb3dzLnB1c2gocm93ID0ge3ZhbHVlOiBzdW1WYWx1ZSwgZGljZTogZHggPCBkeSwgY2hpbGRyZW46IG5vZGVzLnNsaWNlKGkwLCBpMSl9KTtcbiAgICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcbiAgICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB2YWx1ZSA/IHgwICs9IGR4ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgICB2YWx1ZSAtPSBzdW1WYWx1ZSwgaTAgPSBpMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIHZhciBzcXVhcmlmeSA9IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICAgIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cblxuICAgIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzcXVhcmlmeTtcbiAgfSkocGhpKTtcblxuICBmdW5jdGlvbiBpbmRleCQxKCkge1xuICAgIHZhciB0aWxlID0gc3F1YXJpZnksXG4gICAgICAgIHJvdW5kID0gZmFsc2UsXG4gICAgICAgIGR4ID0gMSxcbiAgICAgICAgZHkgPSAxLFxuICAgICAgICBwYWRkaW5nU3RhY2sgPSBbMF0sXG4gICAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcbiAgICAgICAgcGFkZGluZ1RvcCA9IGNvbnN0YW50WmVybyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gY29uc3RhbnRaZXJvLFxuICAgICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxuICAgICAgICBwYWRkaW5nTGVmdCA9IGNvbnN0YW50WmVybztcblxuICAgIGZ1bmN0aW9uIHRyZWVtYXAocm9vdCkge1xuICAgICAgcm9vdC54MCA9XG4gICAgICByb290LnkwID0gMDtcbiAgICAgIHJvb3QueDEgPSBkeDtcbiAgICAgIHJvb3QueTEgPSBkeTtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShwb3NpdGlvbk5vZGUpO1xuICAgICAgcGFkZGluZ1N0YWNrID0gWzBdO1xuICAgICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShub2RlKSB7XG4gICAgICB2YXIgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoXSxcbiAgICAgICAgICB4MCA9IG5vZGUueDAgKyBwLFxuICAgICAgICAgIHkwID0gbm9kZS55MCArIHAsXG4gICAgICAgICAgeDEgPSBub2RlLngxIC0gcCxcbiAgICAgICAgICB5MSA9IG5vZGUueTEgLSBwO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgbm9kZS54MCA9IHgwO1xuICAgICAgbm9kZS55MCA9IHkwO1xuICAgICAgbm9kZS54MSA9IHgxO1xuICAgICAgbm9kZS55MSA9IHkxO1xuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoICsgMV0gPSBwYWRkaW5nSW5uZXIobm9kZSkgLyAyO1xuICAgICAgICB4MCArPSBwYWRkaW5nTGVmdChub2RlKSAtIHA7XG4gICAgICAgIHkwICs9IHBhZGRpbmdUb3Aobm9kZSkgLSBwO1xuICAgICAgICB4MSAtPSBwYWRkaW5nUmlnaHQobm9kZSkgLSBwO1xuICAgICAgICB5MSAtPSBwYWRkaW5nQm90dG9tKG5vZGUpIC0gcDtcbiAgICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICAgIHRpbGUobm9kZSwgeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC50aWxlID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlsZSA9IHJlcXVpcmVkKHgpLCB0cmVlbWFwKSA6IHRpbGU7XG4gICAgfTtcblxuICAgIHRyZWVtYXAucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDUoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdJbm5lcjtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ1RvcCh4KS5wYWRkaW5nUmlnaHQoeCkucGFkZGluZ0JvdHRvbSh4KS5wYWRkaW5nTGVmdCh4KSA6IHRyZWVtYXAucGFkZGluZ1RvcCgpO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdUb3AgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nVG9wID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nVG9wO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdSaWdodCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdSaWdodCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkNSgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdCb3R0b20gPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nQm90dG9tID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nQm90dG9tO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdMZWZ0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0xlZnQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDUoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdMZWZ0O1xuICAgIH07XG5cbiAgICByZXR1cm4gdHJlZW1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbmFyeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgICBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBzdW0sIHN1bXMgPSBuZXcgQXJyYXkobiArIDEpO1xuXG4gICAgZm9yIChzdW1zWzBdID0gc3VtID0gaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN1bXNbaSArIDFdID0gc3VtICs9IG5vZGVzW2ldLnZhbHVlO1xuICAgIH1cblxuICAgIHBhcnRpdGlvbigwLCBuLCBwYXJlbnQudmFsdWUsIHgwLCB5MCwgeDEsIHkxKTtcblxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihpLCBqLCB2YWx1ZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIGlmIChpID49IGogLSAxKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIG5vZGUueDAgPSB4MCwgbm9kZS55MCA9IHkwO1xuICAgICAgICBub2RlLngxID0geDEsIG5vZGUueTEgPSB5MTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWVPZmZzZXQgPSBzdW1zW2ldLFxuICAgICAgICAgIHZhbHVlVGFyZ2V0ID0gKHZhbHVlIC8gMikgKyB2YWx1ZU9mZnNldCxcbiAgICAgICAgICBrID0gaSArIDEsXG4gICAgICAgICAgaGkgPSBqIC0gMTtcblxuICAgICAgd2hpbGUgKGsgPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gayArIGhpID4+PiAxO1xuICAgICAgICBpZiAoc3Vtc1ttaWRdIDwgdmFsdWVUYXJnZXQpIGsgPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWVMZWZ0ID0gc3Vtc1trXSAtIHZhbHVlT2Zmc2V0LFxuICAgICAgICAgIHZhbHVlUmlnaHQgPSB2YWx1ZSAtIHZhbHVlTGVmdDtcblxuICAgICAgaWYgKCh5MSAtIHkwKSA+ICh4MSAtIHgwKSkge1xuICAgICAgICB2YXIgeWsgPSAoeTAgKiB2YWx1ZVJpZ2h0ICsgeTEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeDEsIHlrKTtcbiAgICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHgwLCB5aywgeDEsIHkxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB4ayA9ICh4MCAqIHZhbHVlUmlnaHQgKyB4MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZTtcbiAgICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4aywgeTEpO1xuICAgICAgICBwYXJ0aXRpb24oaywgaiwgdmFsdWVSaWdodCwgeGssIHkwLCB4MSwgeTEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWNlRGljZShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgKHBhcmVudC5kZXB0aCAmIDEgPyB0cmVlbWFwU2xpY2UgOiB0cmVlbWFwRGljZSkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICB2YXIgcmVzcXVhcmlmeSA9IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICAgIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgaWYgKChyb3dzID0gcGFyZW50Ll9zcXVhcmlmeSkgJiYgKHJvd3MucmF0aW8gPT09IHJhdGlvKSkge1xuICAgICAgICB2YXIgcm93cyxcbiAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgIG5vZGVzLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBtID0gcm93cy5sZW5ndGgsXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICAgIHJvdyA9IHJvd3Nbal0sIG5vZGVzID0gcm93LmNoaWxkcmVuO1xuICAgICAgICAgIGZvciAoaSA9IHJvdy52YWx1ZSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHJvdy52YWx1ZSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICAgICAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgeTAgKz0gKHkxIC0geTApICogcm93LnZhbHVlIC8gdmFsdWUpO1xuICAgICAgICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB4MCArPSAoeDEgLSB4MCkgKiByb3cudmFsdWUgLyB2YWx1ZSwgeTEpO1xuICAgICAgICAgIHZhbHVlIC09IHJvdy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50Ll9zcXVhcmlmeSA9IHJvd3MgPSBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgICAgcm93cy5yYXRpbyA9IHJhdGlvO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3F1YXJpZnk7XG4gIH0pKHBoaSk7XG5cbiAgZnVuY3Rpb24gY2VudGVyJDEoeCwgeSkge1xuICAgIHZhciBub2RlcztcblxuICAgIGlmICh4ID09IG51bGwpIHggPSAwO1xuICAgIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgc3ggPSAwLFxuICAgICAgICAgIHN5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIHN4ICs9IG5vZGUueCwgc3kgKz0gbm9kZS55O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueCAtPSBzeCwgbm9kZS55IC09IHN5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBub2RlcyA9IF87XG4gICAgfTtcblxuICAgIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gICAgfTtcblxuICAgIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDYoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBqaWdnbGUoKSB7XG4gICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG4gIH1cblxuICBmdW5jdGlvbiB4JDEoZCkge1xuICAgIHJldHVybiBkLnggKyBkLnZ4O1xuICB9XG5cbiAgZnVuY3Rpb24geSQxKGQpIHtcbiAgICByZXR1cm4gZC55ICsgZC52eTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbGxpZGUocmFkaXVzKSB7XG4gICAgdmFyIG5vZGVzLFxuICAgICAgICByYWRpaSxcbiAgICAgICAgc3RyZW5ndGggPSAxLFxuICAgICAgICBpdGVyYXRpb25zID0gMTtcblxuICAgIGlmICh0eXBlb2YgcmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIHJhZGl1cyA9IGNvbnN0YW50JDYocmFkaXVzID09IG51bGwgPyAxIDogK3JhZGl1cyk7XG5cbiAgICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIHRyZWUsXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB4aSxcbiAgICAgICAgICB5aSxcbiAgICAgICAgICByaSxcbiAgICAgICAgICByaTI7XG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICAgIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCQxLCB5JDEpLnZpc2l0QWZ0ZXIocHJlcGFyZSk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgcmkgPSByYWRpaVtpXSwgcmkyID0gcmkgKiByaTtcbiAgICAgICAgICB4aSA9IG5vZGUueCArIG5vZGUudng7XG4gICAgICAgICAgeWkgPSBub2RlLnkgKyBub2RlLnZ5O1xuICAgICAgICAgIHRyZWUudmlzaXQoYXBwbHkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICAgIHZhciBkYXRhID0gcXVhZC5kYXRhLCByaiA9IHF1YWQuciwgciA9IHJpICsgcmo7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgaWYgKGRhdGEuaW5kZXggPiBpKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHhpIC0gZGF0YS54IC0gZGF0YS52eCxcbiAgICAgICAgICAgICAgICB5ID0geWkgLSBkYXRhLnkgLSBkYXRhLnZ5LFxuICAgICAgICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuICAgICAgICAgICAgaWYgKGwgPCByICogcikge1xuICAgICAgICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZSgpLCBsICs9IHggKiB4O1xuICAgICAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICAgICAgICBsID0gKHIgLSAobCA9IE1hdGguc3FydChsKSkpIC8gbCAqIHN0cmVuZ3RoO1xuICAgICAgICAgICAgICBub2RlLnZ4ICs9ICh4ICo9IGwpICogKHIgPSAocmogKj0gcmopIC8gKHJpMiArIHJqKSk7XG4gICAgICAgICAgICAgIG5vZGUudnkgKz0gKHkgKj0gbCkgKiByO1xuICAgICAgICAgICAgICBkYXRhLnZ4IC09IHggKiAociA9IDEgLSByKTtcbiAgICAgICAgICAgICAgZGF0YS52eSAtPSB5ICogcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4MCA+IHhpICsgciB8fCB4MSA8IHhpIC0gciB8fCB5MCA+IHlpICsgciB8fCB5MSA8IHlpIC0gcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlKHF1YWQpIHtcbiAgICAgIGlmIChxdWFkLmRhdGEpIHJldHVybiBxdWFkLnIgPSByYWRpaVtxdWFkLmRhdGEuaW5kZXhdO1xuICAgICAgZm9yICh2YXIgaSA9IHF1YWQuciA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgaWYgKHF1YWRbaV0gJiYgcXVhZFtpXS5yID4gcXVhZC5yKSB7XG4gICAgICAgICAgcXVhZC5yID0gcXVhZFtpXS5yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHZhciBpLCBuID0gKG5vZGVzID0gXykubGVuZ3RoOyByYWRpaSA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHJhZGlpW2ldID0gK3JhZGl1cyhub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH07XG5cbiAgICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gK18sIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBmb3JjZSkgOiByYWRpdXM7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4JDIoZCwgaSkge1xuICAgIHJldHVybiBpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluayhsaW5rcykge1xuICAgIHZhciBpZCA9IGluZGV4JDIsXG4gICAgICAgIHN0cmVuZ3RoID0gZGVmYXVsdFN0cmVuZ3RoLFxuICAgICAgICBzdHJlbmd0aHMsXG4gICAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQkNigzMCksXG4gICAgICAgIGRpc3RhbmNlcyxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIGNvdW50LFxuICAgICAgICBiaWFzLFxuICAgICAgICBpdGVyYXRpb25zID0gMTtcblxuICAgIGlmIChsaW5rcyA9PSBudWxsKSBsaW5rcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFN0cmVuZ3RoKGxpbmspIHtcbiAgICAgIHJldHVybiAxIC8gTWF0aC5taW4oY291bnRbbGluay5zb3VyY2UuaW5kZXhdLCBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgICBmb3IgKHZhciBrID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGluaywgc291cmNlLCB0YXJnZXQsIHgsIHksIGwsIGI7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBsaW5rID0gbGlua3NbaV0sIHNvdXJjZSA9IGxpbmsuc291cmNlLCB0YXJnZXQgPSBsaW5rLnRhcmdldDtcbiAgICAgICAgICB4ID0gdGFyZ2V0LnggKyB0YXJnZXQudnggLSBzb3VyY2UueCAtIHNvdXJjZS52eCB8fCBqaWdnbGUoKTtcbiAgICAgICAgICB5ID0gdGFyZ2V0LnkgKyB0YXJnZXQudnkgLSBzb3VyY2UueSAtIHNvdXJjZS52eSB8fCBqaWdnbGUoKTtcbiAgICAgICAgICBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgIGwgPSAobCAtIGRpc3RhbmNlc1tpXSkgLyBsICogYWxwaGEgKiBzdHJlbmd0aHNbaV07XG4gICAgICAgICAgeCAqPSBsLCB5ICo9IGw7XG4gICAgICAgICAgdGFyZ2V0LnZ4IC09IHggKiAoYiA9IGJpYXNbaV0pO1xuICAgICAgICAgIHRhcmdldC52eSAtPSB5ICogYjtcbiAgICAgICAgICBzb3VyY2UudnggKz0geCAqIChiID0gMSAtIGIpO1xuICAgICAgICAgIHNvdXJjZS52eSArPSB5ICogYjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICAgIHZhciBpLFxuICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgbSA9IGxpbmtzLmxlbmd0aCxcbiAgICAgICAgICBub2RlQnlJZCA9IG1hcCQxKG5vZGVzLCBpZCksXG4gICAgICAgICAgbGluaztcblxuICAgICAgZm9yIChpID0gMCwgY291bnQgPSBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgY291bnRbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgbGluay5pbmRleCA9IGk7XG4gICAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gbm9kZUJ5SWQuZ2V0KGxpbmsuc291cmNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBsaW5rLnRhcmdldCAhPT0gXCJvYmplY3RcIikgbGluay50YXJnZXQgPSBub2RlQnlJZC5nZXQobGluay50YXJnZXQpO1xuICAgICAgICArK2NvdW50W2xpbmsuc291cmNlLmluZGV4XSwgKytjb3VudFtsaW5rLnRhcmdldC5pbmRleF07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgICAgbGluayA9IGxpbmtzW2ldLCBiaWFzW2ldID0gY291bnRbbGluay5zb3VyY2UuaW5kZXhdIC8gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSArIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgICBkaXN0YW5jZXMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVEaXN0YW5jZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH07XG5cbiAgICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxpbmtzID0gXywgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBsaW5rcztcbiAgICB9O1xuXG4gICAgZm9yY2UuaWQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xuICAgIH07XG5cbiAgICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS5kaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCksIGZvcmNlKSA6IGRpc3RhbmNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBmdW5jdGlvbiB4JDIoZCkge1xuICAgIHJldHVybiBkLng7XG4gIH1cblxuICBmdW5jdGlvbiB5JDIoZCkge1xuICAgIHJldHVybiBkLnk7XG4gIH1cblxuICB2YXIgaW5pdGlhbFJhZGl1cyA9IDEwO1xuICB2YXIgaW5pdGlhbEFuZ2xlID0gTWF0aC5QSSAqICgzIC0gTWF0aC5zcXJ0KDUpKTtcbiAgZnVuY3Rpb24gc2ltdWxhdGlvbihub2Rlcykge1xuICAgIHZhciBzaW11bGF0aW9uLFxuICAgICAgICBhbHBoYSA9IDEsXG4gICAgICAgIGFscGhhTWluID0gMC4wMDEsXG4gICAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgICBhbHBoYVRhcmdldCA9IDAsXG4gICAgICAgIHZlbG9jaXR5RGVjYXkgPSAwLjYsXG4gICAgICAgIGZvcmNlcyA9IG1hcCQxKCksXG4gICAgICAgIHN0ZXBwZXIgPSB0aW1lcihzdGVwKSxcbiAgICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHN0ZXAoKSB7XG4gICAgICB0aWNrKCk7XG4gICAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICAgIGlmIChhbHBoYSA8IGFscGhhTWluKSB7XG4gICAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcblxuICAgICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgICAgZm9yY2VzLmVhY2goZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgICAgZm9yY2UoYWxwaGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgICBpZiAobm9kZS5meSA9PSBudWxsKSBub2RlLnkgKz0gbm9kZS52eSAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVOb2RlcygpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS5pbmRleCA9IGk7XG4gICAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICAgIG5vZGUueCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmFOKG5vZGUudngpIHx8IGlzTmFOKG5vZGUudnkpKSB7XG4gICAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgICBpZiAoZm9yY2UuaW5pdGlhbGl6ZSkgZm9yY2UuaW5pdGlhbGl6ZShub2Rlcyk7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZU5vZGVzKCk7XG5cbiAgICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICAgIHRpY2s6IHRpY2ssXG5cbiAgICAgIHJlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgICAgfSxcblxuICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICAgIH0sXG5cbiAgICAgIG5vZGVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgICB9LFxuXG4gICAgICBhbHBoYTogZnVuY3Rpb24oXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgICAgfSxcblxuICAgICAgYWxwaGFNaW46IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICAgIH0sXG5cbiAgICAgIGFscGhhRGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgICAgfSxcblxuICAgICAgYWxwaGFUYXJnZXQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICAgIH0sXG5cbiAgICAgIHZlbG9jaXR5RGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgICAgfSxcblxuICAgICAgZm9yY2U6IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgICAgfSxcblxuICAgICAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgICBkeCxcbiAgICAgICAgICAgIGR5LFxuICAgICAgICAgICAgZDIsXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICAgICAgICBlbHNlIHJhZGl1cyAqPSByYWRpdXM7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICBkeCA9IHggLSBub2RlLng7XG4gICAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSBjbG9zZXN0ID0gbm9kZSwgcmFkaXVzID0gZDI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xvc2VzdDtcbiAgICAgIH0sXG5cbiAgICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IChldmVudC5vbihuYW1lLCBfKSwgc2ltdWxhdGlvbikgOiBldmVudC5vbihuYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbWFueUJvZHkoKSB7XG4gICAgdmFyIG5vZGVzLFxuICAgICAgICBub2RlLFxuICAgICAgICBhbHBoYSxcbiAgICAgICAgc3RyZW5ndGggPSBjb25zdGFudCQ2KC0zMCksXG4gICAgICAgIHN0cmVuZ3RocyxcbiAgICAgICAgZGlzdGFuY2VNaW4yID0gMSxcbiAgICAgICAgZGlzdGFuY2VNYXgyID0gSW5maW5pdHksXG4gICAgICAgIHRoZXRhMiA9IDAuODE7XG5cbiAgICBmdW5jdGlvbiBmb3JjZShfKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4JDIsIHkkMikudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcbiAgICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlbmd0aHNbaV0gPSArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICAgIHZhciBzdHJlbmd0aCA9IDAsIHEsIGMsIHgsIHksIGk7XG5cbiAgICAgIC8vIEZvciBpbnRlcm5hbCBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjaGlsZCBxdWFkcmFudHMuXG4gICAgICBpZiAocXVhZC5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh4ID0geSA9IGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgICAgaWYgKChxID0gcXVhZFtpXSkgJiYgKGMgPSBxLnZhbHVlKSkge1xuICAgICAgICAgICAgc3RyZW5ndGggKz0gYywgeCArPSBjICogcS54LCB5ICs9IGMgKiBxLnk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1YWQueCA9IHggLyBzdHJlbmd0aDtcbiAgICAgICAgcXVhZC55ID0geSAvIHN0cmVuZ3RoO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3IgbGVhZiBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjb2luY2lkZW50IHF1YWRyYW50cy5cbiAgICAgIGVsc2Uge1xuICAgICAgICBxID0gcXVhZDtcbiAgICAgICAgcS54ID0gcS5kYXRhLng7XG4gICAgICAgIHEueSA9IHEuZGF0YS55O1xuICAgICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgICAgd2hpbGUgKHEgPSBxLm5leHQpO1xuICAgICAgfVxuXG4gICAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgICB2YXIgeCA9IHF1YWQueCAtIG5vZGUueCxcbiAgICAgICAgICB5ID0gcXVhZC55IC0gbm9kZS55LFxuICAgICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuXG4gICAgICAvLyBBcHBseSB0aGUgQmFybmVzLUh1dCBhcHByb3hpbWF0aW9uIGlmIHBvc3NpYmxlLlxuICAgICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgICBpZiAodyAqIHcgLyB0aGV0YTIgPCBsKSB7XG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNYXgyKSB7XG4gICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgICAgbm9kZS52eSArPSB5ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIHBvaW50cyBkaXJlY3RseS5cbiAgICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgICAgaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSB8fCBxdWFkLm5leHQpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICB9XG5cbiAgICAgIGRvIGlmIChxdWFkLmRhdGEgIT09IG5vZGUpIHtcbiAgICAgICAgdyA9IHN0cmVuZ3Roc1txdWFkLmRhdGEuaW5kZXhdICogYWxwaGEgLyBsO1xuICAgICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgICBub2RlLnZ5ICs9IHkgKiB3O1xuICAgICAgfSB3aGlsZSAocXVhZCA9IHF1YWQubmV4dCk7XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIG5vZGVzID0gXztcbiAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNaW4yID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1pbjIpO1xuICAgIH07XG5cbiAgICBmb3JjZS5kaXN0YW5jZU1heCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWF4MiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNYXgyKTtcbiAgICB9O1xuXG4gICAgZm9yY2UudGhldGEgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHgkMyh4KSB7XG4gICAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQkNigwLjEpLFxuICAgICAgICBub2RlcyxcbiAgICAgICAgc3RyZW5ndGhzLFxuICAgICAgICB4ejtcblxuICAgIGlmICh0eXBlb2YgeCAhPT0gXCJmdW5jdGlvblwiKSB4ID0gY29uc3RhbnQkNih4ID09IG51bGwgPyAwIDogK3gpO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS52eCArPSAoeHpbaV0gLSBub2RlLngpICogc3RyZW5ndGhzW2ldICogYWxwaGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgICAgeHogPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHh6W2ldID0gK3gobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIG5vZGVzID0gXztcbiAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB4O1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBmdW5jdGlvbiB5JDMoeSkge1xuICAgIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50JDYoMC4xKSxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIHN0cmVuZ3RocyxcbiAgICAgICAgeXo7XG5cbiAgICBpZiAodHlwZW9mIHkgIT09IFwiZnVuY3Rpb25cIikgeSA9IGNvbnN0YW50JDYoeSA9PSBudWxsID8gMCA6ICt5KTtcblxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnkgKz0gKHl6W2ldIC0gbm9kZS55KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICAgIHl6ID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih5eltpXSA9ICt5KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBub2RlcyA9IF87XG4gICAgICBpbml0aWFsaXplKCk7XG4gICAgfTtcblxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICAgIH07XG5cbiAgICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ldmVudCgpIHtcbiAgICBleHBvcnRzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWdEaXNhYmxlKHZpZXcpIHtcbiAgICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhZ0VuYWJsZSh2aWV3LCBub2NsaWNrKSB7XG4gICAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gICAgaWYgKG5vY2xpY2spIHtcbiAgICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgICB9XG4gICAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkNyh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgdGhpcy5pZGVudGlmaWVyID0gaWQ7XG4gICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMuZHggPSBkeDtcbiAgICB0aGlzLmR5ID0gZHk7XG4gICAgdGhpcy5fID0gZGlzcGF0Y2g7XG4gIH1cblxuICBEcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IHRoaXMuXyA/IHRoaXMgOiB2YWx1ZTtcbiAgfTtcblxuICAvLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbiAgZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgICByZXR1cm4gIWV4cG9ydHMuZXZlbnQuYnV0dG9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdENvbnRhaW5lcigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN1YmplY3QoZCkge1xuICAgIHJldHVybiBkID09IG51bGwgPyB7eDogZXhwb3J0cy5ldmVudC54LCB5OiBleHBvcnRzLmV2ZW50Lnl9IDogZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWcoKSB7XG4gICAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgICB0b3VjaGVuZGluZztcblxuICAgIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XG4gICAgICBzZWxlY3Rpb25cbiAgICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAgIC5vbihcInRvdWNobW92ZS5kcmFnXCIsIHRvdWNobW92ZWQpXG4gICAgICAgICAgLm9uKFwidG91Y2hlbmQuZHJhZyB0b3VjaGNhbmNlbC5kcmFnXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcbiAgICAgIHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW91c2Vtb3ZpbmcgPSB0cnVlO1xuICAgICAgZ2VzdHVyZXMubW91c2UoXCJkcmFnXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgICBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcbiAgICAgIGRyYWdFbmFibGUoZXhwb3J0cy5ldmVudC52aWV3LCBtb3VzZW1vdmluZyk7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBnZXN0dXJlcy5tb3VzZShcImVuZFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgICB2YXIgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgYyA9IGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRvdWNoZXNbaV0uaWRlbnRpZmllciwgYywgdG91Y2gsIHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICAgIHZhciB0b3VjaGVzID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgbm9ldmVudCgpO1xuICAgICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICAgIHZhciB0b3VjaGVzID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQoaWQsIGNvbnRhaW5lciwgcG9pbnQsIHRoYXQsIGFyZ3MpIHtcbiAgICAgIHZhciBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksIHMsIGR4LCBkeSxcbiAgICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgICBpZiAoIWN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgXCJiZWZvcmVzdGFydFwiLCBzLCBpZCwgYWN0aXZlLCBwWzBdLCBwWzFdLCAwLCAwLCBzdWJsaXN0ZW5lcnMpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKChleHBvcnRzLmV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkeCA9IHMueCAtIHBbMF0gfHwgMDtcbiAgICAgICAgZHkgPSBzLnkgLSBwWzFdIHx8IDA7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSkpIHJldHVybjtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGdlc3R1cmUodHlwZSkge1xuICAgICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwic3RhcnRcIjogZ2VzdHVyZXNbaWRdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgICAgY2FzZSBcImRyYWdcIjogcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNyghIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgICB9O1xuXG4gICAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDcoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICAgIH07XG5cbiAgICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gICAgfTtcblxuICAgIGRyYWcub24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGRyYWcgOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRyYWc7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQ4KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24geCQ0KGQpIHtcbiAgICByZXR1cm4gZFswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHkkNChkKSB7XG4gICAgcmV0dXJuIGRbMV07XG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja1RyZWUoKSB7XG4gICAgdGhpcy5fID0gbnVsbDsgLy8gcm9vdCBub2RlXG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICAgIG5vZGUuVSA9IC8vIHBhcmVudCBub2RlXG4gICAgbm9kZS5DID0gLy8gY29sb3IgLSB0cnVlIGZvciByZWQsIGZhbHNlIGZvciBibGFja1xuICAgIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICAgIG5vZGUuUiA9IC8vIHJpZ2h0IG5vZGVcbiAgICBub2RlLlAgPSAvLyBwcmV2aW91cyBub2RlXG4gICAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG4gIH1cblxuICBSZWRCbGFja1RyZWUucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgICB2YXIgcGFyZW50LCBncmFuZHBhLCB1bmNsZTtcblxuICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xuICAgICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICAgIGlmIChhZnRlci5SKSB7XG4gICAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgICBhZnRlciA9IFJlZEJsYWNrRmlyc3QodGhpcy5fKTtcbiAgICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuICAgICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgICBwYXJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIG5vZGUuQyA9IHRydWU7XG5cbiAgICAgIGFmdGVyID0gbm9kZTtcbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgICAgZ3JhbmRwYSA9IHBhcmVudC5VO1xuICAgICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLkw7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICB9XG4gICAgICB0aGlzLl8uQyA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLk4pIG5vZGUuTi5QID0gbm9kZS5QO1xuICAgICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5VLFxuICAgICAgICAgIHNpYmxpbmcsXG4gICAgICAgICAgbGVmdCA9IG5vZGUuTCxcbiAgICAgICAgICByaWdodCA9IG5vZGUuUixcbiAgICAgICAgICBuZXh0LFxuICAgICAgICAgIHJlZDtcblxuICAgICAgaWYgKCFsZWZ0KSBuZXh0ID0gcmlnaHQ7XG4gICAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcbiAgICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICAgIG5leHQuTCA9IGxlZnQ7XG4gICAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcbiAgICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG4gICAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkID0gbm9kZS5DO1xuICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUpIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIGlmIChyZWQpIHJldHVybjtcbiAgICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5SIHx8ICFzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHNpYmxpbmcpO1xuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBwYXJlbnQuQztcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgICBpZiAobm9kZSkgbm9kZS5DID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlTGVmdCh0cmVlLCBub2RlKSB7XG4gICAgdmFyIHAgPSBub2RlLFxuICAgICAgICBxID0gbm9kZS5SLFxuICAgICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlLl8gPSBxO1xuICAgIH1cblxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuUiA9IHEuTDtcbiAgICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gICAgcS5MID0gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICAgIHZhciBwID0gbm9kZSxcbiAgICAgICAgcSA9IG5vZGUuTCxcbiAgICAgICAgcGFyZW50ID0gcC5VO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZS5fID0gcTtcbiAgICB9XG5cbiAgICBxLlUgPSBwYXJlbnQ7XG4gICAgcC5VID0gcTtcbiAgICBwLkwgPSBxLlI7XG4gICAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICAgIHEuUiA9IHA7XG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgICB3aGlsZSAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWRnZShsZWZ0LCByaWdodCwgdjAsIHYxKSB7XG4gICAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICAgIGluZGV4ID0gZWRnZXMucHVzaChlZGdlKSAtIDE7XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gICAgaWYgKHYwKSBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2MCk7XG4gICAgaWYgKHYxKSBzZXRFZGdlRW5kKGVkZ2UsIHJpZ2h0LCBsZWZ0LCB2MSk7XG4gICAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICAgIGNlbGxzW3JpZ2h0LmluZGV4XS5oYWxmZWRnZXMucHVzaChpbmRleCk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCb3JkZXJFZGdlKGxlZnQsIHYwLCB2MSkge1xuICAgIHZhciBlZGdlID0gW3YwLCB2MV07XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICAgIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xuICAgICAgZWRnZVswXSA9IHZlcnRleDtcbiAgICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfSBlbHNlIGlmIChlZGdlLmxlZnQgPT09IHJpZ2h0KSB7XG4gICAgICBlZGdlWzFdID0gdmVydGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIH1cbiAgfVxuXG4gIC8vIExpYW5n4oCTQmFyc2t5IGxpbmUgY2xpcHBpbmcuXG4gIGZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIGEgPSBlZGdlWzBdLFxuICAgICAgICBiID0gZWRnZVsxXSxcbiAgICAgICAgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICB0MCA9IDAsXG4gICAgICAgIHQxID0gMSxcbiAgICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICAgIHI7XG5cbiAgICByID0geDAgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geDEgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICByID0geTAgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geTEgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xuXG4gICAgaWYgKHQwID4gMCkgZWRnZVswXSA9IFtheCArIHQwICogZHgsIGF5ICsgdDAgKiBkeV07XG4gICAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciB2MSA9IGVkZ2VbMV07XG4gICAgaWYgKHYxKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXG4gICAgICAgIHJpZ2h0ID0gZWRnZS5yaWdodCxcbiAgICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgICBseSA9IGxlZnRbMV0sXG4gICAgICAgIHJ4ID0gcmlnaHRbMF0sXG4gICAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcbiAgICAgICAgZnkgPSAobHkgKyByeSkgLyAyLFxuICAgICAgICBmbSxcbiAgICAgICAgZmI7XG5cbiAgICBpZiAocnkgPT09IGx5KSB7XG4gICAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkwXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbZngsIHkxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgdjEgPSBbZngsIHkwXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm0gPSAobHggLSByeCkgLyAocnkgLSBseSk7XG4gICAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICAgIGlmIChmbSA8IC0xIHx8IGZtID4gMSkge1xuICAgICAgICBpZiAobHggPiByeCkge1xuICAgICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgICAgICB2MSA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdjApIHYwID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICAgICAgZWxzZSBpZiAodjBbMV0gPCB5MCkgcmV0dXJuO1xuICAgICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgICAgZWxzZSBpZiAodjBbMF0gPj0geDEpIHJldHVybjtcbiAgICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXYwKSB2MCA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgICAgdjEgPSBbeDAsIGZtICogeDAgKyBmYl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBlZGdlWzBdID0gdjA7XG4gICAgZWRnZVsxXSA9IHYxO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIGkgPSBlZGdlcy5sZW5ndGgsXG4gICAgICAgIGVkZ2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoIWNvbm5lY3RFZGdlKGVkZ2UgPSBlZGdlc1tpXSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgICAgfHwgIWNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvbiQzXG4gICAgICAgICAgICAgIHx8IE1hdGguYWJzKGVkZ2VbMF1bMV0gLSBlZGdlWzFdWzFdKSA+IGVwc2lsb24kMykpIHtcbiAgICAgICAgZGVsZXRlIGVkZ2VzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICAgIHJldHVybiBjZWxsc1tzaXRlLmluZGV4XSA9IHtcbiAgICAgIHNpdGU6IHNpdGUsXG4gICAgICBoYWxmZWRnZXM6IFtdXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgdmEgPSBlZGdlLmxlZnQsXG4gICAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgICBpZiAoc2l0ZSA9PT0gdmIpIHZiID0gdmEsIHZhID0gc2l0ZTtcbiAgICBpZiAodmIpIHJldHVybiBNYXRoLmF0YW4yKHZiWzFdIC0gdmFbMV0sIHZiWzBdIC0gdmFbMF0pO1xuICAgIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gICAgZWxzZSB2YSA9IGVkZ2VbMF0sIHZiID0gZWRnZVsxXTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMih2YVswXSAtIHZiWzBdLCB2YlsxXSAtIHZhWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2UpIHtcbiAgICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG4gIH1cblxuICBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICAgIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ID09PSBjZWxsLnNpdGUpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnRDZWxsSGFsZmVkZ2VzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBoYWxmZWRnZXMsIGosIG07IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaW5kZXggPSBuZXcgQXJyYXkobSksXG4gICAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShtKTtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgICBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIGFycmF5W2pdIC0gYXJyYXlbaV07IH0pO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBhcnJheVtqXSA9IGhhbGZlZGdlc1tpbmRleFtqXV07XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBuQ2VsbHMgPSBjZWxscy5sZW5ndGgsXG4gICAgICAgIGlDZWxsLFxuICAgICAgICBjZWxsLFxuICAgICAgICBzaXRlLFxuICAgICAgICBpSGFsZmVkZ2UsXG4gICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgbkhhbGZlZGdlcyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHN0YXJ0WCxcbiAgICAgICAgc3RhcnRZLFxuICAgICAgICBlbmQsXG4gICAgICAgIGVuZFgsXG4gICAgICAgIGVuZFksXG4gICAgICAgIGNvdmVyID0gdHJ1ZTtcblxuICAgIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXM7XG4gICAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFueSBkYW5nbGluZyBjbGlwcGVkIGVkZ2VzLlxuICAgICAgICB3aGlsZSAoaUhhbGZlZGdlLS0pIHtcbiAgICAgICAgICBpZiAoIWVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSkge1xuICAgICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc2VydCBhbnkgYm9yZGVyIGVkZ2VzIGFzIG5lY2Vzc2FyeS5cbiAgICAgICAgaUhhbGZlZGdlID0gMCwgbkhhbGZlZGdlcyA9IGhhbGZlZGdlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpSGFsZmVkZ2UgPCBuSGFsZmVkZ2VzKSB7XG4gICAgICAgICAgZW5kID0gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSksIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XG4gICAgICAgICAgc3RhcnQgPSBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1toYWxmZWRnZXNbKytpSGFsZmVkZ2UgJSBuSGFsZmVkZ2VzXV0pLCBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgICAgICAgaWYgKE1hdGguYWJzKGVuZFggLSBzdGFydFgpID4gZXBzaWxvbiQzIHx8IE1hdGguYWJzKGVuZFkgLSBzdGFydFkpID4gZXBzaWxvbiQzKSB7XG4gICAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgICBNYXRoLmFicyhlbmRYIC0geDApIDwgZXBzaWxvbiQzICYmIHkxIC0gZW5kWSA+IGVwc2lsb24kMyA/IFt4MCwgTWF0aC5hYnMoc3RhcnRYIC0geDApIDwgZXBzaWxvbiQzID8gc3RhcnRZIDogeTFdXG4gICAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTEpIDwgZXBzaWxvbiQzICYmIHgxIC0gZW5kWCA+IGVwc2lsb24kMyA/IFtNYXRoLmFicyhzdGFydFkgLSB5MSkgPCBlcHNpbG9uJDMgPyBzdGFydFggOiB4MSwgeTFdXG4gICAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiQzICYmIGVuZFkgLSB5MCA+IGVwc2lsb24kMyA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiQzID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTApIDwgZXBzaWxvbiQzICYmIGVuZFggLSB4MCA+IGVwc2lsb24kMyA/IFtNYXRoLmFicyhzdGFydFkgLSB5MCkgPCBlcHNpbG9uJDMgPyBzdGFydFggOiB4MCwgeTBdXG4gICAgICAgICAgICAgICAgOiBudWxsKSkgLSAxKTtcbiAgICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgICAvLyBJdCBkb2VzbuKAmXQgbWF0dGVyIHdoaWNoIGNvcm5lciBvZiB0aGUgZXh0ZW50IHdlIG1lYXN1cmUhXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgICAgZm9yIChpQ2VsbCA9IDAsIGNvdmVyID0gbnVsbDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICAgIGR4ID0gc2l0ZVswXSAtIHgwO1xuICAgICAgICAgIGR5ID0gc2l0ZVsxXSAtIHkwO1xuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGQyIDwgZGMpIGRjID0gZDIsIGNvdmVyID0gY2VsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY292ZXIpIHtcbiAgICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLCB2MDEgPSBbeDAsIHkxXSwgdjExID0gW3gxLCB5MV0sIHYxMCA9IFt4MSwgeTBdO1xuICAgICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSA9IGNvdmVyLnNpdGUsIHYwMCwgdjAxKSkgLSAxLFxuICAgICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MDEsIHYxMSkpIC0gMSxcbiAgICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMCwgdjAwKSkgLSAxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGFzdGx5IGRlbGV0ZSBhbnkgY2VsbHMgd2l0aCBubyBlZGdlczsgdGhlc2Ugd2VyZSBlbnRpcmVseSBjbGlwcGVkLlxuICAgIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgaWYgKCFjZWxsLmhhbGZlZGdlcy5sZW5ndGgpIHtcbiAgICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGNpcmNsZVBvb2wgPSBbXTtcblxuICB2YXIgZmlyc3RDaXJjbGU7XG5cbiAgZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLnggPVxuICAgIHRoaXMueSA9XG4gICAgdGhpcy5hcmMgPVxuICAgIHRoaXMuc2l0ZSA9XG4gICAgdGhpcy5jeSA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgICAgckFyYyA9IGFyYy5OO1xuXG4gICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICAgIGNTaXRlID0gYXJjLnNpdGUsXG4gICAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gICAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gICAgdmFyIGJ4ID0gY1NpdGVbMF0sXG4gICAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgICAgYXkgPSBsU2l0ZVsxXSAtIGJ5LFxuICAgICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICAgIHZhciBkID0gMiAqIChheCAqIGN5IC0gYXkgKiBjeCk7XG4gICAgaWYgKGQgPj0gLWVwc2lsb24yJDEpIHJldHVybjtcblxuICAgIHZhciBoYSA9IGF4ICogYXggKyBheSAqIGF5LFxuICAgICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICAgIHkgPSAoYXggKiBoYyAtIGN4ICogaGEpIC8gZDtcblxuICAgIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGU7XG4gICAgY2lyY2xlLmFyYyA9IGFyYztcbiAgICBjaXJjbGUuc2l0ZSA9IGNTaXRlO1xuICAgIGNpcmNsZS54ID0geCArIGJ4O1xuICAgIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgICBhcmMuY2lyY2xlID0gY2lyY2xlO1xuXG4gICAgdmFyIGJlZm9yZSA9IG51bGwsXG4gICAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IChjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkpIHtcbiAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgICAgZWxzZSB7IGJlZm9yZSA9IG5vZGUuUDsgYnJlYWs7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlOyBicmVhazsgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgICBpZiAoIWJlZm9yZSkgZmlyc3RDaXJjbGUgPSBjaXJjbGU7XG4gIH1cblxuICBmdW5jdGlvbiBkZXRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gICAgaWYgKGNpcmNsZSkge1xuICAgICAgaWYgKCFjaXJjbGUuUCkgZmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgICBjaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcbiAgICAgIFJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJlYWNoUG9vbCA9IFtdO1xuXG4gIGZ1bmN0aW9uIEJlYWNoKCkge1xuICAgIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLmVkZ2UgPVxuICAgIHRoaXMuc2l0ZSA9XG4gICAgdGhpcy5jaXJjbGUgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICAgIHZhciBiZWFjaCA9IGJlYWNoUG9vbC5wb3AoKSB8fCBuZXcgQmVhY2g7XG4gICAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gICAgcmV0dXJuIGJlYWNoO1xuICB9XG5cbiAgZnVuY3Rpb24gZGV0YWNoQmVhY2goYmVhY2gpIHtcbiAgICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICAgIGJlYWNoZXMucmVtb3ZlKGJlYWNoKTtcbiAgICBiZWFjaFBvb2wucHVzaChiZWFjaCk7XG4gICAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gICAgdmFyIGNpcmNsZSA9IGJlYWNoLmNpcmNsZSxcbiAgICAgICAgeCA9IGNpcmNsZS54LFxuICAgICAgICB5ID0gY2lyY2xlLmN5LFxuICAgICAgICB2ZXJ0ZXggPSBbeCwgeV0sXG4gICAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcbiAgICAgICAgbmV4dCA9IGJlYWNoLk4sXG4gICAgICAgIGRpc2FwcGVhcmluZyA9IFtiZWFjaF07XG5cbiAgICBkZXRhY2hCZWFjaChiZWFjaCk7XG5cbiAgICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICAgIHdoaWxlIChsQXJjLmNpcmNsZVxuICAgICAgICAmJiBNYXRoLmFicyh4IC0gbEFyYy5jaXJjbGUueCkgPCBlcHNpbG9uJDNcbiAgICAgICAgJiYgTWF0aC5hYnMoeSAtIGxBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24kMykge1xuICAgICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICAgIGRldGFjaEJlYWNoKGxBcmMpO1xuICAgICAgbEFyYyA9IHByZXZpb3VzO1xuICAgIH1cblxuICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgIGRldGFjaENpcmNsZShsQXJjKTtcblxuICAgIHZhciByQXJjID0gbmV4dDtcbiAgICB3aGlsZSAockFyYy5jaXJjbGVcbiAgICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQzXG4gICAgICAgICYmIE1hdGguYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uJDMpIHtcbiAgICAgIG5leHQgPSByQXJjLk47XG4gICAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICAgIGRldGFjaEJlYWNoKHJBcmMpO1xuICAgICAgckFyYyA9IG5leHQ7XG4gICAgfVxuXG4gICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gICAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgICAgaUFyYztcbiAgICBmb3IgKGlBcmMgPSAxOyBpQXJjIDwgbkFyY3M7ICsraUFyYykge1xuICAgICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xuICAgICAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxBcmMuc2l0ZSwgckFyYy5zaXRlLCB2ZXJ0ZXgpO1xuICAgIH1cblxuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tuQXJjcyAtIDFdO1xuICAgIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQmVhY2goc2l0ZSkge1xuICAgIHZhciB4ID0gc2l0ZVswXSxcbiAgICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgICAgbEFyYyxcbiAgICAgICAgckFyYyxcbiAgICAgICAgZHhsLFxuICAgICAgICBkeHIsXG4gICAgICAgIG5vZGUgPSBiZWFjaGVzLl87XG5cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgZHhsID0gbGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG4gICAgICBpZiAoZHhsID4gZXBzaWxvbiQzKSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgICAgZHhyID0geCAtIHJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgICBpZiAoZHhyID4gZXBzaWxvbiQzKSB7XG4gICAgICAgICAgaWYgKCFub2RlLlIpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGR4bCA+IC1lcHNpbG9uJDMpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgICByQXJjID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC1lcHNpbG9uJDMpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUNlbGwoc2l0ZSk7XG4gICAgdmFyIG5ld0FyYyA9IGNyZWF0ZUJlYWNoKHNpdGUpO1xuICAgIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcblxuICAgIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgICByQXJjID0gY3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICAgIGJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFyQXJjKSB7IC8vICYmIGxBcmNcbiAgICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBlbHNlIGxBcmMgIT09IHJBcmNcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgICBheCA9IGxTaXRlWzBdLFxuICAgICAgICBheSA9IGxTaXRlWzFdLFxuICAgICAgICBieCA9IHNpdGVbMF0gLSBheCxcbiAgICAgICAgYnkgPSBzaXRlWzFdIC0gYXksXG4gICAgICAgIHJTaXRlID0gckFyYy5zaXRlLFxuICAgICAgICBjeCA9IHJTaXRlWzBdIC0gYXgsXG4gICAgICAgIGN5ID0gclNpdGVbMV0gLSBheSxcbiAgICAgICAgZCA9IDIgKiAoYnggKiBjeSAtIGJ5ICogY3gpLFxuICAgICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgICB2ZXJ0ZXggPSBbKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCwgKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheV07XG5cbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsU2l0ZSwgc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICAgIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gIH1cblxuICBmdW5jdGlvbiBsZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGUsXG4gICAgICAgIHJmb2N4ID0gc2l0ZVswXSxcbiAgICAgICAgcmZvY3kgPSBzaXRlWzFdLFxuICAgICAgICBwYnkyID0gcmZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcblxuICAgIHZhciBsQXJjID0gYXJjLlA7XG4gICAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuXG4gICAgc2l0ZSA9IGxBcmMuc2l0ZTtcbiAgICB2YXIgbGZvY3ggPSBzaXRlWzBdLFxuICAgICAgICBsZm9jeSA9IHNpdGVbMV0sXG4gICAgICAgIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cbiAgICB2YXIgaGwgPSBsZm9jeCAtIHJmb2N4LFxuICAgICAgICBhYnkyID0gMSAvIHBieTIgLSAxIC8gcGxieTIsXG4gICAgICAgIGIgPSBobCAvIHBsYnkyO1xuXG4gICAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICogcGxieTIpIC0gbGZvY3kgKyBwbGJ5MiAvIDIgKyByZm9jeSAtIHBieTIgLyAyKSkpIC8gYWJ5MiArIHJmb2N4O1xuXG4gICAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiByaWdodEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgICB2YXIgckFyYyA9IGFyYy5OO1xuICAgIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcbiAgICB2YXIgc2l0ZSA9IGFyYy5zaXRlO1xuICAgIHJldHVybiBzaXRlWzFdID09PSBkaXJlY3RyaXggPyBzaXRlWzBdIDogSW5maW5pdHk7XG4gIH1cblxuICB2YXIgZXBzaWxvbiQzID0gMWUtNjtcbiAgdmFyIGVwc2lsb24yJDEgPSAxZS0xMjtcbiAgdmFyIGJlYWNoZXM7XG4gIHZhciBjZWxscztcbiAgdmFyIGNpcmNsZXM7XG4gIHZhciBlZGdlcztcblxuICBmdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICAgIHJldHVybiAoYVswXSAtIGNbMF0pICogKGJbMV0gLSBhWzFdKSAtIChhWzBdIC0gYlswXSkgKiAoY1sxXSAtIGFbMV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gICAgcmV0dXJuIGJbMV0gLSBhWzFdXG4gICAgICAgIHx8IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gRGlhZ3JhbShzaXRlcywgZXh0ZW50KSB7XG4gICAgdmFyIHNpdGUgPSBzaXRlcy5zb3J0KGxleGljb2dyYXBoaWMpLnBvcCgpLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBjaXJjbGU7XG5cbiAgICBlZGdlcyA9IFtdO1xuICAgIGNlbGxzID0gbmV3IEFycmF5KHNpdGVzLmxlbmd0aCk7XG4gICAgYmVhY2hlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG4gICAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY2lyY2xlID0gZmlyc3RDaXJjbGU7XG4gICAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICAgIGlmIChzaXRlWzBdICE9PSB4IHx8IHNpdGVbMV0gIT09IHkpIHtcbiAgICAgICAgICBhZGRCZWFjaChzaXRlKTtcbiAgICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICAgIH1cbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgICAgcmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gICAgaWYgKGV4dGVudCkge1xuICAgICAgdmFyIHgwID0gK2V4dGVudFswXVswXSxcbiAgICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgICAgeDEgPSArZXh0ZW50WzFdWzBdLFxuICAgICAgICAgIHkxID0gK2V4dGVudFsxXVsxXTtcbiAgICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgICBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cblxuICAgIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgICB0aGlzLmNlbGxzID0gY2VsbHM7XG5cbiAgICBiZWFjaGVzID1cbiAgICBjaXJjbGVzID1cbiAgICBlZGdlcyA9XG4gICAgY2VsbHMgPSBudWxsO1xuICB9XG5cbiAgRGlhZ3JhbS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IERpYWdyYW0sXG5cbiAgICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgICByZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24oY2VsbCkge1xuICAgICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgICBwb2x5Z29uLmRhdGEgPSBjZWxsLnNpdGUuZGF0YTtcbiAgICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgdHJpYW5nbGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgICBlZGdlcyA9IHRoaXMuZWRnZXM7XG5cbiAgICAgIHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMsXG4gICAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgICBtID0gaGFsZmVkZ2VzLmxlbmd0aCxcbiAgICAgICAgICAgIHMwLFxuICAgICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbbSAtIDFdXSxcbiAgICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcbiAgICAgICAgICBpZiAoaSA8IHMwLmluZGV4ICYmIGkgPCBzMS5pbmRleCAmJiB0cmlhbmdsZUFyZWEoc2l0ZSwgczAsIHMxKSA8IDApIHtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdHJpYW5nbGVzO1xuICAgIH0sXG5cbiAgICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4gZWRnZS5yaWdodDtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBlZGdlLmxlZnQuZGF0YSxcbiAgICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdm9yb25vaSgpIHtcbiAgICB2YXIgeCA9IHgkNCxcbiAgICAgICAgeSA9IHkkNCxcbiAgICAgICAgZXh0ZW50ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHZvcm9ub2koZGF0YSkge1xuICAgICAgcmV0dXJuIG5ldyBEaWFncmFtKGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgdmFyIHMgPSBbTWF0aC5yb3VuZCh4KGQsIGksIGRhdGEpIC8gZXBzaWxvbiQzKSAqIGVwc2lsb24kMywgTWF0aC5yb3VuZCh5KGQsIGksIGRhdGEpIC8gZXBzaWxvbiQzKSAqIGVwc2lsb24kM107XG4gICAgICAgIHMuaW5kZXggPSBpO1xuICAgICAgICBzLmRhdGEgPSBkO1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH0pLCBleHRlbnQpO1xuICAgIH1cblxuICAgIHZvcm9ub2kucG9seWdvbnMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gdm9yb25vaShkYXRhKS5wb2x5Z29ucygpO1xuICAgIH07XG5cbiAgICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHZvcm9ub2koZGF0YSkubGlua3MoKTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS50cmlhbmdsZXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gdm9yb25vaShkYXRhKS50cmlhbmdsZXMoKTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkOCgrXyksIHZvcm9ub2kpIDogeDtcbiAgICB9O1xuXG4gICAgdm9yb25vaS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkOCgrXyksIHZvcm9ub2kpIDogeTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtbZXh0ZW50WzBdWzBdLCBleHRlbnRbMF1bMV1dLCBbZXh0ZW50WzFdWzBdLCBleHRlbnRbMV1bMV1dXTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbMCwgMF0sIFsrX1swXSwgK19bMV1dXSwgdm9yb25vaSkgOiBleHRlbnQgJiYgW2V4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHZvcm9ub2k7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQ5KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gWm9vbUV2ZW50KHRhcmdldCwgdHlwZSwgdHJhbnNmb3JtKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gICAgdGhpcy5rID0gaztcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBUcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gICAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9PT0gMCAmIHkgPT09IDAgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmssIHRoaXMueCArIHRoaXMuayAqIHgsIHRoaXMueSArIHRoaXMuayAqIHkpO1xuICAgIH0sXG4gICAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICByZXR1cm4gW3BvaW50WzBdICogdGhpcy5rICsgdGhpcy54LCBwb2ludFsxXSAqIHRoaXMuayArIHRoaXMueV07XG4gICAgfSxcbiAgICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4ICogdGhpcy5rICsgdGhpcy54O1xuICAgIH0sXG4gICAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgICB9LFxuICAgIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBbKGxvY2F0aW9uWzBdIC0gdGhpcy54KSAvIHRoaXMuaywgKGxvY2F0aW9uWzFdIC0gdGhpcy55KSAvIHRoaXMua107XG4gICAgfSxcbiAgICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICAgIH0sXG4gICAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuICh5IC0gdGhpcy55KSAvIHRoaXMuaztcbiAgICB9LFxuICAgIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geC5jb3B5KCkuZG9tYWluKHgucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRYLCB0aGlzKS5tYXAoeC5pbnZlcnQsIHgpKTtcbiAgICB9LFxuICAgIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geS5jb3B5KCkuZG9tYWluKHkucmFuZ2UoKS5tYXAodGhpcy5pbnZlcnRZLCB0aGlzKS5tYXAoeS5pbnZlcnQsIHkpKTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMueCArIFwiLFwiICsgdGhpcy55ICsgXCIpIHNjYWxlKFwiICsgdGhpcy5rICsgXCIpXCI7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpZGVudGl0eSQ2ID0gbmV3IFRyYW5zZm9ybSgxLCAwLCAwKTtcblxuICB0cmFuc2Zvcm0ucHJvdG90eXBlID0gVHJhbnNmb3JtLnByb3RvdHlwZTtcblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICAgIHJldHVybiBub2RlLl9fem9vbSB8fCBpZGVudGl0eSQ2O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbiQxKCkge1xuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBmdW5jdGlvbiBub2V2ZW50JDEoKSB7XG4gICAgZXhwb3J0cy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICAvLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbiAgZnVuY3Rpb24gZGVmYXVsdEZpbHRlciQxKCkge1xuICAgIHJldHVybiAhZXhwb3J0cy5ldmVudC5idXR0b247XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICAgIHZhciBlID0gdGhpcywgdywgaDtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgICAgdyA9IGUud2lkdGguYmFzZVZhbC52YWx1ZTtcbiAgICAgIGggPSBlLmhlaWdodC5iYXNlVmFsLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB3ID0gZS5jbGllbnRXaWR0aDtcbiAgICAgIGggPSBlLmNsaWVudEhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIFtbMCwgMF0sIFt3LCBoXV07XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLl9fem9vbSB8fCBpZGVudGl0eSQ2O1xuICB9XG5cbiAgZnVuY3Rpb24gem9vbSgpIHtcbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlciQxLFxuICAgICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgICBrMCA9IDAsXG4gICAgICAgIGsxID0gSW5maW5pdHksXG4gICAgICAgIHgwID0gLWsxLFxuICAgICAgICB4MSA9IGsxLFxuICAgICAgICB5MCA9IHgwLFxuICAgICAgICB5MSA9IHgxLFxuICAgICAgICBkdXJhdGlvbiA9IDI1MCxcbiAgICAgICAgZ2VzdHVyZXMgPSBbXSxcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcInpvb21cIiwgXCJlbmRcIiksXG4gICAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgICB0b3VjaERlbGF5ID0gNTAwLFxuICAgICAgICB3aGVlbERlbGF5ID0gMTUwO1xuXG4gICAgZnVuY3Rpb24gem9vbShzZWxlY3Rpb24pIHtcbiAgICAgIHNlbGVjdGlvblxuICAgICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZClcbiAgICAgICAgICAub24oXCJtb3VzZWRvd24uem9vbVwiLCBtb3VzZWRvd25lZClcbiAgICAgICAgICAub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpXG4gICAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgICAub24oXCJ0b3VjaG1vdmUuem9vbVwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLnpvb20gdG91Y2hjYW5jZWwuem9vbVwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIilcbiAgICAgICAgICAucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSk7XG4gICAgfVxuXG4gICAgem9vbS50cmFuc2Zvcm0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCB0cmFuc2Zvcm0pIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgICAgc2VsZWN0aW9uLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgICAgaWYgKGNvbGxlY3Rpb24gIT09IHNlbGVjdGlvbikge1xuICAgICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0aW9uLmludGVycnVwdCgpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgICAgIC56b29tKG51bGwsIHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdHJhbnNmb3JtKVxuICAgICAgICAgICAgICAuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB6b29tLnNjYWxlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIGspIHtcbiAgICAgIHpvb20uc2NhbGVUbyhzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxuICAgICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgICAgcmV0dXJuIGswICogazE7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgem9vbS5zY2FsZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrKSB7XG4gICAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICAgIHAwID0gY2VudHJvaWQoZSksXG4gICAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgICByZXR1cm4gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB6b29tLnRyYW5zbGF0ZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5KSB7XG4gICAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeCxcbiAgICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8geS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeVxuICAgICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtLCBrKSB7XG4gICAgICBrID0gTWF0aC5tYXgoazAsIE1hdGgubWluKGsxLCBrKSk7XG4gICAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtLmsgPyB0cmFuc2Zvcm0gOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybS54LCB0cmFuc2Zvcm0ueSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zZm9ybSwgcDAsIHAxKSB7XG4gICAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0uaywgeSA9IHAwWzFdIC0gcDFbMV0gKiB0cmFuc2Zvcm0uaztcbiAgICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0cmFpbih0cmFuc2Zvcm0sIGV4dGVudCkge1xuICAgICAgdmFyIGR4ID0gTWF0aC5taW4oMCwgdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHgwKSB8fCBNYXRoLm1heCgwLCB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMV1bMF0pIC0geDEpLFxuICAgICAgICAgIGR5ID0gTWF0aC5taW4oMCwgdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHkwKSB8fCBNYXRoLm1heCgwLCB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMV1bMV0pIC0geTEpO1xuICAgICAgcmV0dXJuIGR4IHx8IGR5ID8gdHJhbnNmb3JtLnRyYW5zbGF0ZShkeCwgZHkpIDogdHJhbnNmb3JtO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xuICAgICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlKHRyYW5zaXRpb24sIHRyYW5zZm9ybSwgY2VudGVyKSB7XG4gICAgICB0cmFuc2l0aW9uXG4gICAgICAgICAgLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0Lnpvb20gZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJ6b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgZyA9IGdlc3R1cmUodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgICAgZSA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgICBwID0gY2VudGVyIHx8IGNlbnRyb2lkKGUpLFxuICAgICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICAgIGEgPSB0aGF0Ll9fem9vbSxcbiAgICAgICAgICAgICAgICBiID0gdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoYXQsIGFyZ3MpIDogdHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZVpvb20oYS5pbnZlcnQocCkuY29uY2F0KHcgLyBhLmspLCBiLmludmVydChwKS5jb25jYXQodyAvIGIuaykpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgaWYgKHQgPT09IDEpIHQgPSBiOyAvLyBBdm9pZCByb3VuZGluZyBlcnJvciBvbiBlbmQuXG4gICAgICAgICAgICAgIGVsc2UgeyB2YXIgbCA9IGkodCksIGsgPSB3IC8gbFsyXTsgdCA9IG5ldyBUcmFuc2Zvcm0oaywgcFswXSAtIGxbMF0gKiBrLCBwWzFdIC0gbFsxXSAqIGspOyB9XG4gICAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdlc3R1cmVzLmxlbmd0aCwgZzsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKGcgPSBnZXN0dXJlc1tpXSkudGhhdCA9PT0gdGhhdCkge1xuICAgICAgICAgIHJldHVybiBnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEdlc3R1cmUodGhhdCwgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH1cblxuICAgIEdlc3R1cmUucHJvdG90eXBlID0ge1xuICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuaW5kZXggPSBnZXN0dXJlcy5wdXNoKHRoaXMpIC0gMTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSkge1xuICAgICAgICBpZiAodGhpcy5tb3VzZSAmJiBrZXkgIT09IFwibW91c2VcIikgdGhpcy5tb3VzZVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy5tb3VzZVswXSk7XG4gICAgICAgIGlmICh0aGlzLnRvdWNoMCAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDBbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gwWzBdKTtcbiAgICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xuICAgICAgICB0aGlzLnRoYXQuX196b29tID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLmVtaXQoXCJ6b29tXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICAgIGdlc3R1cmVzLnNwbGljZSh0aGlzLmluZGV4LCAxKTtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgY3VzdG9tRXZlbnQobmV3IFpvb21FdmVudCh6b29tLCB0eXBlLCB0aGlzLnRoYXQuX196b29tKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB3aGVlbGVkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIGsgPSBNYXRoLm1heChrMCwgTWF0aC5taW4oazEsIHQuayAqIE1hdGgucG93KDIsIC1leHBvcnRzLmV2ZW50LmRlbHRhWSAqIChleHBvcnRzLmV2ZW50LmRlbHRhTW9kZSA/IDEyMCA6IDEpIC8gNTAwKSkpLFxuICAgICAgICAgIHAgPSBtb3VzZSh0aGlzKTtcblxuICAgICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgICAvLyBJZiB0aGVyZSB3ZXJlIHJlY2VudCB3aGVlbCBldmVudHMsIHJlc2V0IHRoZSB3aGVlbCBpZGxlIHRpbWVvdXQuXG4gICAgICBpZiAoZy53aGVlbCkge1xuICAgICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgICAgZy5tb3VzZVsxXSA9IHQuaW52ZXJ0KGcubW91c2VbMF0gPSBwKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29u4oCZdCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgY2FwdHVyZSB0aGUgbW91c2UgcG9pbnQgYW5kIGxvY2F0aW9uIGF0IHRoZSBzdGFydC5cbiAgICAgIGVsc2Uge1xuICAgICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcbiAgICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgICBnLnN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIG5vZXZlbnQkMSgpO1xuICAgICAgZy53aGVlbCA9IHNldFRpbWVvdXQod2hlZWxpZGxlZCwgd2hlZWxEZWxheSk7XG4gICAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQsIGspLCBnLm1vdXNlWzBdLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQpKTtcblxuICAgICAgZnVuY3Rpb24gd2hlZWxpZGxlZCgpIHtcbiAgICAgICAgZy53aGVlbCA9IG51bGw7XG4gICAgICAgIGcuZW5kKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB2ID0gc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuem9vbVwiLCBtb3VzZXVwcGVkLCB0cnVlKSxcbiAgICAgICAgICBwID0gbW91c2UodGhpcyk7XG5cbiAgICAgIGRyYWdEaXNhYmxlKGV4cG9ydHMuZXZlbnQudmlldyk7XG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcblxuICAgICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICAgICAgbm9ldmVudCQxKCk7XG4gICAgICAgIGcubW92ZWQgPSB0cnVlO1xuICAgICAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKGcudGhhdC5fX3pvb20sIGcubW91c2VbMF0gPSBtb3VzZShnLnRoYXQpLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICAgICAgdi5vbihcIm1vdXNlbW92ZS56b29tIG1vdXNldXAuem9vbVwiLCBudWxsKTtcbiAgICAgICAgZHJhZ0VuYWJsZShleHBvcnRzLmV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgICBub2V2ZW50JDEoKTtcbiAgICAgICAgZy5lbmQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYmxjbGlja2VkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0MC5rICogKGV4cG9ydHMuZXZlbnQuc2hpZnRLZXkgPyAwLjUgOiAyKSxcbiAgICAgICAgICB0MSA9IGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgICBub2V2ZW50JDEoKTtcbiAgICAgIGlmIChkdXJhdGlvbiA+IDApIHNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmNhbGwoc2NoZWR1bGUsIHQxLCBwMCk7XG4gICAgICBlbHNlIHNlbGVjdCh0aGlzKS5jYWxsKHpvb20udHJhbnNmb3JtLCB0MSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwO1xuXG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcbiAgICAgICAgaWYgKCFnLnRvdWNoMCkgZy50b3VjaDAgPSBwO1xuICAgICAgICBlbHNlIGlmICghZy50b3VjaDEpIGcudG91Y2gxID0gcDtcbiAgICAgIH1cbiAgICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB7XG4gICAgICAgIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgICAgIGlmICghZy50b3VjaDEpIHJldHVybiBnLmVuZCgpLCBkYmxjbGlja2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzLmxlbmd0aCA9PT0gbikge1xuICAgICAgICB0b3VjaHN0YXJ0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hzdGFydGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICAgIGcuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgICBub2V2ZW50JDEoKTtcbiAgICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMsIHQuaWRlbnRpZmllcik7XG4gICAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMFswXSA9IHA7XG4gICAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICAgIH1cbiAgICAgIHQgPSBnLnRoYXQuX196b29tO1xuICAgICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICAgIHZhciBwMCA9IGcudG91Y2gwWzBdLCBsMCA9IGcudG91Y2gwWzFdLFxuICAgICAgICAgICAgcDEgPSBnLnRvdWNoMVswXSwgbDEgPSBnLnRvdWNoMVsxXSxcbiAgICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgICBkbCA9IChkbCA9IGwxWzBdIC0gbDBbMF0pICogZGwgKyAoZGwgPSBsMVsxXSAtIGwwWzFdKSAqIGRsO1xuICAgICAgICB0ID0gc2NhbGUodCwgTWF0aC5zcXJ0KGRwIC8gZGwpKTtcbiAgICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgICAgbCA9IFsobDBbMF0gKyBsMVswXSkgLyAyLCAobDBbMV0gKyBsMVsxXSkgLyAyXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICAgIGVsc2UgcmV0dXJuO1xuICAgICAgZy56b29tKFwidG91Y2hcIiwgY29uc3RyYWluKHRyYW5zbGF0ZSh0LCBwLCBsKSwgZy5leHRlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0O1xuXG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdCA9IHRvdWNoZXNbaV07XG4gICAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDA7XG4gICAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICAgIH1cbiAgICAgIGlmIChnLnRvdWNoMSAmJiAhZy50b3VjaDApIGcudG91Y2gwID0gZy50b3VjaDEsIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICAgIGlmICghZy50b3VjaDApIGcuZW5kKCk7XG4gICAgfVxuXG4gICAgem9vbS5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDkoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gICAgfTtcblxuICAgIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ5KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgem9vbSkgOiBleHRlbnQ7XG4gICAgfTtcblxuICAgIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrMCA9ICtfWzBdLCBrMSA9ICtfWzFdLCB6b29tKSA6IFtrMCwgazFdO1xuICAgIH07XG5cbiAgICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF0sIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV0sIHpvb20pIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgfTtcblxuICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkdXJhdGlvbiA9ICtfLCB6b29tKSA6IGR1cmF0aW9uO1xuICAgIH07XG5cbiAgICB6b29tLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyB6b29tIDogdmFsdWU7XG4gICAgfTtcblxuICAgIHJldHVybiB6b29tO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQkMTAoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBCcnVzaEV2ZW50KHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24kMigpIHtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ldmVudCQyKCkge1xuICAgIGV4cG9ydHMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgdmFyIE1PREVfRFJBRyA9IHtuYW1lOiBcImRyYWdcIn07XG4gIHZhciBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn07XG4gIHZhciBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifTtcbiAgdmFyIE1PREVfQ0VOVEVSID0ge25hbWU6IFwiY2VudGVyXCJ9O1xuICB2YXIgWCA9IHtcbiAgICBuYW1lOiBcInhcIixcbiAgICBoYW5kbGVzOiBbXCJlXCIsIFwid1wiXS5tYXAodHlwZSQxKSxcbiAgICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCAmJiBbW3hbMF0sIGVbMF1bMV1dLCBbeFsxXSwgZVsxXVsxXV1dOyB9LFxuICAgIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG4gIH07XG5cbiAgdmFyIFkgPSB7XG4gICAgbmFtZTogXCJ5XCIsXG4gICAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUkMSksXG4gICAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgJiYgW1tlWzBdWzBdLCB5WzBdXSwgW2VbMV1bMF0sIHlbMV1dXTsgfSxcbiAgICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMV0sIHh5WzFdWzFdXTsgfVxuICB9O1xuXG4gIHZhciBYWSA9IHtcbiAgICBuYW1lOiBcInh5XCIsXG4gICAgaGFuZGxlczogW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLm1hcCh0eXBlJDEpLFxuICAgIGlucHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH0sXG4gICAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbiAgfTtcblxuICB2YXIgY3Vyc29ycyA9IHtcbiAgICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICAgIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gICAgbjogXCJucy1yZXNpemVcIixcbiAgICBlOiBcImV3LXJlc2l6ZVwiLFxuICAgIHM6IFwibnMtcmVzaXplXCIsXG4gICAgdzogXCJldy1yZXNpemVcIixcbiAgICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICAgIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gICAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgICBzdzogXCJuZXN3LXJlc2l6ZVwiXG4gIH07XG5cbiAgdmFyIGZsaXBYID0ge1xuICAgIGU6IFwid1wiLFxuICAgIHc6IFwiZVwiLFxuICAgIG53OiBcIm5lXCIsXG4gICAgbmU6IFwibndcIixcbiAgICBzZTogXCJzd1wiLFxuICAgIHN3OiBcInNlXCJcbiAgfTtcblxuICB2YXIgZmxpcFkgPSB7XG4gICAgbjogXCJzXCIsXG4gICAgczogXCJuXCIsXG4gICAgbnc6IFwic3dcIixcbiAgICBuZTogXCJzZVwiLFxuICAgIHNlOiBcIm5lXCIsXG4gICAgc3c6IFwibndcIlxuICB9O1xuXG4gIHZhciBzaWduc1ggPSB7XG4gICAgb3ZlcmxheTogKzEsXG4gICAgc2VsZWN0aW9uOiArMSxcbiAgICBuOiBudWxsLFxuICAgIGU6ICsxLFxuICAgIHM6IG51bGwsXG4gICAgdzogLTEsXG4gICAgbnc6IC0xLFxuICAgIG5lOiArMSxcbiAgICBzZTogKzEsXG4gICAgc3c6IC0xXG4gIH07XG5cbiAgdmFyIHNpZ25zWSA9IHtcbiAgICBvdmVybGF5OiArMSxcbiAgICBzZWxlY3Rpb246ICsxLFxuICAgIG46IC0xLFxuICAgIGU6IG51bGwsXG4gICAgczogKzEsXG4gICAgdzogbnVsbCxcbiAgICBudzogLTEsXG4gICAgbmU6IC0xLFxuICAgIHNlOiArMSxcbiAgICBzdzogKzFcbiAgfTtcblxuICBmdW5jdGlvbiB0eXBlJDEodCkge1xuICAgIHJldHVybiB7dHlwZTogdH07XG4gIH1cblxuICAvLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbiAgZnVuY3Rpb24gZGVmYXVsdEZpbHRlciQyKCkge1xuICAgIHJldHVybiAhZXhwb3J0cy5ldmVudC5idXR0b247XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RXh0ZW50JDEoKSB7XG4gICAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gICAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG4gIH1cblxuICAvLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxuICBmdW5jdGlvbiBsb2NhbCQxKG5vZGUpIHtcbiAgICB3aGlsZSAoIW5vZGUuX19icnVzaCkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgICByZXR1cm4gbm9kZS5fX2JydXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHkkMShleHRlbnQpIHtcbiAgICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgICAgfHwgZXh0ZW50WzBdWzFdID09PSBleHRlbnRbMV1bMV07XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaFNlbGVjdGlvbihub2RlKSB7XG4gICAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICAgIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaFgoKSB7XG4gICAgcmV0dXJuIGJydXNoJDEoWCk7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaFkoKSB7XG4gICAgcmV0dXJuIGJydXNoJDEoWSk7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaCgpIHtcbiAgICByZXR1cm4gYnJ1c2gkMShYWSk7XG4gIH1cblxuICBmdW5jdGlvbiBicnVzaCQxKGRpbSkge1xuICAgIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50JDEsXG4gICAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIkMixcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goYnJ1c2gsIFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICAgIHRvdWNoZW5kaW5nO1xuXG4gICAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuZGF0YShbdHlwZSQxKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwkMSh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAuZGF0YShbdHlwZSQxKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoIHRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZCk7XG4gICAgfVxuXG4gICAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIGVtcHR5JDEoc2VsZWN0aW9uMSkgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAmJiBzZWxlY3Rpb24xID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09IG51bGwgfHwgZW1wdHkkMShzZWxlY3Rpb24xKSA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICAgIHNlbGVjdGlvbiA9IGxvY2FsJDEodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgICAgfVxuXG4gICAgICBlbHNlIHtcbiAgICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgbnVsbClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgICAgcmV0dXJuIHRoYXQuX19icnVzaC5lbWl0dGVyIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIH1cblxuICAgIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGJydXNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcykgeyBpZiAoZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCBleHBvcnRzLmV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm4gbm9ldmVudCQyKCk7IH1cbiAgICAgIGVsc2UgaWYgKHRvdWNoZW5kaW5nKSByZXR1cm47XG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICB0eXBlID0gZXhwb3J0cy5ldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgICBtb2RlID0gKGV4cG9ydHMuZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGV4cG9ydHMuZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2FsJDEodGhhdCksXG4gICAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgbW92aW5nLFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYgZXhwb3J0cy5ldmVudC5zaGlmdEtleSxcbiAgICAgICAgICBsb2NrWCxcbiAgICAgICAgICBsb2NrWSxcbiAgICAgICAgICBwb2ludDAgPSBtb3VzZSh0aGF0KSxcbiAgICAgICAgICBwb2ludCA9IHBvaW50MCxcbiAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbXG4gICAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgICBbZTAgPSBkaW0gPT09IFkgPyBFIDogdzAsIHMwID0gZGltID09PSBYID8gUyA6IG4wXVxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XG4gICAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XG4gICAgICB9XG5cbiAgICAgIHcxID0gdzA7XG4gICAgICBuMSA9IG4wO1xuICAgICAgZTEgPSBlMDtcbiAgICAgIHMxID0gczA7XG5cbiAgICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGF0KVxuICAgICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG5cbiAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgZ3JvdXBcbiAgICAgICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldylcbiAgICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXG4gICAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgICAub24oXCJtb3VzZXVwLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcblxuICAgICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgICAgfVxuXG4gICAgICBub3Byb3BhZ2F0aW9uJDIoKTtcbiAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5zdGFydCgpO1xuXG4gICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IG1vdXNlKHRoYXQpO1xuICAgICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgICBlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludCA9IHBvaW50MTtcbiAgICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgICAgbm9ldmVudCQyKCk7XG4gICAgICAgIG1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICAgICAgdmFyIHQ7XG5cbiAgICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgICAgZHkgPSBwb2ludFsxXSAtIHBvaW50MFsxXTtcblxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgICAgY2FzZSBNT0RFX0RSQUc6IHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgICAgZWxzZSBpZiAoc2lnblkgPiAwKSBkeSA9IE1hdGgubWF4KE4gLSBzMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBNT0RFX0NFTlRFUjoge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuXG4gICAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbiQyKCk7XG4gICAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgICAgIGdyb3VwLm9uKFwidG91Y2htb3ZlLmJydXNoIHRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYWdFbmFibGUoZXhwb3J0cy5ldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICAgIGlmIChlbXB0eSQxKHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmVuZCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICAgIHN3aXRjaCAoZXhwb3J0cy5ldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSB8fCBtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2V2ZW50JDIoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICAgIHN3aXRjaCAoZXhwb3J0cy5ldmVudC5rZXlDb2RlKSB7XG4gICAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgICAgaWYgKHNoaWZ0aW5nKSB7XG4gICAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgICAgaWYgKGV4cG9ydHMuZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2V2ZW50JDIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgICAgc3RhdGUuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMChbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIGJydXNoKSA6IGV4dGVudDtcbiAgICB9O1xuXG4gICAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gICAgfTtcblxuICAgIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gICAgfTtcblxuICAgIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gYnJ1c2g7XG4gIH1cblxuICB2YXIgY29zID0gTWF0aC5jb3M7XG4gIHZhciBzaW4gPSBNYXRoLnNpbjtcbiAgdmFyIHBpJDMgPSBNYXRoLlBJO1xuICB2YXIgaGFsZlBpJDIgPSBwaSQzIC8gMjtcbiAgdmFyIHRhdSQzID0gcGkkMyAqIDI7XG4gIHZhciBtYXgkMSA9IE1hdGgubWF4O1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBjb21wYXJlKFxuICAgICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgICBiLnNvdXJjZS52YWx1ZSArIGIudGFyZ2V0LnZhbHVlXG4gICAgICApO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjaG9yZCgpIHtcbiAgICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgICBzb3J0R3JvdXBzID0gbnVsbCxcbiAgICAgICAgc29ydFN1Ymdyb3VwcyA9IG51bGwsXG4gICAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gY2hvcmQobWF0cml4KSB7XG4gICAgICB2YXIgbiA9IG1hdHJpeC5sZW5ndGgsXG4gICAgICAgICAgZ3JvdXBTdW1zID0gW10sXG4gICAgICAgICAgZ3JvdXBJbmRleCA9IHJhbmdlKG4pLFxuICAgICAgICAgIHN1Ymdyb3VwSW5kZXggPSBbXSxcbiAgICAgICAgICBjaG9yZHMgPSBbXSxcbiAgICAgICAgICBncm91cHMgPSBjaG9yZHMuZ3JvdXBzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShuICogbiksXG4gICAgICAgICAgayxcbiAgICAgICAgICB4LFxuICAgICAgICAgIHgwLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGksXG4gICAgICAgICAgajtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxuICAgICAgayA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgeCA9IDAsIGogPSAtMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgICAgfVxuICAgICAgICBncm91cFN1bXMucHVzaCh4KTtcbiAgICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHJhbmdlKG4pKTtcbiAgICAgICAgayArPSB4O1xuICAgICAgfVxuXG4gICAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgICAgaWYgKHNvcnRHcm91cHMpIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTb3J0IHN1Ymdyb3Vwc+KAplxuICAgICAgaWYgKHNvcnRTdWJncm91cHMpIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRTdWJncm91cHMobWF0cml4W2ldW2FdLCBtYXRyaXhbaV1bYl0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb252ZXJ0IHRoZSBzdW0gdG8gc2NhbGluZyBmYWN0b3IgZm9yIFswLCAycGldLlxuICAgICAgLy8gVE9ETyBBbGxvdyBzdGFydCBhbmQgZW5kIGFuZ2xlIHRvIGJlIHNwZWNpZmllZD9cbiAgICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICAgIGsgPSBtYXgkMSgwLCB0YXUkMyAtIHBhZEFuZ2xlICogbikgLyBrO1xuICAgICAgZHggPSBrID8gcGFkQW5nbGUgOiB0YXUkMyAvIG47XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgICAgLy8gTm90ZTogT3BlcmEgaGFzIGEgYnVnIHJlb3JkZXJpbmcgb2JqZWN0IGxpdGVyYWwgcHJvcGVydGllcyFcbiAgICAgIHggPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHgwID0geCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHZhciBkaSA9IGdyb3VwSW5kZXhbaV0sXG4gICAgICAgICAgICAgIGRqID0gc3ViZ3JvdXBJbmRleFtkaV1bal0sXG4gICAgICAgICAgICAgIHYgPSBtYXRyaXhbZGldW2RqXSxcbiAgICAgICAgICAgICAgYTAgPSB4LFxuICAgICAgICAgICAgICBhMSA9IHggKz0gdiAqIGs7XG4gICAgICAgICAgc3ViZ3JvdXBzW2RqICogbiArIGRpXSA9IHtcbiAgICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICAgIHN1YmluZGV4OiBkaixcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICAgICAgdmFsdWU6IHZcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGdyb3Vwc1tkaV0gPSB7XG4gICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IHgwLFxuICAgICAgICAgIGVuZEFuZ2xlOiB4LFxuICAgICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICAgIH07XG4gICAgICAgIHggKz0gZHg7XG4gICAgICB9XG5cbiAgICAgIC8vIEdlbmVyYXRlIGNob3JkcyBmb3IgZWFjaCAobm9uLWVtcHR5KSBzdWJncm91cC1zdWJncm91cCBsaW5rLlxuICAgICAgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBqID0gaSAtIDE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHN1Ymdyb3Vwc1tqICogbiArIGldLFxuICAgICAgICAgICAgICB0YXJnZXQgPSBzdWJncm91cHNbaSAqIG4gKyBqXTtcbiAgICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgPyB7c291cmNlOiB0YXJnZXQsIHRhcmdldDogc291cmNlfVxuICAgICAgICAgICAgICAgIDoge3NvdXJjZTogc291cmNlLCB0YXJnZXQ6IHRhcmdldH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc29ydENob3JkcyA/IGNob3Jkcy5zb3J0KHNvcnRDaG9yZHMpIDogY2hvcmRzO1xuICAgIH1cblxuICAgIGNob3JkLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSBtYXgkMSgwLCBfKSwgY2hvcmQpIDogcGFkQW5nbGU7XG4gICAgfTtcblxuICAgIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0R3JvdXBzID0gXywgY2hvcmQpIDogc29ydEdyb3VwcztcbiAgICB9O1xuXG4gICAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRTdWJncm91cHMgPSBfLCBjaG9yZCkgOiBzb3J0U3ViZ3JvdXBzO1xuICAgIH07XG5cbiAgICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gc29ydENob3JkcyA9IG51bGwgOiAoc29ydENob3JkcyA9IGNvbXBhcmVWYWx1ZShfKSkuXyA9IF8sIGNob3JkKSA6IHNvcnRDaG9yZHMgJiYgc29ydENob3Jkcy5fO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2hvcmQ7XG4gIH1cblxuICB2YXIgc2xpY2UkNSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBjb25zdGFudCQxMSh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTb3VyY2UoZCkge1xuICAgIHJldHVybiBkLnNvdXJjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUYXJnZXQoZCkge1xuICAgIHJldHVybiBkLnRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRSYWRpdXMkMShkKSB7XG4gICAgcmV0dXJuIGQucmFkaXVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN0YXJ0QW5nbGUoZCkge1xuICAgIHJldHVybiBkLnN0YXJ0QW5nbGU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RW5kQW5nbGUoZCkge1xuICAgIHJldHVybiBkLmVuZEFuZ2xlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmliYm9uKCkge1xuICAgIHZhciBzb3VyY2UgPSBkZWZhdWx0U291cmNlLFxuICAgICAgICB0YXJnZXQgPSBkZWZhdWx0VGFyZ2V0LFxuICAgICAgICByYWRpdXMgPSBkZWZhdWx0UmFkaXVzJDEsXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBkZWZhdWx0U3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUgPSBkZWZhdWx0RW5kQW5nbGUsXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gcmliYm9uKCkge1xuICAgICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgICBhcmd2ID0gc2xpY2UkNS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgcyA9IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgICB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICAgIHNyID0gK3JhZGl1cy5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSxcbiAgICAgICAgICBzYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDIsXG4gICAgICAgICAgc2ExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMixcbiAgICAgICAgICBzeDAgPSBzciAqIGNvcyhzYTApLFxuICAgICAgICAgIHN5MCA9IHNyICogc2luKHNhMCksXG4gICAgICAgICAgdHIgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLFxuICAgICAgICAgIHRhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMixcbiAgICAgICAgICB0YTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQyO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAgIGNvbnRleHQubW92ZVRvKHN4MCwgc3kwKTtcbiAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHNyLCBzYTAsIHNhMSk7XG4gICAgICBpZiAoc2EwICE9PSB0YTAgfHwgc2ExICE9PSB0YTEpIHsgLy8gVE9ETyBzciAhPT0gdHI/XG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCB0ciAqIGNvcyh0YTApLCB0ciAqIHNpbih0YTApKTtcbiAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgdHIsIHRhMCwgdGExKTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCBzeDAsIHN5MCk7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICByaWJib24ucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMSgrXyksIHJpYmJvbikgOiByYWRpdXM7XG4gICAgfTtcblxuICAgIHJpYmJvbi5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTEoK18pLCByaWJib24pIDogc3RhcnRBbmdsZTtcbiAgICB9O1xuXG4gICAgcmliYm9uLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDExKCtfKSwgcmliYm9uKSA6IGVuZEFuZ2xlO1xuICAgIH07XG5cbiAgICByaWJib24uc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlID0gXywgcmliYm9uKSA6IHNvdXJjZTtcbiAgICB9O1xuXG4gICAgcmliYm9uLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIHJpYmJvbikgOiB0YXJnZXQ7XG4gICAgfTtcblxuICAgIHJpYmJvbi5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIHJpYmJvbikgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gcmliYm9uO1xuICB9XG5cbiAgLy8gQWRkcyBmbG9hdGluZyBwb2ludCBudW1iZXJzIHdpdGggdHdpY2UgdGhlIG5vcm1hbCBwcmVjaXNpb24uXG4gIC8vIFJlZmVyZW5jZTogSi4gUi4gU2hld2NodWssIEFkYXB0aXZlIFByZWNpc2lvbiBGbG9hdGluZy1Qb2ludCBBcml0aG1ldGljIGFuZFxuICAvLyBGYXN0IFJvYnVzdCBHZW9tZXRyaWMgUHJlZGljYXRlcywgRGlzY3JldGUgJiBDb21wdXRhdGlvbmFsIEdlb21ldHJ5IDE4KDMpXG4gIC8vIDMwNeKAkzM2MyAoMTk5NykuXG4gIC8vIENvZGUgYWRhcHRlZCBmcm9tIEdlb2dyYXBoaWNMaWIgYnkgQ2hhcmxlcyBGLiBGLiBLYXJuZXksXG4gIC8vIGh0dHA6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLm5ldC9cblxuICBmdW5jdGlvbiBhZGRlcigpIHtcbiAgICByZXR1cm4gbmV3IEFkZGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gQWRkZXIoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgQWRkZXIucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnMgPSAvLyByb3VuZGVkIHZhbHVlXG4gICAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICAgIH0sXG4gICAgYWRkOiBmdW5jdGlvbih5KSB7XG4gICAgICBhZGQkMSh0ZW1wLCB5LCB0aGlzLnQpO1xuICAgICAgYWRkJDEodGhpcywgdGVtcC5zLCB0aGlzLnMpO1xuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IHRlbXAudDtcbiAgICAgIGVsc2UgdGhpcy5zID0gdGVtcC50O1xuICAgIH0sXG4gICAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdGVtcCA9IG5ldyBBZGRlcjtcblxuICBmdW5jdGlvbiBhZGQkMShhZGRlciwgYSwgYikge1xuICAgIHZhciB4ID0gYWRkZXIucyA9IGEgKyBiLFxuICAgICAgICBidiA9IHggLSBhLFxuICAgICAgICBhdiA9IHggLSBidjtcbiAgICBhZGRlci50ID0gKGEgLSBhdikgKyAoYiAtIGJ2KTtcbiAgfVxuXG4gIHZhciBlcHNpbG9uJDQgPSAxZS02O1xuICB2YXIgZXBzaWxvbjIkMiA9IDFlLTEyO1xuICB2YXIgcGkkNCA9IE1hdGguUEk7XG4gIHZhciBoYWxmUGkkMyA9IHBpJDQgLyAyO1xuICB2YXIgcXVhcnRlclBpID0gcGkkNCAvIDQ7XG4gIHZhciB0YXUkNCA9IHBpJDQgKiAyO1xuXG4gIHZhciBkZWdyZWVzJDEgPSAxODAgLyBwaSQ0O1xuICB2YXIgcmFkaWFucyA9IHBpJDQgLyAxODA7XG5cbiAgdmFyIGFicyA9IE1hdGguYWJzO1xuICB2YXIgYXRhbiA9IE1hdGguYXRhbjtcbiAgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbiAgdmFyIGNvcyQxID0gTWF0aC5jb3M7XG4gIHZhciBjZWlsID0gTWF0aC5jZWlsO1xuICB2YXIgZXhwID0gTWF0aC5leHA7XG4gIHZhciBsb2ckMSA9IE1hdGgubG9nO1xuICB2YXIgcG93JDEgPSBNYXRoLnBvdztcbiAgdmFyIHNpbiQxID0gTWF0aC5zaW47XG4gIHZhciBzaWduJDEgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24oeCkgeyByZXR1cm4geCA+IDAgPyAxIDogeCA8IDAgPyAtMSA6IDA7IH07XG4gIHZhciBzcXJ0JDEgPSBNYXRoLnNxcnQ7XG4gIHZhciB0YW4gPSBNYXRoLnRhbjtcblxuICBmdW5jdGlvbiBhY29zKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkkNCA6IE1hdGguYWNvcyh4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzaW4kMSh4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gaGFsZlBpJDMgOiB4IDwgLTEgPyAtaGFsZlBpJDMgOiBNYXRoLmFzaW4oeCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXZlcnNpbih4KSB7XG4gICAgcmV0dXJuICh4ID0gc2luJDEoeCAvIDIpKSAqIHg7XG4gIH1cblxuICBmdW5jdGlvbiBub29wJDIoKSB7fVxuXG4gIGZ1bmN0aW9uIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBzdHJlYW0pIHtcbiAgICBpZiAoZ2VvbWV0cnkgJiYgc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gICAgRmVhdHVyZTogZnVuY3Rpb24oZmVhdHVyZSwgc3RyZWFtKSB7XG4gICAgICBzdHJlYW1HZW9tZXRyeShmZWF0dXJlLmdlb21ldHJ5LCBzdHJlYW0pO1xuICAgIH0sXG4gICAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0cmVhbUdlb21ldHJ5VHlwZSA9IHtcbiAgICBTcGhlcmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICBzdHJlYW0uc3BoZXJlKCk7XG4gICAgfSxcbiAgICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICAgIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgICB9LFxuICAgIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICAgIH0sXG4gICAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIHN0cmVhbUxpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0sIDApO1xuICAgIH0sXG4gICAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcbiAgICB9LFxuICAgIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSk7XG4gICAgfSxcbiAgICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBzdHJlYW0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzLCBzdHJlYW0sIGNsb3NlZCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG4gICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCBjb29yZGluYXRlWzJdKTtcbiAgICBzdHJlYW0ubGluZUVuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgc3RyZWFtKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMSk7XG4gICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlb1N0cmVhbShvYmplY3QsIHN0cmVhbSkge1xuICAgIGlmIChvYmplY3QgJiYgc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICAgIHN0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgc3RyZWFtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBzdHJlYW0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhcmVhUmluZ1N1bSA9IGFkZGVyKCk7XG5cbiAgdmFyIGFyZWFTdW0gPSBhZGRlcigpO1xuICB2YXIgbGFtYmRhMDA7XG4gIHZhciBwaGkwMDtcbiAgdmFyIGxhbWJkYTA7XG4gIHZhciBjb3NQaGkwO1xuICB2YXIgc2luUGhpMDtcbiAgdmFyIGFyZWFTdHJlYW0gPSB7XG4gICAgcG9pbnQ6IG5vb3AkMixcbiAgICBsaW5lU3RhcnQ6IG5vb3AkMixcbiAgICBsaW5lRW5kOiBub29wJDIsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGFyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgICBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhUmluZ0VuZDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZWFSaW5nID0gK2FyZWFSaW5nU3VtO1xuICAgICAgYXJlYVN1bS5hZGQoYXJlYVJpbmcgPCAwID8gdGF1JDQgKyBhcmVhUmluZyA6IGFyZWFSaW5nKTtcbiAgICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5saW5lRW5kID0gdGhpcy5wb2ludCA9IG5vb3AkMjtcbiAgICB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICBhcmVhU3VtLmFkZCh0YXUkNCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gICAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gICAgYXJlYVBvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICAgIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gICAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zJDEocGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaSksIHNpblBoaTAgPSBzaW4kMShwaGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGk7IC8vIGhhbGYgdGhlIGFuZ3VsYXIgZGlzdGFuY2UgZnJvbSBzb3V0aCBwb2xlXG5cbiAgICAvLyBTcGhlcmljYWwgZXhjZXNzIEUgZm9yIGEgc3BoZXJpY2FsIHRyaWFuZ2xlIHdpdGggdmVydGljZXM6IHNvdXRoIHBvbGUsXG4gICAgLy8gcHJldmlvdXMgcG9pbnQsIGN1cnJlbnQgcG9pbnQuICBVc2VzIGEgZm9ybXVsYSBkZXJpdmVkIGZyb20gQ2Fnbm9saeKAmXNcbiAgICAvLyB0aGVvcmVtLiAgU2VlIFRvZGh1bnRlciwgU3BoZXJpY2FsIFRyaWcuICgxODcxKSwgU2VjLiAxMDMsIEVxLiAoMikuXG4gICAgdmFyIGRMYW1iZGEgPSBsYW1iZGEgLSBsYW1iZGEwLFxuICAgICAgICBzZExhbWJkYSA9IGRMYW1iZGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgICAgYWRMYW1iZGEgPSBzZExhbWJkYSAqIGRMYW1iZGEsXG4gICAgICAgIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgIHNpblBoaSA9IHNpbiQxKHBoaSksXG4gICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpLFxuICAgICAgICB1ID0gY29zUGhpMCAqIGNvc1BoaSArIGsgKiBjb3MkMShhZExhbWJkYSksXG4gICAgICAgIHYgPSBrICogc2RMYW1iZGEgKiBzaW4kMShhZExhbWJkYSk7XG4gICAgYXJlYVJpbmdTdW0uYWRkKGF0YW4yKHYsIHUpKTtcblxuICAgIC8vIEFkdmFuY2UgdGhlIHByZXZpb3VzIHBvaW50cy5cbiAgICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zUGhpLCBzaW5QaGkwID0gc2luUGhpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYSQyKG9iamVjdCkge1xuICAgIGFyZWFTdW0ucmVzZXQoKTtcbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBhcmVhU3RyZWFtKTtcbiAgICByZXR1cm4gYXJlYVN1bSAqIDI7XG4gIH1cblxuICBmdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gICAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4kMShjYXJ0ZXNpYW5bMl0pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgICB2YXIgbGFtYmRhID0gc3BoZXJpY2FsWzBdLCBwaGkgPSBzcGhlcmljYWxbMV0sIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gICAgcmV0dXJuIFtjb3NQaGkgKiBjb3MkMShsYW1iZGEpLCBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLCBzaW4kMShwaGkpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbkRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xuICB9XG5cbiAgLy8gVE9ETyByZXR1cm4gYVxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5BZGRJblBsYWNlKGEsIGIpIHtcbiAgICBhWzBdICs9IGJbMF0sIGFbMV0gKz0gYlsxXSwgYVsyXSArPSBiWzJdO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FydGVzaWFuU2NhbGUodmVjdG9yLCBrKSB7XG4gICAgcmV0dXJuIFt2ZWN0b3JbMF0gKiBrLCB2ZWN0b3JbMV0gKiBrLCB2ZWN0b3JbMl0gKiBrXTtcbiAgfVxuXG4gIC8vIFRPRE8gcmV0dXJuIGRcbiAgZnVuY3Rpb24gY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShkKSB7XG4gICAgdmFyIGwgPSBzcXJ0JDEoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSArIGRbMl0gKiBkWzJdKTtcbiAgICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xuICB9XG5cbnZhciAgIGxhbWJkYTAkMTtcbiAgdmFyIHBoaTA7XG4gIHZhciBsYW1iZGExO1xuICB2YXIgcGhpMTtcbiAgdmFyIGxhbWJkYTI7XG52YXIgICBsYW1iZGEwMCQxO1xudmFyICAgcGhpMDAkMTtcbiAgdmFyIHAwO1xuICB2YXIgZGVsdGFTdW0gPSBhZGRlcigpO1xuICB2YXIgcmFuZ2VzO1xudmFyICAgcmFuZ2UkMTtcbiAgdmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgICBwb2ludDogYm91bmRzUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBib3VuZHNMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUmluZ1BvaW50O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzUmluZ0VuZDtcbiAgICAgIGRlbHRhU3VtLnJlc2V0KCk7XG4gICAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1BvaW50O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc0xpbmVTdGFydDtcbiAgICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICAgIGlmIChhcmVhUmluZ1N1bSA8IDApIGxhbWJkYTAkMSA9IC0obGFtYmRhMSA9IDE4MCksIHBoaTAgPSAtKHBoaTEgPSA5MCk7XG4gICAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24kNCkgcGhpMSA9IDkwO1xuICAgICAgZWxzZSBpZiAoZGVsdGFTdW0gPCAtZXBzaWxvbiQ0KSBwaGkwID0gLTkwO1xuICAgICAgcmFuZ2UkMVswXSA9IGxhbWJkYTAkMSwgcmFuZ2UkMVsxXSA9IGxhbWJkYTE7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGJvdW5kc1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgcmFuZ2VzLnB1c2gocmFuZ2UkMSA9IFtsYW1iZGEwJDEgPSBsYW1iZGEsIGxhbWJkYTEgPSBsYW1iZGFdKTtcbiAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gICAgaWYgKHAwKSB7XG4gICAgICB2YXIgbm9ybWFsID0gY2FydGVzaWFuQ3Jvc3MocDAsIHApLFxuICAgICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgICBpbmZsZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcbiAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoaW5mbGVjdGlvbik7XG4gICAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgICAgdmFyIGRlbHRhID0gbGFtYmRhIC0gbGFtYmRhMixcbiAgICAgICAgICBzaWduID0gZGVsdGEgPiAwID8gMSA6IC0xLFxuICAgICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyQxICogc2lnbixcbiAgICAgICAgICBwaGlpLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgICAgcGhpaSA9IGluZmxlY3Rpb25bMV0gKiBkZWdyZWVzJDE7XG4gICAgICAgIGlmIChwaGlpID4gcGhpMSkgcGhpMSA9IHBoaWk7XG4gICAgICB9IGVsc2UgaWYgKGxhbWJkYWkgPSAobGFtYmRhaSArIDM2MCkgJSAzNjAgLSAxODAsIGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXMkMTtcbiAgICAgICAgaWYgKHBoaWkgPCBwaGkwKSBwaGkwID0gcGhpaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICAgICAgICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbiAgICAgIH1cbiAgICAgIGlmIChhbnRpbWVyaWRpYW4pIHtcbiAgICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTIpIHtcbiAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCQxLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhLCBsYW1iZGExKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTAkMSA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCQxKSB7XG4gICAgICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTAkMSkgbGFtYmRhMCQxID0gbGFtYmRhO1xuICAgICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGExKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGEyKSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCQxLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwJDEsIGxhbWJkYTEpKSBsYW1iZGEwJDEgPSBsYW1iZGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kc1BvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG4gICAgcDAgPSBwLCBsYW1iZGEyID0gbGFtYmRhO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzTGluZVN0YXJ0KCkge1xuICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5kc0xpbmVFbmQoKSB7XG4gICAgcmFuZ2UkMVswXSA9IGxhbWJkYTAkMSwgcmFuZ2UkMVsxXSA9IGxhbWJkYTE7XG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gICAgcDAgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgaWYgKHAwKSB7XG4gICAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyO1xuICAgICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhMDAkMSA9IGxhbWJkYSwgcGhpMDAkMSA9IHBoaTtcbiAgICB9XG4gICAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgbGluZVBvaW50KGxhbWJkYSwgcGhpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgICBib3VuZHNSaW5nUG9pbnQobGFtYmRhMDAkMSwgcGhpMDAkMSk7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kKCk7XG4gICAgaWYgKGFicyhkZWx0YVN1bSkgPiBlcHNpbG9uJDQpIGxhbWJkYTAkMSA9IC0obGFtYmRhMSA9IDE4MCk7XG4gICAgcmFuZ2UkMVswXSA9IGxhbWJkYTAkMSwgcmFuZ2UkMVsxXSA9IGxhbWJkYTE7XG4gICAgcDAgPSBudWxsO1xuICB9XG5cbiAgLy8gRmluZHMgdGhlIGxlZnQtcmlnaHQgZGlzdGFuY2UgYmV0d2VlbiB0d28gbG9uZ2l0dWRlcy5cbiAgLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbiAgLy8gdGhlIGRpc3RhbmNlIGJldHdlZW4gwrExODDCsCB0byBiZSAzNjDCsC5cbiAgZnVuY3Rpb24gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkge1xuICAgIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhbmdlQ29tcGFyZShhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gcmFuZ2VDb250YWlucyhyYW5nZSwgeCkge1xuICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuZHMoZmVhdHVyZSkge1xuICAgIHZhciBpLCBuLCBhLCBiLCBtZXJnZWQsIGRlbHRhTWF4LCBkZWx0YTtcblxuICAgIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwJDEgPSBwaGkwID0gSW5maW5pdHkpO1xuICAgIHJhbmdlcyA9IFtdO1xuICAgIGdlb1N0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gICAgLy8gRmlyc3QsIHNvcnQgcmFuZ2VzIGJ5IHRoZWlyIG1pbmltdW0gbG9uZ2l0dWRlcy5cbiAgICBpZiAobiA9IHJhbmdlcy5sZW5ndGgpIHtcbiAgICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAgIC8vIFRoZW4sIG1lcmdlIGFueSByYW5nZXMgdGhhdCBvdmVybGFwLlxuICAgICAgZm9yIChpID0gMSwgYSA9IHJhbmdlc1swXSwgbWVyZ2VkID0gW2FdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICAgIGlmIChyYW5nZUNvbnRhaW5zKGEsIGJbMF0pIHx8IHJhbmdlQ29udGFpbnMoYSwgYlsxXSkpIHtcbiAgICAgICAgICBpZiAoYW5nbGUoYVswXSwgYlsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVsxXSA9IGJbMV07XG4gICAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lcmdlZC5wdXNoKGEgPSBiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGaW5hbGx5LCBmaW5kIHRoZSBsYXJnZXN0IGdhcCBiZXR3ZWVuIHRoZSBtZXJnZWQgcmFuZ2VzLlxuICAgICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgICAgZm9yIChkZWx0YU1heCA9IC1JbmZpbml0eSwgbiA9IG1lcmdlZC5sZW5ndGggLSAxLCBpID0gMCwgYSA9IG1lcmdlZFtuXTsgaSA8PSBuOyBhID0gYiwgKytpKSB7XG4gICAgICAgIGIgPSBtZXJnZWRbaV07XG4gICAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCQxID0gYlswXSwgbGFtYmRhMSA9IGFbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmFuZ2VzID0gcmFuZ2UkMSA9IG51bGw7XG5cbiAgICByZXR1cm4gbGFtYmRhMCQxID09PSBJbmZpbml0eSB8fCBwaGkwID09PSBJbmZpbml0eVxuICAgICAgICA/IFtbTmFOLCBOYU5dLCBbTmFOLCBOYU5dXVxuICAgICAgICA6IFtbbGFtYmRhMCQxLCBwaGkwXSwgW2xhbWJkYTEsIHBoaTFdXTtcbiAgfVxuXG4gIHZhciBXMDtcbiAgdmFyIFcxO1xuICB2YXIgWDA7XG4gIHZhciBZMDtcbiAgdmFyIFowO1xuICB2YXIgWDE7XG4gIHZhciBZMTtcbiAgdmFyIFoxO1xuICB2YXIgWDI7XG4gIHZhciBZMjtcbiAgdmFyIFoyO1xudmFyICAgbGFtYmRhMDAkMjtcbnZhciAgIHBoaTAwJDI7XG4gIHZhciB4MDtcbiAgdmFyIHkwO1xuICB2YXIgejA7XG4gIC8vIHByZXZpb3VzIHBvaW50XG5cbiAgdmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICAgIHNwaGVyZTogbm9vcCQyLFxuICAgIHBvaW50OiBjZW50cm9pZFBvaW50LFxuICAgIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0O1xuICAgICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgICB9XG4gIH07XG5cbiAgLy8gQXJpdGhtZXRpYyBtZWFuIG9mIENhcnRlc2lhbiB2ZWN0b3JzLlxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oY29zUGhpICogY29zJDEobGFtYmRhKSwgY29zUGhpICogc2luJDEobGFtYmRhKSwgc2luJDEocGhpKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgsIHksIHopIHtcbiAgICArK1cwO1xuICAgIFgwICs9ICh4IC0gWDApIC8gVzA7XG4gICAgWTAgKz0gKHkgLSBZMCkgLyBXMDtcbiAgICBaMCArPSAoeiAtIFowKSAvIFcwO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludEZpcnN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKTtcbiAgICB4MCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSk7XG4gICAgeTAgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpO1xuICAgIHowID0gc2luJDEocGhpKTtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50O1xuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgICAgeCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksXG4gICAgICAgIHkgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLFxuICAgICAgICB6ID0gc2luJDEocGhpKSxcbiAgICAgICAgdyA9IGF0YW4yKHNxcnQkMSgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICAgIFcxICs9IHc7XG4gICAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gICAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG4gIH1cblxuICAvLyBTZWUgSi4gRS4gQnJvY2ssIFRoZSBJbmVydGlhIFRlbnNvciBmb3IgYSBTcGhlcmljYWwgVHJpYW5nbGUsXG4gIC8vIEouIEFwcGxpZWQgTWVjaGFuaWNzIDQyLCAyMzkgKDE5NzUpLlxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50Rmlyc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gICAgY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhMDAkMiwgcGhpMDAkMik7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYTAwJDIgPSBsYW1iZGEsIHBoaTAwJDIgPSBwaGk7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnQ7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gICAgeDAgPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpO1xuICAgIHkwID0gY29zUGhpICogc2luJDEobGFtYmRhKTtcbiAgICB6MCA9IHNpbiQxKHBoaSk7XG4gICAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICB4ID0gY29zUGhpICogY29zJDEobGFtYmRhKSxcbiAgICAgICAgeSA9IGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksXG4gICAgICAgIHogPSBzaW4kMShwaGkpLFxuICAgICAgICBjeCA9IHkwICogeiAtIHowICogeSxcbiAgICAgICAgY3kgPSB6MCAqIHggLSB4MCAqIHosXG4gICAgICAgIGN6ID0geDAgKiB5IC0geTAgKiB4LFxuICAgICAgICBtID0gc3FydCQxKGN4ICogY3ggKyBjeSAqIGN5ICsgY3ogKiBjeiksXG4gICAgICAgIHUgPSB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHosXG4gICAgICAgIHYgPSBtICYmIC1hY29zKHUpIC8gbSwgLy8gYXJlYSB3ZWlnaHRcbiAgICAgICAgdyA9IGF0YW4yKG0sIHUpOyAvLyBsaW5lIHdlaWdodFxuICAgIFgyICs9IHYgKiBjeDtcbiAgICBZMiArPSB2ICogY3k7XG4gICAgWjIgKz0gdiAqIGN6O1xuICAgIFcxICs9IHc7XG4gICAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gICAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkJDEob2JqZWN0KSB7XG4gICAgVzAgPSBXMSA9XG4gICAgWDAgPSBZMCA9IFowID1cbiAgICBYMSA9IFkxID0gWjEgPVxuICAgIFgyID0gWTIgPSBaMiA9IDA7XG4gICAgZ2VvU3RyZWFtKG9iamVjdCwgY2VudHJvaWRTdHJlYW0pO1xuXG4gICAgdmFyIHggPSBYMixcbiAgICAgICAgeSA9IFkyLFxuICAgICAgICB6ID0gWjIsXG4gICAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgICAvLyBJZiB0aGUgYXJlYS13ZWlnaHRlZCBjY2VudHJvaWQgaXMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbGVuZ3RoLXdlaWdodGVkIGNjZW50cm9pZC5cbiAgICBpZiAobSA8IGVwc2lsb24yJDIpIHtcbiAgICAgIHggPSBYMSwgeSA9IFkxLCB6ID0gWjE7XG4gICAgICAvLyBJZiB0aGUgZmVhdHVyZSBoYXMgemVybyBsZW5ndGgsIGZhbGwgYmFjayB0byBhcml0aG1ldGljIG1lYW4gb2YgcG9pbnQgdmVjdG9ycy5cbiAgICAgIGlmIChXMSA8IGVwc2lsb24kNCkgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcbiAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgICAvLyBJZiB0aGUgZmVhdHVyZSBzdGlsbCBoYXMgYW4gdW5kZWZpbmVkIGNjZW50cm9pZCwgdGhlbiByZXR1cm4uXG4gICAgICBpZiAobSA8IGVwc2lsb24yJDIpIHJldHVybiBbTmFOLCBOYU5dO1xuICAgIH1cblxuICAgIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzJDEsIGFzaW4kMSh6IC8gc3FydCQxKG0pKSAqIGRlZ3JlZXMkMV07XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdGFudCQxMih4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBvc2UoYSwgYikge1xuXG4gICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gICAgfVxuXG4gICAgaWYgKGEuaW52ZXJ0ICYmIGIuaW52ZXJ0KSBjb21wb3NlLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHJldHVybiB4ID0gYi5pbnZlcnQoeCwgeSksIHggJiYgYS5pbnZlcnQoeFswXSwgeFsxXSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjb21wb3NlO1xuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRpb25JZGVudGl0eShsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhID4gcGkkNCA/IGxhbWJkYSAtIHRhdSQ0IDogbGFtYmRhIDwgLXBpJDQgPyBsYW1iZGEgKyB0YXUkNCA6IGxhbWJkYSwgcGhpXTtcbiAgfVxuXG4gIHJvdGF0aW9uSWRlbnRpdHkuaW52ZXJ0ID0gcm90YXRpb25JZGVudGl0eTtcblxuICBmdW5jdGlvbiByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICAgIHJldHVybiAoZGVsdGFMYW1iZGEgJT0gdGF1JDQpID8gKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpXG4gICAgICA6IHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSlcbiAgICAgIDogKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKVxuICAgICAgOiByb3RhdGlvbklkZW50aXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgcmV0dXJuIGxhbWJkYSArPSBkZWx0YUxhbWJkYSwgW2xhbWJkYSA+IHBpJDQgPyBsYW1iZGEgLSB0YXUkNCA6IGxhbWJkYSA8IC1waSQ0ID8gbGFtYmRhICsgdGF1JDQgOiBsYW1iZGEsIHBoaV07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gICAgdmFyIHJvdGF0aW9uID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKTtcbiAgICByb3RhdGlvbi5pbnZlcnQgPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoLWRlbHRhTGFtYmRhKTtcbiAgICByZXR1cm4gcm90YXRpb247XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gICAgdmFyIGNvc0RlbHRhUGhpID0gY29zJDEoZGVsdGFQaGkpLFxuICAgICAgICBzaW5EZWx0YVBoaSA9IHNpbiQxKGRlbHRhUGhpKSxcbiAgICAgICAgY29zRGVsdGFHYW1tYSA9IGNvcyQxKGRlbHRhR2FtbWEpLFxuICAgICAgICBzaW5EZWx0YUdhbW1hID0gc2luJDEoZGVsdGFHYW1tYSk7XG5cbiAgICBmdW5jdGlvbiByb3RhdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgICAgeCA9IGNvcyQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeSA9IHNpbiQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgICAgayA9IHogKiBjb3NEZWx0YVBoaSArIHggKiBzaW5EZWx0YVBoaTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXG4gICAgICAgIGFzaW4kMShrICogY29zRGVsdGFHYW1tYSArIHkgKiBzaW5EZWx0YUdhbW1hKVxuICAgICAgXTtcbiAgICB9XG5cbiAgICByb3RhdGlvbi5pbnZlcnQgPSBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgICAgeCA9IGNvcyQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeSA9IHNpbiQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgICAgayA9IHogKiBjb3NEZWx0YUdhbW1hIC0geSAqIHNpbkRlbHRhR2FtbWE7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSArIHogKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgKyBrICogc2luRGVsdGFQaGkpLFxuICAgICAgICBhc2luJDEoayAqIGNvc0RlbHRhUGhpIC0geCAqIHNpbkRlbHRhUGhpKVxuICAgICAgXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJvdGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRpb24ocm90YXRlKSB7XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucyhyb3RhdGVbMF0gKiByYWRpYW5zLCByb3RhdGVbMV0gKiByYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIHJhZGlhbnMgOiAwKTtcblxuICAgIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXM7XG4gICAgfVxuXG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXM7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3J3YXJkO1xuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbiAgZnVuY3Rpb24gY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCB0MCwgdDEpIHtcbiAgICBpZiAoIWRlbHRhKSByZXR1cm47XG4gICAgdmFyIGNvc1JhZGl1cyA9IGNvcyQxKHJhZGl1cyksXG4gICAgICAgIHNpblJhZGl1cyA9IHNpbiQxKHJhZGl1cyksXG4gICAgICAgIHN0ZXAgPSBkaXJlY3Rpb24gKiBkZWx0YTtcbiAgICBpZiAodDAgPT0gbnVsbCkge1xuICAgICAgdDAgPSByYWRpdXMgKyBkaXJlY3Rpb24gKiB0YXUkNDtcbiAgICAgIHQxID0gcmFkaXVzIC0gc3RlcCAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQwID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDApO1xuICAgICAgdDEgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MSk7XG4gICAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXUkNDtcbiAgICB9XG4gICAgZm9yICh2YXIgcG9pbnQsIHQgPSB0MDsgZGlyZWN0aW9uID4gMCA/IHQgPiB0MSA6IHQgPCB0MTsgdCAtPSBzdGVwKSB7XG4gICAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zJDEodCksIC1zaW5SYWRpdXMgKiBzaW4kMSh0KV0pO1xuICAgICAgc3RyZWFtLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgc2lnbmVkIGFuZ2xlIG9mIGEgY2FydGVzaWFuIHBvaW50IHJlbGF0aXZlIHRvIFtjb3NSYWRpdXMsIDAsIDBdLlxuICBmdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xuICAgIHBvaW50ID0gY2FydGVzaWFuKHBvaW50KSwgcG9pbnRbMF0gLT0gY29zUmFkaXVzO1xuICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UocG9pbnQpO1xuICAgIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XG4gICAgcmV0dXJuICgoLXBvaW50WzJdIDwgMCA/IC1yYWRpdXMgOiByYWRpdXMpICsgdGF1JDQgLSBlcHNpbG9uJDQpICUgdGF1JDQ7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGUkMSgpIHtcbiAgICB2YXIgY2VudGVyID0gY29uc3RhbnQkMTIoWzAsIDBdKSxcbiAgICAgICAgcmFkaXVzID0gY29uc3RhbnQkMTIoOTApLFxuICAgICAgICBwcmVjaXNpb24gPSBjb25zdGFudCQxMig2KSxcbiAgICAgICAgcmluZyxcbiAgICAgICAgcm90YXRlLFxuICAgICAgICBzdHJlYW0gPSB7cG9pbnQ6IHBvaW50fTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHJpbmcucHVzaCh4ID0gcm90YXRlKHgsIHkpKTtcbiAgICAgIHhbMF0gKj0gZGVncmVlcyQxLCB4WzFdICo9IGRlZ3JlZXMkMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaXJjbGUoKSB7XG4gICAgICB2YXIgYyA9IGNlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHIgPSByYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnMsXG4gICAgICAgICAgcCA9IHByZWNpc2lvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucztcbiAgICAgIHJpbmcgPSBbXTtcbiAgICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoLWNbMF0gKiByYWRpYW5zLCAtY1sxXSAqIHJhZGlhbnMsIDApLmludmVydDtcbiAgICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHIsIHAsIDEpO1xuICAgICAgYyA9IHt0eXBlOiBcIlBvbHlnb25cIiwgY29vcmRpbmF0ZXM6IFtyaW5nXX07XG4gICAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEyKFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcbiAgICB9O1xuXG4gICAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoK18pLCBjaXJjbGUpIDogcmFkaXVzO1xuICAgIH07XG5cbiAgICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2lzaW9uID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMigrXyksIGNpcmNsZSkgOiBwcmVjaXNpb247XG4gICAgfTtcblxuICAgIHJldHVybiBjaXJjbGU7XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwQnVmZmVyKCkge1xuICAgIHZhciBsaW5lcyA9IFtdLFxuICAgICAgICBsaW5lO1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICBsaW5lLnB1c2goW3gsIHldKTtcbiAgICAgIH0sXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogbm9vcCQyLFxuICAgICAgcmVqb2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIGxpbmVzLnB1c2gobGluZXMucG9wKCkuY29uY2F0KGxpbmVzLnNoaWZ0KCkpKTtcbiAgICAgIH0sXG4gICAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbGluZXM7XG4gICAgICAgIGxpbmVzID0gW107XG4gICAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBheCA9IGFbMF0sXG4gICAgICAgIGF5ID0gYVsxXSxcbiAgICAgICAgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIHQwID0gMCxcbiAgICAgICAgdDEgPSAxLFxuICAgICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICAgIGR5ID0gYnkgLSBheSxcbiAgICAgICAgcjtcblxuICAgIHIgPSB4MCAtIGF4O1xuICAgIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgICByIC89IGR4O1xuICAgIGlmIChkeCA8IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgIH1cblxuICAgIHIgPSB4MSAtIGF4O1xuICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgICByIC89IGR4O1xuICAgIGlmIChkeCA8IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgIH1cblxuICAgIHIgPSB5MCAtIGF5O1xuICAgIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgICByIC89IGR5O1xuICAgIGlmIChkeSA8IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgIH1cblxuICAgIHIgPSB5MSAtIGF5O1xuICAgIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgICByIC89IGR5O1xuICAgIGlmIChkeSA8IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgIH1cblxuICAgIGlmICh0MCA+IDApIGFbMF0gPSBheCArIHQwICogZHgsIGFbMV0gPSBheSArIHQwICogZHk7XG4gICAgaWYgKHQxIDwgMSkgYlswXSA9IGF4ICsgdDEgKiBkeCwgYlsxXSA9IGF5ICsgdDEgKiBkeTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50RXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhYnMoYVswXSAtIGJbMF0pIDwgZXBzaWxvbiQ0ICYmIGFicyhhWzFdIC0gYlsxXSkgPCBlcHNpbG9uJDQ7XG4gIH1cblxuICBmdW5jdGlvbiBJbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gICAgdGhpcy54ID0gcG9pbnQ7XG4gICAgdGhpcy56ID0gcG9pbnRzO1xuICAgIHRoaXMubyA9IG90aGVyOyAvLyBhbm90aGVyIGludGVyc2VjdGlvblxuICAgIHRoaXMuZSA9IGVudHJ5OyAvLyBpcyBhbiBlbnRyeT9cbiAgICB0aGlzLnYgPSBmYWxzZTsgLy8gdmlzaXRlZFxuICAgIHRoaXMubiA9IHRoaXMucCA9IG51bGw7IC8vIG5leHQgJiBwcmV2aW91c1xuICB9XG5cbiAgLy8gQSBnZW5lcmFsaXplZCBwb2x5Z29uIGNsaXBwaW5nIGFsZ29yaXRobTogZ2l2ZW4gYSBwb2x5Z29uIHRoYXQgaGFzIGJlZW4gY3V0XG4gIC8vIGludG8gaXRzIHZpc2libGUgbGluZSBzZWdtZW50cywgYW5kIHJlam9pbnMgdGhlIHNlZ21lbnRzIGJ5IGludGVycG9sYXRpbmdcbiAgLy8gYWxvbmcgdGhlIGNsaXAgZWRnZS5cbiAgZnVuY3Rpb24gY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gICAgdmFyIHN1YmplY3QgPSBbXSxcbiAgICAgICAgY2xpcCA9IFtdLFxuICAgICAgICBpLFxuICAgICAgICBuO1xuXG4gICAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbihzZWdtZW50KSB7XG4gICAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICAgIHZhciBuLCBwMCA9IHNlZ21lbnRbMF0sIHAxID0gc2VnbWVudFtuXSwgeDtcblxuICAgICAgLy8gSWYgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50cyBvZiBhIHNlZ21lbnQgYXJlIGNvaW5jaWRlbnQsIHRoZW4gdHJlYXQgYXMgYVxuICAgICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgICAvLyBleHRlcmlvciByaW5nIHNob3VsZCBiZSBjaGVja2VkLlxuICAgICAgaWYgKHBvaW50RXF1YWwocDAsIHAxKSkge1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN1YmplY3QucHVzaCh4ID0gbmV3IEludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSkpO1xuICAgICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKSk7XG4gICAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMSwgbnVsbCwgeCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgY2xpcC5zb3J0KGNvbXBhcmVJbnRlcnNlY3Rpb24pO1xuICAgIGxpbmskMShzdWJqZWN0KTtcbiAgICBsaW5rJDEoY2xpcCk7XG5cbiAgICBmb3IgKGkgPSAwLCBuID0gY2xpcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNsaXBbaV0uZSA9IHN0YXJ0SW5zaWRlID0gIXN0YXJ0SW5zaWRlO1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IHN1YmplY3RbMF0sXG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgcG9pbnQ7XG5cbiAgICB3aGlsZSAoMSkge1xuICAgICAgLy8gRmluZCBmaXJzdCB1bnZpc2l0ZWQgaW50ZXJzZWN0aW9uLlxuICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydCxcbiAgICAgICAgICBpc1N1YmplY3QgPSB0cnVlO1xuICAgICAgd2hpbGUgKGN1cnJlbnQudikgaWYgKChjdXJyZW50ID0gY3VycmVudC5uKSA9PT0gc3RhcnQpIHJldHVybjtcbiAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG4gICAgICAgICAgICBmb3IgKGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsaW5rJDEoYXJyYXkpIHtcbiAgICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuICAgIHZhciBuLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgYSA9IGFycmF5WzBdLFxuICAgICAgICBiO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhLm4gPSBiID0gYXJyYXlbaV07XG4gICAgICBiLnAgPSBhO1xuICAgICAgYSA9IGI7XG4gICAgfVxuICAgIGEubiA9IGIgPSBhcnJheVswXTtcbiAgICBiLnAgPSBhO1xuICB9XG5cbiAgdmFyIGNsaXBNYXggPSAxZTk7XG4gIHZhciBjbGlwTWluID0gLWNsaXBNYXg7XG4gIC8vIFRPRE8gVXNlIGQzLXBvbHlnb27igJlzIHBvbHlnb25Db250YWlucyBoZXJlIGZvciB0aGUgcmluZyBjaGVjaz9cbiAgLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbiAgZnVuY3Rpb24gY2xpcEV4dGVudCh4MCwgeTAsIHgxLCB5MSkge1xuXG4gICAgZnVuY3Rpb24gdmlzaWJsZSh4LCB5KSB7XG4gICAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgICAgaWYgKGZyb20gPT0gbnVsbFxuICAgICAgICAgIHx8IChhID0gY29ybmVyKGZyb20sIGRpcmVjdGlvbikpICE9PSAoYTEgPSBjb3JuZXIodG8sIGRpcmVjdGlvbikpXG4gICAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgIGRvIHN0cmVhbS5wb2ludChhID09PSAwIHx8IGEgPT09IDMgPyB4MCA6IHgxLCBhID4gMSA/IHkxIDogeTApO1xuICAgICAgICB3aGlsZSAoKGEgPSAoYSArIGRpcmVjdGlvbiArIDQpICUgNCkgIT09IGExKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IGVwc2lsb24kNCA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xuICAgICAgICAgIDogYWJzKHBbMF0gLSB4MSkgPCBlcHNpbG9uJDQgPyBkaXJlY3Rpb24gPiAwID8gMiA6IDFcbiAgICAgICAgICA6IGFicyhwWzFdIC0geTApIDwgZXBzaWxvbiQ0ID8gZGlyZWN0aW9uID4gMCA/IDEgOiAwXG4gICAgICAgICAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7IC8vIGFicyhwWzFdIC0geTEpIDwgZXBzaWxvblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludChhLngsIGIueCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGFyZVBvaW50KGEsIGIpIHtcbiAgICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSxcbiAgICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICAgIHJldHVybiBjYSAhPT0gY2IgPyBjYSAtIGNiXG4gICAgICAgICAgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdXG4gICAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgICAgOiBjYSA9PT0gMiA/IGFbMV0gLSBiWzFdXG4gICAgICAgICAgOiBiWzBdIC0gYVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgYWN0aXZlU3RyZWFtID0gc3RyZWFtLFxuICAgICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgICBwb2x5Z29uLFxuICAgICAgICAgIHJpbmcsXG4gICAgICAgICAgeF9fLCB5X18sIHZfXywgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgICB4XywgeV8sIHZfLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICAgIGZpcnN0LFxuICAgICAgICAgIGNsZWFuO1xuXG4gICAgICB2YXIgY2xpcFN0cmVhbSA9IHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICAgIHBvbHlnb25FbmQ6IHBvbHlnb25FbmRcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgICAgaWYgKHZpc2libGUoeCwgeSkpIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgICAgdmFyIHdpbmRpbmcgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICAgIGEwID0gYjAsIGExID0gYjEsIHBvaW50ID0gcmluZ1tqXSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTtcbiAgICAgICAgICAgIGlmIChhMSA8PSB5MSkgeyBpZiAoYjEgPiB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPiAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpICsrd2luZGluZzsgfVxuICAgICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgICAgfVxuXG4gICAgICAvLyBCdWZmZXIgZ2VvbWV0cnkgd2l0aGluIGEgcG9seWdvbiBhbmQgdGhlbiBjbGlwIGl0IGVuIG1hc3NlLlxuICAgICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgICBhY3RpdmVTdHJlYW0gPSBidWZmZXJTdHJlYW0sIHNlZ21lbnRzID0gW10sIHBvbHlnb24gPSBbXSwgY2xlYW4gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uSW5zaWRlKCksXG4gICAgICAgICAgICBjbGVhbkluc2lkZSA9IGNsZWFuICYmIHN0YXJ0SW5zaWRlLFxuICAgICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUgfHwgdmlzaWJsZSkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgICB2XyA9IGZhbHNlO1xuICAgICAgICB4XyA9IHlfID0gTmFOO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPIHJhdGhlciB0aGFuIHNwZWNpYWwtY2FzZSBwb2x5Z29ucywgc2ltcGx5IGhhbmRsZSB0aGVtIHNlcGFyYXRlbHkuXG4gICAgICAvLyBJZGVhbGx5LCBjb2luY2lkZW50IGludGVyc2VjdGlvbiBwb2ludHMgc2hvdWxkIGJlIGppdHRlcmVkIHRvIGF2b2lkXG4gICAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBpZiAoc2VnbWVudHMpIHtcbiAgICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlclN0cmVhbS5yZWpvaW4oKTtcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlclN0cmVhbS5yZXN1bHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgICBpZiAodl8pIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICAgIHZhciB2ID0gdmlzaWJsZSh4LCB5KTtcbiAgICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhID0gW3hfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeF8pKSwgeV8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5XykpXSxcbiAgICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xuICAgICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVudCQxKCkge1xuICAgIHZhciB4MCA9IDAsXG4gICAgICAgIHkwID0gMCxcbiAgICAgICAgeDEgPSA5NjAsXG4gICAgICAgIHkxID0gNTAwLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICAgIGNsaXA7XG5cbiAgICByZXR1cm4gY2xpcCA9IHtcbiAgICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IGNsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpKGNhY2hlU3RyZWFtID0gc3RyZWFtKTtcbiAgICAgIH0sXG4gICAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSwgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGwsIGNsaXApIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBsZW5ndGhTdW0gPSBhZGRlcigpO1xudmFyICAgbGFtYmRhMCQyO1xudmFyICAgc2luUGhpMCQxO1xudmFyICAgY29zUGhpMCQxO1xuICB2YXIgbGVuZ3RoU3RyZWFtID0ge1xuICAgIHNwaGVyZTogbm9vcCQyLFxuICAgIHBvaW50OiBub29wJDIsXG4gICAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogbm9vcCQyLFxuICAgIHBvbHlnb25TdGFydDogbm9vcCQyLFxuICAgIHBvbHlnb25FbmQ6IG5vb3AkMlxuICB9O1xuXG4gIGZ1bmN0aW9uIGxlbmd0aExpbmVTdGFydCgpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICAgIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlbmd0aExpbmVFbmQoKSB7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wJDI7XG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIGxhbWJkYTAkMiA9IGxhbWJkYSwgc2luUGhpMCQxID0gc2luJDEocGhpKSwgY29zUGhpMCQxID0gY29zJDEocGhpKTtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlbmd0aFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHZhciBzaW5QaGkgPSBzaW4kMShwaGkpLFxuICAgICAgICBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGEgLSBsYW1iZGEwJDIpLFxuICAgICAgICBjb3NEZWx0YSA9IGNvcyQxKGRlbHRhKSxcbiAgICAgICAgc2luRGVsdGEgPSBzaW4kMShkZWx0YSksXG4gICAgICAgIHggPSBjb3NQaGkgKiBzaW5EZWx0YSxcbiAgICAgICAgeSA9IGNvc1BoaTAkMSAqIHNpblBoaSAtIHNpblBoaTAkMSAqIGNvc1BoaSAqIGNvc0RlbHRhLFxuICAgICAgICB6ID0gc2luUGhpMCQxICogc2luUGhpICsgY29zUGhpMCQxICogY29zUGhpICogY29zRGVsdGE7XG4gICAgbGVuZ3RoU3VtLmFkZChhdGFuMihzcXJ0JDEoeCAqIHggKyB5ICogeSksIHopKTtcbiAgICBsYW1iZGEwJDIgPSBsYW1iZGEsIHNpblBoaTAkMSA9IHNpblBoaSwgY29zUGhpMCQxID0gY29zUGhpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoJDIob2JqZWN0KSB7XG4gICAgbGVuZ3RoU3VtLnJlc2V0KCk7XG4gICAgZ2VvU3RyZWFtKG9iamVjdCwgbGVuZ3RoU3RyZWFtKTtcbiAgICByZXR1cm4gK2xlbmd0aFN1bTtcbiAgfVxuXG4gIHZhciBjb29yZGluYXRlcyA9IFtudWxsLCBudWxsXTtcbnZhciAgIG9iamVjdCQxID0ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICAgIGNvb3JkaW5hdGVzWzFdID0gYjtcbiAgICByZXR1cm4gbGVuZ3RoJDIob2JqZWN0JDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gICAgdmFyIHkgPSByYW5nZSh5MCwgeTEgLSBlcHNpbG9uJDQsIGR5KS5jb25jYXQoeTEpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlWSh4MCwgeDEsIGR4KSB7XG4gICAgdmFyIHggPSByYW5nZSh4MCwgeDEgLSBlcHNpbG9uJDQsIGR4KS5jb25jYXQoeDEpO1xuICAgIHJldHVybiBmdW5jdGlvbih5KSB7IHJldHVybiB4Lm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuICAgIHZhciB4MSwgeDAsIFgxLCBYMCxcbiAgICAgICAgeTEsIHkwLCBZMSwgWTAsXG4gICAgICAgIGR4ID0gMTAsIGR5ID0gZHgsIERYID0gOTAsIERZID0gMzYwLFxuICAgICAgICB4LCB5LCBYLCBZLFxuICAgICAgICBwcmVjaXNpb24gPSAyLjU7XG5cbiAgICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gICAgICByZXR1cm4ge3R5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBsaW5lcygpfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgIHJldHVybiByYW5nZShjZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpXG4gICAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKFkwIC8gRFkpICogRFksIFkxLCBEWSkubWFwKFkpKVxuICAgICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbCh4MCAvIGR4KSAqIGR4LCB4MSwgZHgpLmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiBhYnMoeCAlIERYKSA+IGVwc2lsb24kNDsgfSkubWFwKHgpKVxuICAgICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbCh5MCAvIGR5KSAqIGR5LCB5MSwgZHkpLmZpbHRlcihmdW5jdGlvbih5KSB7IHJldHVybiBhYnMoeSAlIERZKSA+IGVwc2lsb24kNDsgfSkubWFwKHkpKTtcbiAgICB9XG5cbiAgICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykgeyByZXR1cm4ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9OyB9KTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgICBjb29yZGluYXRlczogW1xuICAgICAgICAgIFgoWDApLmNvbmNhdChcbiAgICAgICAgICBZKFkxKS5zbGljZSgxKSxcbiAgICAgICAgICBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksXG4gICAgICAgICAgWShZMCkucmV2ZXJzZSgpLnNsaWNlKDEpKVxuICAgICAgICBdXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1pbm9yKCk7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1ham9yKF8pLmV4dGVudE1pbm9yKF8pO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuZXh0ZW50TWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbW1gwLCBZMF0sIFtYMSwgWTFdXTtcbiAgICAgIFgwID0gK19bMF1bMF0sIFgxID0gK19bMV1bMF07XG4gICAgICBZMCA9ICtfWzBdWzFdLCBZMSA9ICtfWzFdWzFdO1xuICAgICAgaWYgKFgwID4gWDEpIF8gPSBYMCwgWDAgPSBYMSwgWDEgPSBfO1xuICAgICAgaWYgKFkwID4gWTEpIF8gPSBZMCwgWTAgPSBZMSwgWTEgPSBfO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLmV4dGVudE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgICB4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdO1xuICAgICAgeTAgPSArX1swXVsxXSwgeTEgPSArX1sxXVsxXTtcbiAgICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcbiAgICAgIGlmICh5MCA+IHkxKSBfID0geTAsIHkwID0geTEsIHkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNaW5vcigpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWFqb3IoXykuc3RlcE1pbm9yKF8pO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuc3RlcE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW0RYLCBEWV07XG4gICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLnN0ZXBNaW5vciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcmVjaXNpb247XG4gICAgICBwcmVjaXNpb24gPSArXztcbiAgICAgIHggPSBncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuICAgICAgeSA9IGdyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuICAgICAgWCA9IGdyYXRpY3VsZVgoWTAsIFkxLCA5MCk7XG4gICAgICBZID0gZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG5cbiAgICByZXR1cm4gZ3JhdGljdWxlXG4gICAgICAgIC5leHRlbnRNYWpvcihbWy0xODAsIC05MCArIGVwc2lsb24kNF0sIFsxODAsIDkwIC0gZXBzaWxvbiQ0XV0pXG4gICAgICAgIC5leHRlbnRNaW5vcihbWy0xODAsIC04MCAtIGVwc2lsb24kNF0sIFsxODAsIDgwICsgZXBzaWxvbiQ0XV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUkMihhLCBiKSB7XG4gICAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICAgIHkwID0gYVsxXSAqIHJhZGlhbnMsXG4gICAgICAgIHgxID0gYlswXSAqIHJhZGlhbnMsXG4gICAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICAgIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgc3kwID0gc2luJDEoeTApLFxuICAgICAgICBjeTEgPSBjb3MkMSh5MSksXG4gICAgICAgIHN5MSA9IHNpbiQxKHkxKSxcbiAgICAgICAga3gwID0gY3kwICogY29zJDEoeDApLFxuICAgICAgICBreTAgPSBjeTAgKiBzaW4kMSh4MCksXG4gICAgICAgIGt4MSA9IGN5MSAqIGNvcyQxKHgxKSxcbiAgICAgICAga3kxID0gY3kxICogc2luJDEoeDEpLFxuICAgICAgICBkID0gMiAqIGFzaW4kMShzcXJ0JDEoaGF2ZXJzaW4oeTEgLSB5MCkgKyBjeTAgKiBjeTEgKiBoYXZlcnNpbih4MSAtIHgwKSkpLFxuICAgICAgICBrID0gc2luJDEoZCk7XG5cbiAgICB2YXIgaW50ZXJwb2xhdGUgPSBkID8gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIEIgPSBzaW4kMSh0ICo9IGQpIC8gayxcbiAgICAgICAgICBBID0gc2luJDEoZCAtIHQpIC8gayxcbiAgICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgICAgeSA9IEEgKiBreTAgKyBCICoga3kxLFxuICAgICAgICAgIHogPSBBICogc3kwICsgQiAqIHN5MTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGF0YW4yKHksIHgpICogZGVncmVlcyQxLFxuICAgICAgICBhdGFuMih6LCBzcXJ0JDEoeCAqIHggKyB5ICogeSkpICogZGVncmVlcyQxXG4gICAgICBdO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbeDAgKiBkZWdyZWVzJDEsIHkwICogZGVncmVlcyQxXTtcbiAgICB9O1xuXG4gICAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXG4gICAgcmV0dXJuIGludGVycG9sYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkkNyh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cblxudmFyICAgYXJlYVN1bSQxID0gYWRkZXIoKTtcbnZhciAgIGFyZWFSaW5nU3VtJDEgPSBhZGRlcigpO1xuICB2YXIgeDAwO1xuICB2YXIgeTAwO1xudmFyICAgeDAkMTtcbnZhciAgIHkwJDE7XG4gIHZhciBhcmVhU3RyZWFtJDEgPSB7XG4gICAgcG9pbnQ6IG5vb3AkMixcbiAgICBsaW5lU3RhcnQ6IG5vb3AkMixcbiAgICBsaW5lRW5kOiBub29wJDIsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGFyZWFTdHJlYW0kMS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0JDE7XG4gICAgICBhcmVhU3RyZWFtJDEubGluZUVuZCA9IGFyZWFSaW5nRW5kJDE7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGFyZWFTdHJlYW0kMS5saW5lU3RhcnQgPSBhcmVhU3RyZWFtJDEubGluZUVuZCA9IGFyZWFTdHJlYW0kMS5wb2ludCA9IG5vb3AkMjtcbiAgICAgIGFyZWFTdW0kMS5hZGQoYWJzKGFyZWFSaW5nU3VtJDEpKTtcbiAgICAgIGFyZWFSaW5nU3VtJDEucmVzZXQoKTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJlYSA9IGFyZWFTdW0kMSAvIDI7XG4gICAgICBhcmVhU3VtJDEucmVzZXQoKTtcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBhcmVhUmluZ1N0YXJ0JDEoKSB7XG4gICAgYXJlYVN0cmVhbSQxLnBvaW50ID0gYXJlYVBvaW50Rmlyc3QkMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0JDEoeCwgeSkge1xuICAgIGFyZWFTdHJlYW0kMS5wb2ludCA9IGFyZWFQb2ludCQxO1xuICAgIHgwMCA9IHgwJDEgPSB4LCB5MDAgPSB5MCQxID0geTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludCQxKHgsIHkpIHtcbiAgICBhcmVhUmluZ1N1bSQxLmFkZCh5MCQxICogeCAtIHgwJDEgKiB5KTtcbiAgICB4MCQxID0geCwgeTAkMSA9IHk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUmluZ0VuZCQxKCkge1xuICAgIGFyZWFQb2ludCQxKHgwMCwgeTAwKTtcbiAgfVxuXG52YXIgICB4MCQyID0gSW5maW5pdHk7XG52YXIgICB5MCQyID0geDAkMjtcbiAgdmFyIHgxID0gLXgwJDI7XG4gIHZhciB5MSA9IHgxO1xuICB2YXIgYm91bmRzU3RyZWFtJDEgPSB7XG4gICAgcG9pbnQ6IGJvdW5kc1BvaW50JDEsXG4gICAgbGluZVN0YXJ0OiBub29wJDIsXG4gICAgbGluZUVuZDogbm9vcCQyLFxuICAgIHBvbHlnb25TdGFydDogbm9vcCQyLFxuICAgIHBvbHlnb25FbmQ6IG5vb3AkMixcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGJvdW5kcyA9IFtbeDAkMiwgeTAkMl0sIFt4MSwgeTFdXTtcbiAgICAgIHgxID0geTEgPSAtKHkwJDIgPSB4MCQyID0gSW5maW5pdHkpO1xuICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYm91bmRzUG9pbnQkMSh4LCB5KSB7XG4gICAgaWYgKHggPCB4MCQyKSB4MCQyID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCQyKSB5MCQyID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxudmFyICAgWDAkMSA9IDA7XG52YXIgICBZMCQxID0gMDtcbnZhciAgIFowJDEgPSAwO1xudmFyICAgWDEkMSA9IDA7XG52YXIgICBZMSQxID0gMDtcbnZhciAgIFoxJDEgPSAwO1xudmFyICAgWDIkMSA9IDA7XG52YXIgICBZMiQxID0gMDtcbnZhciAgIFoyJDEgPSAwO1xudmFyICAgeDAwJDE7XG52YXIgICB5MDAkMTtcbnZhciAgIHgwJDM7XG52YXIgICB5MCQzO1xuICB2YXIgY2VudHJvaWRTdHJlYW0kMSA9IHtcbiAgICBwb2ludDogY2VudHJvaWRQb2ludCQxLFxuICAgIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQkMSxcbiAgICBsaW5lRW5kOiBjZW50cm9pZExpbmVFbmQkMSxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydCQxO1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kJDE7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50JDE7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0JDE7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQkMTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2VudHJvaWQgPSBaMiQxID8gW1gyJDEgLyBaMiQxLCBZMiQxIC8gWjIkMV1cbiAgICAgICAgICA6IFoxJDEgPyBbWDEkMSAvIFoxJDEsIFkxJDEgLyBaMSQxXVxuICAgICAgICAgIDogWjAkMSA/IFtYMCQxIC8gWjAkMSwgWTAkMSAvIFowJDFdXG4gICAgICAgICAgOiBbTmFOLCBOYU5dO1xuICAgICAgWDAkMSA9IFkwJDEgPSBaMCQxID1cbiAgICAgIFgxJDEgPSBZMSQxID0gWjEkMSA9XG4gICAgICBYMiQxID0gWTIkMSA9IFoyJDEgPSAwO1xuICAgICAgcmV0dXJuIGNlbnRyb2lkO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50JDEoeCwgeSkge1xuICAgIFgwJDEgKz0geDtcbiAgICBZMCQxICs9IHk7XG4gICAgKytaMCQxO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQkMSgpIHtcbiAgICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0TGluZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50TGluZTtcbiAgICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRMaW5lKHgsIHkpIHtcbiAgICB2YXIgZHggPSB4IC0geDAkMywgZHkgPSB5IC0geTAkMywgeiA9IHNxcnQkMShkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgWDEkMSArPSB6ICogKHgwJDMgKyB4KSAvIDI7XG4gICAgWTEkMSArPSB6ICogKHkwJDMgKyB5KSAvIDI7XG4gICAgWjEkMSArPSB6O1xuICAgIGNlbnRyb2lkUG9pbnQkMSh4MCQzID0geCwgeTAkMyA9IHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kJDEoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnQkMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0JDEoKSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdFJpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQkMSgpIHtcbiAgICBjZW50cm9pZFBvaW50UmluZyh4MDAkMSwgeTAwJDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0UmluZyh4LCB5KSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRSaW5nO1xuICAgIGNlbnRyb2lkUG9pbnQkMSh4MDAkMSA9IHgwJDMgPSB4LCB5MDAkMSA9IHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRSaW5nKHgsIHkpIHtcbiAgICB2YXIgZHggPSB4IC0geDAkMyxcbiAgICAgICAgZHkgPSB5IC0geTAkMyxcbiAgICAgICAgeiA9IHNxcnQkMShkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgICBYMSQxICs9IHogKiAoeDAkMyArIHgpIC8gMjtcbiAgICBZMSQxICs9IHogKiAoeTAkMyArIHkpIC8gMjtcbiAgICBaMSQxICs9IHo7XG5cbiAgICB6ID0geTAkMyAqIHggLSB4MCQzICogeTtcbiAgICBYMiQxICs9IHogKiAoeDAkMyArIHgpO1xuICAgIFkyJDEgKz0geiAqICh5MCQzICsgeSk7XG4gICAgWjIkMSArPSB6ICogMztcbiAgICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFBhdGhDb250ZXh0KGNvbnRleHQpIHtcbiAgICB2YXIgcG9pbnRSYWRpdXMgPSA0LjU7XG5cbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuXG4gICAgICAvLyBXaGlsZSBpbnNpZGUgYSBsaW5lLCBvdmVycmlkZSBwb2ludCB0byBtb3ZlVG8gdGhlbiBsaW5lVG8uXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmVTdGFydDsgfSxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG5cbiAgICAgIC8vIFdoaWxlIGluc2lkZSBhIHBvbHlnb24sIG92ZXJyaWRlIGxpbmVFbmQgdG8gY2xvc2VQYXRoLlxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kUG9seWdvbjsgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7IHN0cmVhbS5wb2ludCA9IHBvaW50OyB9LFxuXG4gICAgICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgICAgICBwb2ludFJhZGl1cyA9IF87XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuXG4gICAgICByZXN1bHQ6IG5vb3AkMlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcG9pbnRSYWRpdXMsIHkpO1xuICAgICAgY29udGV4dC5hcmMoeCwgeSwgcG9pbnRSYWRpdXMsIDAsIHRhdSQ0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmVTdGFydCh4LCB5KSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG5cbiAgZnVuY3Rpb24gUGF0aFN0cmluZygpIHtcbiAgICB2YXIgcG9pbnRDaXJjbGUgPSBjaXJjbGUkMig0LjUpLFxuICAgICAgICBzdHJpbmcgPSBbXTtcblxuICAgIHZhciBzdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgfSxcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHBvaW50Q2lyY2xlID0gY2lyY2xlJDIoXyk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICAgICAgc3RyaW5nID0gW107XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICBzdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHksIHBvaW50Q2lyY2xlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmVTdGFydCh4LCB5KSB7XG4gICAgICBzdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZSh4LCB5KSB7XG4gICAgICBzdHJpbmcucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcbiAgICAgIHN0cmluZy5wdXNoKFwiWlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlJDIocmFkaXVzKSB7XG4gICAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIC0yICogcmFkaXVzXG4gICAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAyICogcmFkaXVzXG4gICAgICAgICsgXCJ6XCI7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleCQzKCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNSxcbiAgICAgICAgcHJvamVjdGlvbixcbiAgICAgICAgcHJvamVjdGlvblN0cmVhbSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY29udGV4dFN0cmVhbTtcblxuICAgIGZ1bmN0aW9uIHBhdGgob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY29udGV4dFN0cmVhbSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XG4gICAgfVxuXG4gICAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGFyZWFTdHJlYW0kMSkpO1xuICAgICAgcmV0dXJuIGFyZWFTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5ib3VuZHMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oYm91bmRzU3RyZWFtJDEpKTtcbiAgICAgIHJldHVybiBib3VuZHNTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjZW50cm9pZFN0cmVhbSQxKSk7XG4gICAgICByZXR1cm4gY2VudHJvaWRTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdGlvblN0cmVhbSA9IChwcm9qZWN0aW9uID0gXykgPT0gbnVsbCA/IGlkZW50aXR5JDcgOiBfLnN0cmVhbSwgcGF0aCkgOiBwcm9qZWN0aW9uO1xuICAgIH07XG5cbiAgICBwYXRoLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuICAgICAgY29udGV4dFN0cmVhbSA9IChjb250ZXh0ID0gXykgPT0gbnVsbCA/IG5ldyBQYXRoU3RyaW5nIDogbmV3IFBhdGhDb250ZXh0KF8pO1xuICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKHBvaW50UmFkaXVzKTtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH07XG5cbiAgICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBhdGgucHJvamVjdGlvbihudWxsKS5jb250ZXh0KG51bGwpO1xuICB9XG5cbiAgdmFyIHN1bSQyID0gYWRkZXIoKTtcblxuICBmdW5jdGlvbiBwb2x5Z29uQ29udGFpbnMocG9seWdvbiwgcG9pbnQpIHtcbiAgICB2YXIgbGFtYmRhID0gcG9pbnRbMF0sXG4gICAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgICBub3JtYWwgPSBbc2luJDEobGFtYmRhKSwgLWNvcyQxKGxhbWJkYSksIDBdLFxuICAgICAgICBhbmdsZSA9IDAsXG4gICAgICAgIHdpbmRpbmcgPSAwO1xuXG4gICAgc3VtJDIucmVzZXQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgICAgdmFyIHJpbmcsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgICBsYW1iZGEwID0gcG9pbnQwWzBdLFxuICAgICAgICAgIHBoaTAgPSBwb2ludDBbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTAgPSBzaW4kMShwaGkwKSxcbiAgICAgICAgICBjb3NQaGkwID0gY29zJDEocGhpMCk7XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXG4gICAgICAgICAgICBsYW1iZGExID0gcG9pbnQxWzBdLFxuICAgICAgICAgICAgcGhpMSA9IHBvaW50MVsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgICAgICBzaW5QaGkxID0gc2luJDEocGhpMSksXG4gICAgICAgICAgICBjb3NQaGkxID0gY29zJDEocGhpMSksXG4gICAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgICAgc2lnbiA9IGRlbHRhID49IDAgPyAxIDogLTEsXG4gICAgICAgICAgICBhYnNEZWx0YSA9IHNpZ24gKiBkZWx0YSxcbiAgICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGkkNCxcbiAgICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcblxuICAgICAgICBzdW0kMi5hZGQoYXRhbjIoayAqIHNpZ24gKiBzaW4kMShhYnNEZWx0YSksIGNvc1BoaTAgKiBjb3NQaGkxICsgayAqIGNvcyQxKGFic0RlbHRhKSkpO1xuICAgICAgICBhbmdsZSArPSBhbnRpbWVyaWRpYW4gPyBkZWx0YSArIHNpZ24gKiB0YXUkNCA6IGRlbHRhO1xuXG4gICAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgICAvLyBhbmQgYXJlIHRoZSBsYXRpdHVkZXMgc21hbGxlciB0aGFuIHRoZSBwYXJhbGxlbCAocGhpKT9cbiAgICAgICAgaWYgKGFudGltZXJpZGlhbiBeIGxhbWJkYTAgPj0gbGFtYmRhIF4gbGFtYmRhMSA+PSBsYW1iZGEpIHtcbiAgICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGFyYyk7XG4gICAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKG5vcm1hbCwgYXJjKTtcbiAgICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgICAgdmFyIHBoaUFyYyA9IChhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gLTEgOiAxKSAqIGFzaW4kMShpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgICB3aW5kaW5nICs9IGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAxIDogLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAgIC8vXG4gICAgLy8gSXQgaXMgaW5zaWRlIGlmOlxuICAgIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgICAvLyAqIHRoZSBwb2x5Z29uIGRvZXMgbm90IChjdW11bGF0aXZlbHkpIHdpbmQgYXJvdW5kIGl0LCBidXQgaGFzIGEgbmVnYXRpdmVcbiAgICAvLyAgIChjb3VudGVyLWNsb2Nrd2lzZSkgYXJlYS5cbiAgICAvL1xuICAgIC8vIFNlY29uZCwgY291bnQgdGhlIChzaWduZWQpIG51bWJlciBvZiB0aW1lcyBhIHNlZ21lbnQgY3Jvc3NlcyBhIGxhbWJkYVxuICAgIC8vIGZyb20gdGhlIHBvaW50IHRvIHRoZSBTb3V0aCBwb2xlLiAgSWYgaXQgaXMgemVybywgdGhlbiB0aGUgcG9pbnQgaXMgdGhlXG4gICAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gICAgcmV0dXJuIChhbmdsZSA8IC1lcHNpbG9uJDQgfHwgYW5nbGUgPCBlcHNpbG9uJDQgJiYgc3VtJDIgPCAtZXBzaWxvbiQ0KSBeICh3aW5kaW5nICYgMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzdGFydCkge1xuICAgIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIHNpbmspIHtcbiAgICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgICAgcm90YXRlZFN0YXJ0ID0gcm90YXRlLmludmVydChzdGFydFswXSwgc3RhcnRbMV0pLFxuICAgICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgICAgcmluZ1NpbmsgPSBjbGlwTGluZShyaW5nQnVmZmVyKSxcbiAgICAgICAgICBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlLFxuICAgICAgICAgIHBvbHlnb24sXG4gICAgICAgICAgc2VnbWVudHMsXG4gICAgICAgICAgcmluZztcblxuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uQ29udGFpbnMocG9seWdvbiwgcm90YXRlZFN0YXJ0KTtcbiAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBjbGlwUG9seWdvbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzaW5rKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNpbmsucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgICBzaW5rLnBvbHlnb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gcG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKGxhbWJkYSwgcGhpKTtcbiAgICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEgPSBwb2ludFswXSwgcGhpID0gcG9pbnRbMV0pKSBzaW5rLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9pbnRMaW5lKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZShsYW1iZGEsIHBoaSk7XG4gICAgICAgIGxpbmUucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgICAgICBsaW5lLmxpbmVTdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb2ludFJpbmcobGFtYmRhLCBwaGkpIHtcbiAgICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xuICAgICAgICByaW5nU2luay5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICAgIHJpbmdTaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICByaW5nID0gW107XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICAgIHBvaW50UmluZyhyaW5nWzBdWzBdLCByaW5nWzBdWzFdKTtcbiAgICAgICAgcmluZ1NpbmsubGluZUVuZCgpO1xuXG4gICAgICAgIHZhciBjbGVhbiA9IHJpbmdTaW5rLmNsZWFuKCksXG4gICAgICAgICAgICByaW5nU2VnbWVudHMgPSByaW5nQnVmZmVyLnJlc3VsdCgpLFxuICAgICAgICAgICAgaSwgbiA9IHJpbmdTZWdtZW50cy5sZW5ndGgsIG0sXG4gICAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgICAgcG9pbnQ7XG5cbiAgICAgICAgcmluZy5wb3AoKTtcbiAgICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgICByaW5nID0gbnVsbDtcblxuICAgICAgICBpZiAoIW4pIHJldHVybjtcblxuICAgICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgICBpZiAoY2xlYW4gJiAxKSB7XG4gICAgICAgICAgc2VnbWVudCA9IHJpbmdTZWdtZW50c1swXTtcbiAgICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHNpbmsucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWpvaW4gY29ubmVjdGVkIHNlZ21lbnRzLlxuICAgICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcblxuICAgICAgICBzZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5maWx0ZXIodmFsaWRTZWdtZW50KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGlwO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZFNlZ21lbnQoc2VnbWVudCkge1xuICAgIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+IDE7XG4gIH1cblxuICAvLyBJbnRlcnNlY3Rpb25zIGFyZSBzb3J0ZWQgYWxvbmcgdGhlIGNsaXAgZWRnZS4gRm9yIGJvdGggYW50aW1lcmlkaWFuIGN1dHRpbmdcbiAgLy8gYW5kIGNpcmNsZSBjbGlwcGluZywgdGhlIHNhbWUgY29tcGFyaXNvbiBpcyB1c2VkLlxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gKChhID0gYS54KVswXSA8IDAgPyBhWzFdIC0gaGFsZlBpJDMgLSBlcHNpbG9uJDQgOiBoYWxmUGkkMyAtIGFbMV0pXG4gICAgICAgICAtICgoYiA9IGIueClbMF0gPCAwID8gYlsxXSAtIGhhbGZQaSQzIC0gZXBzaWxvbiQ0IDogaGFsZlBpJDMgLSBiWzFdKTtcbiAgfVxuXG4gIHZhciBjbGlwQW50aW1lcmlkaWFuID0gY2xpcChcbiAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgY2xpcEFudGltZXJpZGlhbkxpbmUsXG4gICAgY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlLFxuICAgIFstcGkkNCwgLWhhbGZQaSQzXVxuICApO1xuXG4gIC8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXM6IDAgLSB0aGVyZSB3ZXJlXG4gIC8vIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm8gaW50ZXJzZWN0aW9uczsgMiAtIHRoZXJlIHdlcmVcbiAgLy8gaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBzaG91bGQgYmUgcmVqb2luZWQuXG4gIGZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5MaW5lKHN0cmVhbSkge1xuICAgIHZhciBsYW1iZGEwID0gTmFOLFxuICAgICAgICBwaGkwID0gTmFOLFxuICAgICAgICBzaWduMCA9IE5hTixcbiAgICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIGNsZWFuID0gMTtcbiAgICAgIH0sXG4gICAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhMSwgcGhpMSkge1xuICAgICAgICB2YXIgc2lnbjEgPSBsYW1iZGExID4gMCA/IHBpJDQgOiAtcGkkNCxcbiAgICAgICAgICAgIGRlbHRhID0gYWJzKGxhbWJkYTEgLSBsYW1iZGEwKTtcbiAgICAgICAgaWYgKGFicyhkZWx0YSAtIHBpJDQpIDwgZXBzaWxvbiQ0KSB7IC8vIGxpbmUgY3Jvc3NlcyBhIHBvbGVcbiAgICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCwgcGhpMCA9IChwaGkwICsgcGhpMSkgLyAyID4gMCA/IGhhbGZQaSQzIDogLWhhbGZQaSQzKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTEsIHBoaTApO1xuICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChzaWduMCAhPT0gc2lnbjEgJiYgZGVsdGEgPj0gcGkkNCkgeyAvLyBsaW5lIGNyb3NzZXMgYW50aW1lcmlkaWFuXG4gICAgICAgICAgaWYgKGFicyhsYW1iZGEwIC0gc2lnbjApIDwgZXBzaWxvbiQ0KSBsYW1iZGEwIC09IHNpZ24wICogZXBzaWxvbiQ0OyAvLyBoYW5kbGUgZGVnZW5lcmFjaWVzXG4gICAgICAgICAgaWYgKGFicyhsYW1iZGExIC0gc2lnbjEpIDwgZXBzaWxvbiQ0KSBsYW1iZGExIC09IHNpZ24xICogZXBzaWxvbiQ0O1xuICAgICAgICAgIHBoaTAgPSBjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEpO1xuICAgICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAgPSBsYW1iZGExLCBwaGkwID0gcGhpMSk7XG4gICAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIGxhbWJkYTAgPSBwaGkwID0gTmFOO1xuICAgICAgfSxcbiAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDIgLSBjbGVhbjsgLy8gaWYgaW50ZXJzZWN0aW9ucywgcmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSkge1xuICAgIHZhciBjb3NQaGkwLFxuICAgICAgICBjb3NQaGkxLFxuICAgICAgICBzaW5MYW1iZGEwTGFtYmRhMSA9IHNpbiQxKGxhbWJkYTAgLSBsYW1iZGExKTtcbiAgICByZXR1cm4gYWJzKHNpbkxhbWJkYTBMYW1iZGExKSA+IGVwc2lsb24kNFxuICAgICAgICA/IGF0YW4oKHNpbiQxKHBoaTApICogKGNvc1BoaTEgPSBjb3MkMShwaGkxKSkgKiBzaW4kMShsYW1iZGExKVxuICAgICAgICAgICAgLSBzaW4kMShwaGkxKSAqIChjb3NQaGkwID0gY29zJDEocGhpMCkpICogc2luJDEobGFtYmRhMCkpXG4gICAgICAgICAgICAvIChjb3NQaGkwICogY29zUGhpMSAqIHNpbkxhbWJkYTBMYW1iZGExKSlcbiAgICAgICAgOiAocGhpMCArIHBoaTEpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICB2YXIgcGhpO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIHBoaSA9IGRpcmVjdGlvbiAqIGhhbGZQaSQzO1xuICAgICAgc3RyZWFtLnBvaW50KC1waSQ0LCBwaGkpO1xuICAgICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQocGkkNCwgcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludChwaSQ0LCAwKTtcbiAgICAgIHN0cmVhbS5wb2ludChwaSQ0LCAtcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludCgwLCAtcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkNCwgLXBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQoLXBpJDQsIDApO1xuICAgICAgc3RyZWFtLnBvaW50KC1waSQ0LCBwaGkpO1xuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiBlcHNpbG9uJDQpIHtcbiAgICAgIHZhciBsYW1iZGEgPSBmcm9tWzBdIDwgdG9bMF0gPyBwaSQ0IDogLXBpJDQ7XG4gICAgICBwaGkgPSBkaXJlY3Rpb24gKiBsYW1iZGEgLyAyO1xuICAgICAgc3RyZWFtLnBvaW50KC1sYW1iZGEsIHBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBDaXJjbGUocmFkaXVzLCBkZWx0YSkge1xuICAgIHZhciBjciA9IGNvcyQxKHJhZGl1cyksXG4gICAgICAgIHNtYWxsUmFkaXVzID0gY3IgPiAwLFxuICAgICAgICBub3RIZW1pc3BoZXJlID0gYWJzKGNyKSA+IGVwc2lsb24kNDsgLy8gVE9ETyBvcHRpbWlzZSBmb3IgdGhpcyBjb21tb24gY2FzZVxuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIGZyb20sIHRvKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2aXNpYmxlKGxhbWJkYSwgcGhpKSB7XG4gICAgICByZXR1cm4gY29zJDEobGFtYmRhKSAqIGNvcyQxKHBoaSkgPiBjcjtcbiAgICB9XG5cbiAgICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cbiAgICAvLyBjbGlwcGluZzogMCAtIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBub1xuICAgIC8vIGludGVyc2VjdGlvbnMgMiAtIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgICBmdW5jdGlvbiBjbGlwTGluZShzdHJlYW0pIHtcbiAgICAgIHZhciBwb2ludDAsIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XG4gICAgICAgICAgdjAsIC8vIHZpc2liaWxpdHkgb2YgcHJldmlvdXMgcG9pbnRcbiAgICAgICAgICB2MDAsIC8vIHZpc2liaWxpdHkgb2YgZmlyc3QgcG9pbnRcbiAgICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICAgIGNsZWFuID0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgICAgdmFyIHBvaW50MSA9IFtsYW1iZGEsIHBoaV0sXG4gICAgICAgICAgICAgIHBvaW50MixcbiAgICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgICBjID0gc21hbGxSYWRpdXNcbiAgICAgICAgICAgICAgICA/IHYgPyAwIDogY29kZShsYW1iZGEsIHBoaSlcbiAgICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkkNCA6IC1waSQ0KSwgcGhpKSA6IDA7XG4gICAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAvLyBIYW5kbGUgZGVnZW5lcmFjaWVzLlxuICAgICAgICAgIC8vIFRPRE8gaWdub3JlIGlmIG5vdCBjbGlwcGluZyBwb2x5Z29ucy5cbiAgICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICBpZiAocG9pbnRFcXVhbChwb2ludDAsIHBvaW50MikgfHwgcG9pbnRFcXVhbChwb2ludDEsIHBvaW50MikpIHtcbiAgICAgICAgICAgICAgcG9pbnQxWzBdICs9IGVwc2lsb24kNDtcbiAgICAgICAgICAgICAgcG9pbnQxWzFdICs9IGVwc2lsb24kNDtcbiAgICAgICAgICAgICAgdiA9IHZpc2libGUocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodiAhPT0gdjApIHtcbiAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgIC8vIG91dHNpZGUgZ29pbmcgaW5cbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDApO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gaW5zaWRlIGdvaW5nIG91dFxuICAgICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm90SGVtaXNwaGVyZSAmJiBwb2ludDAgJiYgc21hbGxSYWRpdXMgXiB2KSB7XG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb2RlcyBmb3IgdHdvIHBvaW50cyBhcmUgZGlmZmVyZW50LCBvciBhcmUgYm90aCB6ZXJvLFxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHRoaXMgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggdGhlIHNtYWxsIGNpcmNsZS5cbiAgICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICAgIGlmIChzbWFsbFJhZGl1cykge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb2ludDAgPSBwb2ludDEsIHYwID0gdiwgYzAgPSBjO1xuICAgICAgICB9LFxuICAgICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodjApIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIGlmIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBhbmQgdGhlIGZpcnN0XG4gICAgICAgIC8vIGFuZCBsYXN0IHBvaW50cyB3ZXJlIHZpc2libGUuXG4gICAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gY2xlYW4gfCAoKHYwMCAmJiB2MCkgPDwgMSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSW50ZXJzZWN0cyB0aGUgZ3JlYXQgY2lyY2xlIGJldHdlZW4gYSBhbmQgYiB3aXRoIHRoZSBjbGlwIGNpcmNsZS5cbiAgICBmdW5jdGlvbiBpbnRlcnNlY3QoYSwgYiwgdHdvKSB7XG4gICAgICB2YXIgcGEgPSBjYXJ0ZXNpYW4oYSksXG4gICAgICAgICAgcGIgPSBjYXJ0ZXNpYW4oYik7XG5cbiAgICAgIC8vIFdlIGhhdmUgdHdvIHBsYW5lcywgbjEucCA9IGQxIGFuZCBuMi5wID0gZDIuXG4gICAgICAvLyBGaW5kIGludGVyc2VjdGlvbiBsaW5lIHAodCkgPSBjMSBuMSArIGMyIG4yICsgdCAobjEg4qivIG4yKS5cbiAgICAgIHZhciBuMSA9IFsxLCAwLCAwXSwgLy8gbm9ybWFsXG4gICAgICAgICAgbjIgPSBjYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLFxuICAgICAgICAgIG4ybjIgPSBjYXJ0ZXNpYW5Eb3QobjIsIG4yKSxcbiAgICAgICAgICBuMW4yID0gbjJbMF0sIC8vIGNhcnRlc2lhbkRvdChuMSwgbjIpLFxuICAgICAgICAgIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuXG4gICAgICAvLyBUd28gcG9sYXIgcG9pbnRzLlxuICAgICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcblxuICAgICAgdmFyIGMxID0gIGNyICogbjJuMiAvIGRldGVybWluYW50LFxuICAgICAgICAgIGMyID0gLWNyICogbjFuMiAvIGRldGVybWluYW50LFxuICAgICAgICAgIG4xeG4yID0gY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSxcbiAgICAgICAgICBBID0gY2FydGVzaWFuU2NhbGUobjEsIGMxKSxcbiAgICAgICAgICBCID0gY2FydGVzaWFuU2NhbGUobjIsIGMyKTtcbiAgICAgIGNhcnRlc2lhbkFkZEluUGxhY2UoQSwgQik7XG5cbiAgICAgIC8vIFNvbHZlIHxwKHQpfF4yID0gMS5cbiAgICAgIHZhciB1ID0gbjF4bjIsXG4gICAgICAgICAgdyA9IGNhcnRlc2lhbkRvdChBLCB1KSxcbiAgICAgICAgICB1dSA9IGNhcnRlc2lhbkRvdCh1LCB1KSxcbiAgICAgICAgICB0MiA9IHcgKiB3IC0gdXUgKiAoY2FydGVzaWFuRG90KEEsIEEpIC0gMSk7XG5cbiAgICAgIGlmICh0MiA8IDApIHJldHVybjtcblxuICAgICAgdmFyIHQgPSBzcXJ0JDEodDIpLFxuICAgICAgICAgIHEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocSwgQSk7XG4gICAgICBxID0gc3BoZXJpY2FsKHEpO1xuXG4gICAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG5cbiAgICAgIC8vIFR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAgICAgdmFyIGxhbWJkYTAgPSBhWzBdLFxuICAgICAgICAgIGxhbWJkYTEgPSBiWzBdLFxuICAgICAgICAgIHBoaTAgPSBhWzFdLFxuICAgICAgICAgIHBoaTEgPSBiWzFdLFxuICAgICAgICAgIHo7XG5cbiAgICAgIGlmIChsYW1iZGExIDwgbGFtYmRhMCkgeiA9IGxhbWJkYTAsIGxhbWJkYTAgPSBsYW1iZGExLCBsYW1iZGExID0gejtcblxuICAgICAgdmFyIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgICAgcG9sYXIgPSBhYnMoZGVsdGEgLSBwaSQ0KSA8IGVwc2lsb24kNCxcbiAgICAgICAgICBtZXJpZGlhbiA9IHBvbGFyIHx8IGRlbHRhIDwgZXBzaWxvbiQ0O1xuXG4gICAgICBpZiAoIXBvbGFyICYmIHBoaTEgPCBwaGkwKSB6ID0gcGhpMCwgcGhpMCA9IHBoaTEsIHBoaTEgPSB6O1xuXG4gICAgICAvLyBDaGVjayB0aGF0IHRoZSBmaXJzdCBwb2ludCBpcyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgICBpZiAobWVyaWRpYW5cbiAgICAgICAgICA/IHBvbGFyXG4gICAgICAgICAgICA/IHBoaTAgKyBwaGkxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSBsYW1iZGEwKSA8IGVwc2lsb24kNCA/IHBoaTAgOiBwaGkxKVxuICAgICAgICAgICAgOiBwaGkwIDw9IHFbMV0gJiYgcVsxXSA8PSBwaGkxXG4gICAgICAgICAgOiBkZWx0YSA+IHBpJDQgXiAobGFtYmRhMCA8PSBxWzBdICYmIHFbMF0gPD0gbGFtYmRhMSkpIHtcbiAgICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocTEsIEEpO1xuICAgICAgICByZXR1cm4gW3EsIHNwaGVyaWNhbChxMSldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlcyBhIDQtYml0IHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2F0aW9uIG9mIGEgcG9pbnQgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICAgIGZ1bmN0aW9uIGNvZGUobGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiBwaSQ0IC0gcmFkaXVzLFxuICAgICAgICAgIGNvZGUgPSAwO1xuICAgICAgaWYgKGxhbWJkYSA8IC1yKSBjb2RlIHw9IDE7IC8vIGxlZnRcbiAgICAgIGVsc2UgaWYgKGxhbWJkYSA+IHIpIGNvZGUgfD0gMjsgLy8gcmlnaHRcbiAgICAgIGlmIChwaGkgPCAtcikgY29kZSB8PSA0OyAvLyBiZWxvd1xuICAgICAgZWxzZSBpZiAocGhpID4gcikgY29kZSB8PSA4OyAvLyBhYm92ZVxuICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFswLCAtcmFkaXVzXSA6IFstcGkkNCwgcmFkaXVzIC0gcGkkNF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtJDEocHJvdG90eXBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmVhbTogdHJhbnNmb3JtJDIocHJvdG90eXBlKVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm0kMihwcm90b3R5cGUpIHtcbiAgICBmdW5jdGlvbiBUKCkge31cbiAgICB2YXIgcCA9IFQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUcmFuc2Zvcm0kMS5wcm90b3R5cGUpO1xuICAgIGZvciAodmFyIGsgaW4gcHJvdG90eXBlKSBwW2tdID0gcHJvdG90eXBlW2tdO1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHZhciB0ID0gbmV3IFQ7XG4gICAgICB0LnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgIHJldHVybiB0O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBUcmFuc2Zvcm0kMSgpIHt9XG5cbiAgVHJhbnNmb3JtJDEucHJvdG90eXBlID0ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpOyB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnNwaGVyZSgpOyB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpOyB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lRW5kKCk7IH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvblN0YXJ0KCk7IH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTsgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGZpdChwcm9qZWN0LCBleHRlbnQsIG9iamVjdCkge1xuICAgIHZhciB3ID0gZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLFxuICAgICAgICBoID0gZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdLFxuICAgICAgICBjbGlwID0gcHJvamVjdC5jbGlwRXh0ZW50ICYmIHByb2plY3QuY2xpcEV4dGVudCgpO1xuXG4gICAgcHJvamVjdFxuICAgICAgICAuc2NhbGUoMTUwKVxuICAgICAgICAudHJhbnNsYXRlKFswLCAwXSk7XG5cbiAgICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0LmNsaXBFeHRlbnQobnVsbCk7XG5cbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0LnN0cmVhbShib3VuZHNTdHJlYW0kMSkpO1xuXG4gICAgdmFyIGIgPSBib3VuZHNTdHJlYW0kMS5yZXN1bHQoKSxcbiAgICAgICAgayA9IE1hdGgubWluKHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLCBoIC8gKGJbMV1bMV0gLSBiWzBdWzFdKSksXG4gICAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gK2V4dGVudFswXVsxXSArIChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcblxuICAgIGlmIChjbGlwICE9IG51bGwpIHByb2plY3QuY2xpcEV4dGVudChjbGlwKTtcblxuICAgIHJldHVybiBwcm9qZWN0XG4gICAgICAgIC5zY2FsZShrICogMTUwKVxuICAgICAgICAudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH1cblxuICBmdW5jdGlvbiBmaXRTaXplKHByb2plY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZml0KHByb2plY3QsIFtbMCwgMF0sIHNpemVdLCBvYmplY3QpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmaXRFeHRlbnQocHJvamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZpdChwcm9qZWN0LCBleHRlbnQsIG9iamVjdCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBtYXhEZXB0aCA9IDE2O1xuICB2YXIgY29zTWluRGlzdGFuY2UgPSBjb3MkMSgzMCAqIHJhZGlhbnMpO1xuICAvLyBjb3MobWluaW11bSBhbmd1bGFyIGRpc3RhbmNlKVxuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikge1xuICAgIHJldHVybiArZGVsdGEyID8gcmVzYW1wbGUkMShwcm9qZWN0LCBkZWx0YTIpIDogcmVzYW1wbGVOb25lKHByb2plY3QpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzYW1wbGVOb25lKHByb2plY3QpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtJDIoe1xuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzYW1wbGUkMShwcm9qZWN0LCBkZWx0YTIpIHtcblxuICAgIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZHggPSB4MSAtIHgwLFxuICAgICAgICAgIGR5ID0geTEgLSB5MCxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyID4gNCAqIGRlbHRhMiAmJiBkZXB0aC0tKSB7XG4gICAgICAgIHZhciBhID0gYTAgKyBhMSxcbiAgICAgICAgICAgIGIgPSBiMCArIGIxLFxuICAgICAgICAgICAgYyA9IGMwICsgYzEsXG4gICAgICAgICAgICBtID0gc3FydCQxKGEgKiBhICsgYiAqIGIgKyBjICogYyksXG4gICAgICAgICAgICBwaGkyID0gYXNpbiQxKGMgLz0gbSksXG4gICAgICAgICAgICBsYW1iZGEyID0gYWJzKGFicyhjKSAtIDEpIDwgZXBzaWxvbiQ0IHx8IGFicyhsYW1iZGEwIC0gbGFtYmRhMSkgPCBlcHNpbG9uJDQgPyAobGFtYmRhMCArIGxhbWJkYTEpIC8gMiA6IGF0YW4yKGIsIGEpLFxuICAgICAgICAgICAgcCA9IHByb2plY3QobGFtYmRhMiwgcGhpMiksXG4gICAgICAgICAgICB4MiA9IHBbMF0sXG4gICAgICAgICAgICB5MiA9IHBbMV0sXG4gICAgICAgICAgICBkeDIgPSB4MiAtIHgwLFxuICAgICAgICAgICAgZHkyID0geTIgLSB5MCxcbiAgICAgICAgICAgIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5MjtcbiAgICAgICAgaWYgKGR6ICogZHogLyBkMiA+IGRlbHRhMiAvLyBwZXJwZW5kaWN1bGFyIHByb2plY3RlZCBkaXN0YW5jZVxuICAgICAgICAgICAgfHwgYWJzKChkeCAqIGR4MiArIGR5ICogZHkyKSAvIGQyIC0gMC41KSA+IDAuMyAvLyBtaWRwb2ludCBjbG9zZSB0byBhbiBlbmRcbiAgICAgICAgICAgIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7IC8vIGFuZ3VsYXIgZGlzdGFuY2VcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgbGFtYmRhMiwgYSAvPSBtLCBiIC89IG0sIGMsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICAgIHN0cmVhbS5wb2ludCh4MiwgeTIpO1xuICAgICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgbGFtYmRhMiwgYSwgYiwgYywgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgbGFtYmRhMDAsIHgwMCwgeTAwLCBhMDAsIGIwMCwgYzAwLCAvLyBmaXJzdCBwb2ludFxuICAgICAgICAgIGxhbWJkYTAsIHgwLCB5MCwgYTAsIGIwLCBjMDsgLy8gcHJldmlvdXMgcG9pbnRcblxuICAgICAgdmFyIHJlc2FtcGxlU3RyZWFtID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyBzdHJlYW0ucG9seWdvblN0YXJ0KCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IHJpbmdTdGFydDsgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uRW5kKCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDsgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIHgwID0gTmFOO1xuICAgICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksIHAgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MCA9IHBbMF0sIHkwID0gcFsxXSwgbGFtYmRhMCA9IGxhbWJkYSwgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIHN0cmVhbS5wb2ludCh4MCwgeTApO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICAgIGxpbmVTdGFydCgpO1xuICAgICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IHJpbmdFbmQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgICBsaW5lUG9pbnQobGFtYmRhMDAgPSBsYW1iZGEsIHBoaSksIHgwMCA9IHgwLCB5MDAgPSB5MCwgYTAwID0gYTAsIGIwMCA9IGIwLCBjMDAgPSBjMDtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAwLCB5MDAsIGxhbWJkYTAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIGxpbmVFbmQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc2FtcGxlU3RyZWFtO1xuICAgIH07XG4gIH1cblxuICB2YXIgdHJhbnNmb3JtUmFkaWFucyA9IHRyYW5zZm9ybSQyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdGhpcy5zdHJlYW0ucG9pbnQoeCAqIHJhZGlhbnMsIHkgKiByYWRpYW5zKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHByb2plY3Rpb24ocHJvamVjdCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uTXV0YXRvcihmdW5jdGlvbigpIHsgcmV0dXJuIHByb2plY3Q7IH0pKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgICB2YXIgcHJvamVjdCxcbiAgICAgICAgayA9IDE1MCwgLy8gc2NhbGVcbiAgICAgICAgeCA9IDQ4MCwgeSA9IDI1MCwgLy8gdHJhbnNsYXRlXG4gICAgICAgIGR4LCBkeSwgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXG4gICAgICAgIGRlbHRhTGFtYmRhID0gMCwgZGVsdGFQaGkgPSAwLCBkZWx0YUdhbW1hID0gMCwgcm90YXRlLCBwcm9qZWN0Um90YXRlLCAvLyByb3RhdGVcbiAgICAgICAgdGhldGEgPSBudWxsLCBwcmVjbGlwID0gY2xpcEFudGltZXJpZGlhbiwgLy8gY2xpcCBhbmdsZVxuICAgICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIHBvc3RjbGlwID0gaWRlbnRpdHkkNywgLy8gY2xpcCBleHRlbnRcbiAgICAgICAgZGVsdGEyID0gMC41LCBwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIpLCAvLyBwcmVjaXNpb25cbiAgICAgICAgY2FjaGUsXG4gICAgICAgIGNhY2hlU3RyZWFtO1xuXG4gICAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlKHBvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zKTtcbiAgICAgIHJldHVybiBbcG9pbnRbMF0gKiBrICsgZHgsIGR5IC0gcG9pbnRbMV0gKiBrXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZlcnQocG9pbnQpIHtcbiAgICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZS5pbnZlcnQoKHBvaW50WzBdIC0gZHgpIC8gaywgKGR5IC0gcG9pbnRbMV0pIC8gayk7XG4gICAgICByZXR1cm4gcG9pbnQgJiYgW3BvaW50WzBdICogZGVncmVlcyQxLCBwb2ludFsxXSAqIGRlZ3JlZXMkMV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvamVjdFRyYW5zZm9ybSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IHByb2plY3QoeCwgeSksIFt4WzBdICogayArIGR4LCBkeSAtIHhbMV0gKiBrXTtcbiAgICB9XG5cbiAgICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gdHJhbnNmb3JtUmFkaWFucyhwcmVjbGlwKHJvdGF0ZSwgcHJvamVjdFJlc2FtcGxlKHBvc3RjbGlwKGNhY2hlU3RyZWFtID0gc3RyZWFtKSkpKTtcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gK18gPyBjbGlwQ2lyY2xlKHRoZXRhID0gXyAqIHJhZGlhbnMsIDYgKiByYWRpYW5zKSA6ICh0aGV0YSA9IG51bGwsIGNsaXBBbnRpbWVyaWRpYW4pLCByZXNldCgpKSA6IHRoZXRhICogZGVncmVlcyQxO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8gPT0gbnVsbCA/ICh4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIGlkZW50aXR5JDcpIDogY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoayA9ICtfLCByZWNlbnRlcigpKSA6IGs7XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfWzBdLCB5ID0gK19bMV0sIHJlY2VudGVyKCkpIDogW3gsIHldO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBwaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBbbGFtYmRhICogZGVncmVlcyQxLCBwaGkgKiBkZWdyZWVzJDFdO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlbHRhTGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhUGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhR2FtbWEgPSBfLmxlbmd0aCA+IDIgPyBfWzJdICUgMzYwICogcmFkaWFucyA6IDAsIHJlY2VudGVyKCkpIDogW2RlbHRhTGFtYmRhICogZGVncmVlcyQxLCBkZWx0YVBoaSAqIGRlZ3JlZXMkMSwgZGVsdGFHYW1tYSAqIGRlZ3JlZXMkMV07XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24ucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyID0gXyAqIF8pLCByZXNldCgpKSA6IHNxcnQkMShkZWx0YTIpO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLmZpdEV4dGVudCA9IGZpdEV4dGVudChwcm9qZWN0aW9uKTtcblxuICAgIHByb2plY3Rpb24uZml0U2l6ZSA9IGZpdFNpemUocHJvamVjdGlvbik7XG5cbiAgICBmdW5jdGlvbiByZWNlbnRlcigpIHtcbiAgICAgIHByb2plY3RSb3RhdGUgPSBjb21wb3NlKHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSwgcHJvamVjdCk7XG4gICAgICB2YXIgY2VudGVyID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XG4gICAgICBkeCA9IHggLSBjZW50ZXJbMF0gKiBrO1xuICAgICAgZHkgPSB5ICsgY2VudGVyWzFdICogaztcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBwcm9qZWN0aW9uLmludmVydCA9IHByb2plY3QuaW52ZXJ0ICYmIGludmVydDtcbiAgICAgIHJldHVybiByZWNlbnRlcigpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25pY1Byb2plY3Rpb24ocHJvamVjdEF0KSB7XG4gICAgdmFyIHBoaTAgPSAwLFxuICAgICAgICBwaGkxID0gcGkkNCAvIDMsXG4gICAgICAgIG0gPSBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxuICAgICAgICBwID0gbShwaGkwLCBwaGkxKTtcblxuICAgIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBtKHBoaTAgPSBfWzBdICogcmFkaWFucywgcGhpMSA9IF9bMV0gKiByYWRpYW5zKSA6IFtwaGkwICogZGVncmVlcyQxLCBwaGkxICogZGVncmVlcyQxXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBmdW5jdGlvbiBjb25pY0VxdWFsQXJlYVJhdyh5MCwgeTEpIHtcbiAgICB2YXIgc3kwID0gc2luJDEoeTApLFxuICAgICAgICBuID0gKHN5MCArIHNpbiQxKHkxKSkgLyAyLFxuICAgICAgICBjID0gMSArIHN5MCAqICgyICogbiAtIHN5MCksXG4gICAgICAgIHIwID0gc3FydCQxKGMpIC8gbjtcblxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgICAgdmFyIHIgPSBzcXJ0JDEoYyAtIDIgKiBuICogc2luJDEoeSkpIC8gbjtcbiAgICAgIHJldHVybiBbciAqIHNpbiQxKHggKj0gbiksIHIwIC0gciAqIGNvcyQxKHgpXTtcbiAgICB9XG5cbiAgICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciByMHkgPSByMCAtIHk7XG4gICAgICByZXR1cm4gW2F0YW4yKHgsIHIweSkgLyBuLCBhc2luJDEoKGMgLSAoeCAqIHggKyByMHkgKiByMHkpICogbiAqIG4pIC8gKDIgKiBuKSldO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvamVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhKCkge1xuICAgIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVhbEFyZWFSYXcpXG4gICAgICAgIC5zY2FsZSgxNTUuNDI0KVxuICAgICAgICAuY2VudGVyKFswLCAzMy42NDQyXSk7XG4gIH1cblxuICBmdW5jdGlvbiBhbGJlcnMoKSB7XG4gICAgcmV0dXJuIGNvbmljRXF1YWxBcmVhKClcbiAgICAgICAgLnBhcmFsbGVscyhbMjkuNSwgNDUuNV0pXG4gICAgICAgIC5zY2FsZSgxMDcwKVxuICAgICAgICAudHJhbnNsYXRlKFs0ODAsIDI1MF0pXG4gICAgICAgIC5yb3RhdGUoWzk2LCAwXSlcbiAgICAgICAgLmNlbnRlcihbLTAuNiwgMzguN10pO1xuICB9XG5cbiAgLy8gVGhlIHByb2plY3Rpb25zIG11c3QgaGF2ZSBtdXR1YWxseSBleGNsdXNpdmUgY2xpcCByZWdpb25zIG9uIHRoZSBzcGhlcmUsXG4gIC8vIGFzIHRoaXMgd2lsbCBhdm9pZCBlbWl0dGluZyBpbnRlcmxlYXZpbmcgbGluZXMgYW5kIHBvbHlnb25zLlxuICBmdW5jdGlvbiBtdWx0aXBsZXgoc3RyZWFtcykge1xuICAgIHZhciBuID0gc3RyZWFtcy5sZW5ndGg7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvaW50KHgsIHkpOyB9LFxuICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0uc3BoZXJlKCk7IH0sXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lU3RhcnQoKTsgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lRW5kKCk7IH0sXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2x5Z29uRW5kKCk7IH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQSBjb21wb3NpdGUgcHJvamVjdGlvbiBmb3IgdGhlIFVuaXRlZCBTdGF0ZXMsIGNvbmZpZ3VyZWQgYnkgZGVmYXVsdCBmb3JcbiAgLy8gOTYww5c1MDAuIFRoZSBwcm9qZWN0aW9uIGFsc28gd29ya3MgcXVpdGUgd2VsbCBhdCA5NjDDlzYwMCBpZiB5b3UgY2hhbmdlIHRoZVxuICAvLyBzY2FsZSB0byAxMjg1IGFuZCBhZGp1c3QgdGhlIHRyYW5zbGF0ZSBhY2NvcmRpbmdseS4gVGhlIHNldCBvZiBzdGFuZGFyZFxuICAvLyBwYXJhbGxlbHMgZm9yIGVhY2ggcmVnaW9uIGNvbWVzIGZyb20gVVNHUywgd2hpY2ggaXMgcHVibGlzaGVkIGhlcmU6XG4gIC8vIGh0dHA6Ly9lZ3NjLnVzZ3MuZ292L2lzYi9wdWJzL01hcFByb2plY3Rpb25zL3Byb2plY3Rpb25zLmh0bWwjYWxiZXJzXG4gIGZ1bmN0aW9uIGFsYmVyc1VzYSgpIHtcbiAgICB2YXIgY2FjaGUsXG4gICAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgICBsb3dlcjQ4ID0gYWxiZXJzKCksIGxvd2VyNDhQb2ludCxcbiAgICAgICAgYWxhc2thID0gY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWzE1NCwgMF0pLmNlbnRlcihbLTIsIDU4LjVdKS5wYXJhbGxlbHMoWzU1LCA2NV0pLCBhbGFza2FQb2ludCwgLy8gRVBTRzozMzM4XG4gICAgICAgIGhhd2FpaSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTcsIDBdKS5jZW50ZXIoWy0zLCAxOS45XSkucGFyYWxsZWxzKFs4LCAxOF0pLCBoYXdhaWlQb2ludCwgLy8gRVNSSToxMDIwMDdcbiAgICAgICAgcG9pbnQsIHBvaW50U3RyZWFtID0ge3BvaW50OiBmdW5jdGlvbih4LCB5KSB7IHBvaW50ID0gW3gsIHldOyB9fTtcblxuICAgIGZ1bmN0aW9uIGFsYmVyc1VzYShjb29yZGluYXRlcykge1xuICAgICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgICAgcmV0dXJuIHBvaW50ID0gbnVsbCxcbiAgICAgICAgICAobG93ZXI0OFBvaW50LnBvaW50KHgsIHkpLCBwb2ludClcbiAgICAgICAgICB8fCAoYWxhc2thUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICAgIHx8IChoYXdhaWlQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpO1xuICAgIH1cblxuICAgIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksXG4gICAgICAgICAgdCA9IGxvd2VyNDgudHJhbnNsYXRlKCksXG4gICAgICAgICAgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gayxcbiAgICAgICAgICB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdFsxXSkgLyBrO1xuICAgICAgcmV0dXJuICh5ID49IDAuMTIwICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjQyNSAmJiB4IDwgLTAuMjE0ID8gYWxhc2thXG4gICAgICAgICAgOiB5ID49IDAuMTY2ICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjIxNCAmJiB4IDwgLTAuMTE1ID8gaGF3YWlpXG4gICAgICAgICAgOiBsb3dlcjQ4KS5pbnZlcnQoY29vcmRpbmF0ZXMpO1xuICAgIH07XG5cbiAgICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBtdWx0aXBsZXgoW2xvd2VyNDguc3RyZWFtKGNhY2hlU3RyZWFtID0gc3RyZWFtKSwgYWxhc2thLnN0cmVhbShzdHJlYW0pLCBoYXdhaWkuc3RyZWFtKHN0cmVhbSldKTtcbiAgICB9O1xuXG4gICAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG4gICAgICBsb3dlcjQ4LnByZWNpc2lvbihfKSwgYWxhc2thLnByZWNpc2lvbihfKSwgaGF3YWlpLnByZWNpc2lvbihfKTtcbiAgICAgIHJldHVybiBhbGJlcnNVc2E7XG4gICAgfTtcblxuICAgIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDguc2NhbGUoKTtcbiAgICAgIGxvd2VyNDguc2NhbGUoXyksIGFsYXNrYS5zY2FsZShfICogMC4zNSksIGhhd2FpaS5zY2FsZShfKTtcbiAgICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xuICAgIH07XG5cbiAgICBhbGJlcnNVc2EudHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLCB4ID0gK19bMF0sIHkgPSArX1sxXTtcblxuICAgICAgbG93ZXI0OFBvaW50ID0gbG93ZXI0OFxuICAgICAgICAgIC50cmFuc2xhdGUoXylcbiAgICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQ1NSAqIGssIHkgLSAwLjIzOCAqIGtdLCBbeCArIDAuNDU1ICogaywgeSArIDAuMjM4ICoga11dKVxuICAgICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgICBhbGFza2FQb2ludCA9IGFsYXNrYVxuICAgICAgICAgIC50cmFuc2xhdGUoW3ggLSAwLjMwNyAqIGssIHkgKyAwLjIwMSAqIGtdKVxuICAgICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuNDI1ICogayArIGVwc2lsb24kNCwgeSArIDAuMTIwICogayArIGVwc2lsb24kNF0sIFt4IC0gMC4yMTQgKiBrIC0gZXBzaWxvbiQ0LCB5ICsgMC4yMzQgKiBrIC0gZXBzaWxvbiQ0XV0pXG4gICAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICAgIGhhd2FpaVBvaW50ID0gaGF3YWlpXG4gICAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMjA1ICogaywgeSArIDAuMjEyICoga10pXG4gICAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC4yMTQgKiBrICsgZXBzaWxvbiQ0LCB5ICsgMC4xNjYgKiBrICsgZXBzaWxvbiQ0XSwgW3ggLSAwLjExNSAqIGsgLSBlcHNpbG9uJDQsIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uJDRdXSlcbiAgICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuXG4gICAgYWxiZXJzVXNhLmZpdEV4dGVudCA9IGZpdEV4dGVudChhbGJlcnNVc2EpO1xuXG4gICAgYWxiZXJzVXNhLmZpdFNpemUgPSBmaXRTaXplKGFsYmVyc1VzYSk7XG5cbiAgICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xuICB9XG5cbiAgZnVuY3Rpb24gYXppbXV0aGFsUmF3KHNjYWxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciBjeCA9IGNvcyQxKHgpLFxuICAgICAgICAgIGN5ID0gY29zJDEoeSksXG4gICAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgayAqIGN5ICogc2luJDEoeCksXG4gICAgICAgIGsgKiBzaW4kMSh5KVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhemltdXRoYWxJbnZlcnQoYW5nbGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIHogPSBzcXJ0JDEoeCAqIHggKyB5ICogeSksXG4gICAgICAgICAgYyA9IGFuZ2xlKHopLFxuICAgICAgICAgIHNjID0gc2luJDEoYyksXG4gICAgICAgICAgY2MgPSBjb3MkMShjKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcbiAgICAgICAgYXNpbiQxKHogJiYgeSAqIHNjIC8geilcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgdmFyIGF6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjeGN5KSB7XG4gICAgcmV0dXJuIHNxcnQkMSgyIC8gKDEgKyBjeGN5KSk7XG4gIH0pO1xuXG4gIGF6aW11dGhhbEVxdWFsQXJlYVJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICAgIHJldHVybiAyICogYXNpbiQxKHogLyAyKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYXppbXV0aGFsRXF1YWxBcmVhKCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcbiAgICAgICAgLnNjYWxlKDEyNC43NSlcbiAgICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbiAgfVxuXG4gIHZhciBhemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIChjID0gYWNvcyhjKSkgJiYgYyAvIHNpbiQxKGMpO1xuICB9KTtcblxuICBhemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICAgIHJldHVybiB6O1xuICB9KTtcblxuICBmdW5jdGlvbiBhemltdXRoYWxFcXVpZGlzdGFudCgpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVpZGlzdGFudFJhdylcbiAgICAgICAgLnNjYWxlKDc5LjQxODgpXG4gICAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhLCBsb2ckMSh0YW4oKGhhbGZQaSQzICsgcGhpKSAvIDIpKV07XG4gIH1cblxuICBtZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFt4LCAyICogYXRhbihleHAoeSkpIC0gaGFsZlBpJDNdO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1lcmNhdG9yKCkge1xuICAgIHJldHVybiBtZXJjYXRvclByb2plY3Rpb24obWVyY2F0b3JSYXcpXG4gICAgICAgIC5zY2FsZSg5NjEgLyB0YXUkNCk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJjYXRvclByb2plY3Rpb24ocHJvamVjdCkge1xuICAgIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcbiAgICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgICB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSxcbiAgICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcbiAgICAgICAgY2xpcEF1dG87XG5cbiAgICBtLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUoXyksIGNsaXBBdXRvICYmIG0uY2xpcEV4dGVudChudWxsKSwgbSkgOiBzY2FsZSgpO1xuICAgIH07XG5cbiAgICBtLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZShfKSwgY2xpcEF1dG8gJiYgbS5jbGlwRXh0ZW50KG51bGwpLCBtKSA6IHRyYW5zbGF0ZSgpO1xuICAgIH07XG5cbiAgICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwQXV0byA/IG51bGwgOiBjbGlwRXh0ZW50KCk7XG4gICAgICBpZiAoY2xpcEF1dG8gPSBfID09IG51bGwpIHtcbiAgICAgICAgdmFyIGsgPSBwaSQ0ICogc2NhbGUoKSxcbiAgICAgICAgICAgIHQgPSB0cmFuc2xhdGUoKTtcbiAgICAgICAgXyA9IFtbdFswXSAtIGssIHRbMV0gLSBrXSwgW3RbMF0gKyBrLCB0WzFdICsga11dO1xuICAgICAgfVxuICAgICAgY2xpcEV4dGVudChfKTtcbiAgICAgIHJldHVybiBtO1xuICAgIH07XG5cbiAgICByZXR1cm4gbS5jbGlwRXh0ZW50KG51bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFueSh5KSB7XG4gICAgcmV0dXJuIHRhbigoaGFsZlBpJDMgKyB5KSAvIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgbiA9IHkwID09PSB5MSA/IHNpbiQxKHkwKSA6IGxvZyQxKGN5MCAvIGNvcyQxKHkxKSkgLyBsb2ckMSh0YW55KHkxKSAvIHRhbnkoeTApKSxcbiAgICAgICAgZiA9IGN5MCAqIHBvdyQxKHRhbnkoeTApLCBuKSAvIG47XG5cbiAgICBpZiAoIW4pIHJldHVybiBtZXJjYXRvclJhdztcblxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgICAgaWYgKGYgPiAwKSB7IGlmICh5IDwgLWhhbGZQaSQzICsgZXBzaWxvbiQ0KSB5ID0gLWhhbGZQaSQzICsgZXBzaWxvbiQ0OyB9XG4gICAgICBlbHNlIHsgaWYgKHkgPiBoYWxmUGkkMyAtIGVwc2lsb24kNCkgeSA9IGhhbGZQaSQzIC0gZXBzaWxvbiQ0OyB9XG4gICAgICB2YXIgciA9IGYgLyBwb3ckMSh0YW55KHkpLCBuKTtcbiAgICAgIHJldHVybiBbciAqIHNpbiQxKG4gKiB4KSwgZiAtIHIgKiBjb3MkMShuICogeCldO1xuICAgIH1cblxuICAgIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIGZ5ID0gZiAtIHksIHIgPSBzaWduJDEobikgKiBzcXJ0JDEoeCAqIHggKyBmeSAqIGZ5KTtcbiAgICAgIHJldHVybiBbYXRhbjIoeCwgZnkpIC8gbiwgMiAqIGF0YW4ocG93JDEoZiAvIHIsIDEgLyBuKSkgLSBoYWxmUGkkM107XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNDb25mb3JtYWwoKSB7XG4gICAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0NvbmZvcm1hbFJhdylcbiAgICAgICAgLnNjYWxlKDEwOS41KVxuICAgICAgICAucGFyYWxsZWxzKFszMCwgMzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhclJhdyhsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhLCBwaGldO1xuICB9XG5cbiAgZXF1aXJlY3Rhbmd1bGFyUmF3LmludmVydCA9IGVxdWlyZWN0YW5ndWxhclJhdztcblxuICBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXIoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oZXF1aXJlY3Rhbmd1bGFyUmF3KVxuICAgICAgICAuc2NhbGUoMTUyLjYzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgbiA9IHkwID09PSB5MSA/IHNpbiQxKHkwKSA6IChjeTAgLSBjb3MkMSh5MSkpIC8gKHkxIC0geTApLFxuICAgICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gICAgaWYgKGFicyhuKSA8IGVwc2lsb24kNCkgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclJhdztcblxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgICAgdmFyIGd5ID0gZyAtIHksIG54ID0gbiAqIHg7XG4gICAgICByZXR1cm4gW2d5ICogc2luJDEobngpLCBnIC0gZ3kgKiBjb3MkMShueCldO1xuICAgIH1cblxuICAgIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIGd5ID0gZyAtIHk7XG4gICAgICByZXR1cm4gW2F0YW4yKHgsIGd5KSAvIG4sIGcgLSBzaWduJDEobikgKiBzcXJ0JDEoeCAqIHggKyBneSAqIGd5KV07XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNFcXVpZGlzdGFudCgpIHtcbiAgICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1aWRpc3RhbnRSYXcpXG4gICAgICAgIC5zY2FsZSgxMzEuMTU0KVxuICAgICAgICAuY2VudGVyKFswLCAxMy45Mzg5XSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbm9tb25pY1Jhdyh4LCB5KSB7XG4gICAgdmFyIGN5ID0gY29zJDEoeSksIGsgPSBjb3MkMSh4KSAqIGN5O1xuICAgIHJldHVybiBbY3kgKiBzaW4kMSh4KSAvIGssIHNpbiQxKHkpIC8ga107XG4gIH1cblxuICBnbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XG5cbiAgZnVuY3Rpb24gZ25vbW9uaWMoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXG4gICAgICAgIC5zY2FsZSgxNDQuMDQ5KVxuICAgICAgICAuY2xpcEFuZ2xlKDYwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ydGhvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gICAgcmV0dXJuIFtjb3MkMSh5KSAqIHNpbiQxKHgpLCBzaW4kMSh5KV07XG4gIH1cblxuICBvcnRob2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGFzaW4kMSk7XG5cbiAgZnVuY3Rpb24gb3J0aG9ncmFwaGljKCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgICAgLnNjYWxlKDI0OS41KVxuICAgICAgICAuY2xpcEFuZ2xlKDkwICsgZXBzaWxvbiQ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWNSYXcoeCwgeSkge1xuICAgIHZhciBjeSA9IGNvcyQxKHkpLCBrID0gMSArIGNvcyQxKHgpICogY3k7XG4gICAgcmV0dXJuIFtjeSAqIHNpbiQxKHgpIC8gaywgc2luJDEoeSkgLyBrXTtcbiAgfVxuXG4gIHN0ZXJlb2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgICByZXR1cm4gMiAqIGF0YW4oeik7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWMoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcbiAgICAgICAgLnNjYWxlKDI1MClcbiAgICAgICAgLmNsaXBBbmdsZSgxNDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnN2ZXJzZU1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIFtsb2ckMSh0YW4oKGhhbGZQaSQzICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG4gIH1cblxuICB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbLXksIDIgKiBhdGFuKGV4cCh4KSkgLSBoYWxmUGkkM107XG4gIH07XG5cbiAgZnVuY3Rpb24gdHJhbnN2ZXJzZU1lcmNhdG9yKCkge1xuICAgIHZhciBtID0gbWVyY2F0b3JQcm9qZWN0aW9uKHRyYW5zdmVyc2VNZXJjYXRvclJhdyksXG4gICAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgICByb3RhdGUgPSBtLnJvdGF0ZTtcblxuICAgIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjZW50ZXIoWy1fWzFdLCBfWzBdXSkgOiAoXyA9IGNlbnRlcigpLCBbX1sxXSwgLV9bMF1dKTtcbiAgICB9O1xuXG4gICAgbS5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJvdGF0ZShbX1swXSwgX1sxXSwgXy5sZW5ndGggPiAyID8gX1syXSArIDkwIDogOTBdKSA6IChfID0gcm90YXRlKCksIFtfWzBdLCBfWzFdLCBfWzJdIC0gOTBdKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJvdGF0ZShbMCwgMCwgOTBdKVxuICAgICAgICAuc2NhbGUoMTU5LjE1NSk7XG4gIH1cblxuICBleHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICBleHBvcnRzLmJpc2VjdCA9IGJpc2VjdFJpZ2h0O1xuICBleHBvcnRzLmJpc2VjdFJpZ2h0ID0gYmlzZWN0UmlnaHQ7XG4gIGV4cG9ydHMuYmlzZWN0TGVmdCA9IGJpc2VjdExlZnQ7XG4gIGV4cG9ydHMuYXNjZW5kaW5nID0gYXNjZW5kaW5nO1xuICBleHBvcnRzLmJpc2VjdG9yID0gYmlzZWN0b3I7XG4gIGV4cG9ydHMuZGVzY2VuZGluZyA9IGRlc2NlbmRpbmc7XG4gIGV4cG9ydHMuZGV2aWF0aW9uID0gZGV2aWF0aW9uO1xuICBleHBvcnRzLmV4dGVudCA9IGV4dGVudDtcbiAgZXhwb3J0cy5oaXN0b2dyYW0gPSBoaXN0b2dyYW07XG4gIGV4cG9ydHMudGhyZXNob2xkRnJlZWRtYW5EaWFjb25pcyA9IGZyZWVkbWFuRGlhY29uaXM7XG4gIGV4cG9ydHMudGhyZXNob2xkU2NvdHQgPSBzY290dDtcbiAgZXhwb3J0cy50aHJlc2hvbGRTdHVyZ2VzID0gc3R1cmdlcztcbiAgZXhwb3J0cy5tYXggPSBtYXg7XG4gIGV4cG9ydHMubWVhbiA9IG1lYW47XG4gIGV4cG9ydHMubWVkaWFuID0gbWVkaWFuO1xuICBleHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4gIGV4cG9ydHMubWluID0gbWluO1xuICBleHBvcnRzLnBhaXJzID0gcGFpcnM7XG4gIGV4cG9ydHMucGVybXV0ZSA9IHBlcm11dGU7XG4gIGV4cG9ydHMucXVhbnRpbGUgPSB0aHJlc2hvbGQ7XG4gIGV4cG9ydHMucmFuZ2UgPSByYW5nZTtcbiAgZXhwb3J0cy5zY2FuID0gc2NhbjtcbiAgZXhwb3J0cy5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgZXhwb3J0cy5zdW0gPSBzdW07XG4gIGV4cG9ydHMudGlja3MgPSB0aWNrcztcbiAgZXhwb3J0cy50aWNrU3RlcCA9IHRpY2tTdGVwO1xuICBleHBvcnRzLnRyYW5zcG9zZSA9IHRyYW5zcG9zZTtcbiAgZXhwb3J0cy52YXJpYW5jZSA9IHZhcmlhbmNlO1xuICBleHBvcnRzLnppcCA9IHppcDtcbiAgZXhwb3J0cy5lbnRyaWVzID0gZW50cmllcztcbiAgZXhwb3J0cy5rZXlzID0ga2V5cztcbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG4gIGV4cG9ydHMubWFwID0gbWFwJDE7XG4gIGV4cG9ydHMuc2V0ID0gc2V0O1xuICBleHBvcnRzLm5lc3QgPSBuZXN0O1xuICBleHBvcnRzLnJhbmRvbVVuaWZvcm0gPSB1bmlmb3JtO1xuICBleHBvcnRzLnJhbmRvbU5vcm1hbCA9IG5vcm1hbDtcbiAgZXhwb3J0cy5yYW5kb21Mb2dOb3JtYWwgPSBsb2dOb3JtYWw7XG4gIGV4cG9ydHMucmFuZG9tQmF0ZXMgPSBiYXRlcztcbiAgZXhwb3J0cy5yYW5kb21JcndpbkhhbGwgPSBpcndpbkhhbGw7XG4gIGV4cG9ydHMucmFuZG9tRXhwb25lbnRpYWwgPSBleHBvbmVudGlhbDtcbiAgZXhwb3J0cy5lYXNlTGluZWFyID0gbGluZWFyO1xuICBleHBvcnRzLmVhc2VRdWFkID0gcXVhZEluT3V0O1xuICBleHBvcnRzLmVhc2VRdWFkSW4gPSBxdWFkSW47XG4gIGV4cG9ydHMuZWFzZVF1YWRPdXQgPSBxdWFkT3V0O1xuICBleHBvcnRzLmVhc2VRdWFkSW5PdXQgPSBxdWFkSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUN1YmljID0gZWFzZUN1YmljSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUN1YmljSW4gPSBjdWJpY0luO1xuICBleHBvcnRzLmVhc2VDdWJpY091dCA9IGN1YmljT3V0O1xuICBleHBvcnRzLmVhc2VDdWJpY0luT3V0ID0gZWFzZUN1YmljSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHkgPSBwb2x5SW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHlJbiA9IHBvbHlJbjtcbiAgZXhwb3J0cy5lYXNlUG9seU91dCA9IHBvbHlPdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHlJbk91dCA9IHBvbHlJbk91dDtcbiAgZXhwb3J0cy5lYXNlU2luID0gc2luSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVNpbkluID0gc2luSW47XG4gIGV4cG9ydHMuZWFzZVNpbk91dCA9IHNpbk91dDtcbiAgZXhwb3J0cy5lYXNlU2luSW5PdXQgPSBzaW5Jbk91dDtcbiAgZXhwb3J0cy5lYXNlRXhwID0gZXhwSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUV4cEluID0gZXhwSW47XG4gIGV4cG9ydHMuZWFzZUV4cE91dCA9IGV4cE91dDtcbiAgZXhwb3J0cy5lYXNlRXhwSW5PdXQgPSBleHBJbk91dDtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlID0gY2lyY2xlSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUNpcmNsZUluID0gY2lyY2xlSW47XG4gIGV4cG9ydHMuZWFzZUNpcmNsZU91dCA9IGNpcmNsZU91dDtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlSW5PdXQgPSBjaXJjbGVJbk91dDtcbiAgZXhwb3J0cy5lYXNlQm91bmNlID0gYm91bmNlT3V0O1xuICBleHBvcnRzLmVhc2VCb3VuY2VJbiA9IGJvdW5jZUluO1xuICBleHBvcnRzLmVhc2VCb3VuY2VPdXQgPSBib3VuY2VPdXQ7XG4gIGV4cG9ydHMuZWFzZUJvdW5jZUluT3V0ID0gYm91bmNlSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2sgPSBiYWNrSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2tJbiA9IGJhY2tJbjtcbiAgZXhwb3J0cy5lYXNlQmFja091dCA9IGJhY2tPdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2tJbk91dCA9IGJhY2tJbk91dDtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpYyA9IGVsYXN0aWNPdXQ7XG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNJbiA9IGVsYXN0aWNJbjtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpY091dCA9IGVsYXN0aWNPdXQ7XG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNJbk91dCA9IGVsYXN0aWNJbk91dDtcbiAgZXhwb3J0cy5wb2x5Z29uQXJlYSA9IGFyZWE7XG4gIGV4cG9ydHMucG9seWdvbkNlbnRyb2lkID0gY2VudHJvaWQ7XG4gIGV4cG9ydHMucG9seWdvbkh1bGwgPSBodWxsO1xuICBleHBvcnRzLnBvbHlnb25Db250YWlucyA9IGNvbnRhaW5zO1xuICBleHBvcnRzLnBvbHlnb25MZW5ndGggPSBsZW5ndGgkMTtcbiAgZXhwb3J0cy5wYXRoID0gcGF0aDtcbiAgZXhwb3J0cy5xdWFkdHJlZSA9IHF1YWR0cmVlO1xuICBleHBvcnRzLnF1ZXVlID0gcXVldWU7XG4gIGV4cG9ydHMuYXJjID0gYXJjO1xuICBleHBvcnRzLmFyZWEgPSBhcmVhJDE7XG4gIGV4cG9ydHMubGluZSA9IGxpbmU7XG4gIGV4cG9ydHMucGllID0gcGllO1xuICBleHBvcnRzLnJhZGlhbEFyZWEgPSByYWRpYWxBcmVhO1xuICBleHBvcnRzLnJhZGlhbExpbmUgPSByYWRpYWxMaW5lJDE7XG4gIGV4cG9ydHMuc3ltYm9sID0gc3ltYm9sO1xuICBleHBvcnRzLnN5bWJvbHMgPSBzeW1ib2xzO1xuICBleHBvcnRzLnN5bWJvbENpcmNsZSA9IGNpcmNsZTtcbiAgZXhwb3J0cy5zeW1ib2xDcm9zcyA9IGNyb3NzJDE7XG4gIGV4cG9ydHMuc3ltYm9sRGlhbW9uZCA9IGRpYW1vbmQ7XG4gIGV4cG9ydHMuc3ltYm9sU3F1YXJlID0gc3F1YXJlO1xuICBleHBvcnRzLnN5bWJvbFN0YXIgPSBzdGFyO1xuICBleHBvcnRzLnN5bWJvbFRyaWFuZ2xlID0gdHJpYW5nbGU7XG4gIGV4cG9ydHMuc3ltYm9sV3llID0gd3llO1xuICBleHBvcnRzLmN1cnZlQmFzaXNDbG9zZWQgPSBiYXNpc0Nsb3NlZDtcbiAgZXhwb3J0cy5jdXJ2ZUJhc2lzT3BlbiA9IGJhc2lzT3BlbjtcbiAgZXhwb3J0cy5jdXJ2ZUJhc2lzID0gYmFzaXM7XG4gIGV4cG9ydHMuY3VydmVCdW5kbGUgPSBidW5kbGU7XG4gIGV4cG9ydHMuY3VydmVDYXJkaW5hbENsb3NlZCA9IGNhcmRpbmFsQ2xvc2VkO1xuICBleHBvcnRzLmN1cnZlQ2FyZGluYWxPcGVuID0gY2FyZGluYWxPcGVuO1xuICBleHBvcnRzLmN1cnZlQ2FyZGluYWwgPSBjYXJkaW5hbDtcbiAgZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb21DbG9zZWQgPSBjYXRtdWxsUm9tQ2xvc2VkO1xuICBleHBvcnRzLmN1cnZlQ2F0bXVsbFJvbU9wZW4gPSBjYXRtdWxsUm9tT3BlbjtcbiAgZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb20gPSBjYXRtdWxsUm9tO1xuICBleHBvcnRzLmN1cnZlTGluZWFyQ2xvc2VkID0gbGluZWFyQ2xvc2VkO1xuICBleHBvcnRzLmN1cnZlTGluZWFyID0gY3VydmVMaW5lYXI7XG4gIGV4cG9ydHMuY3VydmVNb25vdG9uZVggPSBtb25vdG9uZVg7XG4gIGV4cG9ydHMuY3VydmVNb25vdG9uZVkgPSBtb25vdG9uZVk7XG4gIGV4cG9ydHMuY3VydmVOYXR1cmFsID0gbmF0dXJhbDtcbiAgZXhwb3J0cy5jdXJ2ZVN0ZXAgPSBzdGVwO1xuICBleHBvcnRzLmN1cnZlU3RlcEFmdGVyID0gc3RlcEFmdGVyO1xuICBleHBvcnRzLmN1cnZlU3RlcEJlZm9yZSA9IHN0ZXBCZWZvcmU7XG4gIGV4cG9ydHMuc3RhY2sgPSBzdGFjaztcbiAgZXhwb3J0cy5zdGFja09mZnNldEV4cGFuZCA9IGV4cGFuZDtcbiAgZXhwb3J0cy5zdGFja09mZnNldE5vbmUgPSBub25lO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSA9IHNpbGhvdWV0dGU7XG4gIGV4cG9ydHMuc3RhY2tPZmZzZXRXaWdnbGUgPSB3aWdnbGU7XG4gIGV4cG9ydHMuc3RhY2tPcmRlckFzY2VuZGluZyA9IGFzY2VuZGluZyQxO1xuICBleHBvcnRzLnN0YWNrT3JkZXJEZXNjZW5kaW5nID0gZGVzY2VuZGluZyQyO1xuICBleHBvcnRzLnN0YWNrT3JkZXJJbnNpZGVPdXQgPSBpbnNpZGVPdXQ7XG4gIGV4cG9ydHMuc3RhY2tPcmRlck5vbmUgPSBub25lJDE7XG4gIGV4cG9ydHMuc3RhY2tPcmRlclJldmVyc2UgPSByZXZlcnNlO1xuICBleHBvcnRzLmNvbG9yID0gY29sb3I7XG4gIGV4cG9ydHMucmdiID0gY29sb3JSZ2I7XG4gIGV4cG9ydHMuaHNsID0gY29sb3JIc2w7XG4gIGV4cG9ydHMubGFiID0gbGFiO1xuICBleHBvcnRzLmhjbCA9IGNvbG9ySGNsO1xuICBleHBvcnRzLmN1YmVoZWxpeCA9IGN1YmVoZWxpeDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlO1xuICBleHBvcnRzLmludGVycG9sYXRlQXJyYXkgPSBhcnJheSQxO1xuICBleHBvcnRzLmludGVycG9sYXRlRGF0ZSA9IGRhdGU7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVOdW1iZXIgPSBpbnRlcnBvbGF0ZU51bWJlcjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU9iamVjdCA9IG9iamVjdDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJvdW5kID0gaW50ZXJwb2xhdGVSb3VuZDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVN0cmluZyA9IGludGVycG9sYXRlU3RyaW5nO1xuICBleHBvcnRzLmludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtJDI7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVab29tID0gaW50ZXJwb2xhdGVab29tO1xuICBleHBvcnRzLmludGVycG9sYXRlUmdiID0gaW50ZXJwb2xhdGVSZ2I7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpcyA9IHJnYkJhc2lzO1xuICBleHBvcnRzLmludGVycG9sYXRlUmdiQmFzaXNDbG9zZWQgPSByZ2JCYXNpc0Nsb3NlZDtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUhzbCA9IGhzbCQxO1xuICBleHBvcnRzLmludGVycG9sYXRlSHNsTG9uZyA9IGhzbExvbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVMYWIgPSBsYWIkMTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUhjbCA9IGhjbCQxO1xuICBleHBvcnRzLmludGVycG9sYXRlSGNsTG9uZyA9IGhjbExvbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDdWJlaGVsaXggPSBjdWJlaGVsaXgkMjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpcyA9IGJhc2lzJDI7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpc0Nsb3NlZCA9IGJhc2lzQ2xvc2VkJDE7XG4gIGV4cG9ydHMucXVhbnRpemUgPSBxdWFudGl6ZTtcbiAgZXhwb3J0cy5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICBleHBvcnRzLmRzdkZvcm1hdCA9IGRzdjtcbiAgZXhwb3J0cy5jc3ZQYXJzZSA9IGNzdlBhcnNlO1xuICBleHBvcnRzLmNzdlBhcnNlUm93cyA9IGNzdlBhcnNlUm93cztcbiAgZXhwb3J0cy5jc3ZGb3JtYXQgPSBjc3ZGb3JtYXQ7XG4gIGV4cG9ydHMuY3N2Rm9ybWF0Um93cyA9IGNzdkZvcm1hdFJvd3M7XG4gIGV4cG9ydHMudHN2UGFyc2UgPSB0c3ZQYXJzZTtcbiAgZXhwb3J0cy50c3ZQYXJzZVJvd3MgPSB0c3ZQYXJzZVJvd3M7XG4gIGV4cG9ydHMudHN2Rm9ybWF0ID0gdHN2Rm9ybWF0O1xuICBleHBvcnRzLnRzdkZvcm1hdFJvd3MgPSB0c3ZGb3JtYXRSb3dzO1xuICBleHBvcnRzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBleHBvcnRzLmh0bWwgPSBodG1sO1xuICBleHBvcnRzLmpzb24gPSBqc29uO1xuICBleHBvcnRzLnRleHQgPSB0ZXh0O1xuICBleHBvcnRzLnhtbCA9IHhtbDtcbiAgZXhwb3J0cy5jc3YgPSBjc3YkMTtcbiAgZXhwb3J0cy50c3YgPSB0c3YkMTtcbiAgZXhwb3J0cy5ub3cgPSBub3c7XG4gIGV4cG9ydHMudGltZXIgPSB0aW1lcjtcbiAgZXhwb3J0cy50aW1lckZsdXNoID0gdGltZXJGbHVzaDtcbiAgZXhwb3J0cy50aW1lb3V0ID0gdGltZW91dCQxO1xuICBleHBvcnRzLmludGVydmFsID0gaW50ZXJ2YWwkMTtcbiAgZXhwb3J0cy50aW1lSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcbiAgZXhwb3J0cy50aW1lTWlsbGlzZWNvbmQgPSBtaWxsaXNlY29uZDtcbiAgZXhwb3J0cy50aW1lTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICBleHBvcnRzLnRpbWVTZWNvbmQgPSBzZWNvbmQ7XG4gIGV4cG9ydHMudGltZVNlY29uZHMgPSBzZWNvbmRzO1xuICBleHBvcnRzLnRpbWVNaW51dGUgPSBtaW51dGU7XG4gIGV4cG9ydHMudGltZU1pbnV0ZXMgPSBtaW51dGVzO1xuICBleHBvcnRzLnRpbWVIb3VyID0gaG91cjtcbiAgZXhwb3J0cy50aW1lSG91cnMgPSBob3VycztcbiAgZXhwb3J0cy50aW1lRGF5ID0gZGF5O1xuICBleHBvcnRzLnRpbWVEYXlzID0gZGF5cztcbiAgZXhwb3J0cy50aW1lV2VlayA9IHRpbWVXZWVrO1xuICBleHBvcnRzLnRpbWVXZWVrcyA9IHN1bmRheXM7XG4gIGV4cG9ydHMudGltZVN1bmRheSA9IHRpbWVXZWVrO1xuICBleHBvcnRzLnRpbWVTdW5kYXlzID0gc3VuZGF5cztcbiAgZXhwb3J0cy50aW1lTW9uZGF5ID0gdGltZU1vbmRheTtcbiAgZXhwb3J0cy50aW1lTW9uZGF5cyA9IG1vbmRheXM7XG4gIGV4cG9ydHMudGltZVR1ZXNkYXkgPSB0dWVzZGF5O1xuICBleHBvcnRzLnRpbWVUdWVzZGF5cyA9IHR1ZXNkYXlzO1xuICBleHBvcnRzLnRpbWVXZWRuZXNkYXkgPSB3ZWRuZXNkYXk7XG4gIGV4cG9ydHMudGltZVdlZG5lc2RheXMgPSB3ZWRuZXNkYXlzO1xuICBleHBvcnRzLnRpbWVUaHVyc2RheSA9IHRodXJzZGF5O1xuICBleHBvcnRzLnRpbWVUaHVyc2RheXMgPSB0aHVyc2RheXM7XG4gIGV4cG9ydHMudGltZUZyaWRheSA9IGZyaWRheTtcbiAgZXhwb3J0cy50aW1lRnJpZGF5cyA9IGZyaWRheXM7XG4gIGV4cG9ydHMudGltZVNhdHVyZGF5ID0gc2F0dXJkYXk7XG4gIGV4cG9ydHMudGltZVNhdHVyZGF5cyA9IHNhdHVyZGF5cztcbiAgZXhwb3J0cy50aW1lTW9udGggPSBtb250aDtcbiAgZXhwb3J0cy50aW1lTW9udGhzID0gbW9udGhzO1xuICBleHBvcnRzLnRpbWVZZWFyID0geWVhcjtcbiAgZXhwb3J0cy50aW1lWWVhcnMgPSB5ZWFycztcbiAgZXhwb3J0cy51dGNNaWxsaXNlY29uZCA9IG1pbGxpc2Vjb25kO1xuICBleHBvcnRzLnV0Y01pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbiAgZXhwb3J0cy51dGNTZWNvbmQgPSBzZWNvbmQ7XG4gIGV4cG9ydHMudXRjU2Vjb25kcyA9IHNlY29uZHM7XG4gIGV4cG9ydHMudXRjTWludXRlID0gdXRjTWludXRlO1xuICBleHBvcnRzLnV0Y01pbnV0ZXMgPSB1dGNNaW51dGVzO1xuICBleHBvcnRzLnV0Y0hvdXIgPSB1dGNIb3VyO1xuICBleHBvcnRzLnV0Y0hvdXJzID0gdXRjSG91cnM7XG4gIGV4cG9ydHMudXRjRGF5ID0gdXRjRGF5O1xuICBleHBvcnRzLnV0Y0RheXMgPSB1dGNEYXlzO1xuICBleHBvcnRzLnV0Y1dlZWsgPSB1dGNXZWVrO1xuICBleHBvcnRzLnV0Y1dlZWtzID0gdXRjU3VuZGF5cztcbiAgZXhwb3J0cy51dGNTdW5kYXkgPSB1dGNXZWVrO1xuICBleHBvcnRzLnV0Y1N1bmRheXMgPSB1dGNTdW5kYXlzO1xuICBleHBvcnRzLnV0Y01vbmRheSA9IHV0Y01vbmRheTtcbiAgZXhwb3J0cy51dGNNb25kYXlzID0gdXRjTW9uZGF5cztcbiAgZXhwb3J0cy51dGNUdWVzZGF5ID0gdXRjVHVlc2RheTtcbiAgZXhwb3J0cy51dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXlzO1xuICBleHBvcnRzLnV0Y1dlZG5lc2RheSA9IHV0Y1dlZG5lc2RheTtcbiAgZXhwb3J0cy51dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5cztcbiAgZXhwb3J0cy51dGNUaHVyc2RheSA9IHV0Y1RodXJzZGF5O1xuICBleHBvcnRzLnV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5cztcbiAgZXhwb3J0cy51dGNGcmlkYXkgPSB1dGNGcmlkYXk7XG4gIGV4cG9ydHMudXRjRnJpZGF5cyA9IHV0Y0ZyaWRheXM7XG4gIGV4cG9ydHMudXRjU2F0dXJkYXkgPSB1dGNTYXR1cmRheTtcbiAgZXhwb3J0cy51dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheXM7XG4gIGV4cG9ydHMudXRjTW9udGggPSB1dGNNb250aDtcbiAgZXhwb3J0cy51dGNNb250aHMgPSB1dGNNb250aHM7XG4gIGV4cG9ydHMudXRjWWVhciA9IHV0Y1llYXI7XG4gIGV4cG9ydHMudXRjWWVhcnMgPSB1dGNZZWFycztcbiAgZXhwb3J0cy5mb3JtYXRMb2NhbGUgPSBmb3JtYXRMb2NhbGU7XG4gIGV4cG9ydHMuZm9ybWF0RGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGU7XG4gIGV4cG9ydHMuZm9ybWF0U3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyO1xuICBleHBvcnRzLnByZWNpc2lvbkZpeGVkID0gcHJlY2lzaW9uRml4ZWQ7XG4gIGV4cG9ydHMucHJlY2lzaW9uUHJlZml4ID0gcHJlY2lzaW9uUHJlZml4O1xuICBleHBvcnRzLnByZWNpc2lvblJvdW5kID0gcHJlY2lzaW9uUm91bmQ7XG4gIGV4cG9ydHMuaXNvRm9ybWF0ID0gZm9ybWF0SXNvO1xuICBleHBvcnRzLmlzb1BhcnNlID0gcGFyc2VJc287XG4gIGV4cG9ydHMudGltZUZvcm1hdExvY2FsZSA9IGZvcm1hdExvY2FsZSQxO1xuICBleHBvcnRzLnRpbWVGb3JtYXREZWZhdWx0TG9jYWxlID0gZGVmYXVsdExvY2FsZSQxO1xuICBleHBvcnRzLnNjYWxlQmFuZCA9IGJhbmQ7XG4gIGV4cG9ydHMuc2NhbGVQb2ludCA9IHBvaW50JDQ7XG4gIGV4cG9ydHMuc2NhbGVJZGVudGl0eSA9IGlkZW50aXR5JDQ7XG4gIGV4cG9ydHMuc2NhbGVMaW5lYXIgPSBsaW5lYXIkMjtcbiAgZXhwb3J0cy5zY2FsZUxvZyA9IGxvZztcbiAgZXhwb3J0cy5zY2FsZU9yZGluYWwgPSBvcmRpbmFsO1xuICBleHBvcnRzLnNjYWxlSW1wbGljaXQgPSBpbXBsaWNpdDtcbiAgZXhwb3J0cy5zY2FsZVBvdyA9IHBvdztcbiAgZXhwb3J0cy5zY2FsZVNxcnQgPSBzcXJ0O1xuICBleHBvcnRzLnNjYWxlUXVhbnRpbGUgPSBxdWFudGlsZTtcbiAgZXhwb3J0cy5zY2FsZVF1YW50aXplID0gcXVhbnRpemUkMTtcbiAgZXhwb3J0cy5zY2FsZVRocmVzaG9sZCA9IHRocmVzaG9sZCQxO1xuICBleHBvcnRzLnNjYWxlVGltZSA9IHRpbWU7XG4gIGV4cG9ydHMuc2NhbGVVdGMgPSB1dGNUaW1lO1xuICBleHBvcnRzLnNjaGVtZUNhdGVnb3J5MTAgPSBjYXRlZ29yeTEwO1xuICBleHBvcnRzLnNjaGVtZUNhdGVnb3J5MjBiID0gY2F0ZWdvcnkyMGI7XG4gIGV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMGMgPSBjYXRlZ29yeTIwYztcbiAgZXhwb3J0cy5zY2hlbWVDYXRlZ29yeTIwID0gY2F0ZWdvcnkyMDtcbiAgZXhwb3J0cy5zY2FsZVNlcXVlbnRpYWwgPSBzZXF1ZW50aWFsO1xuICBleHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4RGVmYXVsdCA9IGN1YmVoZWxpeCQzO1xuICBleHBvcnRzLmludGVycG9sYXRlUmFpbmJvdyA9IHJhaW5ib3ckMTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVdhcm0gPSB3YXJtO1xuICBleHBvcnRzLmludGVycG9sYXRlQ29vbCA9IGNvb2w7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVWaXJpZGlzID0gdmlyaWRpcztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU1hZ21hID0gbWFnbWE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVJbmZlcm5vID0gaW5mZXJubztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVBsYXNtYSA9IHBsYXNtYTtcbiAgZXhwb3J0cy5jcmVhdG9yID0gY3JlYXRvcjtcbiAgZXhwb3J0cy5jdXN0b21FdmVudCA9IGN1c3RvbUV2ZW50O1xuICBleHBvcnRzLmxvY2FsID0gbG9jYWw7XG4gIGV4cG9ydHMubWF0Y2hlciA9IG1hdGNoZXIkMTtcbiAgZXhwb3J0cy5tb3VzZSA9IG1vdXNlO1xuICBleHBvcnRzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZXhwb3J0cy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcbiAgZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG4gIGV4cG9ydHMuc2VsZWN0QWxsID0gc2VsZWN0QWxsO1xuICBleHBvcnRzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgZXhwb3J0cy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICBleHBvcnRzLnNlbGVjdG9yQWxsID0gc2VsZWN0b3JBbGw7XG4gIGV4cG9ydHMudG91Y2ggPSB0b3VjaDtcbiAgZXhwb3J0cy50b3VjaGVzID0gdG91Y2hlcztcbiAgZXhwb3J0cy53aW5kb3cgPSB3aW5kb3c7XG4gIGV4cG9ydHMuYWN0aXZlID0gYWN0aXZlO1xuICBleHBvcnRzLmludGVycnVwdCA9IGludGVycnVwdDtcbiAgZXhwb3J0cy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgZXhwb3J0cy5heGlzVG9wID0gYXhpc1RvcDtcbiAgZXhwb3J0cy5heGlzUmlnaHQgPSBheGlzUmlnaHQ7XG4gIGV4cG9ydHMuYXhpc0JvdHRvbSA9IGF4aXNCb3R0b207XG4gIGV4cG9ydHMuYXhpc0xlZnQgPSBheGlzTGVmdDtcbiAgZXhwb3J0cy5jbHVzdGVyID0gY2x1c3RlcjtcbiAgZXhwb3J0cy5oaWVyYXJjaHkgPSBoaWVyYXJjaHk7XG4gIGV4cG9ydHMucGFjayA9IGluZGV4O1xuICBleHBvcnRzLnBhY2tTaWJsaW5ncyA9IHNpYmxpbmdzO1xuICBleHBvcnRzLnBhY2tFbmNsb3NlID0gZW5jbG9zZTtcbiAgZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gIGV4cG9ydHMuc3RyYXRpZnkgPSBzdHJhdGlmeTtcbiAgZXhwb3J0cy50cmVlID0gdHJlZTtcbiAgZXhwb3J0cy50cmVlbWFwID0gaW5kZXgkMTtcbiAgZXhwb3J0cy50cmVlbWFwQmluYXJ5ID0gYmluYXJ5O1xuICBleHBvcnRzLnRyZWVtYXBEaWNlID0gdHJlZW1hcERpY2U7XG4gIGV4cG9ydHMudHJlZW1hcFNsaWNlID0gdHJlZW1hcFNsaWNlO1xuICBleHBvcnRzLnRyZWVtYXBTbGljZURpY2UgPSBzbGljZURpY2U7XG4gIGV4cG9ydHMudHJlZW1hcFNxdWFyaWZ5ID0gc3F1YXJpZnk7XG4gIGV4cG9ydHMudHJlZW1hcFJlc3F1YXJpZnkgPSByZXNxdWFyaWZ5O1xuICBleHBvcnRzLmZvcmNlQ2VudGVyID0gY2VudGVyJDE7XG4gIGV4cG9ydHMuZm9yY2VDb2xsaWRlID0gY29sbGlkZTtcbiAgZXhwb3J0cy5mb3JjZUxpbmsgPSBsaW5rO1xuICBleHBvcnRzLmZvcmNlTWFueUJvZHkgPSBtYW55Qm9keTtcbiAgZXhwb3J0cy5mb3JjZVNpbXVsYXRpb24gPSBzaW11bGF0aW9uO1xuICBleHBvcnRzLmZvcmNlWCA9IHgkMztcbiAgZXhwb3J0cy5mb3JjZVkgPSB5JDM7XG4gIGV4cG9ydHMuZHJhZyA9IGRyYWc7XG4gIGV4cG9ydHMuZHJhZ0Rpc2FibGUgPSBkcmFnRGlzYWJsZTtcbiAgZXhwb3J0cy5kcmFnRW5hYmxlID0gZHJhZ0VuYWJsZTtcbiAgZXhwb3J0cy52b3Jvbm9pID0gdm9yb25vaTtcbiAgZXhwb3J0cy56b29tID0gem9vbTtcbiAgZXhwb3J0cy56b29tSWRlbnRpdHkgPSBpZGVudGl0eSQ2O1xuICBleHBvcnRzLnpvb21UcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIGV4cG9ydHMuYnJ1c2ggPSBicnVzaDtcbiAgZXhwb3J0cy5icnVzaFggPSBicnVzaFg7XG4gIGV4cG9ydHMuYnJ1c2hZID0gYnJ1c2hZO1xuICBleHBvcnRzLmJydXNoU2VsZWN0aW9uID0gYnJ1c2hTZWxlY3Rpb247XG4gIGV4cG9ydHMuY2hvcmQgPSBjaG9yZDtcbiAgZXhwb3J0cy5yaWJib24gPSByaWJib247XG4gIGV4cG9ydHMuZ2VvQWxiZXJzID0gYWxiZXJzO1xuICBleHBvcnRzLmdlb0FsYmVyc1VzYSA9IGFsYmVyc1VzYTtcbiAgZXhwb3J0cy5nZW9BcmVhID0gYXJlYSQyO1xuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWFsQXJlYSA9IGF6aW11dGhhbEVxdWFsQXJlYTtcbiAgZXhwb3J0cy5nZW9BemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxFcXVhbEFyZWFSYXc7XG4gIGV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQgPSBhemltdXRoYWxFcXVpZGlzdGFudDtcbiAgZXhwb3J0cy5nZW9BemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbEVxdWlkaXN0YW50UmF3O1xuICBleHBvcnRzLmdlb0JvdW5kcyA9IGJvdW5kcztcbiAgZXhwb3J0cy5nZW9DZW50cm9pZCA9IGNlbnRyb2lkJDE7XG4gIGV4cG9ydHMuZ2VvQ2lyY2xlID0gY2lyY2xlJDE7XG4gIGV4cG9ydHMuZ2VvQ2xpcEV4dGVudCA9IGV4dGVudCQxO1xuICBleHBvcnRzLmdlb0NvbmljQ29uZm9ybWFsID0gY29uaWNDb25mb3JtYWw7XG4gIGV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWxSYXcgPSBjb25pY0NvbmZvcm1hbFJhdztcbiAgZXhwb3J0cy5nZW9Db25pY0VxdWFsQXJlYSA9IGNvbmljRXF1YWxBcmVhO1xuICBleHBvcnRzLmdlb0NvbmljRXF1YWxBcmVhUmF3ID0gY29uaWNFcXVhbEFyZWFSYXc7XG4gIGV4cG9ydHMuZ2VvQ29uaWNFcXVpZGlzdGFudCA9IGNvbmljRXF1aWRpc3RhbnQ7XG4gIGV4cG9ydHMuZ2VvQ29uaWNFcXVpZGlzdGFudFJhdyA9IGNvbmljRXF1aWRpc3RhbnRSYXc7XG4gIGV4cG9ydHMuZ2VvRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgZXhwb3J0cy5nZW9FcXVpcmVjdGFuZ3VsYXIgPSBlcXVpcmVjdGFuZ3VsYXI7XG4gIGV4cG9ydHMuZ2VvRXF1aXJlY3Rhbmd1bGFyUmF3ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuICBleHBvcnRzLmdlb0dub21vbmljID0gZ25vbW9uaWM7XG4gIGV4cG9ydHMuZ2VvR25vbW9uaWNSYXcgPSBnbm9tb25pY1JhdztcbiAgZXhwb3J0cy5nZW9HcmF0aWN1bGUgPSBncmF0aWN1bGU7XG4gIGV4cG9ydHMuZ2VvSW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZSQyO1xuICBleHBvcnRzLmdlb0xlbmd0aCA9IGxlbmd0aCQyO1xuICBleHBvcnRzLmdlb01lcmNhdG9yID0gbWVyY2F0b3I7XG4gIGV4cG9ydHMuZ2VvTWVyY2F0b3JSYXcgPSBtZXJjYXRvclJhdztcbiAgZXhwb3J0cy5nZW9PcnRob2dyYXBoaWMgPSBvcnRob2dyYXBoaWM7XG4gIGV4cG9ydHMuZ2VvT3J0aG9ncmFwaGljUmF3ID0gb3J0aG9ncmFwaGljUmF3O1xuICBleHBvcnRzLmdlb1BhdGggPSBpbmRleCQzO1xuICBleHBvcnRzLmdlb1Byb2plY3Rpb24gPSBwcm9qZWN0aW9uO1xuICBleHBvcnRzLmdlb1Byb2plY3Rpb25NdXRhdG9yID0gcHJvamVjdGlvbk11dGF0b3I7XG4gIGV4cG9ydHMuZ2VvUm90YXRpb24gPSByb3RhdGlvbjtcbiAgZXhwb3J0cy5nZW9TdGVyZW9ncmFwaGljID0gc3RlcmVvZ3JhcGhpYztcbiAgZXhwb3J0cy5nZW9TdGVyZW9ncmFwaGljUmF3ID0gc3RlcmVvZ3JhcGhpY1JhdztcbiAgZXhwb3J0cy5nZW9TdHJlYW0gPSBnZW9TdHJlYW07XG4gIGV4cG9ydHMuZ2VvVHJhbnNmb3JtID0gdHJhbnNmb3JtJDE7XG4gIGV4cG9ydHMuZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yID0gdHJhbnN2ZXJzZU1lcmNhdG9yO1xuICBleHBvcnRzLmdlb1RyYW5zdmVyc2VNZXJjYXRvclJhdyA9IHRyYW5zdmVyc2VNZXJjYXRvclJhdztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpOyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImQzIiwidmVyc2lvbiIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiYmlzZWN0b3IiLCJjb21wYXJlIiwibGVuZ3RoIiwiYXNjZW5kaW5nQ29tcGFyYXRvciIsImxlZnQiLCJ4IiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwiZiIsImQiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RSaWdodCIsImJpc2VjdExlZnQiLCJkZXNjZW5kaW5nIiwibnVtYmVyIiwidmFyaWFuY2UiLCJhcnJheSIsIm4iLCJtIiwicyIsImkiLCJqIiwiaXNOYU4iLCJkZXZpYXRpb24iLCJ2IiwiTWF0aCIsInNxcnQiLCJleHRlbnQiLCJjIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsIm1hcCIsImNvbnN0YW50IiwiaWRlbnRpdHkiLCJyYW5nZSIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJhcmd1bWVudHMiLCJtYXgiLCJjZWlsIiwiZTEwIiwiZTUiLCJlMiIsInRpY2tzIiwiY291bnQiLCJ0aWNrU3RlcCIsImZsb29yIiwic3RlcDAiLCJhYnMiLCJzdGVwMSIsInBvdyIsImxvZyIsIkxOMTAiLCJlcnJvciIsInN0dXJnZXMiLCJ2YWx1ZXMiLCJMTjIiLCJoaXN0b2dyYW0iLCJ2YWx1ZSIsImRvbWFpbiIsInRocmVzaG9sZCIsImRhdGEiLCJ4eiIsIngwIiwieDEiLCJ0eiIsImlzQXJyYXkiLCJzaGlmdCIsInBvcCIsImJpbnMiLCJiaW4iLCJwdXNoIiwiXyIsInRocmVzaG9sZHMiLCJjYWxsIiwicCIsImgiLCJmcmVlZG1hbkRpYWNvbmlzIiwibWluIiwic29ydCIsInNjb3R0IiwibWVhbiIsIm1lZGlhbiIsIm51bWJlcnMiLCJtZXJnZSIsImFycmF5cyIsIm1lcmdlZCIsInBhaXJzIiwicGVybXV0ZSIsImluZGV4ZXMiLCJwZXJtdXRlcyIsInNjYW4iLCJ4aSIsInhqIiwic2h1ZmZsZSIsImkwIiwiaTEiLCJ0IiwicmFuZG9tIiwic3VtIiwidHJhbnNwb3NlIiwibWF0cml4Iiwicm93IiwiemlwIiwicHJlZml4IiwiTWFwIiwibWFwJDEiLCJjb25zdHJ1Y3RvciIsImhhcyIsImtleSIsImdldCIsInNldCIsInJlbW92ZSIsInByb3BlcnR5IiwiY2xlYXIiLCJrZXlzIiwiZW50cmllcyIsInNpemUiLCJlbXB0eSIsImVhY2giLCJvYmplY3QiLCJvIiwibmVzdCIsInNvcnRLZXlzIiwic29ydFZhbHVlcyIsInJvbGx1cCIsImFwcGx5IiwiZGVwdGgiLCJjcmVhdGVSZXN1bHQiLCJzZXRSZXN1bHQiLCJrZXlWYWx1ZSIsInZhbHVlc0J5S2V5IiwicmVzdWx0Iiwic29ydEtleSIsImsiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJvcmRlciIsIlNldCIsInByb3RvIiwiYWRkIiwidW5pZm9ybSIsIm5vcm1hbCIsIm11Iiwic2lnbWEiLCJyIiwieSIsImxvZ05vcm1hbCIsInJhbmRvbU5vcm1hbCIsImV4cCIsImlyd2luSGFsbCIsImJhdGVzIiwicmFuZG9tSXJ3aW5IYWxsIiwiZXhwb25lbnRpYWwiLCJsYW1iZGEiLCJsaW5lYXIiLCJxdWFkSW4iLCJxdWFkT3V0IiwicXVhZEluT3V0IiwiY3ViaWNJbiIsImN1YmljT3V0IiwiZWFzZUN1YmljSW5PdXQiLCJleHBvbmVudCIsInBvbHlJbiIsImN1c3RvbSIsImUiLCJwb2x5T3V0IiwicG9seUluT3V0IiwicGkiLCJQSSIsImhhbGZQaSIsInNpbkluIiwiY29zIiwic2luT3V0Iiwic2luIiwic2luSW5PdXQiLCJleHBJbiIsImV4cE91dCIsImV4cEluT3V0IiwiY2lyY2xlSW4iLCJjaXJjbGVPdXQiLCJjaXJjbGVJbk91dCIsImIxIiwiYjIiLCJiMyIsImI0IiwiYjUiLCJiNiIsImI3IiwiYjgiLCJiOSIsImIwIiwiYm91bmNlSW4iLCJib3VuY2VPdXQiLCJib3VuY2VJbk91dCIsIm92ZXJzaG9vdCIsImJhY2tJbiIsImJhY2tPdXQiLCJiYWNrSW5PdXQiLCJ0YXUiLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJlbGFzdGljSW4iLCJhc2luIiwiZWxhc3RpY091dCIsImVsYXN0aWNJbk91dCIsImFyZWEiLCJwb2x5Z29uIiwiY2VudHJvaWQiLCJjcm9zcyIsImxleGljb2dyYXBoaWNPcmRlciIsImNvbXB1dGVVcHBlckh1bGxJbmRleGVzIiwicG9pbnRzIiwiaHVsbCIsInNvcnRlZFBvaW50cyIsImZsaXBwZWRQb2ludHMiLCJ1cHBlckluZGV4ZXMiLCJsb3dlckluZGV4ZXMiLCJza2lwTGVmdCIsInNraXBSaWdodCIsImNvbnRhaW5zIiwicG9pbnQiLCJ5MCIsInkxIiwiaW5zaWRlIiwibGVuZ3RoJDEiLCJ4YSIsInlhIiwieGIiLCJ5YiIsInBlcmltZXRlciIsInBpJDEiLCJ0YXUkMSIsImVwc2lsb24iLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsInBhdGgiLCJtb3ZlVG8iLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsIngyIiwieTIiLCJhcmNUbyIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwiRXJyb3IiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwibCIsInRhbiIsImFjb3MiLCJ0MDEiLCJ0MjEiLCJhcmMiLCJhMCIsImExIiwiY2N3IiwiZHgiLCJkeSIsImN3IiwiZGEiLCJyZWN0IiwidyIsInRvU3RyaW5nIiwiam9pbiIsInRyZWVfYWRkIiwiX3giLCJfeSIsImNvdmVyIiwidHJlZSIsInBhcmVudCIsIm5vZGUiLCJfcm9vdCIsImxlYWYiLCJ4bSIsInltIiwieHAiLCJ5cCIsImJvdHRvbSIsIm5leHQiLCJhZGRBbGwiLCJ5eiIsIkluZmluaXR5IiwidHJlZV9jb3ZlciIsInoiLCJ0cmVlX2RhdGEiLCJ2aXNpdCIsInRyZWVfZXh0ZW50IiwidW5kZWZpbmVkIiwiUXVhZCIsInRyZWVfZmluZCIsInJhZGl1cyIsIngzIiwieTMiLCJxdWFkcyIsInEiLCJkMiIsInRyZWVfcmVtb3ZlIiwicmV0YWluZXIiLCJwcmV2aW91cyIsInJlbW92ZUFsbCIsInRyZWVfcm9vdCIsInRyZWVfc2l6ZSIsInRyZWVfdmlzaXQiLCJjYWxsYmFjayIsImNoaWxkIiwidHJlZV92aXNpdEFmdGVyIiwiZGVmYXVsdFgiLCJ0cmVlX3giLCJkZWZhdWx0WSIsInRyZWVfeSIsInF1YWR0cmVlIiwibm9kZXMiLCJRdWFkdHJlZSIsImxlYWZfY29weSIsImNvcHkiLCJ0cmVlUHJvdG8iLCJzb3VyY2UiLCJ0YXJnZXQiLCJmaW5kIiwicm9vdCIsInZpc2l0QWZ0ZXIiLCJzbGljZSQxIiwibm9hYm9ydCIsIlF1ZXVlIiwiX3NpemUiLCJfY2FsbCIsIl9lcnJvciIsIl90YXNrcyIsIl9kYXRhIiwiX3dhaXRpbmciLCJfYWN0aXZlIiwiX2VuZGVkIiwiX3N0YXJ0IiwicXVldWUiLCJkZWZlciIsInBva2UiLCJhYm9ydCIsImF3YWl0IiwicmVzdWx0cyIsImNvbmNhdCIsIm1heWJlTm90aWZ5IiwiYXdhaXRBbGwiLCJlbmQiLCJjb25jdXJyZW5jeSIsImNvbnN0YW50JDEiLCJlcHNpbG9uJDEiLCJwaSQyIiwiaGFsZlBpJDEiLCJ0YXUkMiIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsInN0YXJ0QW5nbGUiLCJhcmNFbmRBbmdsZSIsImVuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJwYWRBbmdsZSIsImludGVyc2VjdCIsIngxMCIsInkxMCIsIngzMiIsInkzMiIsImNvcm5lclRhbmdlbnRzIiwicjEiLCJyYyIsIm94Iiwib3kiLCJ4MTEiLCJ5MTEiLCJ4MDAiLCJ5MDAiLCJEIiwiY3gwIiwiY3kwIiwiY3gxIiwiY3kxIiwiZHgwIiwiZHkwIiwiZHgxIiwiZHkxIiwiY3giLCJjeSIsImNvcm5lclJhZGl1cyIsInBhZFJhZGl1cyIsImNvbnRleHQiLCJidWZmZXIiLCJyMCIsImEwMSIsImExMSIsImEwMCIsImExMCIsImRhMCIsImRhMSIsImFwIiwicnAiLCJyYzAiLCJyYzEiLCJ0MCIsInQxIiwicDAiLCJwMSIsIm9jIiwiYXgiLCJheSIsImJ4IiwiYnkiLCJrYyIsImxjIiwiYXRhbjIiLCJMaW5lYXIiLCJfY29udGV4dCIsImFyZWFTdGFydCIsIl9saW5lIiwiYXJlYUVuZCIsImxpbmVTdGFydCIsIl9wb2ludCIsImxpbmVFbmQiLCJjdXJ2ZUxpbmVhciIsImxpbmUiLCJ4JCQiLCJ5JCQiLCJkZWZpbmVkIiwiY3VydmUiLCJvdXRwdXQiLCJkZWZpbmVkMCIsImFyZWEkMSIsIngweiIsInkweiIsImFyZWFsaW5lIiwibGluZVgwIiwibGluZVkwIiwibGluZVkxIiwibGluZVgxIiwiZGVzY2VuZGluZyQxIiwiaWRlbnRpdHkkMSIsInBpZSIsImluZGV4IiwiYXJjcyIsInBhIiwiY3VydmVSYWRpYWxMaW5lYXIiLCJjdXJ2ZVJhZGlhbCIsIlJhZGlhbCIsIl9jdXJ2ZSIsInJhZGlhbCIsInJhZGlhbExpbmUiLCJhbmdsZSIsInJhZGlhbExpbmUkMSIsInJhZGlhbEFyZWEiLCJsaW5lU3RhcnRBbmdsZSIsImxpbmVFbmRBbmdsZSIsImxpbmVJbm5lclJhZGl1cyIsImxpbmVPdXRlclJhZGl1cyIsImNpcmNsZSIsImRyYXciLCJjcm9zcyQxIiwidGFuMzAiLCJ0YW4zMF8yIiwiZGlhbW9uZCIsImthIiwia3IiLCJreCIsImt5Iiwic3RhciIsInNxdWFyZSIsInNxcnQzIiwidHJpYW5nbGUiLCJ3eWUiLCJzeW1ib2xzIiwic3ltYm9sIiwidHlwZSIsIm5vb3AiLCJ0aGF0IiwiQmFzaXMiLCJiYXNpcyIsIkJhc2lzQ2xvc2VkIiwiX3gyIiwiX3gzIiwiX3g0IiwiX3kyIiwiX3kzIiwiX3k0IiwiYmFzaXNDbG9zZWQiLCJCYXNpc09wZW4iLCJiYXNpc09wZW4iLCJCdW5kbGUiLCJiZXRhIiwiX2Jhc2lzIiwiX2JldGEiLCJidW5kbGUiLCJwb2ludCQxIiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiY2FyZGluYWxDbG9zZWQiLCJDYXJkaW5hbE9wZW4iLCJjYXJkaW5hbE9wZW4iLCJwb2ludCQyIiwiX2wwMV9hIiwiX2wwMV8yYSIsIl9sMTJfYSIsIl9sMTJfMmEiLCJfbDIzX2EiLCJfbDIzXzJhIiwiQ2F0bXVsbFJvbSIsImFscGhhIiwiX2FscGhhIiwieDIzIiwieTIzIiwiY2F0bXVsbFJvbSIsIkNhdG11bGxSb21DbG9zZWQiLCJjYXRtdWxsUm9tQ2xvc2VkIiwiQ2F0bXVsbFJvbU9wZW4iLCJjYXRtdWxsUm9tT3BlbiIsIkxpbmVhckNsb3NlZCIsImxpbmVhckNsb3NlZCIsInNpZ24iLCJzbG9wZTMiLCJoMCIsImgxIiwiczAiLCJzMSIsInNsb3BlMiIsInBvaW50JDMiLCJNb25vdG9uZVgiLCJfdDAiLCJNb25vdG9uZVkiLCJSZWZsZWN0Q29udGV4dCIsIk9iamVjdCIsImNyZWF0ZSIsIm1vbm90b25lWCIsIm1vbm90b25lWSIsIk5hdHVyYWwiLCJweCIsImNvbnRyb2xQb2ludHMiLCJweSIsIm5hdHVyYWwiLCJTdGVwIiwiX3QiLCJzdGVwQmVmb3JlIiwic3RlcEFmdGVyIiwic2xpY2UkMiIsIm5vbmUiLCJzZXJpZXMiLCJub25lJDEiLCJzdGFja1ZhbHVlIiwic3RhY2siLCJvZmZzZXQiLCJreiIsInN6Iiwib3oiLCJraSIsInNpIiwic2lqIiwiZXhwYW5kIiwic2lsaG91ZXR0ZSIsIndpZ2dsZSIsInMyIiwic2lqMCIsInNpajEiLCJzMyIsInNrIiwic2tqMCIsInNrajEiLCJhc2NlbmRpbmckMSIsInN1bXMiLCJzdW0kMSIsImRlc2NlbmRpbmckMiIsInJldmVyc2UiLCJpbnNpZGVPdXQiLCJ0b3AiLCJ0b3BzIiwiYm90dG9tcyIsImV4dGVuZCIsImRlZmluaXRpb24iLCJDb2xvciIsImRhcmtlciIsImJyaWdodGVyIiwicmVIZXgzIiwicmVIZXg2IiwicmVSZ2JJbnRlZ2VyIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yIiwiZGlzcGxheWFibGUiLCJyZ2IiLCJmb3JtYXQiLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJleGVjIiwicGFyc2VJbnQiLCJSZ2IiLCJyZ2JuIiwicmdiYSIsImhzbGEiLCJoYXNPd25Qcm9wZXJ0eSIsImciLCJyZ2JDb252ZXJ0Iiwib3BhY2l0eSIsImNvbG9yUmdiIiwicm91bmQiLCJIc2wiLCJoc2xDb252ZXJ0IiwiY29sb3JIc2wiLCJtMiIsIm0xIiwiaHNsMnJnYiIsImRlZzJyYWQiLCJyYWQyZGVnIiwiS24iLCJYbiIsIlluIiwiWm4iLCJ0MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsInJnYjJ4eXoiLCJ4eXoybGFiIiwibGFiIiwibGFiMnh5eiIsInh5ejJyZ2IiLCJoY2xDb252ZXJ0IiwiY29sb3JIY2wiLCJBIiwiQiIsIkMiLCJFIiwiRUQiLCJFQiIsIkJDX0RBIiwiY3ViZWhlbGl4Q29udmVydCIsIkN1YmVoZWxpeCIsImJsIiwiY3ViZWhlbGl4IiwiY29zaCIsInNpbmgiLCJiYXNpcyQxIiwidjAiLCJ2MSIsInYyIiwidjMiLCJiYXNpcyQyIiwiYmFzaXNDbG9zZWQkMSIsImNvbnN0YW50JDIiLCJsaW5lYXIkMSIsImV4cG9uZW50aWFsJDEiLCJodWUiLCJnYW1tYSIsIm5vZ2FtbWEiLCJpbnRlcnBvbGF0ZVJnYiIsInJnYkdhbW1hIiwicmdiU3BsaW5lIiwic3BsaW5lIiwiY29sb3JzIiwicmdiQmFzaXMiLCJyZ2JCYXNpc0Nsb3NlZCIsImFycmF5JDEiLCJuYiIsIm5hIiwiaW50ZXJwb2xhdGUiLCJkYXRlIiwiRGF0ZSIsInNldFRpbWUiLCJpbnRlcnBvbGF0ZU51bWJlciIsInJlQSIsInJlQiIsIlJlZ0V4cCIsInplcm8iLCJvbmUiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImJpIiwibGFzdEluZGV4IiwiYW0iLCJibSIsImJzIiwiaW50ZXJwb2xhdGVSb3VuZCIsImRlZ3JlZXMiLCJpZGVudGl0eSQyIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImRlY29tcG9zZSIsImF0YW4iLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwicGFyc2VDc3MiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJkZWZhdWx0VmlldyIsInN0eWxlIiwidHJhbnNmb3JtIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImFwcGVuZENoaWxkIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInJlbW92ZUNoaWxkIiwic3BsaXQiLCJwYXJzZVN2ZyIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicGFyc2UiLCJweENvbW1hIiwicHhQYXJlbiIsImRlZ1BhcmVuIiwidHJhbnNsYXRlIiwic2NhbGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMiIsInJobyIsIlNRUlQyIiwicmhvMiIsInJobzQiLCJlcHNpbG9uMiIsInRhbmgiLCJpbnRlcnBvbGF0ZVpvb20iLCJ1eDAiLCJ1eTAiLCJ3MCIsInV4MSIsInV5MSIsIncxIiwiUyIsImQxIiwiY29zaHIwIiwidSIsImR1cmF0aW9uIiwiaHNsIiwiaHNsJDEiLCJoc2xMb25nIiwibGFiJDEiLCJoY2wiLCJoY2wkMSIsImhjbExvbmciLCJjdWJlaGVsaXgkMSIsImN1YmVoZWxpeEdhbW1hIiwiY3ViZWhlbGl4JCQiLCJjdWJlaGVsaXgkMiIsImludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyIsInF1YW50aXplIiwiaW50ZXJwb2xhdG9yIiwic2FtcGxlcyIsIm5vb3AkMSIsImRpc3BhdGNoIiwiRGlzcGF0Y2giLCJwYXJzZVR5cGVuYW1lcyIsInR5cGVuYW1lcyIsInR5cGVzIiwibmFtZSIsImluZGV4T2YiLCJvbiIsInR5cGVuYW1lIiwiVCIsInNldCQxIiwiYXJncyIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJjdXN0b21Db252ZXJ0ZXIiLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiZm9yRWFjaCIsImNvbHVtbiIsImRzdiIsImRlbGltaXRlciIsInJlRm9ybWF0IiwiZGVsaW1pdGVyQ29kZSIsImNoYXJDb2RlQXQiLCJ0ZXh0IiwiY29udmVydCIsInBhcnNlUm93cyIsIkVPTCIsIkVPRiIsIk4iLCJJIiwiZW9sIiwidG9rZW4iLCJyZXBsYWNlIiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3dzIiwiZm9ybWF0Um93IiwidGVzdCIsImNzdiIsImNzdlBhcnNlIiwiY3N2UGFyc2VSb3dzIiwiY3N2Rm9ybWF0IiwiY3N2Rm9ybWF0Um93cyIsInRzdiIsInRzdlBhcnNlIiwidHN2UGFyc2VSb3dzIiwidHN2Rm9ybWF0IiwidHN2Rm9ybWF0Um93cyIsInJlcXVlc3QiLCJ1cmwiLCJldmVudCIsIm1pbWVUeXBlIiwiaGVhZGVycyIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwidXNlciIsInBhc3N3b3JkIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJ0aW1lb3V0IiwiWERvbWFpblJlcXVlc3QiLCJvbmxvYWQiLCJvbmVycm9yIiwib250aW1lb3V0IiwicmVzcG9uZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJoYXNSZXNwb25zZSIsIm9ucHJvZ3Jlc3MiLCJoZWFkZXIiLCJzZW5kIiwicG9zdCIsIm1ldGhvZCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImZpeENhbGxiYWNrIiwicmVzcG9uc2VUZXh0IiwiZGVmYXVsdE1pbWVUeXBlIiwiaHRtbCIsImNyZWF0ZVJhbmdlIiwiY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50IiwianNvbiIsInhtbCIsInJlc3BvbnNlWE1MIiwiZHN2JDEiLCJyZXNwb25zZU9mIiwiY3N2JDEiLCJ0c3YkMSIsImZyYW1lIiwiaW50ZXJ2YWwiLCJwb2tlRGVsYXkiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiY2xlYXJOb3ciLCJUaW1lciIsIl90aW1lIiwiX25leHQiLCJ0aW1lciIsInJlc3RhcnQiLCJkZWxheSIsInRpbWUiLCJUeXBlRXJyb3IiLCJzbGVlcCIsInRpbWVyRmx1c2giLCJ3YWtlIiwibmFwIiwicG9rZSQxIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidGltZW91dCQxIiwiZWxhcHNlZCIsImludGVydmFsJDEiLCJ0b3RhbCIsInRpY2siLCJ0MCQxIiwidDEkMSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiZDAiLCJmaWx0ZXIiLCJldmVyeSIsImlzRmluaXRlIiwibWlsbGlzZWNvbmQiLCJtaWxsaXNlY29uZHMiLCJkdXJhdGlvblNlY29uZCIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25Ib3VyIiwiZHVyYXRpb25EYXkiLCJkdXJhdGlvbldlZWsiLCJzZWNvbmQiLCJnZXRVVENTZWNvbmRzIiwic2Vjb25kcyIsIm1pbnV0ZSIsImdldE1pbnV0ZXMiLCJtaW51dGVzIiwiaG91ciIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0SG91cnMiLCJob3VycyIsImRheSIsInNldEhvdXJzIiwic2V0RGF0ZSIsImdldERhdGUiLCJkYXlzIiwid2Vla2RheSIsImdldERheSIsInRpbWVXZWVrIiwidGltZU1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5Iiwic3VuZGF5cyIsIm1vbmRheXMiLCJ0dWVzZGF5cyIsIndlZG5lc2RheXMiLCJ0aHVyc2RheXMiLCJmcmlkYXlzIiwic2F0dXJkYXlzIiwibW9udGgiLCJzZXRNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJtb250aHMiLCJ5ZWFyIiwic2V0RnVsbFllYXIiLCJ5ZWFycyIsInV0Y01pbnV0ZSIsInNldFVUQ1NlY29uZHMiLCJnZXRVVENNaW51dGVzIiwidXRjTWludXRlcyIsInV0Y0hvdXIiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNIb3VycyIsInV0Y0RheSIsInNldFVUQ0hvdXJzIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJ1dGNEYXlzIiwidXRjV2Vla2RheSIsImdldFVUQ0RheSIsInV0Y1dlZWsiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y1N1bmRheXMiLCJ1dGNNb25kYXlzIiwidXRjVHVlc2RheXMiLCJ1dGNXZWRuZXNkYXlzIiwidXRjVGh1cnNkYXlzIiwidXRjRnJpZGF5cyIsInV0Y1NhdHVyZGF5cyIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwidXRjTW9udGhzIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwidXRjWWVhcnMiLCJmb3JtYXREZWNpbWFsIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwiZXhwb25lbnQkMSIsImZvcm1hdEdyb3VwIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJ3aWR0aCIsInN1YnN0cmluZyIsImZvcm1hdERlZmF1bHQiLCJ0b1ByZWNpc2lvbiIsIm91dCIsInByZWZpeEV4cG9uZW50IiwiZm9ybWF0UHJlZml4QXV0byIsImZvcm1hdFJvdW5kZWQiLCJmb3JtYXRUeXBlcyIsInRvRml4ZWQiLCJ0b1VwcGVyQ2FzZSIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwibWF0Y2giLCJmaWxsIiwiYWxpZ24iLCJjb21tYSIsInByZWNpc2lvbiIsInByZWZpeGVzIiwiaWRlbnRpdHkkMyIsImZvcm1hdExvY2FsZSIsImxvY2FsZSIsImdyb3VwIiwiY3VycmVuY3kiLCJkZWNpbWFsIiwibmV3Rm9ybWF0Iiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJwYWRkaW5nIiwiZm9ybWF0UHJlZml4IiwiZGVmYXVsdExvY2FsZSIsInByZWNpc2lvbkZpeGVkIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJsb2NhbERhdGUiLCJIIiwiTSIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3WWVhciIsImZvcm1hdExvY2FsZSQxIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsImZvcm1hdFJlIiwicGVyaW9kTG9va3VwIiwiZm9ybWF0TG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJmb3JtYXRTaG9ydFdlZWtkYXkiLCJmb3JtYXRXZWVrZGF5IiwiZm9ybWF0U2hvcnRNb250aCIsImZvcm1hdE1vbnRoIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdEhvdXIyNCIsImZvcm1hdEhvdXIxMiIsImZvcm1hdERheU9mWWVhciIsImZvcm1hdE1pbGxpc2Vjb25kcyIsImZvcm1hdE1vbnRoTnVtYmVyIiwiZm9ybWF0TWludXRlcyIsImZvcm1hdFBlcmlvZCIsImZvcm1hdFNlY29uZHMiLCJmb3JtYXRXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla2RheU51bWJlciIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRZZWFyIiwiZm9ybWF0RnVsbFllYXIiLCJmb3JtYXRab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJ1dGNGb3JtYXRzIiwiZm9ybWF0VVRDU2hvcnRXZWVrZGF5IiwiZm9ybWF0VVRDV2Vla2RheSIsImZvcm1hdFVUQ1Nob3J0TW9udGgiLCJmb3JtYXRVVENNb250aCIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENQZXJpb2QiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla051bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXIiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsInBhcnNlcyIsInBhcnNlU2hvcnRXZWVrZGF5IiwicGFyc2VXZWVrZGF5IiwicGFyc2VTaG9ydE1vbnRoIiwicGFyc2VNb250aCIsInBhcnNlTG9jYWxlRGF0ZVRpbWUiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZUhvdXIyNCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VNaW51dGVzIiwicGFyc2VQZXJpb2QiLCJwYXJzZVNlY29uZHMiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJwYXJzZVdlZWtkYXlOdW1iZXIiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJwYXJzZUxvY2FsZURhdGUiLCJwYXJzZUxvY2FsZVRpbWUiLCJwYXJzZVllYXIiLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2Vab25lIiwicGFyc2VMaXRlcmFsUGVyY2VudCIsIlgiLCJzdHJpbmciLCJwYWQiLCJwYWRzIiwiY2hhckF0IiwibmV3UGFyc2UiLCJuZXdEYXRlIiwicGFyc2VTcGVjaWZpZXIiLCJXIiwiVSIsIloiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicmVxdW90ZSIsIm5hbWVzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImxvY2FsZSQxIiwiZGVmYXVsdExvY2FsZSQxIiwidGltZUZvcm1hdCIsInRpbWVQYXJzZSIsImlzb1NwZWNpZmllciIsImZvcm1hdElzb05hdGl2ZSIsInRvSVNPU3RyaW5nIiwiZm9ybWF0SXNvIiwicGFyc2VJc29OYXRpdmUiLCJwYXJzZUlzbyIsImFycmF5JDIiLCJtYXAkMiIsInNsaWNlJDMiLCJpbXBsaWNpdCIsIm9yZGluYWwiLCJ1bmtub3duIiwiYmFuZCIsIm9yZGluYWxSYW5nZSIsInJhbmdlJCQiLCJiYW5kd2lkdGgiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJyZXNjYWxlIiwicmFuZ2VSb3VuZCIsInBvaW50aXNoIiwicG9pbnQkNCIsImNvbnN0YW50JDMiLCJudW1iZXIkMSIsInVuaXQiLCJkZWludGVycG9sYXRlIiwiZGVpbnRlcnBvbGF0ZUNsYW1wIiwicmVpbnRlcnBvbGF0ZUNsYW1wIiwicmVpbnRlcnBvbGF0ZSIsImJpbWFwIiwicG9seW1hcCIsImNsYW1wIiwiY29udGludW91cyIsImRlaW50ZXJwb2xhdGUkJCIsImludGVycG9sYXRlJCQiLCJwaWVjZXdpc2UiLCJpbnB1dCIsImludmVydCIsInRpY2tGb3JtYXQiLCJsaW5lYXJpc2giLCJuaWNlIiwibGluZWFyJDIiLCJpZGVudGl0eSQ0IiwiZGVpbnRlcnBvbGF0ZSQxIiwicG93MTAiLCJwb3dwIiwiYmFzZSIsImxvZ3AiLCJsb2cxMCIsImxvZzIiLCJyZWZsZWN0IiwibG9ncyIsInBvd3MiLCJyYWlzZSIsInF1YW50aWxlIiwiaW52ZXJ0RXh0ZW50IiwicXVhbnRpbGVzIiwicXVhbnRpemUkMSIsInRocmVzaG9sZCQxIiwiZHVyYXRpb25TZWNvbmQkMSIsImR1cmF0aW9uTWludXRlJDEiLCJkdXJhdGlvbkhvdXIkMSIsImR1cmF0aW9uRGF5JDEiLCJkdXJhdGlvbldlZWskMSIsImR1cmF0aW9uTW9udGgiLCJkdXJhdGlvblllYXIiLCJkYXRlJDEiLCJudW1iZXIkMiIsImNhbGVuZGFyIiwid2VlayIsImZvcm1hdE1pbGxpc2Vjb25kIiwiZm9ybWF0U2Vjb25kIiwiZm9ybWF0TWludXRlIiwiZm9ybWF0SG91ciIsImZvcm1hdERheSIsImZvcm1hdFdlZWsiLCJ0aWNrSW50ZXJ2YWxzIiwidGlja0ludGVydmFsIiwidXRjVGltZSIsImNhdGVnb3J5MTAiLCJjYXRlZ29yeTIwYiIsImNhdGVnb3J5MjBjIiwiY2F0ZWdvcnkyMCIsImN1YmVoZWxpeCQzIiwid2FybSIsImNvb2wiLCJyYWluYm93IiwicmFpbmJvdyQxIiwidHMiLCJyYW1wIiwidmlyaWRpcyIsIm1hZ21hIiwiaW5mZXJubyIsInBsYXNtYSIsInNlcXVlbnRpYWwiLCJ4aHRtbCIsIm5hbWVzcGFjZXMiLCJzdmciLCJ4bGluayIsInhtbG5zIiwibmFtZXNwYWNlIiwic3BhY2UiLCJsb2NhbCIsImNyZWF0b3JJbmhlcml0Iiwib3duZXJEb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImNyZWF0b3JGaXhlZCIsImZ1bGxuYW1lIiwiY3JlYXRvciIsIm5leHRJZCIsIkxvY2FsIiwiaWQiLCJwYXJlbnROb2RlIiwibWF0Y2hlciIsInNlbGVjdG9yIiwibWF0Y2hlcyIsImVsZW1lbnQiLCJ2ZW5kb3JNYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlciQxIiwiZmlsdGVyRXZlbnRzIiwiZWxlbWVudCQxIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImNvbnRleHRMaXN0ZW5lciIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJldmVudDEiLCJldmVudDAiLCJfX2RhdGFfXyIsInBhcnNlVHlwZW5hbWVzJDEiLCJvblJlbW92ZSIsIl9fb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FwdHVyZSIsIm9uQWRkIiwid3JhcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZWxlY3Rpb25fb24iLCJjdXN0b21FdmVudCIsInNvdXJjZUV2ZW50IiwiY3VycmVudCIsInBvaW50JDUiLCJvd25lclNWR0VsZW1lbnQiLCJjcmVhdGVTVkdQb2ludCIsImNsaWVudFgiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudExlZnQiLCJjbGllbnRUb3AiLCJtb3VzZSIsImNoYW5nZWRUb3VjaGVzIiwibm9uZSQyIiwicXVlcnlTZWxlY3RvciIsInNlbGVjdGlvbl9zZWxlY3QiLCJzZWxlY3QiLCJncm91cHMiLCJfZ3JvdXBzIiwic3ViZ3JvdXBzIiwic3ViZ3JvdXAiLCJzdWJub2RlIiwiU2VsZWN0aW9uIiwiX3BhcmVudHMiLCJzZWxlY3RvckFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzZWxlY3Rpb25fc2VsZWN0QWxsIiwicGFyZW50cyIsInNlbGVjdGlvbl9maWx0ZXIiLCJzcGFyc2UiLCJ1cGRhdGUiLCJzZWxlY3Rpb25fZW50ZXIiLCJfZW50ZXIiLCJFbnRlck5vZGUiLCJkYXR1bSIsIl9wYXJlbnQiLCJpbnNlcnRCZWZvcmUiLCJjb25zdGFudCQ0Iiwia2V5UHJlZml4IiwiYmluZEluZGV4IiwiZW50ZXIiLCJleGl0IiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwic2VsZWN0aW9uX2RhdGEiLCJiaW5kIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwiZXhpdEdyb3VwIiwiX2V4aXQiLCJzZWxlY3Rpb25fZXhpdCIsInNlbGVjdGlvbl9tZXJnZSIsInNlbGVjdGlvbiIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJzZWxlY3Rpb25fb3JkZXIiLCJuZXh0U2libGluZyIsInNlbGVjdGlvbl9zb3J0IiwiYXNjZW5kaW5nJDIiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJzZWxlY3Rpb25fY2FsbCIsInNlbGVjdGlvbl9ub2RlcyIsInNlbGVjdGlvbl9ub2RlIiwic2VsZWN0aW9uX3NpemUiLCJzZWxlY3Rpb25fZW1wdHkiLCJzZWxlY3Rpb25fZWFjaCIsImF0dHJSZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRyUmVtb3ZlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJhdHRyRnVuY3Rpb25OUyIsInNlbGVjdGlvbl9hdHRyIiwiZ2V0QXR0cmlidXRlTlMiLCJnZXRBdHRyaWJ1dGUiLCJ3aW5kb3ciLCJzdHlsZVJlbW92ZSIsInJlbW92ZVByb3BlcnR5Iiwic3R5bGVDb25zdGFudCIsInByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJzdHlsZUZ1bmN0aW9uIiwic2VsZWN0aW9uX3N0eWxlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsInNlbGVjdGlvbl9wcm9wZXJ0eSIsImNsYXNzQXJyYXkiLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsInNwbGljZSIsImNsYXNzZWRBZGQiLCJsaXN0IiwiY2xhc3NlZFJlbW92ZSIsImNsYXNzZWRUcnVlIiwiY2xhc3NlZEZhbHNlIiwiY2xhc3NlZEZ1bmN0aW9uIiwic2VsZWN0aW9uX2NsYXNzZWQiLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJ0ZXh0Q29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJzZWxlY3Rpb25fdGV4dCIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJodG1sQ29uc3RhbnQiLCJodG1sRnVuY3Rpb24iLCJzZWxlY3Rpb25faHRtbCIsInJhaXNlJDEiLCJzZWxlY3Rpb25fcmFpc2UiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJzZWxlY3Rpb25fbG93ZXIiLCJzZWxlY3Rpb25fYXBwZW5kIiwiY29uc3RhbnROdWxsIiwic2VsZWN0aW9uX2luc2VydCIsImJlZm9yZSIsInNlbGVjdGlvbl9yZW1vdmUiLCJzZWxlY3Rpb25fZGF0dW0iLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93JCQiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsInNlbGVjdGlvbl9kaXNwYXRjaCIsInNlbGVjdEFsbCIsImF0dHIiLCJjbGFzc2VkIiwiYXBwZW5kIiwiaW5zZXJ0IiwidG91Y2giLCJ0b3VjaGVzIiwiaWRlbnRpZmllciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIkVORElORyIsIkVOREVEIiwic2NoZWR1bGUiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJ0d2VlbiIsImVhc2UiLCJzdGF0ZSIsImluaXQiLCJzZXQkMiIsImdldCQxIiwic2VsZiIsImludGVycnVwdCIsImFjdGl2ZSIsInNlbGVjdGlvbl9pbnRlcnJ1cHQiLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0cmFuc2l0aW9uX3R3ZWVuIiwiX2lkIiwidHdlZW5WYWx1ZSIsInRyYW5zaXRpb24iLCJpbnRlcnBvbGF0ZSQxIiwiYXR0clJlbW92ZSQxIiwiYXR0clJlbW92ZU5TJDEiLCJhdHRyQ29uc3RhbnQkMSIsInZhbHVlMSIsInZhbHVlMDAiLCJpbnRlcnBvbGF0ZTAiLCJ2YWx1ZTAiLCJhdHRyQ29uc3RhbnROUyQxIiwiYXR0ckZ1bmN0aW9uJDEiLCJ2YWx1ZTEwIiwiYXR0ckZ1bmN0aW9uTlMkMSIsInRyYW5zaXRpb25fYXR0ciIsImF0dHJUd2VlbiIsImF0dHJUd2Vlbk5TIiwiX3ZhbHVlIiwidHJhbnNpdGlvbl9hdHRyVHdlZW4iLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsInRyYW5zaXRpb25fZGVsYXkiLCJkdXJhdGlvbkZ1bmN0aW9uIiwiZHVyYXRpb25Db25zdGFudCIsInRyYW5zaXRpb25fZHVyYXRpb24iLCJlYXNlQ29uc3RhbnQiLCJ0cmFuc2l0aW9uX2Vhc2UiLCJ0cmFuc2l0aW9uX2ZpbHRlciIsIlRyYW5zaXRpb24iLCJfbmFtZSIsInRyYW5zaXRpb25fbWVyZ2UiLCJzdGFydCQxIiwib25GdW5jdGlvbiIsIm9uMCIsIm9uMSIsInNpdCIsInRyYW5zaXRpb25fb24iLCJyZW1vdmVGdW5jdGlvbiIsInRyYW5zaXRpb25fcmVtb3ZlIiwidHJhbnNpdGlvbl9zZWxlY3QiLCJ0cmFuc2l0aW9uX3NlbGVjdEFsbCIsImNoaWxkcmVuIiwiaW5oZXJpdCIsIlNlbGVjdGlvbiQxIiwidHJhbnNpdGlvbl9zZWxlY3Rpb24iLCJzdHlsZVJlbW92ZSQxIiwic3R5bGVSZW1vdmVFbmQiLCJzdHlsZUNvbnN0YW50JDEiLCJzdHlsZUZ1bmN0aW9uJDEiLCJ0cmFuc2l0aW9uX3N0eWxlIiwic3R5bGVUd2VlbiIsInRyYW5zaXRpb25fc3R5bGVUd2VlbiIsInRleHRDb25zdGFudCQxIiwidGV4dEZ1bmN0aW9uJDEiLCJ0cmFuc2l0aW9uX3RleHQiLCJ0cmFuc2l0aW9uX3RyYW5zaXRpb24iLCJpZDAiLCJpZDEiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJkZWZhdWx0VGltaW5nIiwic2VsZWN0aW9uX3RyYW5zaXRpb24iLCJyb290JDEiLCJzbGljZSQ0IiwiaWRlbnRpdHkkNSIsImVwc2lsb24kMiIsInNjYWxlMCIsInNjYWxlMSIsImNlbnRlciIsImVudGVyaW5nIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsInNwYWNpbmciLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsInRpY2tFeGl0IiwidGlja0VudGVyIiwidGlja1NpemUiLCJheGlzVG9wIiwiYXhpc1JpZ2h0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiZGVmYXVsdFNlcGFyYXRpb24iLCJtZWFuWCIsInJlZHVjZSIsIm1lYW5YUmVkdWNlIiwibWF4WSIsIm1heFlSZWR1Y2UiLCJsZWFmTGVmdCIsImxlYWZSaWdodCIsImNsdXN0ZXIiLCJzZXBhcmF0aW9uIiwibm9kZVNpemUiLCJwcmV2aW91c05vZGUiLCJlYWNoQWZ0ZXIiLCJub2RlX2VhY2giLCJub2RlX2VhY2hCZWZvcmUiLCJub2RlX2VhY2hBZnRlciIsIm5vZGVfc3VtIiwibm9kZV9zb3J0IiwiZWFjaEJlZm9yZSIsIm5vZGVfcGF0aCIsImFuY2VzdG9yIiwibGVhc3RDb21tb25BbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsIm5vZGVfYW5jZXN0b3JzIiwibm9kZV9kZXNjZW5kYW50cyIsIm5vZGVfbGVhdmVzIiwibGVhdmVzIiwibm9kZV9saW5rcyIsImxpbmtzIiwiaGllcmFyY2h5IiwiTm9kZSIsInZhbHVlZCIsImNoaWxkcyIsImRlZmF1bHRDaGlsZHJlbiIsImNvbXB1dGVIZWlnaHQiLCJub2RlX2NvcHkiLCJjb3B5RGF0YSIsImhlaWdodCIsImRlc2NlbmRhbnRzIiwiTm9kZSQyIiwic2h1ZmZsZSQxIiwiaGVhZCIsInRhaWwiLCJlbmNsb3NlIiwiY2lyY2xlcyIsImVuY2xvc2VOIiwiZW5jbG9zZXMiLCJkciIsImwwIiwibDEiLCJsMiIsImVuY2xvc2UxIiwiZW5jbG9zZTIiLCJlbmNsb3NlMyIsInIyIiwicjIxIiwicjMiLCJhMiIsImMyIiwiYTMiLCJjMyIsImFiIiwicGxhY2UiLCJkYiIsImRjIiwiaW50ZXJzZWN0cyIsImRpc3RhbmNlMiIsIk5vZGUkMSIsInBhY2tFbmNsb3NlIiwiYWEiLCJiYSIsImNhIiwib2EiLCJzaiIsInBhY2siLCJzaWJsaW5ncyIsIm9wdGlvbmFsIiwicmVxdWlyZWQiLCJjb25zdGFudFplcm8iLCJjb25zdGFudCQ1IiwiZGVmYXVsdFJhZGl1cyIsInJhZGl1c0xlYWYiLCJwYWNrQ2hpbGRyZW4iLCJ0cmFuc2xhdGVDaGlsZCIsInJvdW5kTm9kZSIsInRyZWVtYXBEaWNlIiwicGFydGl0aW9uIiwicG9zaXRpb25Ob2RlIiwia2V5UHJlZml4JDEiLCJwcmVyb290IiwiYW1iaWd1b3VzIiwiZGVmYXVsdElkIiwiZGVmYXVsdFBhcmVudElkIiwicGFyZW50SWQiLCJzdHJhdGlmeSIsIm5vZGVJZCIsIm5vZGVLZXkiLCJub2RlQnlLZXkiLCJkZWZhdWx0U2VwYXJhdGlvbiQxIiwibmV4dExlZnQiLCJuZXh0UmlnaHQiLCJtb3ZlU3VidHJlZSIsIndtIiwid3AiLCJjaGFuZ2UiLCJleGVjdXRlU2hpZnRzIiwibmV4dEFuY2VzdG9yIiwidmltIiwiVHJlZU5vZGUiLCJ0cmVlUm9vdCIsImZpcnN0V2FsayIsInNlY29uZFdhbGsiLCJzaXplTm9kZSIsInR4IiwibWlkcG9pbnQiLCJhcHBvcnRpb24iLCJ2aXAiLCJ2b3AiLCJ2b20iLCJzaXAiLCJzb3AiLCJzaW0iLCJzb20iLCJ0cmVlbWFwU2xpY2UiLCJwaGkiLCJzcXVhcmlmeVJhdGlvIiwicmF0aW8iLCJub2RlVmFsdWUiLCJzdW1WYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJuZXdSYXRpbyIsIm1pblJhdGlvIiwiZGljZSIsInNxdWFyaWZ5IiwiaW5kZXgkMSIsInRpbGUiLCJwYWRkaW5nU3RhY2siLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwidHJlZW1hcCIsImJpbmFyeSIsInZhbHVlT2Zmc2V0IiwidmFsdWVUYXJnZXQiLCJ2YWx1ZUxlZnQiLCJ2YWx1ZVJpZ2h0IiwieWsiLCJ4ayIsInNsaWNlRGljZSIsInJlc3F1YXJpZnkiLCJfc3F1YXJpZnkiLCJjZW50ZXIkMSIsImZvcmNlIiwic3giLCJzeSIsImluaXRpYWxpemUiLCJjb25zdGFudCQ2IiwiamlnZ2xlIiwieCQxIiwidngiLCJ5JDEiLCJ2eSIsImNvbGxpZGUiLCJyYWRpaSIsInN0cmVuZ3RoIiwiaXRlcmF0aW9ucyIsInlpIiwicmkiLCJyaTIiLCJwcmVwYXJlIiwicXVhZCIsInJqIiwiaW5kZXgkMiIsImxpbmsiLCJkZWZhdWx0U3RyZW5ndGgiLCJzdHJlbmd0aHMiLCJkaXN0YW5jZSIsImRpc3RhbmNlcyIsImJpYXMiLCJub2RlQnlJZCIsImluaXRpYWxpemVTdHJlbmd0aCIsImluaXRpYWxpemVEaXN0YW5jZSIsIngkMiIsInkkMiIsImluaXRpYWxSYWRpdXMiLCJpbml0aWFsQW5nbGUiLCJzaW11bGF0aW9uIiwiYWxwaGFNaW4iLCJhbHBoYURlY2F5IiwiYWxwaGFUYXJnZXQiLCJ2ZWxvY2l0eURlY2F5IiwiZm9yY2VzIiwic3RlcHBlciIsImZ4IiwiZnkiLCJpbml0aWFsaXplTm9kZXMiLCJpbml0aWFsaXplRm9yY2UiLCJjbG9zZXN0IiwibWFueUJvZHkiLCJkaXN0YW5jZU1pbjIiLCJkaXN0YW5jZU1heDIiLCJ0aGV0YTIiLCJhY2N1bXVsYXRlIiwiZGlzdGFuY2VNaW4iLCJkaXN0YW5jZU1heCIsInRoZXRhIiwieCQzIiwieSQzIiwibm9wcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5vZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImRyYWdEaXNhYmxlIiwidmlldyIsIl9fbm9zZWxlY3QiLCJNb3pVc2VyU2VsZWN0IiwiZHJhZ0VuYWJsZSIsIm5vY2xpY2siLCJjb25zdGFudCQ3IiwiRHJhZ0V2ZW50Iiwic3ViamVjdCIsImRlZmF1bHRGaWx0ZXIiLCJidXR0b24iLCJkZWZhdWx0Q29udGFpbmVyIiwiZGVmYXVsdFN1YmplY3QiLCJkcmFnIiwiY29udGFpbmVyIiwiZ2VzdHVyZXMiLCJsaXN0ZW5lcnMiLCJtb3VzZW1vdmluZyIsInRvdWNoZW5kaW5nIiwibW91c2Vkb3duZWQiLCJ0b3VjaHN0YXJ0ZWQiLCJ0b3VjaG1vdmVkIiwidG91Y2hlbmRlZCIsImdlc3R1cmUiLCJiZWZvcmVzdGFydCIsIm1vdXNlbW92ZWQiLCJtb3VzZXVwcGVkIiwic3VibGlzdGVuZXJzIiwiY29uc3RhbnQkOCIsIngkNCIsInkkNCIsIlJlZEJsYWNrVHJlZSIsIlJlZEJsYWNrTm9kZSIsIlIiLCJQIiwiYWZ0ZXIiLCJncmFuZHBhIiwidW5jbGUiLCJSZWRCbGFja0ZpcnN0IiwiUmVkQmxhY2tSb3RhdGVMZWZ0IiwiUmVkQmxhY2tSb3RhdGVSaWdodCIsInNpYmxpbmciLCJjcmVhdGVFZGdlIiwiZWRnZSIsImVkZ2VzIiwic2V0RWRnZUVuZCIsImNlbGxzIiwiaGFsZmVkZ2VzIiwiY3JlYXRlQm9yZGVyRWRnZSIsInZlcnRleCIsImNsaXBFZGdlIiwiY29ubmVjdEVkZ2UiLCJseCIsImx5IiwicngiLCJyeSIsImZtIiwiZmIiLCJjbGlwRWRnZXMiLCJlcHNpbG9uJDMiLCJjcmVhdGVDZWxsIiwic2l0ZSIsImNlbGxIYWxmZWRnZUFuZ2xlIiwiY2VsbCIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsInNvcnRDZWxsSGFsZmVkZ2VzIiwiY2xpcENlbGxzIiwibkNlbGxzIiwiaUNlbGwiLCJpSGFsZmVkZ2UiLCJuSGFsZmVkZ2VzIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJ2MDAiLCJ2MDEiLCJ2MTEiLCJ2MTAiLCJjaXJjbGVQb29sIiwiZmlyc3RDaXJjbGUiLCJDaXJjbGUiLCJhdHRhY2hDaXJjbGUiLCJsQXJjIiwickFyYyIsImxTaXRlIiwiY1NpdGUiLCJyU2l0ZSIsImVwc2lsb24yJDEiLCJoYSIsImhjIiwiZGV0YWNoQ2lyY2xlIiwiYmVhY2hQb29sIiwiQmVhY2giLCJjcmVhdGVCZWFjaCIsImJlYWNoIiwiZGV0YWNoQmVhY2giLCJiZWFjaGVzIiwicmVtb3ZlQmVhY2giLCJkaXNhcHBlYXJpbmciLCJ1bnNoaWZ0IiwibkFyY3MiLCJpQXJjIiwiYWRkQmVhY2giLCJkaXJlY3RyaXgiLCJkeGwiLCJkeHIiLCJsZWZ0QnJlYWtQb2ludCIsInJpZ2h0QnJlYWtQb2ludCIsIm5ld0FyYyIsImhiIiwicmZvY3giLCJyZm9jeSIsInBieTIiLCJsZm9jeCIsImxmb2N5IiwicGxieTIiLCJobCIsImFieTIiLCJ0cmlhbmdsZUFyZWEiLCJsZXhpY29ncmFwaGljIiwiRGlhZ3JhbSIsInNpdGVzIiwicG9seWdvbnMiLCJ0cmlhbmdsZXMiLCJlMSIsInZvcm9ub2kiLCJjb25zdGFudCQ5IiwiWm9vbUV2ZW50IiwiVHJhbnNmb3JtIiwiYXBwbHlYIiwiYXBwbHlZIiwibG9jYXRpb24iLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwicmVzY2FsZVkiLCJpZGVudGl0eSQ2IiwiX196b29tIiwibm9wcm9wYWdhdGlvbiQxIiwibm9ldmVudCQxIiwiZGVmYXVsdEZpbHRlciQxIiwiZGVmYXVsdEV4dGVudCIsIlNWR0VsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJ6b29tIiwiazAiLCJrMSIsInRvdWNoc3RhcnRpbmciLCJ0b3VjaERlbGF5Iiwid2hlZWxEZWxheSIsIndoZWVsZWQiLCJkYmxjbGlja2VkIiwiY29sbGVjdGlvbiIsInNjYWxlQnkiLCJzY2FsZVRvIiwiY29uc3RyYWluIiwidHJhbnNsYXRlQnkiLCJHZXN0dXJlIiwiZW1pdCIsInRvdWNoMCIsInRvdWNoMSIsImRlbHRhWSIsImRlbHRhTW9kZSIsIndoZWVsIiwid2hlZWxpZGxlZCIsIm1vdmVkIiwic2hpZnRLZXkiLCJkcCIsImRsIiwic2NhbGVFeHRlbnQiLCJ0cmFuc2xhdGVFeHRlbnQiLCJjb25zdGFudCQxMCIsIkJydXNoRXZlbnQiLCJub3Byb3BhZ2F0aW9uJDIiLCJub2V2ZW50JDIiLCJNT0RFX0RSQUciLCJNT0RFX1NQQUNFIiwiTU9ERV9IQU5ETEUiLCJNT0RFX0NFTlRFUiIsImhhbmRsZXMiLCJ0eXBlJDEiLCJ4eSIsIlkiLCJYWSIsImN1cnNvcnMiLCJvdmVybGF5IiwibnciLCJuZSIsInNlIiwic3ciLCJmbGlwWCIsImZsaXBZIiwic2lnbnNYIiwic2lnbnNZIiwiZGVmYXVsdEZpbHRlciQyIiwiZGVmYXVsdEV4dGVudCQxIiwibG9jYWwkMSIsIl9fYnJ1c2giLCJlbXB0eSQxIiwiYnJ1c2hTZWxlY3Rpb24iLCJkaW0iLCJicnVzaFgiLCJicnVzaCQxIiwiYnJ1c2hZIiwiYnJ1c2giLCJoYW5kbGVTaXplIiwiaGFuZGxlIiwicmVkcmF3Iiwic3RhcnRlZCIsIm1vdmUiLCJlbWl0dGVyIiwic2VsZWN0aW9uMCIsInNlbGVjdGlvbjEiLCJFbWl0dGVyIiwic3RhcnRpbmciLCJtb2RlIiwibWV0YUtleSIsImFsdEtleSIsInNpZ25YIiwic2lnblkiLCJuMCIsIm4xIiwiZTAiLCJtb3ZpbmciLCJzaGlmdGluZyIsImxvY2tYIiwibG9ja1kiLCJwb2ludDAiLCJlbmRlZCIsImtleWRvd25lZCIsImtleXVwcGVkIiwicG9pbnQxIiwia2V5Q29kZSIsInBpJDMiLCJoYWxmUGkkMiIsInRhdSQzIiwibWF4JDEiLCJjb21wYXJlVmFsdWUiLCJjaG9yZCIsInNvcnRHcm91cHMiLCJzb3J0U3ViZ3JvdXBzIiwic29ydENob3JkcyIsImdyb3VwU3VtcyIsImdyb3VwSW5kZXgiLCJzdWJncm91cEluZGV4IiwiY2hvcmRzIiwiZGkiLCJkaiIsInN1YmluZGV4Iiwic2xpY2UkNSIsImNvbnN0YW50JDExIiwiZGVmYXVsdFNvdXJjZSIsImRlZmF1bHRUYXJnZXQiLCJkZWZhdWx0UmFkaXVzJDEiLCJkZWZhdWx0U3RhcnRBbmdsZSIsImRlZmF1bHRFbmRBbmdsZSIsInJpYmJvbiIsImFyZ3YiLCJzciIsInNhMCIsInNhMSIsInN4MCIsInN5MCIsInRyIiwidGEwIiwidGExIiwiYWRkZXIiLCJBZGRlciIsInJlc2V0IiwiYWRkJDEiLCJ0ZW1wIiwidmFsdWVPZiIsImJ2IiwiYXYiLCJlcHNpbG9uJDQiLCJlcHNpbG9uMiQyIiwicGkkNCIsImhhbGZQaSQzIiwicXVhcnRlclBpIiwidGF1JDQiLCJkZWdyZWVzJDEiLCJyYWRpYW5zIiwiY29zJDEiLCJsb2ckMSIsInBvdyQxIiwic2luJDEiLCJzaWduJDEiLCJzcXJ0JDEiLCJhc2luJDEiLCJoYXZlcnNpbiIsIm5vb3AkMiIsInN0cmVhbUdlb21ldHJ5IiwiZ2VvbWV0cnkiLCJzdHJlYW0iLCJzdHJlYW1HZW9tZXRyeVR5cGUiLCJzdHJlYW1PYmplY3RUeXBlIiwiRmVhdHVyZSIsImZlYXR1cmUiLCJGZWF0dXJlQ29sbGVjdGlvbiIsImZlYXR1cmVzIiwiU3BoZXJlIiwic3BoZXJlIiwiUG9pbnQiLCJjb29yZGluYXRlcyIsIk11bHRpUG9pbnQiLCJMaW5lU3RyaW5nIiwic3RyZWFtTGluZSIsIk11bHRpTGluZVN0cmluZyIsIlBvbHlnb24iLCJzdHJlYW1Qb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiZ2VvbWV0cmllcyIsImNsb3NlZCIsImNvb3JkaW5hdGUiLCJwb2x5Z29uU3RhcnQiLCJwb2x5Z29uRW5kIiwiZ2VvU3RyZWFtIiwiYXJlYVJpbmdTdW0iLCJhcmVhU3VtIiwibGFtYmRhMDAiLCJwaGkwMCIsImxhbWJkYTAiLCJjb3NQaGkwIiwic2luUGhpMCIsImFyZWFTdHJlYW0iLCJhcmVhUmluZ1N0YXJ0IiwiYXJlYVJpbmdFbmQiLCJhcmVhUmluZyIsImFyZWFQb2ludEZpcnN0IiwiYXJlYVBvaW50IiwiZExhbWJkYSIsInNkTGFtYmRhIiwiYWRMYW1iZGEiLCJjb3NQaGkiLCJzaW5QaGkiLCJhcmVhJDIiLCJzcGhlcmljYWwiLCJjYXJ0ZXNpYW4iLCJjYXJ0ZXNpYW5Eb3QiLCJjYXJ0ZXNpYW5Dcm9zcyIsImNhcnRlc2lhbkFkZEluUGxhY2UiLCJjYXJ0ZXNpYW5TY2FsZSIsInZlY3RvciIsImNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UiLCJsYW1iZGEwJDEiLCJwaGkwIiwibGFtYmRhMSIsInBoaTEiLCJsYW1iZGEyIiwibGFtYmRhMDAkMSIsInBoaTAwJDEiLCJkZWx0YVN1bSIsInJhbmdlcyIsInJhbmdlJDEiLCJib3VuZHNTdHJlYW0iLCJib3VuZHNQb2ludCIsImJvdW5kc0xpbmVTdGFydCIsImJvdW5kc0xpbmVFbmQiLCJib3VuZHNSaW5nUG9pbnQiLCJib3VuZHNSaW5nU3RhcnQiLCJib3VuZHNSaW5nRW5kIiwibGluZVBvaW50IiwiZXF1YXRvcmlhbCIsImluZmxlY3Rpb24iLCJkZWx0YSIsImxhbWJkYWkiLCJwaGlpIiwiYW50aW1lcmlkaWFuIiwicmFuZ2VDb21wYXJlIiwicmFuZ2VDb250YWlucyIsImJvdW5kcyIsImRlbHRhTWF4IiwiVzAiLCJXMSIsIlgwIiwiWTAiLCJaMCIsIlgxIiwiWTEiLCJaMSIsIlgyIiwiWTIiLCJaMiIsImxhbWJkYTAwJDIiLCJwaGkwMCQyIiwiejAiLCJjZW50cm9pZFN0cmVhbSIsImNlbnRyb2lkUG9pbnQiLCJjZW50cm9pZExpbmVTdGFydCIsImNlbnRyb2lkTGluZUVuZCIsImNlbnRyb2lkUmluZ1N0YXJ0IiwiY2VudHJvaWRSaW5nRW5kIiwiY2VudHJvaWRQb2ludENhcnRlc2lhbiIsImNlbnRyb2lkTGluZVBvaW50Rmlyc3QiLCJjZW50cm9pZExpbmVQb2ludCIsImNlbnRyb2lkUmluZ1BvaW50Rmlyc3QiLCJjZW50cm9pZFJpbmdQb2ludCIsImN6IiwiY2VudHJvaWQkMSIsImNvbnN0YW50JDEyIiwiY29tcG9zZSIsInJvdGF0aW9uSWRlbnRpdHkiLCJyb3RhdGVSYWRpYW5zIiwiZGVsdGFMYW1iZGEiLCJkZWx0YVBoaSIsImRlbHRhR2FtbWEiLCJyb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uUGhpR2FtbWEiLCJmb3J3YXJkUm90YXRpb25MYW1iZGEiLCJyb3RhdGlvbiIsImNvc0RlbHRhUGhpIiwic2luRGVsdGFQaGkiLCJjb3NEZWx0YUdhbW1hIiwic2luRGVsdGFHYW1tYSIsImZvcndhcmQiLCJjaXJjbGVTdHJlYW0iLCJkaXJlY3Rpb24iLCJjb3NSYWRpdXMiLCJzaW5SYWRpdXMiLCJjaXJjbGVSYWRpdXMiLCJjaXJjbGUkMSIsInJpbmciLCJjbGlwQnVmZmVyIiwibGluZXMiLCJyZWpvaW4iLCJjbGlwTGluZSIsInBvaW50RXF1YWwiLCJJbnRlcnNlY3Rpb24iLCJvdGhlciIsImVudHJ5IiwiY2xpcFBvbHlnb24iLCJzZWdtZW50cyIsImNvbXBhcmVJbnRlcnNlY3Rpb24iLCJzdGFydEluc2lkZSIsImNsaXAiLCJzZWdtZW50IiwibGluayQxIiwiaXNTdWJqZWN0IiwiY2xpcE1heCIsImNsaXBNaW4iLCJjbGlwRXh0ZW50IiwidmlzaWJsZSIsImZyb20iLCJ0byIsImNvcm5lciIsImNvbXBhcmVQb2ludCIsImNiIiwiYWN0aXZlU3RyZWFtIiwiYnVmZmVyU3RyZWFtIiwieF9fIiwieV9fIiwidl9fIiwieF8iLCJ5XyIsInZfIiwiZmlyc3QiLCJjbGVhbiIsImNsaXBTdHJlYW0iLCJwb2x5Z29uSW5zaWRlIiwid2luZGluZyIsImNsZWFuSW5zaWRlIiwiZXh0ZW50JDEiLCJjYWNoZSIsImNhY2hlU3RyZWFtIiwibGVuZ3RoU3VtIiwibGFtYmRhMCQyIiwic2luUGhpMCQxIiwiY29zUGhpMCQxIiwibGVuZ3RoU3RyZWFtIiwibGVuZ3RoTGluZVN0YXJ0IiwibGVuZ3RoUG9pbnRGaXJzdCIsImxlbmd0aExpbmVFbmQiLCJsZW5ndGhQb2ludCIsImNvc0RlbHRhIiwic2luRGVsdGEiLCJsZW5ndGgkMiIsIm9iamVjdCQxIiwiZ3JhdGljdWxlWCIsImdyYXRpY3VsZVkiLCJncmF0aWN1bGUiLCJEWCIsIkRZIiwib3V0bGluZSIsImV4dGVudE1pbm9yIiwiZXh0ZW50TWFqb3IiLCJzdGVwTWlub3IiLCJzdGVwTWFqb3IiLCJpbnRlcnBvbGF0ZSQyIiwic3kxIiwia3gwIiwia3kwIiwia3gxIiwia3kxIiwiaWRlbnRpdHkkNyIsImFyZWFTdW0kMSIsImFyZWFSaW5nU3VtJDEiLCJ4MCQxIiwieTAkMSIsImFyZWFTdHJlYW0kMSIsImFyZWFSaW5nU3RhcnQkMSIsImFyZWFSaW5nRW5kJDEiLCJhcmVhUG9pbnRGaXJzdCQxIiwiYXJlYVBvaW50JDEiLCJ4MCQyIiwieTAkMiIsImJvdW5kc1N0cmVhbSQxIiwiYm91bmRzUG9pbnQkMSIsIlgwJDEiLCJZMCQxIiwiWjAkMSIsIlgxJDEiLCJZMSQxIiwiWjEkMSIsIlgyJDEiLCJZMiQxIiwiWjIkMSIsIngwMCQxIiwieTAwJDEiLCJ4MCQzIiwieTAkMyIsImNlbnRyb2lkU3RyZWFtJDEiLCJjZW50cm9pZFBvaW50JDEiLCJjZW50cm9pZExpbmVTdGFydCQxIiwiY2VudHJvaWRMaW5lRW5kJDEiLCJjZW50cm9pZFJpbmdTdGFydCQxIiwiY2VudHJvaWRSaW5nRW5kJDEiLCJjZW50cm9pZFBvaW50Rmlyc3RMaW5lIiwiY2VudHJvaWRQb2ludExpbmUiLCJjZW50cm9pZFBvaW50Rmlyc3RSaW5nIiwiY2VudHJvaWRQb2ludFJpbmciLCJQYXRoQ29udGV4dCIsInBvaW50UmFkaXVzIiwicG9pbnRMaW5lU3RhcnQiLCJsaW5lRW5kUG9seWdvbiIsInBvaW50TGluZSIsIlBhdGhTdHJpbmciLCJwb2ludENpcmNsZSIsImNpcmNsZSQyIiwiaW5kZXgkMyIsInByb2plY3Rpb24iLCJwcm9qZWN0aW9uU3RyZWFtIiwiY29udGV4dFN0cmVhbSIsInN1bSQyIiwicG9seWdvbkNvbnRhaW5zIiwic2luUGhpMSIsImNvc1BoaTEiLCJhYnNEZWx0YSIsImludGVyc2VjdGlvbiIsInBoaUFyYyIsInBvaW50VmlzaWJsZSIsInNpbmsiLCJyb3RhdGVkU3RhcnQiLCJyaW5nQnVmZmVyIiwicmluZ1NpbmsiLCJwb2x5Z29uU3RhcnRlZCIsInBvaW50UmluZyIsInJpbmdTdGFydCIsInJpbmdFbmQiLCJyaW5nU2VnbWVudHMiLCJ2YWxpZFNlZ21lbnQiLCJjbGlwQW50aW1lcmlkaWFuIiwiY2xpcEFudGltZXJpZGlhbkxpbmUiLCJjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUiLCJzaWduMCIsInNpZ24xIiwiY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCIsInNpbkxhbWJkYTBMYW1iZGExIiwiY2xpcENpcmNsZSIsImNyIiwic21hbGxSYWRpdXMiLCJub3RIZW1pc3BoZXJlIiwiYzAiLCJwb2ludDIiLCJjb2RlIiwidHdvIiwicGIiLCJuMiIsIm4ybjIiLCJuMW4yIiwiZGV0ZXJtaW5hbnQiLCJjMSIsIm4xeG4yIiwidXUiLCJwb2xhciIsIm1lcmlkaWFuIiwicTEiLCJ0cmFuc2Zvcm0kMSIsInRyYW5zZm9ybSQyIiwiVHJhbnNmb3JtJDEiLCJmaXQiLCJwcm9qZWN0IiwiZml0U2l6ZSIsImZpdEV4dGVudCIsIm1heERlcHRoIiwiY29zTWluRGlzdGFuY2UiLCJyZXNhbXBsZSIsImRlbHRhMiIsInJlc2FtcGxlJDEiLCJyZXNhbXBsZU5vbmUiLCJyZXNhbXBsZUxpbmVUbyIsInBoaTIiLCJkeDIiLCJkeTIiLCJkeiIsImIwMCIsImMwMCIsInJlc2FtcGxlU3RyZWFtIiwicmluZ1BvaW50IiwidHJhbnNmb3JtUmFkaWFucyIsInByb2plY3Rpb25NdXRhdG9yIiwicHJvamVjdEF0IiwicHJvamVjdFJvdGF0ZSIsInByZWNsaXAiLCJwb3N0Y2xpcCIsInByb2plY3RSZXNhbXBsZSIsInByb2plY3RUcmFuc2Zvcm0iLCJjbGlwQW5nbGUiLCJyZWNlbnRlciIsImNvbmljUHJvamVjdGlvbiIsInBhcmFsbGVscyIsImNvbmljRXF1YWxBcmVhUmF3IiwicjB5IiwiY29uaWNFcXVhbEFyZWEiLCJhbGJlcnMiLCJtdWx0aXBsZXgiLCJzdHJlYW1zIiwiYWxiZXJzVXNhIiwibG93ZXI0OCIsImxvd2VyNDhQb2ludCIsImFsYXNrYSIsImFsYXNrYVBvaW50IiwiaGF3YWlpIiwiaGF3YWlpUG9pbnQiLCJwb2ludFN0cmVhbSIsImF6aW11dGhhbFJhdyIsImF6aW11dGhhbEludmVydCIsInNjIiwiY2MiLCJhemltdXRoYWxFcXVhbEFyZWFSYXciLCJjeGN5IiwiYXppbXV0aGFsRXF1YWxBcmVhIiwiYXppbXV0aGFsRXF1aWRpc3RhbnRSYXciLCJhemltdXRoYWxFcXVpZGlzdGFudCIsIm1lcmNhdG9yUmF3IiwibWVyY2F0b3IiLCJtZXJjYXRvclByb2plY3Rpb24iLCJjbGlwQXV0byIsInRhbnkiLCJjb25pY0NvbmZvcm1hbFJhdyIsImNvbmljQ29uZm9ybWFsIiwiZXF1aXJlY3Rhbmd1bGFyUmF3IiwiZXF1aXJlY3Rhbmd1bGFyIiwiY29uaWNFcXVpZGlzdGFudFJhdyIsImd5IiwibngiLCJjb25pY0VxdWlkaXN0YW50IiwiZ25vbW9uaWNSYXciLCJnbm9tb25pYyIsIm9ydGhvZ3JhcGhpY1JhdyIsIm9ydGhvZ3JhcGhpYyIsInN0ZXJlb2dyYXBoaWNSYXciLCJzdGVyZW9ncmFwaGljIiwidHJhbnN2ZXJzZU1lcmNhdG9yUmF3IiwidHJhbnN2ZXJzZU1lcmNhdG9yIiwiYmlzZWN0IiwidGhyZXNob2xkRnJlZWRtYW5EaWFjb25pcyIsInRocmVzaG9sZFNjb3R0IiwidGhyZXNob2xkU3R1cmdlcyIsInJhbmRvbVVuaWZvcm0iLCJyYW5kb21Mb2dOb3JtYWwiLCJyYW5kb21CYXRlcyIsInJhbmRvbUV4cG9uZW50aWFsIiwiZWFzZUxpbmVhciIsImVhc2VRdWFkIiwiZWFzZVF1YWRJbiIsImVhc2VRdWFkT3V0IiwiZWFzZVF1YWRJbk91dCIsImVhc2VDdWJpYyIsImVhc2VDdWJpY0luIiwiZWFzZUN1YmljT3V0IiwiZWFzZVBvbHkiLCJlYXNlUG9seUluIiwiZWFzZVBvbHlPdXQiLCJlYXNlUG9seUluT3V0IiwiZWFzZVNpbiIsImVhc2VTaW5JbiIsImVhc2VTaW5PdXQiLCJlYXNlU2luSW5PdXQiLCJlYXNlRXhwIiwiZWFzZUV4cEluIiwiZWFzZUV4cE91dCIsImVhc2VFeHBJbk91dCIsImVhc2VDaXJjbGUiLCJlYXNlQ2lyY2xlSW4iLCJlYXNlQ2lyY2xlT3V0IiwiZWFzZUNpcmNsZUluT3V0IiwiZWFzZUJvdW5jZSIsImVhc2VCb3VuY2VJbiIsImVhc2VCb3VuY2VPdXQiLCJlYXNlQm91bmNlSW5PdXQiLCJlYXNlQmFjayIsImVhc2VCYWNrSW4iLCJlYXNlQmFja091dCIsImVhc2VCYWNrSW5PdXQiLCJlYXNlRWxhc3RpYyIsImVhc2VFbGFzdGljSW4iLCJlYXNlRWxhc3RpY091dCIsImVhc2VFbGFzdGljSW5PdXQiLCJwb2x5Z29uQXJlYSIsInBvbHlnb25DZW50cm9pZCIsInBvbHlnb25IdWxsIiwicG9seWdvbkxlbmd0aCIsInN5bWJvbENpcmNsZSIsInN5bWJvbENyb3NzIiwic3ltYm9sRGlhbW9uZCIsInN5bWJvbFNxdWFyZSIsInN5bWJvbFN0YXIiLCJzeW1ib2xUcmlhbmdsZSIsInN5bWJvbFd5ZSIsImN1cnZlQmFzaXNDbG9zZWQiLCJjdXJ2ZUJhc2lzT3BlbiIsImN1cnZlQmFzaXMiLCJjdXJ2ZUJ1bmRsZSIsImN1cnZlQ2FyZGluYWxDbG9zZWQiLCJjdXJ2ZUNhcmRpbmFsT3BlbiIsImN1cnZlQ2FyZGluYWwiLCJjdXJ2ZUNhdG11bGxSb21DbG9zZWQiLCJjdXJ2ZUNhdG11bGxSb21PcGVuIiwiY3VydmVDYXRtdWxsUm9tIiwiY3VydmVMaW5lYXJDbG9zZWQiLCJjdXJ2ZU1vbm90b25lWCIsImN1cnZlTW9ub3RvbmVZIiwiY3VydmVOYXR1cmFsIiwiY3VydmVTdGVwIiwiY3VydmVTdGVwQWZ0ZXIiLCJjdXJ2ZVN0ZXBCZWZvcmUiLCJzdGFja09mZnNldEV4cGFuZCIsInN0YWNrT2Zmc2V0Tm9uZSIsInN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSIsInN0YWNrT2Zmc2V0V2lnZ2xlIiwic3RhY2tPcmRlckFzY2VuZGluZyIsInN0YWNrT3JkZXJEZXNjZW5kaW5nIiwic3RhY2tPcmRlckluc2lkZU91dCIsInN0YWNrT3JkZXJOb25lIiwic3RhY2tPcmRlclJldmVyc2UiLCJpbnRlcnBvbGF0ZUFycmF5IiwiaW50ZXJwb2xhdGVEYXRlIiwiaW50ZXJwb2xhdGVPYmplY3QiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiaW50ZXJwb2xhdGVSZ2JCYXNpcyIsImludGVycG9sYXRlUmdiQmFzaXNDbG9zZWQiLCJpbnRlcnBvbGF0ZUhzbCIsImludGVycG9sYXRlSHNsTG9uZyIsImludGVycG9sYXRlTGFiIiwiaW50ZXJwb2xhdGVIY2wiLCJpbnRlcnBvbGF0ZUhjbExvbmciLCJpbnRlcnBvbGF0ZUN1YmVoZWxpeCIsImludGVycG9sYXRlQmFzaXMiLCJpbnRlcnBvbGF0ZUJhc2lzQ2xvc2VkIiwiZHN2Rm9ybWF0IiwidGltZUludGVydmFsIiwidGltZU1pbGxpc2Vjb25kIiwidGltZU1pbGxpc2Vjb25kcyIsInRpbWVTZWNvbmQiLCJ0aW1lU2Vjb25kcyIsInRpbWVNaW51dGUiLCJ0aW1lTWludXRlcyIsInRpbWVIb3VyIiwidGltZUhvdXJzIiwidGltZURheSIsInRpbWVEYXlzIiwidGltZVdlZWtzIiwidGltZVN1bmRheSIsInRpbWVTdW5kYXlzIiwidGltZU1vbmRheXMiLCJ0aW1lVHVlc2RheSIsInRpbWVUdWVzZGF5cyIsInRpbWVXZWRuZXNkYXkiLCJ0aW1lV2VkbmVzZGF5cyIsInRpbWVUaHVyc2RheSIsInRpbWVUaHVyc2RheXMiLCJ0aW1lRnJpZGF5IiwidGltZUZyaWRheXMiLCJ0aW1lU2F0dXJkYXkiLCJ0aW1lU2F0dXJkYXlzIiwidGltZU1vbnRoIiwidGltZU1vbnRocyIsInRpbWVZZWFyIiwidGltZVllYXJzIiwidXRjTWlsbGlzZWNvbmQiLCJ1dGNNaWxsaXNlY29uZHMiLCJ1dGNTZWNvbmQiLCJ1dGNTZWNvbmRzIiwidXRjV2Vla3MiLCJ1dGNTdW5kYXkiLCJmb3JtYXREZWZhdWx0TG9jYWxlIiwiaXNvRm9ybWF0IiwiaXNvUGFyc2UiLCJ0aW1lRm9ybWF0TG9jYWxlIiwidGltZUZvcm1hdERlZmF1bHRMb2NhbGUiLCJzY2FsZUJhbmQiLCJzY2FsZVBvaW50Iiwic2NhbGVJZGVudGl0eSIsInNjYWxlTGluZWFyIiwic2NhbGVMb2ciLCJzY2FsZU9yZGluYWwiLCJzY2FsZUltcGxpY2l0Iiwic2NhbGVQb3ciLCJzY2FsZVNxcnQiLCJzY2FsZVF1YW50aWxlIiwic2NhbGVRdWFudGl6ZSIsInNjYWxlVGhyZXNob2xkIiwic2NhbGVUaW1lIiwic2NhbGVVdGMiLCJzY2hlbWVDYXRlZ29yeTEwIiwic2NoZW1lQ2F0ZWdvcnkyMGIiLCJzY2hlbWVDYXRlZ29yeTIwYyIsInNjaGVtZUNhdGVnb3J5MjAiLCJzY2FsZVNlcXVlbnRpYWwiLCJpbnRlcnBvbGF0ZUN1YmVoZWxpeERlZmF1bHQiLCJpbnRlcnBvbGF0ZVJhaW5ib3ciLCJpbnRlcnBvbGF0ZVdhcm0iLCJpbnRlcnBvbGF0ZUNvb2wiLCJpbnRlcnBvbGF0ZVZpcmlkaXMiLCJpbnRlcnBvbGF0ZU1hZ21hIiwiaW50ZXJwb2xhdGVJbmZlcm5vIiwiaW50ZXJwb2xhdGVQbGFzbWEiLCJwYWNrU2libGluZ3MiLCJ0cmVlbWFwQmluYXJ5IiwidHJlZW1hcFNsaWNlRGljZSIsInRyZWVtYXBTcXVhcmlmeSIsInRyZWVtYXBSZXNxdWFyaWZ5IiwiZm9yY2VDZW50ZXIiLCJmb3JjZUNvbGxpZGUiLCJmb3JjZUxpbmsiLCJmb3JjZU1hbnlCb2R5IiwiZm9yY2VTaW11bGF0aW9uIiwiZm9yY2VYIiwiZm9yY2VZIiwiem9vbUlkZW50aXR5Iiwiem9vbVRyYW5zZm9ybSIsImdlb0FsYmVycyIsImdlb0FsYmVyc1VzYSIsImdlb0FyZWEiLCJnZW9BemltdXRoYWxFcXVhbEFyZWEiLCJnZW9BemltdXRoYWxFcXVhbEFyZWFSYXciLCJnZW9BemltdXRoYWxFcXVpZGlzdGFudCIsImdlb0F6aW11dGhhbEVxdWlkaXN0YW50UmF3IiwiZ2VvQm91bmRzIiwiZ2VvQ2VudHJvaWQiLCJnZW9DaXJjbGUiLCJnZW9DbGlwRXh0ZW50IiwiZ2VvQ29uaWNDb25mb3JtYWwiLCJnZW9Db25pY0NvbmZvcm1hbFJhdyIsImdlb0NvbmljRXF1YWxBcmVhIiwiZ2VvQ29uaWNFcXVhbEFyZWFSYXciLCJnZW9Db25pY0VxdWlkaXN0YW50IiwiZ2VvQ29uaWNFcXVpZGlzdGFudFJhdyIsImdlb0Rpc3RhbmNlIiwiZ2VvRXF1aXJlY3Rhbmd1bGFyIiwiZ2VvRXF1aXJlY3Rhbmd1bGFyUmF3IiwiZ2VvR25vbW9uaWMiLCJnZW9Hbm9tb25pY1JhdyIsImdlb0dyYXRpY3VsZSIsImdlb0ludGVycG9sYXRlIiwiZ2VvTGVuZ3RoIiwiZ2VvTWVyY2F0b3IiLCJnZW9NZXJjYXRvclJhdyIsImdlb09ydGhvZ3JhcGhpYyIsImdlb09ydGhvZ3JhcGhpY1JhdyIsImdlb1BhdGgiLCJnZW9Qcm9qZWN0aW9uIiwiZ2VvUHJvamVjdGlvbk11dGF0b3IiLCJnZW9Sb3RhdGlvbiIsImdlb1N0ZXJlb2dyYXBoaWMiLCJnZW9TdGVyZW9ncmFwaGljUmF3IiwiZ2VvVHJhbnNmb3JtIiwiZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yIiwiZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yUmF3IiwiZGVmaW5lUHJvcGVydHkiXSwibWFwcGluZ3MiOiJBQUFBLCtEQUErRDtBQUM5RCxDQUFBLFNBQVVBLE1BQU0sRUFBRUMsT0FBTztJQUN4QixPQUFPQyxZQUFZLFlBQVksT0FBT0MsV0FBVyxjQUFjRixRQUFRQyxXQUN2RSxPQUFPRSxXQUFXLGNBQWNBLE9BQU9DLEdBQUcsR0FBR0QsT0FBTztRQUFDO0tBQVUsRUFBRUgsV0FDaEVBLFFBQVNELE9BQU9NLEVBQUUsR0FBR04sT0FBT00sRUFBRSxJQUFJLENBQUM7QUFDdEMsQ0FBQSxFQUFFLElBQUksRUFBRyxTQUFVSixRQUFPO0lBQUk7SUFFNUIsSUFBSUssVUFBVTtJQUVkLFNBQVNDLFVBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUNyQixPQUFPRCxJQUFJQyxJQUFJLENBQUMsSUFBSUQsSUFBSUMsSUFBSSxJQUFJRCxLQUFLQyxJQUFJLElBQUlDO0lBQy9D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