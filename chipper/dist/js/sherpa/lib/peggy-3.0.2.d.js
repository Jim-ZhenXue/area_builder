export var GrammarError;
(function(parser) {
    var SyntaxError;
})(parser || (parser = {}));
export var parser;

//# sourceMappingURL=data:application/json;base64,