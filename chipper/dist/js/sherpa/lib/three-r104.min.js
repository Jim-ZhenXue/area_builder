// threejs.org/license
(function(k, ta) {
    "object" === typeof exports && "undefined" !== typeof module ? ta(exports) : "function" === typeof define && define.amd ? define([
        "exports"
    ], ta) : (k = k || self, ta(k.THREE = {}));
})(this, function(k) {
    function ta() {}
    function C(a, b) {
        this.x = a || 0;
        this.y = b || 0;
    }
    function ma(a, b, c, d) {
        this._x = a || 0;
        this._y = b || 0;
        this._z = c || 0;
        this._w = void 0 !== d ? d : 1;
    }
    function n(a, b, c) {
        this.x = a || 0;
        this.y = b || 0;
        this.z = c || 0;
    }
    function na() {
        this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        0 < arguments.length && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
    }
    function Y(a, b, c, d, e, f, g, h, l, m) {
        Object.defineProperty(this, "id", {
            value: Yf++
        });
        this.uuid = O.generateUUID();
        this.name = "";
        this.image = void 0 !== a ? a : Y.DEFAULT_IMAGE;
        this.mipmaps = [];
        this.mapping = void 0 !== b ? b : Y.DEFAULT_MAPPING;
        this.wrapS = void 0 !== c ? c : 1001;
        this.wrapT = void 0 !== d ? d : 1001;
        this.magFilter = void 0 !== e ? e : 1006;
        this.minFilter = void 0 !== f ? f : 1008;
        this.anisotropy = void 0 !== l ? l : 1;
        this.format = void 0 !== g ? g : 1023;
        this.type = void 0 !== h ? h : 1009;
        this.offset = new C(0, 0);
        this.repeat = new C(1, 1);
        this.center = new C(0, 0);
        this.rotation = 0;
        this.matrixAutoUpdate = !0;
        this.matrix = new na;
        this.generateMipmaps = !0;
        this.premultiplyAlpha = !1;
        this.flipY = !0;
        this.unpackAlignment = 4;
        this.encoding = void 0 !== m ? m : 3E3;
        this.version = 0;
        this.onUpdate = null;
    }
    function W(a, b, c, d) {
        this.x = a || 0;
        this.y = b || 0;
        this.z = c || 0;
        this.w = void 0 !== d ? d : 1;
    }
    function Sa(a, b, c) {
        this.width = a;
        this.height = b;
        this.scissor = new W(0, 0, a, b);
        this.scissorTest = !1;
        this.viewport = new W(0, 0, a, b);
        c = c || {};
        this.texture = new Y(void 0, void 0, c.wrapS, c.wrapT, c.magFilter, c.minFilter, c.format, c.type, c.anisotropy, c.encoding);
        this.texture.generateMipmaps = void 0 !== c.generateMipmaps ? c.generateMipmaps : !1;
        this.texture.minFilter = void 0 !== c.minFilter ? c.minFilter : 1006;
        this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;
        this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;
        this.depthTexture = void 0 !== c.depthTexture ? c.depthTexture : null;
    }
    function ce(a, b, c) {
        Sa.call(this, a, b, c);
        this.samples = 4;
    }
    function rb(a, b, c) {
        Sa.call(this, a, b, c);
    }
    function sb(a, b, c, d, e, f, g, h, l, m, q, p) {
        Y.call(this, null, f, g, h, l, m, d, e, q, p);
        this.image = {
            data: a,
            width: b,
            height: c
        };
        this.magFilter = void 0 !== l ? l : 1003;
        this.minFilter = void 0 !== m ? m : 1003;
        this.flipY = this.generateMipmaps = !1;
        this.unpackAlignment = 1;
    }
    function Ga(a, b) {
        this.min = void 0 !== a ? a : new n(Infinity, Infinity, Infinity);
        this.max = void 0 !== b ? b : new n(-Infinity, -Infinity, -Infinity);
    }
    function Ta(a, b) {
        this.center = void 0 !== a ? a : new n;
        this.radius = void 0 !== b ? b : 0;
    }
    function Ua(a, b) {
        this.normal = void 0 !== a ? a : new n(1, 0, 0);
        this.constant = void 0 !== b ? b : 0;
    }
    function yd(a, b, c, d, e, f) {
        this.planes = [
            void 0 !== a ? a : new Ua,
            void 0 !== b ? b : new Ua,
            void 0 !== c ? c : new Ua,
            void 0 !== d ? d : new Ua,
            void 0 !== e ? e : new Ua,
            void 0 !== f ? f : new Ua
        ];
    }
    function P() {
        this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ];
        0 < arguments.length && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
    }
    function Rb(a) {
        var b = {}, c;
        for(c in a){
            b[c] = {};
            for(var d in a[c]){
                var e = a[c][d];
                e && (e.isColor || e.isMatrix3 || e.isMatrix4 || e.isVector2 || e.isVector3 || e.isVector4 || e.isTexture) ? b[c][d] = e.clone() : Array.isArray(e) ? b[c][d] = e.slice() : b[c][d] = e;
            }
        }
        return b;
    }
    function ya(a) {
        for(var b = {}, c = 0; c < a.length; c++){
            var d = Rb(a[c]), e;
            for(e in d)b[e] = d[e];
        }
        return b;
    }
    function A(a, b, c) {
        return void 0 === b && void 0 === c ? this.set(a) : this.setRGB(a, b, c);
    }
    function de() {
        function a(e, f) {
            !1 !== c && (d(e, f), b.requestAnimationFrame(a));
        }
        var b = null, c = !1, d = null;
        return {
            start: function() {
                !0 !== c && null !== d && (b.requestAnimationFrame(a), c = !0);
            },
            stop: function() {
                c = !1;
            },
            setAnimationLoop: function(a) {
                d = a;
            },
            setContext: function(a) {
                b = a;
            }
        };
    }
    function Zf(a) {
        function b(b, c) {
            var d = b.array, e = b.dynamic ? 35048 : 35044, h = a.createBuffer();
            a.bindBuffer(c, h);
            a.bufferData(c, d, e);
            b.onUploadCallback();
            c = 5126;
            d instanceof Float32Array ? c = 5126 : d instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : d instanceof Uint16Array ? c = 5123 : d instanceof Int16Array ? c = 5122 : d instanceof Uint32Array ? c = 5125 : d instanceof Int32Array ? c = 5124 : d instanceof Int8Array ? c = 5120 : d instanceof Uint8Array && (c = 5121);
            return {
                buffer: h,
                type: c,
                bytesPerElement: d.BYTES_PER_ELEMENT,
                version: b.version
            };
        }
        var c = new WeakMap;
        return {
            get: function(a) {
                a.isInterleavedBufferAttribute && (a = a.data);
                return c.get(a);
            },
            remove: function(b) {
                b.isInterleavedBufferAttribute && (b = b.data);
                var d = c.get(b);
                d && (a.deleteBuffer(d.buffer), c.delete(b));
            },
            update: function(d, e) {
                d.isInterleavedBufferAttribute && (d = d.data);
                var f = c.get(d);
                if (void 0 === f) c.set(d, b(d, e));
                else if (f.version < d.version) {
                    var g = d, h = g.array, l = g.updateRange;
                    a.bindBuffer(e, f.buffer);
                    !1 === g.dynamic ? a.bufferData(e, h, 35044) : -1 === l.count ? a.bufferSubData(e, 0, h) : 0 === l.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (a.bufferSubData(e, l.offset * h.BYTES_PER_ELEMENT, h.subarray(l.offset, l.offset + l.count)), l.count = -1);
                    f.version = d.version;
                }
            }
        };
    }
    function Sb(a, b, c, d, e, f) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.normal = d && d.isVector3 ? d : new n;
        this.vertexNormals = Array.isArray(d) ? d : [];
        this.color = e && e.isColor ? e : new A;
        this.vertexColors = Array.isArray(e) ? e : [];
        this.materialIndex = void 0 !== f ? f : 0;
    }
    function tb(a, b, c, d) {
        this._x = a || 0;
        this._y = b || 0;
        this._z = c || 0;
        this._order = d || tb.DefaultOrder;
    }
    function ee() {
        this.mask = 1;
    }
    function D() {
        Object.defineProperty(this, "id", {
            value: $f++
        });
        this.uuid = O.generateUUID();
        this.name = "";
        this.type = "Object3D";
        this.parent = null;
        this.children = [];
        this.up = D.DefaultUp.clone();
        var a = new n, b = new tb, c = new ma, d = new n(1, 1, 1);
        b.onChange(function() {
            c.setFromEuler(b, !1);
        });
        c.onChange(function() {
            b.setFromQuaternion(c, void 0, !1);
        });
        Object.defineProperties(this, {
            position: {
                configurable: !0,
                enumerable: !0,
                value: a
            },
            rotation: {
                configurable: !0,
                enumerable: !0,
                value: b
            },
            quaternion: {
                configurable: !0,
                enumerable: !0,
                value: c
            },
            scale: {
                configurable: !0,
                enumerable: !0,
                value: d
            },
            modelViewMatrix: {
                value: new P
            },
            normalMatrix: {
                value: new na
            }
        });
        this.matrix = new P;
        this.matrixWorld = new P;
        this.matrixAutoUpdate = D.DefaultMatrixAutoUpdate;
        this.matrixWorldNeedsUpdate = !1;
        this.layers = new ee;
        this.visible = !0;
        this.receiveShadow = this.castShadow = !1;
        this.frustumCulled = !0;
        this.renderOrder = 0;
        this.userData = {};
    }
    function K() {
        Object.defineProperty(this, "id", {
            value: ag += 2
        });
        this.uuid = O.generateUUID();
        this.name = "";
        this.type = "Geometry";
        this.vertices = [];
        this.colors = [];
        this.faces = [];
        this.faceVertexUvs = [
            []
        ];
        this.morphTargets = [];
        this.morphNormals = [];
        this.skinWeights = [];
        this.skinIndices = [];
        this.lineDistances = [];
        this.boundingSphere = this.boundingBox = null;
        this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1;
    }
    function H(a, b, c) {
        if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.name = "";
        this.array = a;
        this.itemSize = b;
        this.count = void 0 !== a ? a.length / b : 0;
        this.normalized = !0 === c;
        this.dynamic = !1;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
    }
    function Ac(a, b, c) {
        H.call(this, new Int8Array(a), b, c);
    }
    function Bc(a, b, c) {
        H.call(this, new Uint8Array(a), b, c);
    }
    function Cc(a, b, c) {
        H.call(this, new Uint8ClampedArray(a), b, c);
    }
    function Dc(a, b, c) {
        H.call(this, new Int16Array(a), b, c);
    }
    function ub(a, b, c) {
        H.call(this, new Uint16Array(a), b, c);
    }
    function Ec(a, b, c) {
        H.call(this, new Int32Array(a), b, c);
    }
    function vb(a, b, c) {
        H.call(this, new Uint32Array(a), b, c);
    }
    function E(a, b, c) {
        H.call(this, new Float32Array(a), b, c);
    }
    function Fc(a, b, c) {
        H.call(this, new Float64Array(a), b, c);
    }
    function Ve() {
        this.vertices = [];
        this.normals = [];
        this.colors = [];
        this.uvs = [];
        this.uvs2 = [];
        this.groups = [];
        this.morphTargets = {};
        this.skinWeights = [];
        this.skinIndices = [];
        this.boundingSphere = this.boundingBox = null;
        this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1;
    }
    function We(a) {
        if (0 === a.length) return -Infinity;
        for(var b = a[0], c = 1, d = a.length; c < d; ++c)a[c] > b && (b = a[c]);
        return b;
    }
    function B() {
        Object.defineProperty(this, "id", {
            value: bg += 2
        });
        this.uuid = O.generateUUID();
        this.name = "";
        this.type = "BufferGeometry";
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.groups = [];
        this.boundingSphere = this.boundingBox = null;
        this.drawRange = {
            start: 0,
            count: Infinity
        };
        this.userData = {};
    }
    function Tb(a, b, c, d, e, f) {
        K.call(this);
        this.type = "BoxGeometry";
        this.parameters = {
            width: a,
            height: b,
            depth: c,
            widthSegments: d,
            heightSegments: e,
            depthSegments: f
        };
        this.fromBufferGeometry(new wb(a, b, c, d, e, f));
        this.mergeVertices();
    }
    function wb(a, b, c, d, e, f) {
        function g(a, b, c, d, e, f, g, k, ua, pa, I) {
            var r = f / ua, u = g / pa, w = f / 2, y = g / 2, z = k / 2;
            g = ua + 1;
            var G = pa + 1, ha = f = 0, S, x, F = new n;
            for(x = 0; x < G; x++){
                var C = x * u - y;
                for(S = 0; S < g; S++)F[a] = (S * r - w) * d, F[b] = C * e, F[c] = z, m.push(F.x, F.y, F.z), F[a] = 0, F[b] = 0, F[c] = 0 < k ? 1 : -1, q.push(F.x, F.y, F.z), p.push(S / ua), p.push(1 - x / pa), f += 1;
            }
            for(x = 0; x < pa; x++)for(S = 0; S < ua; S++)a = v + S + g * (x + 1), b = v + (S + 1) + g * (x + 1), c = v + (S + 1) + g * x, l.push(v + S + g * x, a, c), l.push(a, b, c), ha += 6;
            h.addGroup(t, ha, I);
            t += ha;
            v += f;
        }
        B.call(this);
        this.type = "BoxBufferGeometry";
        this.parameters = {
            width: a,
            height: b,
            depth: c,
            widthSegments: d,
            heightSegments: e,
            depthSegments: f
        };
        var h = this;
        a = a || 1;
        b = b || 1;
        c = c || 1;
        d = Math.floor(d) || 1;
        e = Math.floor(e) || 1;
        f = Math.floor(f) || 1;
        var l = [], m = [], q = [], p = [], v = 0, t = 0;
        g("z", "y", "x", -1, -1, c, b, a, f, e, 0);
        g("z", "y", "x", 1, -1, c, b, -a, f, e, 1);
        g("x", "z", "y", 1, 1, a, c, b, d, f, 2);
        g("x", "z", "y", 1, -1, a, c, -b, d, f, 3);
        g("x", "y", "z", 1, -1, a, b, c, d, e, 4);
        g("x", "y", "z", -1, -1, a, b, -c, d, e, 5);
        this.setIndex(l);
        this.addAttribute("position", new E(m, 3));
        this.addAttribute("normal", new E(q, 3));
        this.addAttribute("uv", new E(p, 2));
    }
    function Gc(a, b, c, d) {
        K.call(this);
        this.type = "PlaneGeometry";
        this.parameters = {
            width: a,
            height: b,
            widthSegments: c,
            heightSegments: d
        };
        this.fromBufferGeometry(new yb(a, b, c, d));
        this.mergeVertices();
    }
    function yb(a, b, c, d) {
        B.call(this);
        this.type = "PlaneBufferGeometry";
        this.parameters = {
            width: a,
            height: b,
            widthSegments: c,
            heightSegments: d
        };
        a = a || 1;
        b = b || 1;
        var e = a / 2, f = b / 2;
        c = Math.floor(c) || 1;
        d = Math.floor(d) || 1;
        var g = c + 1, h = d + 1, l = a / c, m = b / d, q = [], p = [], v = [], t = [];
        for(a = 0; a < h; a++){
            var k = a * m - f;
            for(b = 0; b < g; b++)p.push(b * l - e, -k, 0), v.push(0, 0, 1), t.push(b / c), t.push(1 - a / d);
        }
        for(a = 0; a < d; a++)for(b = 0; b < c; b++)e = b + g * (a + 1), f = b + 1 + g * (a + 1), h = b + 1 + g * a, q.push(b + g * a, e, h), q.push(e, f, h);
        this.setIndex(q);
        this.addAttribute("position", new E(p, 3));
        this.addAttribute("normal", new E(v, 3));
        this.addAttribute("uv", new E(t, 2));
    }
    function Q() {
        Object.defineProperty(this, "id", {
            value: cg++
        });
        this.uuid = O.generateUUID();
        this.name = "";
        this.type = "Material";
        this.lights = this.fog = !0;
        this.blending = 1;
        this.side = 0;
        this.vertexTangents = this.flatShading = !1;
        this.vertexColors = 0;
        this.opacity = 1;
        this.transparent = !1;
        this.blendSrc = 204;
        this.blendDst = 205;
        this.blendEquation = 100;
        this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;
        this.depthFunc = 3;
        this.depthWrite = this.depthTest = !0;
        this.clippingPlanes = null;
        this.clipShadows = this.clipIntersection = !1;
        this.shadowSide = null;
        this.colorWrite = !0;
        this.precision = null;
        this.polygonOffset = !1;
        this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
        this.dithering = !1;
        this.alphaTest = 0;
        this.premultipliedAlpha = !1;
        this.visible = !0;
        this.userData = {};
        this.needsUpdate = !0;
    }
    function ea(a) {
        Q.call(this);
        this.type = "ShaderMaterial";
        this.defines = {};
        this.uniforms = {};
        this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
        this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
        this.linewidth = 1;
        this.wireframe = !1;
        this.wireframeLinewidth = 1;
        this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1;
        this.extensions = {
            derivatives: !1,
            fragDepth: !1,
            drawBuffers: !1,
            shaderTextureLOD: !1
        };
        this.defaultAttributeValues = {
            color: [
                1,
                1,
                1
            ],
            uv: [
                0,
                0
            ],
            uv2: [
                0,
                0
            ]
        };
        this.index0AttributeName = void 0;
        this.uniformsNeedUpdate = !1;
        void 0 !== a && (void 0 !== a.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(a));
    }
    function zb(a, b) {
        this.origin = void 0 !== a ? a : new n;
        this.direction = void 0 !== b ? b : new n;
    }
    function ra(a, b, c) {
        this.a = void 0 !== a ? a : new n;
        this.b = void 0 !== b ? b : new n;
        this.c = void 0 !== c ? c : new n;
    }
    function Ca(a) {
        Q.call(this);
        this.type = "MeshBasicMaterial";
        this.color = new A(16777215);
        this.lightMap = this.map = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.envMap = this.alphaMap = this.specularMap = null;
        this.combine = 0;
        this.reflectivity = 1;
        this.refractionRatio = .98;
        this.wireframe = !1;
        this.wireframeLinewidth = 1;
        this.wireframeLinejoin = this.wireframeLinecap = "round";
        this.lights = this.morphTargets = this.skinning = !1;
        this.setValues(a);
    }
    function qa(a, b) {
        D.call(this);
        this.type = "Mesh";
        this.geometry = void 0 !== a ? a : new B;
        this.material = void 0 !== b ? b : new Ca({
            color: 16777215 * Math.random()
        });
        this.drawMode = 0;
        this.updateMorphTargets();
    }
    function dg(a, b, c, d) {
        function e(a, c) {
            b.buffers.color.setClear(a.r, a.g, a.b, c, d);
        }
        var f = new A(0), g = 0, h, l, m = null, q = 0;
        return {
            getClearColor: function() {
                return f;
            },
            setClearColor: function(a, b) {
                f.set(a);
                g = void 0 !== b ? b : 1;
                e(f, g);
            },
            getClearAlpha: function() {
                return g;
            },
            setClearAlpha: function(a) {
                g = a;
                e(f, g);
            },
            render: function(b, d, t, k) {
                d = d.background;
                t = a.vr;
                (t = t.getSession && t.getSession()) && "additive" === t.environmentBlendMode && (d = null);
                null === d ? (e(f, g), m = null, q = 0) : d && d.isColor && (e(d, 1), k = !0, m = null, q = 0);
                (a.autoClear || k) && a.clear(a.autoClearColor, a.autoClearDepth, a.autoClearStencil);
                if (d && (d.isCubeTexture || d.isWebGLRenderTargetCube)) {
                    void 0 === l && (l = new qa(new wb(1, 1, 1), new ea({
                        type: "BackgroundCubeMaterial",
                        uniforms: Rb(Va.cube.uniforms),
                        vertexShader: Va.cube.vertexShader,
                        fragmentShader: Va.cube.fragmentShader,
                        side: 1,
                        depthTest: !1,
                        depthWrite: !1,
                        fog: !1
                    })), l.geometry.removeAttribute("normal"), l.geometry.removeAttribute("uv"), l.onBeforeRender = function(a, b, c) {
                        this.matrixWorld.copyPosition(c.matrixWorld);
                    }, Object.defineProperty(l.material, "map", {
                        get: function() {
                            return this.uniforms.tCube.value;
                        }
                    }), c.update(l));
                    k = d.isWebGLRenderTargetCube ? d.texture : d;
                    l.material.uniforms.tCube.value = k;
                    l.material.uniforms.tFlip.value = d.isWebGLRenderTargetCube ? 1 : -1;
                    if (m !== d || q !== k.version) l.material.needsUpdate = !0, m = d, q = k.version;
                    b.unshift(l, l.geometry, l.material, 0, 0, null);
                } else if (d && d.isTexture) {
                    void 0 === h && (h = new qa(new yb(2, 2), new ea({
                        type: "BackgroundMaterial",
                        uniforms: Rb(Va.background.uniforms),
                        vertexShader: Va.background.vertexShader,
                        fragmentShader: Va.background.fragmentShader,
                        side: 0,
                        depthTest: !1,
                        depthWrite: !1,
                        fog: !1
                    })), h.geometry.removeAttribute("normal"), Object.defineProperty(h.material, "map", {
                        get: function() {
                            return this.uniforms.t2D.value;
                        }
                    }), c.update(h));
                    h.material.uniforms.t2D.value = d;
                    !0 === d.matrixAutoUpdate && d.updateMatrix();
                    h.material.uniforms.uvTransform.value.copy(d.matrix);
                    if (m !== d || q !== d.version) h.material.needsUpdate = !0, m = d, q = d.version;
                    b.unshift(h, h.geometry, h.material, 0, 0, null);
                }
            }
        };
    }
    function eg(a, b, c, d) {
        var e;
        this.setMode = function(a) {
            e = a;
        };
        this.render = function(b, d) {
            a.drawArrays(e, b, d);
            c.update(d, e);
        };
        this.renderInstances = function(f, g, h) {
            if (d.isWebGL2) var l = a;
            else if (l = b.get("ANGLE_instanced_arrays"), null === l) {
                console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
            l[d.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](e, g, h, f.maxInstancedCount);
            c.update(h, e, f.maxInstancedCount);
        };
    }
    function fg(a, b, c) {
        function d(b) {
            if ("highp" === b) {
                if (0 < a.getShaderPrecisionFormat(35633, 36338).precision && 0 < a.getShaderPrecisionFormat(35632, 36338).precision) return "highp";
                b = "mediump";
            }
            return "mediump" === b && 0 < a.getShaderPrecisionFormat(35633, 36337).precision && 0 < a.getShaderPrecisionFormat(35632, 36337).precision ? "mediump" : "lowp";
        }
        var e, f = "undefined" !== typeof WebGL2RenderingContext && a instanceof WebGL2RenderingContext, g = void 0 !== c.precision ? c.precision : "highp", h = d(g);
        h !== g && (console.warn("THREE.WebGLRenderer:", g, "not supported, using", h, "instead."), g = h);
        c = !0 === c.logarithmicDepthBuffer;
        h = a.getParameter(34930);
        var l = a.getParameter(35660), m = a.getParameter(3379), q = a.getParameter(34076), p = a.getParameter(34921), v = a.getParameter(36347), t = a.getParameter(36348), k = a.getParameter(36349), u = 0 < l, w = f || !!b.get("OES_texture_float"), n = u && w, x = f ? a.getParameter(36183) : 0;
        return {
            isWebGL2: f,
            getMaxAnisotropy: function() {
                if (void 0 !== e) return e;
                var c = b.get("EXT_texture_filter_anisotropic");
                return e = null !== c ? a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            },
            getMaxPrecision: d,
            precision: g,
            logarithmicDepthBuffer: c,
            maxTextures: h,
            maxVertexTextures: l,
            maxTextureSize: m,
            maxCubemapSize: q,
            maxAttributes: p,
            maxVertexUniforms: v,
            maxVaryings: t,
            maxFragmentUniforms: k,
            vertexTextures: u,
            floatFragmentTextures: w,
            floatVertexTextures: n,
            maxSamples: x
        };
    }
    function gg() {
        function a() {
            m.value !== d && (m.value = d, m.needsUpdate = 0 < e);
            c.numPlanes = e;
            c.numIntersection = 0;
        }
        function b(a, b, d, e) {
            var f = null !== a ? a.length : 0, g = null;
            if (0 !== f) {
                g = m.value;
                if (!0 !== e || null === g) {
                    e = d + 4 * f;
                    b = b.matrixWorldInverse;
                    l.getNormalMatrix(b);
                    if (null === g || g.length < e) g = new Float32Array(e);
                    for(e = 0; e !== f; ++e, d += 4)h.copy(a[e]).applyMatrix4(b, l), h.normal.toArray(g, d), g[d + 3] = h.constant;
                }
                m.value = g;
                m.needsUpdate = !0;
            }
            c.numPlanes = f;
            return g;
        }
        var c = this, d = null, e = 0, f = !1, g = !1, h = new Ua, l = new na, m = {
            value: null,
            needsUpdate: !1
        };
        this.uniform = m;
        this.numIntersection = this.numPlanes = 0;
        this.init = function(a, c, g) {
            var h = 0 !== a.length || c || 0 !== e || f;
            f = c;
            d = b(a, g, 0);
            e = a.length;
            return h;
        };
        this.beginShadows = function() {
            g = !0;
            b(null);
        };
        this.endShadows = function() {
            g = !1;
            a();
        };
        this.setState = function(c, h, l, k, r, u) {
            if (!f || null === c || 0 === c.length || g && !l) g ? b(null) : a();
            else {
                l = g ? 0 : e;
                var q = 4 * l, p = r.clippingState || null;
                m.value = p;
                p = b(c, k, q, u);
                for(c = 0; c !== q; ++c)p[c] = d[c];
                r.clippingState = p;
                this.numIntersection = h ? this.numPlanes : 0;
                this.numPlanes += l;
            }
        };
    }
    function hg(a) {
        var b = {};
        return {
            get: function(c) {
                if (void 0 !== b[c]) return b[c];
                switch(c){
                    case "WEBGL_depth_texture":
                        var d = a.getExtension("WEBGL_depth_texture") || a.getExtension("MOZ_WEBGL_depth_texture") || a.getExtension("WEBKIT_WEBGL_depth_texture");
                        break;
                    case "EXT_texture_filter_anisotropic":
                        d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                        break;
                    case "WEBGL_compressed_texture_s3tc":
                        d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                        break;
                    case "WEBGL_compressed_texture_pvrtc":
                        d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                        break;
                    default:
                        d = a.getExtension(c);
                }
                null === d && console.warn("THREE.WebGLRenderer: " + c + " extension not supported.");
                return b[c] = d;
            }
        };
    }
    function ig(a, b, c) {
        function d(a) {
            var g = a.target;
            a = e[g.id];
            null !== a.index && b.remove(a.index);
            for(var l in a.attributes)b.remove(a.attributes[l]);
            g.removeEventListener("dispose", d);
            delete e[g.id];
            if (l = f[a.id]) b.remove(l), delete f[a.id];
            c.memory.geometries--;
        }
        var e = {}, f = {};
        return {
            get: function(a, b) {
                var f = e[b.id];
                if (f) return f;
                b.addEventListener("dispose", d);
                b.isBufferGeometry ? f = b : b.isGeometry && (void 0 === b._bufferGeometry && (b._bufferGeometry = (new B).setFromObject(a)), f = b._bufferGeometry);
                e[b.id] = f;
                c.memory.geometries++;
                return f;
            },
            update: function(a) {
                var c = a.index, d = a.attributes;
                null !== c && b.update(c, 34963);
                for(var e in d)b.update(d[e], 34962);
                a = a.morphAttributes;
                for(e in a){
                    c = a[e];
                    d = 0;
                    for(var f = c.length; d < f; d++)b.update(c[d], 34962);
                }
            },
            getWireframeAttribute: function(a) {
                var c = f[a.id];
                if (c) return c;
                c = [];
                var d = a.index, e = a.attributes;
                if (null !== d) {
                    d = d.array;
                    e = 0;
                    for(var g = d.length; e < g; e += 3){
                        var p = d[e + 0], v = d[e + 1], k = d[e + 2];
                        c.push(p, v, v, k, k, p);
                    }
                } else for(d = e.position.array, e = 0, g = d.length / 3 - 1; e < g; e += 3)p = e + 0, v = e + 1, k = e + 2, c.push(p, v, v, k, k, p);
                c = new (65535 < We(c) ? vb : ub)(c, 1);
                b.update(c, 34963);
                return f[a.id] = c;
            }
        };
    }
    function jg(a, b, c, d) {
        var e, f, g;
        this.setMode = function(a) {
            e = a;
        };
        this.setIndex = function(a) {
            f = a.type;
            g = a.bytesPerElement;
        };
        this.render = function(b, d) {
            a.drawElements(e, d, f, b * g);
            c.update(d, e);
        };
        this.renderInstances = function(h, l, m) {
            if (d.isWebGL2) var q = a;
            else if (q = b.get("ANGLE_instanced_arrays"), null === q) {
                console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
            q[d.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](e, m, f, l * g, h.maxInstancedCount);
            c.update(m, e, h.maxInstancedCount);
        };
    }
    function kg(a) {
        var b = {
            frame: 0,
            calls: 0,
            triangles: 0,
            points: 0,
            lines: 0
        };
        return {
            memory: {
                geometries: 0,
                textures: 0
            },
            render: b,
            programs: null,
            autoReset: !0,
            reset: function() {
                b.frame++;
                b.calls = 0;
                b.triangles = 0;
                b.points = 0;
                b.lines = 0;
            },
            update: function(a, d, e) {
                e = e || 1;
                b.calls++;
                switch(d){
                    case 4:
                        b.triangles += a / 3 * e;
                        break;
                    case 5:
                    case 6:
                        b.triangles += e * (a - 2);
                        break;
                    case 1:
                        b.lines += a / 2 * e;
                        break;
                    case 3:
                        b.lines += e * (a - 1);
                        break;
                    case 2:
                        b.lines += e * a;
                        break;
                    case 0:
                        b.points += e * a;
                        break;
                    default:
                        console.error("THREE.WebGLInfo: Unknown draw mode:", d);
                }
            }
        };
    }
    function lg(a, b) {
        return Math.abs(b[1]) - Math.abs(a[1]);
    }
    function mg(a) {
        var b = {}, c = new Float32Array(8);
        return {
            update: function(d, e, f, g) {
                var h = d.morphTargetInfluences, l = h.length;
                d = b[e.id];
                if (void 0 === d) {
                    d = [];
                    for(var m = 0; m < l; m++)d[m] = [
                        m,
                        0
                    ];
                    b[e.id] = d;
                }
                var q = f.morphTargets && e.morphAttributes.position;
                f = f.morphNormals && e.morphAttributes.normal;
                for(m = 0; m < l; m++){
                    var p = d[m];
                    0 !== p[1] && (q && e.removeAttribute("morphTarget" + m), f && e.removeAttribute("morphNormal" + m));
                }
                for(m = 0; m < l; m++)p = d[m], p[0] = m, p[1] = h[m];
                d.sort(lg);
                for(m = 0; 8 > m; m++){
                    if (p = d[m]) {
                        if (h = p[0], l = p[1]) {
                            q && e.addAttribute("morphTarget" + m, q[h]);
                            f && e.addAttribute("morphNormal" + m, f[h]);
                            c[m] = l;
                            continue;
                        }
                    }
                    c[m] = 0;
                }
                g.getUniforms().setValue(a, "morphTargetInfluences", c);
            }
        };
    }
    function ng(a, b) {
        var c = {};
        return {
            update: function(d) {
                var e = b.render.frame, f = d.geometry, g = a.get(d, f);
                c[g.id] !== e && (f.isGeometry && g.updateFromObject(d), a.update(g), c[g.id] = e);
                return g;
            },
            dispose: function() {
                c = {};
            }
        };
    }
    function cb(a, b, c, d, e, f, g, h, l, m) {
        a = void 0 !== a ? a : [];
        Y.call(this, a, void 0 !== b ? b : 301, c, d, e, f, void 0 !== g ? g : 1022, h, l, m);
        this.flipY = !1;
    }
    function Ub(a, b, c, d) {
        Y.call(this, null);
        this.image = {
            data: a,
            width: b,
            height: c,
            depth: d
        };
        this.minFilter = this.magFilter = 1003;
        this.wrapR = 1001;
        this.flipY = this.generateMipmaps = !1;
    }
    function Vb(a, b, c, d) {
        Y.call(this, null);
        this.image = {
            data: a,
            width: b,
            height: c,
            depth: d
        };
        this.minFilter = this.magFilter = 1003;
        this.wrapR = 1001;
        this.flipY = this.generateMipmaps = !1;
    }
    function Wb(a, b, c) {
        var d = a[0];
        if (0 >= d || 0 < d) return a;
        var e = b * c, f = Xe[e];
        void 0 === f && (f = new Float32Array(e), Xe[e] = f);
        if (0 !== b) for(d.toArray(f, 0), d = 1, e = 0; d !== b; ++d)e += c, a[d].toArray(f, e);
        return f;
    }
    function X(a, b) {
        if (a.length !== b.length) return !1;
        for(var c = 0, d = a.length; c < d; c++)if (a[c] !== b[c]) return !1;
        return !0;
    }
    function sa(a, b) {
        for(var c = 0, d = b.length; c < d; c++)a[c] = b[c];
    }
    function Ye(a, b) {
        var c = Ze[b];
        void 0 === c && (c = new Int32Array(b), Ze[b] = c);
        for(var d = 0; d !== b; ++d)c[d] = a.allocateTextureUnit();
        return c;
    }
    function og(a, b) {
        var c = this.cache;
        c[0] !== b && (a.uniform1f(this.addr, b), c[0] = b);
    }
    function pg(a, b) {
        var c = this.cache;
        c[0] !== b && (a.uniform1i(this.addr, b), c[0] = b);
    }
    function qg(a, b) {
        var c = this.cache;
        if (void 0 !== b.x) {
            if (c[0] !== b.x || c[1] !== b.y) a.uniform2f(this.addr, b.x, b.y), c[0] = b.x, c[1] = b.y;
        } else X(c, b) || (a.uniform2fv(this.addr, b), sa(c, b));
    }
    function rg(a, b) {
        var c = this.cache;
        if (void 0 !== b.x) {
            if (c[0] !== b.x || c[1] !== b.y || c[2] !== b.z) a.uniform3f(this.addr, b.x, b.y, b.z), c[0] = b.x, c[1] = b.y, c[2] = b.z;
        } else if (void 0 !== b.r) {
            if (c[0] !== b.r || c[1] !== b.g || c[2] !== b.b) a.uniform3f(this.addr, b.r, b.g, b.b), c[0] = b.r, c[1] = b.g, c[2] = b.b;
        } else X(c, b) || (a.uniform3fv(this.addr, b), sa(c, b));
    }
    function sg(a, b) {
        var c = this.cache;
        if (void 0 !== b.x) {
            if (c[0] !== b.x || c[1] !== b.y || c[2] !== b.z || c[3] !== b.w) a.uniform4f(this.addr, b.x, b.y, b.z, b.w), c[0] = b.x, c[1] = b.y, c[2] = b.z, c[3] = b.w;
        } else X(c, b) || (a.uniform4fv(this.addr, b), sa(c, b));
    }
    function tg(a, b) {
        var c = this.cache, d = b.elements;
        void 0 === d ? X(c, b) || (a.uniformMatrix2fv(this.addr, !1, b), sa(c, b)) : X(c, d) || ($e.set(d), a.uniformMatrix2fv(this.addr, !1, $e), sa(c, d));
    }
    function ug(a, b) {
        var c = this.cache, d = b.elements;
        void 0 === d ? X(c, b) || (a.uniformMatrix3fv(this.addr, !1, b), sa(c, b)) : X(c, d) || (af.set(d), a.uniformMatrix3fv(this.addr, !1, af), sa(c, d));
    }
    function vg(a, b) {
        var c = this.cache, d = b.elements;
        void 0 === d ? X(c, b) || (a.uniformMatrix4fv(this.addr, !1, b), sa(c, b)) : X(c, d) || (bf.set(d), a.uniformMatrix4fv(this.addr, !1, bf), sa(c, d));
    }
    function wg(a, b, c) {
        var d = this.cache, e = c.allocateTextureUnit();
        d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);
        c.safeSetTexture2D(b || cf, e);
    }
    function xg(a, b, c) {
        var d = this.cache, e = c.allocateTextureUnit();
        d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);
        c.setTexture2DArray(b || yg, e);
    }
    function zg(a, b, c) {
        var d = this.cache, e = c.allocateTextureUnit();
        d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);
        c.setTexture3D(b || Ag, e);
    }
    function Bg(a, b, c) {
        var d = this.cache, e = c.allocateTextureUnit();
        d[0] !== e && (a.uniform1i(this.addr, e), d[0] = e);
        c.safeSetTextureCube(b || df, e);
    }
    function ef(a, b) {
        var c = this.cache;
        X(c, b) || (a.uniform2iv(this.addr, b), sa(c, b));
    }
    function ff(a, b) {
        var c = this.cache;
        X(c, b) || (a.uniform3iv(this.addr, b), sa(c, b));
    }
    function gf(a, b) {
        var c = this.cache;
        X(c, b) || (a.uniform4iv(this.addr, b), sa(c, b));
    }
    function Cg(a) {
        switch(a){
            case 5126:
                return og;
            case 35664:
                return qg;
            case 35665:
                return rg;
            case 35666:
                return sg;
            case 35674:
                return tg;
            case 35675:
                return ug;
            case 35676:
                return vg;
            case 35678:
            case 36198:
                return wg;
            case 35679:
                return zg;
            case 35680:
                return Bg;
            case 36289:
                return xg;
            case 5124:
            case 35670:
                return pg;
            case 35667:
            case 35671:
                return ef;
            case 35668:
            case 35672:
                return ff;
            case 35669:
            case 35673:
                return gf;
        }
    }
    function Dg(a, b) {
        var c = this.cache;
        X(c, b) || (a.uniform1fv(this.addr, b), sa(c, b));
    }
    function Eg(a, b) {
        var c = this.cache;
        X(c, b) || (a.uniform1iv(this.addr, b), sa(c, b));
    }
    function Fg(a, b) {
        var c = this.cache;
        b = Wb(b, this.size, 2);
        X(c, b) || (a.uniform2fv(this.addr, b), this.updateCache(b));
    }
    function Gg(a, b) {
        var c = this.cache;
        b = Wb(b, this.size, 3);
        X(c, b) || (a.uniform3fv(this.addr, b), this.updateCache(b));
    }
    function Hg(a, b) {
        var c = this.cache;
        b = Wb(b, this.size, 4);
        X(c, b) || (a.uniform4fv(this.addr, b), this.updateCache(b));
    }
    function Ig(a, b) {
        var c = this.cache;
        b = Wb(b, this.size, 4);
        X(c, b) || (a.uniformMatrix2fv(this.addr, !1, b), this.updateCache(b));
    }
    function Jg(a, b) {
        var c = this.cache;
        b = Wb(b, this.size, 9);
        X(c, b) || (a.uniformMatrix3fv(this.addr, !1, b), this.updateCache(b));
    }
    function Kg(a, b) {
        var c = this.cache;
        b = Wb(b, this.size, 16);
        X(c, b) || (a.uniformMatrix4fv(this.addr, !1, b), this.updateCache(b));
    }
    function Lg(a, b, c) {
        var d = this.cache, e = b.length, f = Ye(c, e);
        !1 === X(d, f) && (a.uniform1iv(this.addr, f), sa(d, f));
        for(a = 0; a !== e; ++a)c.safeSetTexture2D(b[a] || cf, f[a]);
    }
    function Mg(a, b, c) {
        var d = this.cache, e = b.length, f = Ye(c, e);
        !1 === X(d, f) && (a.uniform1iv(this.addr, f), sa(d, f));
        for(a = 0; a !== e; ++a)c.safeSetTextureCube(b[a] || df, f[a]);
    }
    function Ng(a) {
        switch(a){
            case 5126:
                return Dg;
            case 35664:
                return Fg;
            case 35665:
                return Gg;
            case 35666:
                return Hg;
            case 35674:
                return Ig;
            case 35675:
                return Jg;
            case 35676:
                return Kg;
            case 35678:
                return Lg;
            case 35680:
                return Mg;
            case 5124:
            case 35670:
                return Eg;
            case 35667:
            case 35671:
                return ef;
            case 35668:
            case 35672:
                return ff;
            case 35669:
            case 35673:
                return gf;
        }
    }
    function Og(a, b, c) {
        this.id = a;
        this.addr = c;
        this.cache = [];
        this.setValue = Cg(b.type);
    }
    function hf(a, b, c) {
        this.id = a;
        this.addr = c;
        this.cache = [];
        this.size = b.size;
        this.setValue = Ng(b.type);
    }
    function jf(a) {
        this.id = a;
        this.seq = [];
        this.map = {};
    }
    function ib(a, b) {
        this.seq = [];
        this.map = {};
        for(var c = a.getProgramParameter(b, 35718), d = 0; d < c; ++d){
            var e = a.getActiveUniform(b, d), f = a.getUniformLocation(b, e.name), g = this, h = e.name, l = h.length;
            for(he.lastIndex = 0;;){
                var m = he.exec(h), q = he.lastIndex, p = m[1], v = m[3];
                "]" === m[2] && (p |= 0);
                if (void 0 === v || "[" === v && q + 2 === l) {
                    h = g;
                    e = void 0 === v ? new Og(p, e, f) : new hf(p, e, f);
                    h.seq.push(e);
                    h.map[e.id] = e;
                    break;
                } else v = g.map[p], void 0 === v && (v = new jf(p), p = g, g = v, p.seq.push(g), p.map[g.id] = g), g = v;
            }
        }
    }
    function Pg(a) {
        a = a.split("\n");
        for(var b = 0; b < a.length; b++)a[b] = b + 1 + ": " + a[b];
        return a.join("\n");
    }
    function kf(a, b, c, d) {
        var e = a.createShader(b);
        a.shaderSource(e, c);
        a.compileShader(e);
        !0 === d && (!1 === a.getShaderParameter(e, 35713) && console.error("THREE.WebGLShader: Shader couldn't compile."), "" !== a.getShaderInfoLog(e) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", 35633 === b ? "vertex" : "fragment", a.getShaderInfoLog(e), Pg(c)));
        return e;
    }
    function lf(a) {
        switch(a){
            case 3E3:
                return [
                    "Linear",
                    "( value )"
                ];
            case 3001:
                return [
                    "sRGB",
                    "( value )"
                ];
            case 3002:
                return [
                    "RGBE",
                    "( value )"
                ];
            case 3004:
                return [
                    "RGBM",
                    "( value, 7.0 )"
                ];
            case 3005:
                return [
                    "RGBM",
                    "( value, 16.0 )"
                ];
            case 3006:
                return [
                    "RGBD",
                    "( value, 256.0 )"
                ];
            case 3007:
                return [
                    "Gamma",
                    "( value, float( GAMMA_FACTOR ) )"
                ];
            default:
                throw Error("unsupported encoding: " + a);
        }
    }
    function zd(a, b) {
        b = lf(b);
        return "vec4 " + a + "( vec4 value ) { return " + b[0] + "ToLinear" + b[1] + "; }";
    }
    function Qg(a, b) {
        b = lf(b);
        return "vec4 " + a + "( vec4 value ) { return LinearTo" + b[0] + b[1] + "; }";
    }
    function Rg(a, b) {
        switch(b){
            case 1:
                b = "Linear";
                break;
            case 2:
                b = "Reinhard";
                break;
            case 3:
                b = "Uncharted2";
                break;
            case 4:
                b = "OptimizedCineon";
                break;
            case 5:
                b = "ACESFilmic";
                break;
            default:
                throw Error("unsupported toneMapping: " + b);
        }
        return "vec3 " + a + "( vec3 color ) { return " + b + "ToneMapping( color ); }";
    }
    function Sg(a, b, c) {
        a = a || {};
        return [
            a.derivatives || b.envMapCubeUV || b.bumpMap || b.normalMap && !b.objectSpaceNormalMap || b.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "",
            (a.fragDepth || b.logarithmicDepthBuffer) && c.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "",
            a.drawBuffers && c.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "",
            (a.shaderTextureLOD || b.envMap) && c.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""
        ].filter(Hc).join("\n");
    }
    function Tg(a) {
        var b = [], c;
        for(c in a){
            var d = a[c];
            !1 !== d && b.push("#define " + c + " " + d);
        }
        return b.join("\n");
    }
    function Hc(a) {
        return "" !== a;
    }
    function mf(a, b) {
        return a.replace(/NUM_DIR_LIGHTS/g, b.numDirLights).replace(/NUM_SPOT_LIGHTS/g, b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, b.numPointLights).replace(/NUM_HEMI_LIGHTS/g, b.numHemiLights);
    }
    function nf(a, b) {
        return a.replace(/NUM_CLIPPING_PLANES/g, b.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, b.numClippingPlanes - b.numClipIntersection);
    }
    function ie(a) {
        return a.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function(a, c) {
            a = R[c];
            if (void 0 === a) throw Error("Can not resolve #include <" + c + ">");
            return ie(a);
        });
    }
    function of(a) {
        return a.replace(/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function(a, c, d, e) {
            a = "";
            for(c = parseInt(c); c < parseInt(d); c++)a += e.replace(/\[ i \]/g, "[ " + c + " ]");
            return a;
        });
    }
    function Ug(a, b, c, d, e, f, g, h) {
        var l = a.context, m = d.defines, q = e.vertexShader, p = e.fragmentShader, v = "SHADOWMAP_TYPE_BASIC";
        1 === f.shadowMapType ? v = "SHADOWMAP_TYPE_PCF" : 2 === f.shadowMapType && (v = "SHADOWMAP_TYPE_PCF_SOFT");
        var k = "ENVMAP_TYPE_CUBE", r = "ENVMAP_MODE_REFLECTION", u = "ENVMAP_BLENDING_MULTIPLY";
        if (f.envMap) {
            switch(d.envMap.mapping){
                case 301:
                case 302:
                    k = "ENVMAP_TYPE_CUBE";
                    break;
                case 306:
                case 307:
                    k = "ENVMAP_TYPE_CUBE_UV";
                    break;
                case 303:
                case 304:
                    k = "ENVMAP_TYPE_EQUIREC";
                    break;
                case 305:
                    k = "ENVMAP_TYPE_SPHERE";
            }
            switch(d.envMap.mapping){
                case 302:
                case 304:
                    r = "ENVMAP_MODE_REFRACTION";
            }
            switch(d.combine){
                case 0:
                    u = "ENVMAP_BLENDING_MULTIPLY";
                    break;
                case 1:
                    u = "ENVMAP_BLENDING_MIX";
                    break;
                case 2:
                    u = "ENVMAP_BLENDING_ADD";
            }
        }
        var w = 0 < a.gammaFactor ? a.gammaFactor : 1, n = g.isWebGL2 ? "" : Sg(d.extensions, f, b), x = Tg(m), y = l.createProgram();
        d.isRawShaderMaterial ? (m = [
            x
        ].filter(Hc).join("\n"), 0 < m.length && (m += "\n"), b = [
            n,
            x
        ].filter(Hc).join("\n"), 0 < b.length && (b += "\n")) : (m = [
            "precision " + f.precision + " float;",
            "precision " + f.precision + " int;",
            "#define SHADER_NAME " + e.name,
            x,
            f.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
            "#define GAMMA_FACTOR " + w,
            "#define MAX_BONES " + f.maxBones,
            f.useFog && f.fog ? "#define USE_FOG" : "",
            f.useFog && f.fogExp ? "#define FOG_EXP2" : "",
            f.map ? "#define USE_MAP" : "",
            f.envMap ? "#define USE_ENVMAP" : "",
            f.envMap ? "#define " + r : "",
            f.lightMap ? "#define USE_LIGHTMAP" : "",
            f.aoMap ? "#define USE_AOMAP" : "",
            f.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            f.bumpMap ? "#define USE_BUMPMAP" : "",
            f.normalMap ? "#define USE_NORMALMAP" : "",
            f.normalMap && f.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
            f.displacementMap && f.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
            f.specularMap ? "#define USE_SPECULARMAP" : "",
            f.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            f.metalnessMap ? "#define USE_METALNESSMAP" : "",
            f.alphaMap ? "#define USE_ALPHAMAP" : "",
            f.vertexTangents ? "#define USE_TANGENT" : "",
            f.vertexColors ? "#define USE_COLOR" : "",
            f.flatShading ? "#define FLAT_SHADED" : "",
            f.skinning ? "#define USE_SKINNING" : "",
            f.useVertexTexture ? "#define BONE_TEXTURE" : "",
            f.morphTargets ? "#define USE_MORPHTARGETS" : "",
            f.morphNormals && !1 === f.flatShading ? "#define USE_MORPHNORMALS" : "",
            f.doubleSided ? "#define DOUBLE_SIDED" : "",
            f.flipSided ? "#define FLIP_SIDED" : "",
            f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            f.shadowMapEnabled ? "#define " + v : "",
            f.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
            f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            f.logarithmicDepthBuffer && (g.isWebGL2 || b.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "",
            "uniform mat4 modelMatrix;",
            "uniform mat4 modelViewMatrix;",
            "uniform mat4 projectionMatrix;",
            "uniform mat4 viewMatrix;",
            "uniform mat3 normalMatrix;",
            "uniform vec3 cameraPosition;",
            "attribute vec3 position;",
            "attribute vec3 normal;",
            "attribute vec2 uv;",
            "#ifdef USE_TANGENT",
            "\tattribute vec4 tangent;",
            "#endif",
            "#ifdef USE_COLOR",
            "\tattribute vec3 color;",
            "#endif",
            "#ifdef USE_MORPHTARGETS",
            "\tattribute vec3 morphTarget0;",
            "\tattribute vec3 morphTarget1;",
            "\tattribute vec3 morphTarget2;",
            "\tattribute vec3 morphTarget3;",
            "\t#ifdef USE_MORPHNORMALS",
            "\t\tattribute vec3 morphNormal0;",
            "\t\tattribute vec3 morphNormal1;",
            "\t\tattribute vec3 morphNormal2;",
            "\t\tattribute vec3 morphNormal3;",
            "\t#else",
            "\t\tattribute vec3 morphTarget4;",
            "\t\tattribute vec3 morphTarget5;",
            "\t\tattribute vec3 morphTarget6;",
            "\t\tattribute vec3 morphTarget7;",
            "\t#endif",
            "#endif",
            "#ifdef USE_SKINNING",
            "\tattribute vec4 skinIndex;",
            "\tattribute vec4 skinWeight;",
            "#endif",
            "\n"
        ].filter(Hc).join("\n"), b = [
            n,
            "precision " + f.precision + " float;",
            "precision " + f.precision + " int;",
            "#define SHADER_NAME " + e.name,
            x,
            f.alphaTest ? "#define ALPHATEST " + f.alphaTest + (f.alphaTest % 1 ? "" : ".0") : "",
            "#define GAMMA_FACTOR " + w,
            f.useFog && f.fog ? "#define USE_FOG" : "",
            f.useFog && f.fogExp ? "#define FOG_EXP2" : "",
            f.map ? "#define USE_MAP" : "",
            f.matcap ? "#define USE_MATCAP" : "",
            f.envMap ? "#define USE_ENVMAP" : "",
            f.envMap ? "#define " + k : "",
            f.envMap ? "#define " + r : "",
            f.envMap ? "#define " + u : "",
            f.lightMap ? "#define USE_LIGHTMAP" : "",
            f.aoMap ? "#define USE_AOMAP" : "",
            f.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            f.bumpMap ? "#define USE_BUMPMAP" : "",
            f.normalMap ? "#define USE_NORMALMAP" : "",
            f.normalMap && f.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
            f.specularMap ? "#define USE_SPECULARMAP" : "",
            f.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            f.metalnessMap ? "#define USE_METALNESSMAP" : "",
            f.alphaMap ? "#define USE_ALPHAMAP" : "",
            f.vertexTangents ? "#define USE_TANGENT" : "",
            f.vertexColors ? "#define USE_COLOR" : "",
            f.gradientMap ? "#define USE_GRADIENTMAP" : "",
            f.flatShading ? "#define FLAT_SHADED" : "",
            f.doubleSided ? "#define DOUBLE_SIDED" : "",
            f.flipSided ? "#define FLIP_SIDED" : "",
            f.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            f.shadowMapEnabled ? "#define " + v : "",
            f.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
            f.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
            f.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            f.logarithmicDepthBuffer && (g.isWebGL2 || b.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "",
            f.envMap && (g.isWebGL2 || b.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "",
            "uniform mat4 viewMatrix;",
            "uniform vec3 cameraPosition;",
            0 !== f.toneMapping ? "#define TONE_MAPPING" : "",
            0 !== f.toneMapping ? R.tonemapping_pars_fragment : "",
            0 !== f.toneMapping ? Rg("toneMapping", f.toneMapping) : "",
            f.dithering ? "#define DITHERING" : "",
            f.outputEncoding || f.mapEncoding || f.matcapEncoding || f.envMapEncoding || f.emissiveMapEncoding ? R.encodings_pars_fragment : "",
            f.mapEncoding ? zd("mapTexelToLinear", f.mapEncoding) : "",
            f.matcapEncoding ? zd("matcapTexelToLinear", f.matcapEncoding) : "",
            f.envMapEncoding ? zd("envMapTexelToLinear", f.envMapEncoding) : "",
            f.emissiveMapEncoding ? zd("emissiveMapTexelToLinear", f.emissiveMapEncoding) : "",
            f.outputEncoding ? Qg("linearToOutputTexel", f.outputEncoding) : "",
            f.depthPacking ? "#define DEPTH_PACKING " + d.depthPacking : "",
            "\n"
        ].filter(Hc).join("\n"));
        q = ie(q);
        q = mf(q, f);
        q = nf(q, f);
        p = ie(p);
        p = mf(p, f);
        p = nf(p, f);
        q = of(q);
        p = of(p);
        g.isWebGL2 && !d.isRawShaderMaterial && (g = !1, v = /^\s*#version\s+300\s+es\s*\n/, d.isShaderMaterial && null !== q.match(v) && null !== p.match(v) && (g = !0, q = q.replace(v, ""), p = p.replace(v, "")), m = "#version 300 es\n\n#define attribute in\n#define varying out\n#define texture2D texture\n" + m, b = [
            "#version 300 es\n\n#define varying in",
            g ? "" : "out highp vec4 pc_fragColor;",
            g ? "" : "#define gl_FragColor pc_fragColor",
            "#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"
        ].join("\n") + "\n" + b);
        p = b + p;
        q = kf(l, 35633, m + q, a.debug.checkShaderErrors);
        p = kf(l, 35632, p, a.debug.checkShaderErrors);
        l.attachShader(y, q);
        l.attachShader(y, p);
        void 0 !== d.index0AttributeName ? l.bindAttribLocation(y, 0, d.index0AttributeName) : !0 === f.morphTargets && l.bindAttribLocation(y, 0, "position");
        l.linkProgram(y);
        if (a.debug.checkShaderErrors) {
            a = l.getProgramInfoLog(y).trim();
            f = l.getShaderInfoLog(q).trim();
            g = l.getShaderInfoLog(p).trim();
            k = v = !0;
            if (!1 === l.getProgramParameter(y, 35714)) v = !1, console.error("THREE.WebGLProgram: shader error: ", l.getError(), "35715", l.getProgramParameter(y, 35715), "gl.getProgramInfoLog", a, f, g);
            else if ("" !== a) console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", a);
            else if ("" === f || "" === g) k = !1;
            k && (this.diagnostics = {
                runnable: v,
                material: d,
                programLog: a,
                vertexShader: {
                    log: f,
                    prefix: m
                },
                fragmentShader: {
                    log: g,
                    prefix: b
                }
            });
        }
        l.deleteShader(q);
        l.deleteShader(p);
        var F;
        this.getUniforms = function() {
            void 0 === F && (F = new ib(l, y, h));
            return F;
        };
        var G;
        this.getAttributes = function() {
            if (void 0 === G) {
                for(var a = {}, b = l.getProgramParameter(y, 35721), c = 0; c < b; c++){
                    var d = l.getActiveAttrib(y, c).name;
                    a[d] = l.getAttribLocation(y, d);
                }
                G = a;
            }
            return G;
        };
        this.destroy = function() {
            l.deleteProgram(y);
            this.program = void 0;
        };
        Object.defineProperties(this, {
            uniforms: {
                get: function() {
                    console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");
                    return this.getUniforms();
                }
            },
            attributes: {
                get: function() {
                    console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");
                    return this.getAttributes();
                }
            }
        });
        this.name = e.name;
        this.id = Vg++;
        this.code = c;
        this.usedTimes = 1;
        this.program = y;
        this.vertexShader = q;
        this.fragmentShader = p;
        return this;
    }
    function Wg(a, b, c, d) {
        function e(a, b) {
            if (a) a.isTexture ? c = a.encoding : a.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), c = a.texture.encoding);
            else var c = 3E3;
            3E3 === c && b && (c = 3007);
            return c;
        }
        var f = [], g = {
            MeshDepthMaterial: "depth",
            MeshDistanceMaterial: "distanceRGBA",
            MeshNormalMaterial: "normal",
            MeshBasicMaterial: "basic",
            MeshLambertMaterial: "lambert",
            MeshPhongMaterial: "phong",
            MeshToonMaterial: "phong",
            MeshStandardMaterial: "physical",
            MeshPhysicalMaterial: "physical",
            MeshMatcapMaterial: "matcap",
            LineBasicMaterial: "basic",
            LineDashedMaterial: "dashed",
            PointsMaterial: "points",
            ShadowMaterial: "shadow",
            SpriteMaterial: "sprite"
        }, h = "precision supportsVertexTextures map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering".split(" ");
        this.getParameters = function(b, d, f, h, v, k, r) {
            var l = g[b.type];
            if (r.isSkinnedMesh) {
                var m = r.skeleton.bones;
                if (c.floatVertexTextures) m = 1024;
                else {
                    var q = Math.min(Math.floor((c.maxVertexUniforms - 20) / 4), m.length);
                    q < m.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + m.length + " bones. This GPU supports " + q + "."), m = 0) : m = q;
                }
            } else m = 0;
            q = c.precision;
            null !== b.precision && (q = c.getMaxPrecision(b.precision), q !== b.precision && console.warn("THREE.WebGLProgram.getParameters:", b.precision, "not supported, using", q, "instead."));
            var p = a.getRenderTarget();
            return {
                shaderID: l,
                precision: q,
                supportsVertexTextures: c.vertexTextures,
                outputEncoding: e(p ? p.texture : null, a.gammaOutput),
                map: !!b.map,
                mapEncoding: e(b.map, a.gammaInput),
                matcap: !!b.matcap,
                matcapEncoding: e(b.matcap, a.gammaInput),
                envMap: !!b.envMap,
                envMapMode: b.envMap && b.envMap.mapping,
                envMapEncoding: e(b.envMap, a.gammaInput),
                envMapCubeUV: !!b.envMap && (306 === b.envMap.mapping || 307 === b.envMap.mapping),
                lightMap: !!b.lightMap,
                aoMap: !!b.aoMap,
                emissiveMap: !!b.emissiveMap,
                emissiveMapEncoding: e(b.emissiveMap, a.gammaInput),
                bumpMap: !!b.bumpMap,
                normalMap: !!b.normalMap,
                objectSpaceNormalMap: 1 === b.normalMapType,
                displacementMap: !!b.displacementMap,
                roughnessMap: !!b.roughnessMap,
                metalnessMap: !!b.metalnessMap,
                specularMap: !!b.specularMap,
                alphaMap: !!b.alphaMap,
                gradientMap: !!b.gradientMap,
                combine: b.combine,
                vertexTangents: b.normalMap && b.vertexTangents,
                vertexColors: b.vertexColors,
                fog: !!h,
                useFog: b.fog,
                fogExp: h && h.isFogExp2,
                flatShading: b.flatShading,
                sizeAttenuation: b.sizeAttenuation,
                logarithmicDepthBuffer: c.logarithmicDepthBuffer,
                skinning: b.skinning && 0 < m,
                maxBones: m,
                useVertexTexture: c.floatVertexTextures,
                morphTargets: b.morphTargets,
                morphNormals: b.morphNormals,
                maxMorphTargets: a.maxMorphTargets,
                maxMorphNormals: a.maxMorphNormals,
                numDirLights: d.directional.length,
                numPointLights: d.point.length,
                numSpotLights: d.spot.length,
                numRectAreaLights: d.rectArea.length,
                numHemiLights: d.hemi.length,
                numClippingPlanes: v,
                numClipIntersection: k,
                dithering: b.dithering,
                shadowMapEnabled: a.shadowMap.enabled && r.receiveShadow && 0 < f.length,
                shadowMapType: a.shadowMap.type,
                toneMapping: a.toneMapping,
                physicallyCorrectLights: a.physicallyCorrectLights,
                premultipliedAlpha: b.premultipliedAlpha,
                alphaTest: b.alphaTest,
                doubleSided: 2 === b.side,
                flipSided: 1 === b.side,
                depthPacking: void 0 !== b.depthPacking ? b.depthPacking : !1
            };
        };
        this.getProgramCode = function(b, c) {
            var d = [];
            c.shaderID ? d.push(c.shaderID) : (d.push(b.fragmentShader), d.push(b.vertexShader));
            if (void 0 !== b.defines) for(var e in b.defines)d.push(e), d.push(b.defines[e]);
            for(e = 0; e < h.length; e++)d.push(c[h[e]]);
            d.push(b.onBeforeCompile.toString());
            d.push(a.gammaOutput);
            d.push(a.gammaFactor);
            return d.join();
        };
        this.acquireProgram = function(e, g, h, p) {
            for(var l, m = 0, q = f.length; m < q; m++){
                var k = f[m];
                if (k.code === p) {
                    l = k;
                    ++l.usedTimes;
                    break;
                }
            }
            void 0 === l && (l = new Ug(a, b, p, e, g, h, c, d), f.push(l));
            return l;
        };
        this.releaseProgram = function(a) {
            if (0 === --a.usedTimes) {
                var b = f.indexOf(a);
                f[b] = f[f.length - 1];
                f.pop();
                a.destroy();
            }
        };
        this.programs = f;
    }
    function Xg() {
        var a = new WeakMap;
        return {
            get: function(b) {
                var c = a.get(b);
                void 0 === c && (c = {}, a.set(b, c));
                return c;
            },
            remove: function(b) {
                a.delete(b);
            },
            update: function(b, c, d) {
                a.get(b)[c] = d;
            },
            dispose: function() {
                a = new WeakMap;
            }
        };
    }
    function Yg(a, b) {
        return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.program !== b.program ? a.program.id - b.program.id : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
    }
    function Zg(a, b) {
        return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
    }
    function pf() {
        function a(a, d, e, m, q, p) {
            var g = b[c];
            void 0 === g ? (g = {
                id: a.id,
                object: a,
                geometry: d,
                material: e,
                program: e.program || f,
                groupOrder: m,
                renderOrder: a.renderOrder,
                z: q,
                group: p
            }, b[c] = g) : (g.id = a.id, g.object = a, g.geometry = d, g.material = e, g.program = e.program || f, g.groupOrder = m, g.renderOrder = a.renderOrder, g.z = q, g.group = p);
            c++;
            return g;
        }
        var b = [], c = 0, d = [], e = [], f = {
            id: -1
        };
        return {
            opaque: d,
            transparent: e,
            init: function() {
                c = 0;
                d.length = 0;
                e.length = 0;
            },
            push: function(b, c, f, m, q, p) {
                b = a(b, c, f, m, q, p);
                (!0 === f.transparent ? e : d).push(b);
            },
            unshift: function(b, c, f, m, q, p) {
                b = a(b, c, f, m, q, p);
                (!0 === f.transparent ? e : d).unshift(b);
            },
            sort: function() {
                1 < d.length && d.sort(Yg);
                1 < e.length && e.sort(Zg);
            }
        };
    }
    function $g() {
        function a(c) {
            c = c.target;
            c.removeEventListener("dispose", a);
            delete b[c.id];
        }
        var b = {};
        return {
            get: function(c, d) {
                var e = b[c.id];
                if (void 0 === e) {
                    var f = new pf;
                    b[c.id] = {};
                    b[c.id][d.id] = f;
                    c.addEventListener("dispose", a);
                } else f = e[d.id], void 0 === f && (f = new pf, e[d.id] = f);
                return f;
            },
            dispose: function() {
                b = {};
            }
        };
    }
    function ah() {
        var a = {};
        return {
            get: function(b) {
                if (void 0 !== a[b.id]) return a[b.id];
                switch(b.type){
                    case "DirectionalLight":
                        var c = {
                            direction: new n,
                            color: new A,
                            shadow: !1,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new C
                        };
                        break;
                    case "SpotLight":
                        c = {
                            position: new n,
                            direction: new n,
                            color: new A,
                            distance: 0,
                            coneCos: 0,
                            penumbraCos: 0,
                            decay: 0,
                            shadow: !1,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new C
                        };
                        break;
                    case "PointLight":
                        c = {
                            position: new n,
                            color: new A,
                            distance: 0,
                            decay: 0,
                            shadow: !1,
                            shadowBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new C,
                            shadowCameraNear: 1,
                            shadowCameraFar: 1E3
                        };
                        break;
                    case "HemisphereLight":
                        c = {
                            direction: new n,
                            skyColor: new A,
                            groundColor: new A
                        };
                        break;
                    case "RectAreaLight":
                        c = {
                            color: new A,
                            position: new n,
                            halfWidth: new n,
                            halfHeight: new n
                        };
                }
                return a[b.id] = c;
            }
        };
    }
    function bh() {
        for(var a = new ah, b = {
            id: ch++,
            hash: {
                stateID: -1,
                directionalLength: -1,
                pointLength: -1,
                spotLength: -1,
                rectAreaLength: -1,
                hemiLength: -1,
                shadowsLength: -1
            },
            ambient: [
                0,
                0,
                0
            ],
            probe: [],
            directional: [],
            directionalShadowMap: [],
            directionalShadowMatrix: [],
            spot: [],
            spotShadowMap: [],
            spotShadowMatrix: [],
            rectArea: [],
            point: [],
            pointShadowMap: [],
            pointShadowMatrix: [],
            hemi: []
        }, c = 0; 9 > c; c++)b.probe.push(new n);
        var d = new n, e = new P, f = new P;
        return {
            setup: function(c, h, l) {
                for(var g = 0, q = 0, p = 0, v = 0; 9 > v; v++)b.probe[v].set(0, 0, 0);
                var k = 0, r = 0, u = 0, n = 0, z = 0;
                l = l.matrixWorldInverse;
                v = 0;
                for(var x = c.length; v < x; v++){
                    var y = c[v], F = y.color, G = y.intensity, ua = y.distance, pa = y.shadow && y.shadow.map ? y.shadow.map.texture : null;
                    if (y.isAmbientLight) g += F.r * G, q += F.g * G, p += F.b * G;
                    else if (y.isLightProbe) for(pa = 0; 9 > pa; pa++)b.probe[pa].addScaledVector(y.sh.coefficients[pa], G);
                    else if (y.isDirectionalLight) {
                        var I = a.get(y);
                        I.color.copy(y.color).multiplyScalar(y.intensity);
                        I.direction.setFromMatrixPosition(y.matrixWorld);
                        d.setFromMatrixPosition(y.target.matrixWorld);
                        I.direction.sub(d);
                        I.direction.transformDirection(l);
                        if (I.shadow = y.castShadow) G = y.shadow, I.shadowBias = G.bias, I.shadowRadius = G.radius, I.shadowMapSize = G.mapSize;
                        b.directionalShadowMap[k] = pa;
                        b.directionalShadowMatrix[k] = y.shadow.matrix;
                        b.directional[k] = I;
                        k++;
                    } else if (y.isSpotLight) {
                        I = a.get(y);
                        I.position.setFromMatrixPosition(y.matrixWorld);
                        I.position.applyMatrix4(l);
                        I.color.copy(F).multiplyScalar(G);
                        I.distance = ua;
                        I.direction.setFromMatrixPosition(y.matrixWorld);
                        d.setFromMatrixPosition(y.target.matrixWorld);
                        I.direction.sub(d);
                        I.direction.transformDirection(l);
                        I.coneCos = Math.cos(y.angle);
                        I.penumbraCos = Math.cos(y.angle * (1 - y.penumbra));
                        I.decay = y.decay;
                        if (I.shadow = y.castShadow) G = y.shadow, I.shadowBias = G.bias, I.shadowRadius = G.radius, I.shadowMapSize = G.mapSize;
                        b.spotShadowMap[u] = pa;
                        b.spotShadowMatrix[u] = y.shadow.matrix;
                        b.spot[u] = I;
                        u++;
                    } else if (y.isRectAreaLight) I = a.get(y), I.color.copy(F).multiplyScalar(G), I.position.setFromMatrixPosition(y.matrixWorld), I.position.applyMatrix4(l), f.identity(), e.copy(y.matrixWorld), e.premultiply(l), f.extractRotation(e), I.halfWidth.set(.5 * y.width, 0, 0), I.halfHeight.set(0, .5 * y.height, 0), I.halfWidth.applyMatrix4(f), I.halfHeight.applyMatrix4(f), b.rectArea[n] = I, n++;
                    else if (y.isPointLight) {
                        I = a.get(y);
                        I.position.setFromMatrixPosition(y.matrixWorld);
                        I.position.applyMatrix4(l);
                        I.color.copy(y.color).multiplyScalar(y.intensity);
                        I.distance = y.distance;
                        I.decay = y.decay;
                        if (I.shadow = y.castShadow) G = y.shadow, I.shadowBias = G.bias, I.shadowRadius = G.radius, I.shadowMapSize = G.mapSize, I.shadowCameraNear = G.camera.near, I.shadowCameraFar = G.camera.far;
                        b.pointShadowMap[r] = pa;
                        b.pointShadowMatrix[r] = y.shadow.matrix;
                        b.point[r] = I;
                        r++;
                    } else y.isHemisphereLight && (I = a.get(y), I.direction.setFromMatrixPosition(y.matrixWorld), I.direction.transformDirection(l), I.direction.normalize(), I.skyColor.copy(y.color).multiplyScalar(G), I.groundColor.copy(y.groundColor).multiplyScalar(G), b.hemi[z] = I, z++);
                }
                b.ambient[0] = g;
                b.ambient[1] = q;
                b.ambient[2] = p;
                b.directional.length = k;
                b.spot.length = u;
                b.rectArea.length = n;
                b.point.length = r;
                b.hemi.length = z;
                b.hash.stateID = b.id;
                b.hash.directionalLength = k;
                b.hash.pointLength = r;
                b.hash.spotLength = u;
                b.hash.rectAreaLength = n;
                b.hash.hemiLength = z;
                b.hash.shadowsLength = h.length;
            },
            state: b
        };
    }
    function qf() {
        var a = new bh, b = [], c = [];
        return {
            init: function() {
                b.length = 0;
                c.length = 0;
            },
            state: {
                lightsArray: b,
                shadowsArray: c,
                lights: a
            },
            setupLights: function(d) {
                a.setup(b, c, d);
            },
            pushLight: function(a) {
                b.push(a);
            },
            pushShadow: function(a) {
                c.push(a);
            }
        };
    }
    function dh() {
        function a(c) {
            c = c.target;
            c.removeEventListener("dispose", a);
            delete b[c.id];
        }
        var b = {};
        return {
            get: function(c, d) {
                if (void 0 === b[c.id]) {
                    var e = new qf;
                    b[c.id] = {};
                    b[c.id][d.id] = e;
                    c.addEventListener("dispose", a);
                } else void 0 === b[c.id][d.id] ? (e = new qf, b[c.id][d.id] = e) : e = b[c.id][d.id];
                return e;
            },
            dispose: function() {
                b = {};
            }
        };
    }
    function jb(a) {
        Q.call(this);
        this.type = "MeshDepthMaterial";
        this.depthPacking = 3200;
        this.morphTargets = this.skinning = !1;
        this.displacementMap = this.alphaMap = this.map = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = !1;
        this.wireframeLinewidth = 1;
        this.lights = this.fog = !1;
        this.setValues(a);
    }
    function kb(a) {
        Q.call(this);
        this.type = "MeshDistanceMaterial";
        this.referencePosition = new n;
        this.nearDistance = 1;
        this.farDistance = 1E3;
        this.morphTargets = this.skinning = !1;
        this.displacementMap = this.alphaMap = this.map = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.lights = this.fog = !1;
        this.setValues(a);
    }
    function rf(a, b, c) {
        function d(b, c, d, e, f, g) {
            var h = b.geometry;
            var l = p;
            var m = b.customDepthMaterial;
            d && (l = v, m = b.customDistanceMaterial);
            m ? l = m : (m = !1, c.morphTargets && (h && h.isBufferGeometry ? m = h.morphAttributes && h.morphAttributes.position && 0 < h.morphAttributes.position.length : h && h.isGeometry && (m = h.morphTargets && 0 < h.morphTargets.length)), b.isSkinnedMesh && !1 === c.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", b), b = b.isSkinnedMesh && c.skinning, h = 0, m && (h |= 1), b && (h |= 2), l = l[h]);
            a.localClippingEnabled && !0 === c.clipShadows && 0 !== c.clippingPlanes.length && (h = l.uuid, m = c.uuid, b = k[h], void 0 === b && (b = {}, k[h] = b), h = b[m], void 0 === h && (h = l.clone(), b[m] = h), l = h);
            l.visible = c.visible;
            l.wireframe = c.wireframe;
            l.side = null != c.shadowSide ? c.shadowSide : r[c.side];
            l.clipShadows = c.clipShadows;
            l.clippingPlanes = c.clippingPlanes;
            l.clipIntersection = c.clipIntersection;
            l.wireframeLinewidth = c.wireframeLinewidth;
            l.linewidth = c.linewidth;
            d && l.isMeshDistanceMaterial && (l.referencePosition.copy(e), l.nearDistance = f, l.farDistance = g);
            return l;
        }
        function e(c, g, h, l) {
            if (!1 !== c.visible) {
                if (c.layers.test(g.layers) && (c.isMesh || c.isLine || c.isPoints) && c.castShadow && (!c.frustumCulled || f.intersectsObject(c))) {
                    c.modelViewMatrix.multiplyMatrices(h.matrixWorldInverse, c.matrixWorld);
                    var m = b.update(c), p = c.material;
                    if (Array.isArray(p)) for(var v = m.groups, k = 0, t = v.length; k < t; k++){
                        var r = v[k], u = p[r.materialIndex];
                        u && u.visible && (u = d(c, u, l, q, h.near, h.far), a.renderBufferDirect(h, null, m, u, c, r));
                    }
                    else p.visible && (u = d(c, p, l, q, h.near, h.far), a.renderBufferDirect(h, null, m, u, c, null));
                }
                c = c.children;
                m = 0;
                for(p = c.length; m < p; m++)e(c[m], g, h, l);
            }
        }
        var f = new yd, g = new P, h = new C, l = new C(c, c), m = new n, q = new n, p = Array(4), v = Array(4), k = {}, r = {
            0: 1,
            1: 0,
            2: 2
        }, u = [
            new n(1, 0, 0),
            new n(-1, 0, 0),
            new n(0, 0, 1),
            new n(0, 0, -1),
            new n(0, 1, 0),
            new n(0, -1, 0)
        ], w = [
            new n(0, 1, 0),
            new n(0, 1, 0),
            new n(0, 1, 0),
            new n(0, 1, 0),
            new n(0, 0, 1),
            new n(0, 0, -1)
        ], z = [
            new W,
            new W,
            new W,
            new W,
            new W,
            new W
        ];
        for(c = 0; 4 !== c; ++c){
            var x = 0 !== (c & 1), y = 0 !== (c & 2), F = new jb({
                depthPacking: 3201,
                morphTargets: x,
                skinning: y
            });
            p[c] = F;
            x = new kb({
                morphTargets: x,
                skinning: y
            });
            v[c] = x;
        }
        var G = this;
        this.enabled = !1;
        this.autoUpdate = !0;
        this.needsUpdate = !1;
        this.type = 1;
        this.render = function(b, c, d) {
            if (!1 !== G.enabled && (!1 !== G.autoUpdate || !1 !== G.needsUpdate) && 0 !== b.length) {
                var p = a.getRenderTarget(), v = a.state;
                v.setBlending(0);
                v.buffers.color.setClear(1, 1, 1, 1);
                v.buffers.depth.setTest(!0);
                v.setScissorTest(!1);
                for(var k, t = 0, r = b.length; t < r; t++){
                    var n = b[t];
                    k = n.shadow;
                    var ha = n && n.isPointLight;
                    if (void 0 === k) console.warn("THREE.WebGLShadowMap:", n, "has no shadow.");
                    else {
                        var S = k.camera;
                        h.copy(k.mapSize);
                        h.min(l);
                        if (ha) {
                            var y = h.x, x = h.y;
                            z[0].set(2 * y, x, y, x);
                            z[1].set(0, x, y, x);
                            z[2].set(3 * y, x, y, x);
                            z[3].set(y, x, y, x);
                            z[4].set(3 * y, 0, y, x);
                            z[5].set(y, 0, y, x);
                            h.x *= 4;
                            h.y *= 2;
                        }
                        null === k.map && (k.map = new Sa(h.x, h.y, {
                            minFilter: 1003,
                            magFilter: 1003,
                            format: 1023
                        }), k.map.texture.name = n.name + ".shadowMap", S.updateProjectionMatrix());
                        k.isSpotLightShadow && k.update(n);
                        y = k.map;
                        x = k.matrix;
                        q.setFromMatrixPosition(n.matrixWorld);
                        S.position.copy(q);
                        ha ? (k = 6, x.makeTranslation(-q.x, -q.y, -q.z)) : (k = 1, m.setFromMatrixPosition(n.target.matrixWorld), S.lookAt(m), S.updateMatrixWorld(), x.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), x.multiply(S.projectionMatrix), x.multiply(S.matrixWorldInverse));
                        a.setRenderTarget(y);
                        a.clear();
                        for(n = 0; n < k; n++)ha && (m.copy(S.position), m.add(u[n]), S.up.copy(w[n]), S.lookAt(m), S.updateMatrixWorld(), v.viewport(z[n])), g.multiplyMatrices(S.projectionMatrix, S.matrixWorldInverse), f.setFromMatrix(g), e(c, d, S, ha);
                    }
                }
                G.needsUpdate = !1;
                a.setRenderTarget(p);
            }
        };
    }
    function eh(a, b, c, d) {
        function e(b, c, d) {
            var e = new Uint8Array(4), f = a.createTexture();
            a.bindTexture(b, f);
            a.texParameteri(b, 10241, 9728);
            a.texParameteri(b, 10240, 9728);
            for(b = 0; b < d; b++)a.texImage2D(c + b, 0, 6408, 1, 1, 0, 6408, 5121, e);
            return f;
        }
        function f(c, e) {
            z[c] = 1;
            0 === x[c] && (a.enableVertexAttribArray(c), x[c] = 1);
            y[c] !== e && ((d.isWebGL2 ? a : b.get("ANGLE_instanced_arrays"))[d.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](c, e), y[c] = e);
        }
        function g(b) {
            !0 !== F[b] && (a.enable(b), F[b] = !0);
        }
        function h(b) {
            !1 !== F[b] && (a.disable(b), F[b] = !1);
        }
        function l(b, d, e, f, l, m, q, p) {
            if (0 === b) pa && (h(3042), pa = !1);
            else if (pa || (g(3042), pa = !0), 5 !== b) {
                if (b !== I || p !== ha) {
                    if (100 !== C || 100 !== D) a.blendEquation(32774), D = C = 100;
                    if (p) switch(b){
                        case 1:
                            a.blendFuncSeparate(1, 771, 1, 771);
                            break;
                        case 2:
                            a.blendFunc(1, 1);
                            break;
                        case 3:
                            a.blendFuncSeparate(0, 0, 769, 771);
                            break;
                        case 4:
                            a.blendFuncSeparate(0, 768, 0, 770);
                            break;
                        default:
                            console.error("THREE.WebGLState: Invalid blending: ", b);
                    }
                    else switch(b){
                        case 1:
                            a.blendFuncSeparate(770, 771, 1, 771);
                            break;
                        case 2:
                            a.blendFunc(770, 1);
                            break;
                        case 3:
                            a.blendFunc(0, 769);
                            break;
                        case 4:
                            a.blendFunc(0, 768);
                            break;
                        default:
                            console.error("THREE.WebGLState: Invalid blending: ", b);
                    }
                    J = B = fe = E = null;
                    I = b;
                    ha = p;
                }
            } else {
                l = l || d;
                m = m || e;
                q = q || f;
                if (d !== C || l !== D) a.blendEquationSeparate(c.convert(d), c.convert(l)), C = d, D = l;
                if (e !== E || f !== fe || m !== B || q !== J) a.blendFuncSeparate(c.convert(e), c.convert(f), c.convert(m), c.convert(q)), E = e, fe = f, B = m, J = q;
                I = b;
                ha = null;
            }
        }
        function m(b) {
            S !== b && (b ? a.frontFace(2304) : a.frontFace(2305), S = b);
        }
        function q(b) {
            0 !== b ? (g(2884), b !== ge && (1 === b ? a.cullFace(1029) : 2 === b ? a.cullFace(1028) : a.cullFace(1032))) : h(2884);
            ge = b;
        }
        function p(b, c, d) {
            if (b) {
                if (g(32823), bb !== c || sf !== d) a.polygonOffset(c, d), bb = c, sf = d;
            } else h(32823);
        }
        function v(b) {
            void 0 === b && (b = 33984 + A - 1);
            P !== b && (a.activeTexture(b), P = b);
        }
        var k = new function() {
            var b = !1, c = new W, d = null, e = new W(0, 0, 0, 0);
            return {
                setMask: function(c) {
                    d === c || b || (a.colorMask(c, c, c, c), d = c);
                },
                setLocked: function(a) {
                    b = a;
                },
                setClear: function(b, d, f, g, h) {
                    !0 === h && (b *= g, d *= g, f *= g);
                    c.set(b, d, f, g);
                    !1 === e.equals(c) && (a.clearColor(b, d, f, g), e.copy(c));
                },
                reset: function() {
                    b = !1;
                    d = null;
                    e.set(-1, 0, 0, 0);
                }
            };
        }, r = new function() {
            var b = !1, c = null, d = null, e = null;
            return {
                setTest: function(a) {
                    a ? g(2929) : h(2929);
                },
                setMask: function(d) {
                    c === d || b || (a.depthMask(d), c = d);
                },
                setFunc: function(b) {
                    if (d !== b) {
                        if (b) switch(b){
                            case 0:
                                a.depthFunc(512);
                                break;
                            case 1:
                                a.depthFunc(519);
                                break;
                            case 2:
                                a.depthFunc(513);
                                break;
                            case 3:
                                a.depthFunc(515);
                                break;
                            case 4:
                                a.depthFunc(514);
                                break;
                            case 5:
                                a.depthFunc(518);
                                break;
                            case 6:
                                a.depthFunc(516);
                                break;
                            case 7:
                                a.depthFunc(517);
                                break;
                            default:
                                a.depthFunc(515);
                        }
                        else a.depthFunc(515);
                        d = b;
                    }
                },
                setLocked: function(a) {
                    b = a;
                },
                setClear: function(b) {
                    e !== b && (a.clearDepth(b), e = b);
                },
                reset: function() {
                    b = !1;
                    e = d = c = null;
                }
            };
        }, u = new function() {
            var b = !1, c = null, d = null, e = null, f = null, l = null, m = null, q = null, p = null;
            return {
                setTest: function(a) {
                    a ? g(2960) : h(2960);
                },
                setMask: function(d) {
                    c === d || b || (a.stencilMask(d), c = d);
                },
                setFunc: function(b, c, g) {
                    if (d !== b || e !== c || f !== g) a.stencilFunc(b, c, g), d = b, e = c, f = g;
                },
                setOp: function(b, c, d) {
                    if (l !== b || m !== c || q !== d) a.stencilOp(b, c, d), l = b, m = c, q = d;
                },
                setLocked: function(a) {
                    b = a;
                },
                setClear: function(b) {
                    p !== b && (a.clearStencil(b), p = b);
                },
                reset: function() {
                    b = !1;
                    p = q = m = l = f = e = d = c = null;
                }
            };
        }, n = a.getParameter(34921), z = new Uint8Array(n), x = new Uint8Array(n), y = new Uint8Array(n), F = {}, G = null, ua = null, pa = null, I = null, C = null, E = null, fe = null, D = null, B = null, J = null, ha = !1, S = null, ge = null, xb = null, bb = null, sf = null, A = a.getParameter(35661), M = !1;
        n = 0;
        n = a.getParameter(7938);
        -1 !== n.indexOf("WebGL") ? (n = parseFloat(/^WebGL ([0-9])/.exec(n)[1]), M = 1 <= n) : -1 !== n.indexOf("OpenGL ES") && (n = parseFloat(/^OpenGL ES ([0-9])/.exec(n)[1]), M = 2 <= n);
        var P = null, K = {}, O = new W, Q = new W, L = {};
        L[3553] = e(3553, 3553, 1);
        L[34067] = e(34067, 34069, 6);
        k.setClear(0, 0, 0, 1);
        r.setClear(1);
        u.setClear(0);
        g(2929);
        r.setFunc(3);
        m(!1);
        q(1);
        g(2884);
        l(0);
        return {
            buffers: {
                color: k,
                depth: r,
                stencil: u
            },
            initAttributes: function() {
                for(var a = 0, b = z.length; a < b; a++)z[a] = 0;
            },
            enableAttribute: function(a) {
                f(a, 0);
            },
            enableAttributeAndDivisor: f,
            disableUnusedAttributes: function() {
                for(var b = 0, c = x.length; b !== c; ++b)x[b] !== z[b] && (a.disableVertexAttribArray(b), x[b] = 0);
            },
            enable: g,
            disable: h,
            getCompressedTextureFormats: function() {
                if (null === G && (G = [], b.get("WEBGL_compressed_texture_pvrtc") || b.get("WEBGL_compressed_texture_s3tc") || b.get("WEBGL_compressed_texture_etc1") || b.get("WEBGL_compressed_texture_astc"))) for(var c = a.getParameter(34467), d = 0; d < c.length; d++)G.push(c[d]);
                return G;
            },
            useProgram: function(b) {
                return ua !== b ? (a.useProgram(b), ua = b, !0) : !1;
            },
            setBlending: l,
            setMaterial: function(a, b) {
                2 === a.side ? h(2884) : g(2884);
                var c = 1 === a.side;
                b && (c = !c);
                m(c);
                1 === a.blending && !1 === a.transparent ? l(0) : l(a.blending, a.blendEquation, a.blendSrc, a.blendDst, a.blendEquationAlpha, a.blendSrcAlpha, a.blendDstAlpha, a.premultipliedAlpha);
                r.setFunc(a.depthFunc);
                r.setTest(a.depthTest);
                r.setMask(a.depthWrite);
                k.setMask(a.colorWrite);
                p(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits);
            },
            setFlipSided: m,
            setCullFace: q,
            setLineWidth: function(b) {
                b !== xb && (M && a.lineWidth(b), xb = b);
            },
            setPolygonOffset: p,
            setScissorTest: function(a) {
                a ? g(3089) : h(3089);
            },
            activeTexture: v,
            bindTexture: function(b, c) {
                null === P && v();
                var d = K[P];
                void 0 === d && (d = {
                    type: void 0,
                    texture: void 0
                }, K[P] = d);
                if (d.type !== b || d.texture !== c) a.bindTexture(b, c || L[b]), d.type = b, d.texture = c;
            },
            compressedTexImage2D: function() {
                try {
                    a.compressedTexImage2D.apply(a, arguments);
                } catch (Z) {
                    console.error("THREE.WebGLState:", Z);
                }
            },
            texImage2D: function() {
                try {
                    a.texImage2D.apply(a, arguments);
                } catch (Z) {
                    console.error("THREE.WebGLState:", Z);
                }
            },
            texImage3D: function() {
                try {
                    a.texImage3D.apply(a, arguments);
                } catch (Z) {
                    console.error("THREE.WebGLState:", Z);
                }
            },
            scissor: function(b) {
                !1 === O.equals(b) && (a.scissor(b.x, b.y, b.z, b.w), O.copy(b));
            },
            viewport: function(b) {
                !1 === Q.equals(b) && (a.viewport(b.x, b.y, b.z, b.w), Q.copy(b));
            },
            reset: function() {
                for(var b = 0; b < x.length; b++)1 === x[b] && (a.disableVertexAttribArray(b), x[b] = 0);
                F = {};
                P = G = null;
                K = {};
                ge = S = I = ua = null;
                k.reset();
                r.reset();
                u.reset();
            }
        };
    }
    function fh(a, b, c, d, e, f, g) {
        function h(a, b) {
            return D ? new OffscreenCanvas(a, b) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
        }
        function l(a, b, c, d) {
            var e = 1;
            if (a.width > d || a.height > d) e = d / Math.max(a.width, a.height);
            if (1 > e || !0 === b) {
                if ("undefined" !== typeof HTMLImageElement && a instanceof HTMLImageElement || "undefined" !== typeof HTMLCanvasElement && a instanceof HTMLCanvasElement || "undefined" !== typeof ImageBitmap && a instanceof ImageBitmap) return d = b ? O.floorPowerOfTwo : Math.floor, b = d(e * a.width), e = d(e * a.height), void 0 === E && (E = h(b, e)), c = c ? h(b, e) : E, c.width = b, c.height = e, c.getContext("2d").drawImage(a, 0, 0, b, e), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + a.width + "x" + a.height + ") to (" + b + "x" + e + ")."), c;
                "data" in a && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + a.width + "x" + a.height + ").");
            }
            return a;
        }
        function m(a) {
            return O.isPowerOfTwo(a.width) && O.isPowerOfTwo(a.height);
        }
        function q(a, b) {
            return a.generateMipmaps && b && 1003 !== a.minFilter && 1006 !== a.minFilter;
        }
        function p(b, c, e, f) {
            a.generateMipmap(b);
            d.get(c).__maxMipLevel = Math.log(Math.max(e, f)) * Math.LOG2E;
        }
        function v(a, c) {
            if (!e.isWebGL2) return a;
            var d = a;
            6403 === a && (5126 === c && (d = 33326), 5131 === c && (d = 33325), 5121 === c && (d = 33321));
            6407 === a && (5126 === c && (d = 34837), 5131 === c && (d = 34843), 5121 === c && (d = 32849));
            6408 === a && (5126 === c && (d = 34836), 5131 === c && (d = 34842), 5121 === c && (d = 32856));
            33325 === d || 33326 === d || 34842 === d || 34836 === d ? b.get("EXT_color_buffer_float") : (34843 === d || 34837 === d) && console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.");
            return d;
        }
        function k(a) {
            return 1003 === a || 1004 === a || 1005 === a ? 9728 : 9729;
        }
        function r(b) {
            b = b.target;
            b.removeEventListener("dispose", r);
            var c = d.get(b);
            void 0 !== c.__webglInit && (a.deleteTexture(c.__webglTexture), d.remove(b));
            b.isVideoTexture && delete C[b.id];
            g.memory.textures--;
        }
        function u(b) {
            b = b.target;
            b.removeEventListener("dispose", u);
            var c = d.get(b), e = d.get(b.texture);
            if (b) {
                void 0 !== e.__webglTexture && a.deleteTexture(e.__webglTexture);
                b.depthTexture && b.depthTexture.dispose();
                if (b.isWebGLRenderTargetCube) for(e = 0; 6 > e; e++)a.deleteFramebuffer(c.__webglFramebuffer[e]), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer[e]);
                else a.deleteFramebuffer(c.__webglFramebuffer), c.__webglDepthbuffer && a.deleteRenderbuffer(c.__webglDepthbuffer);
                d.remove(b.texture);
                d.remove(b);
            }
            g.memory.textures--;
        }
        function n(a, b) {
            var e = d.get(a);
            if (a.isVideoTexture) {
                var f = a.id, h = g.render.frame;
                C[f] !== h && (C[f] = h, a.update());
            }
            if (0 < a.version && e.__version !== a.version) if (f = a.image, void 0 === f) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
            else if (!1 === f.complete) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
                G(e, a, b);
                return;
            }
            c.activeTexture(33984 + b);
            c.bindTexture(3553, e.__webglTexture);
        }
        function z(b, g) {
            var h = d.get(b);
            if (6 === b.image.length) if (0 < b.version && h.__version !== b.version) {
                F(h, b);
                c.activeTexture(33984 + g);
                c.bindTexture(34067, h.__webglTexture);
                a.pixelStorei(37440, b.flipY);
                g = b && b.isCompressedTexture;
                for(var k = b.image[0] && b.image[0].isDataTexture, t = [], r = 0; 6 > r; r++)t[r] = g || k ? k ? b.image[r].image : b.image[r] : l(b.image[r], !1, !0, e.maxCubemapSize);
                var u = t[0], n = m(u) || e.isWebGL2, w = f.convert(b.format), x = f.convert(b.type), G = v(w, x);
                y(34067, b, n);
                for(r = 0; 6 > r; r++)if (g) for(var S, ha = t[r].mipmaps, z = 0, ua = ha.length; z < ua; z++)S = ha[z], 1023 !== b.format && 1022 !== b.format ? -1 < c.getCompressedTextureFormats().indexOf(w) ? c.compressedTexImage2D(34069 + r, z, G, S.width, S.height, 0, S.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : c.texImage2D(34069 + r, z, G, S.width, S.height, 0, w, x, S.data);
                else k ? c.texImage2D(34069 + r, 0, G, t[r].width, t[r].height, 0, w, x, t[r].data) : c.texImage2D(34069 + r, 0, G, w, x, t[r]);
                h.__maxMipLevel = g ? ha.length - 1 : 0;
                q(b, n) && p(34067, b, u.width, u.height);
                h.__version = b.version;
                if (b.onUpdate) b.onUpdate(b);
            } else c.activeTexture(33984 + g), c.bindTexture(34067, h.__webglTexture);
        }
        function x(a, b) {
            c.activeTexture(33984 + b);
            c.bindTexture(34067, d.get(a).__webglTexture);
        }
        function y(c, g, h) {
            h ? (a.texParameteri(c, 10242, f.convert(g.wrapS)), a.texParameteri(c, 10243, f.convert(g.wrapT)), 32879 !== c && 35866 !== c || a.texParameteri(c, 32882, f.convert(g.wrapR)), a.texParameteri(c, 10240, f.convert(g.magFilter)), a.texParameteri(c, 10241, f.convert(g.minFilter))) : (a.texParameteri(c, 10242, 33071), a.texParameteri(c, 10243, 33071), 32879 !== c && 35866 !== c || a.texParameteri(c, 32882, 33071), 1001 === g.wrapS && 1001 === g.wrapT || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), a.texParameteri(c, 10240, k(g.magFilter)), a.texParameteri(c, 10241, k(g.minFilter)), 1003 !== g.minFilter && 1006 !== g.minFilter && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
            !(h = b.get("EXT_texture_filter_anisotropic")) || 1015 === g.type && null === b.get("OES_texture_float_linear") || 1016 === g.type && null === (e.isWebGL2 || b.get("OES_texture_half_float_linear")) || !(1 < g.anisotropy || d.get(g).__currentAnisotropy) || (a.texParameterf(c, h.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(g.anisotropy, e.getMaxAnisotropy())), d.get(g).__currentAnisotropy = g.anisotropy);
        }
        function F(b, c) {
            void 0 === b.__webglInit && (b.__webglInit = !0, c.addEventListener("dispose", r), b.__webglTexture = a.createTexture(), g.memory.textures++);
        }
        function G(b, d, g) {
            var h = 3553;
            d.isDataTexture2DArray && (h = 35866);
            d.isDataTexture3D && (h = 32879);
            F(b, d);
            c.activeTexture(33984 + g);
            c.bindTexture(h, b.__webglTexture);
            a.pixelStorei(37440, d.flipY);
            a.pixelStorei(37441, d.premultiplyAlpha);
            a.pixelStorei(3317, d.unpackAlignment);
            g = e.isWebGL2 ? !1 : 1001 !== d.wrapS || 1001 !== d.wrapT || 1003 !== d.minFilter && 1006 !== d.minFilter;
            g = g && !1 === m(d.image);
            g = l(d.image, g, !1, e.maxTextureSize);
            var k = m(g) || e.isWebGL2, r = f.convert(d.format), t = f.convert(d.type), u = v(r, t);
            y(h, d, k);
            var n = d.mipmaps;
            if (d.isDepthTexture) {
                u = 6402;
                if (1015 === d.type) {
                    if (!e.isWebGL2) throw Error("Float Depth Texture only supported in WebGL2.0");
                    u = 36012;
                } else e.isWebGL2 && (u = 33189);
                1026 === d.format && 6402 === u && 1012 !== d.type && 1014 !== d.type && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), d.type = 1012, t = f.convert(d.type));
                1027 === d.format && (u = 34041, 1020 !== d.type && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), d.type = 1020, t = f.convert(d.type)));
                c.texImage2D(3553, 0, u, g.width, g.height, 0, r, t, null);
            } else if (d.isDataTexture) if (0 < n.length && k) {
                for(var w = 0, x = n.length; w < x; w++)h = n[w], c.texImage2D(3553, w, u, h.width, h.height, 0, r, t, h.data);
                d.generateMipmaps = !1;
                b.__maxMipLevel = n.length - 1;
            } else c.texImage2D(3553, 0, u, g.width, g.height, 0, r, t, g.data), b.__maxMipLevel = 0;
            else if (d.isCompressedTexture) {
                w = 0;
                for(x = n.length; w < x; w++)h = n[w], 1023 !== d.format && 1022 !== d.format ? -1 < c.getCompressedTextureFormats().indexOf(r) ? c.compressedTexImage2D(3553, w, u, h.width, h.height, 0, h.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : c.texImage2D(3553, w, u, h.width, h.height, 0, r, t, h.data);
                b.__maxMipLevel = n.length - 1;
            } else if (d.isDataTexture2DArray) c.texImage3D(35866, 0, u, g.width, g.height, g.depth, 0, r, t, g.data), b.__maxMipLevel = 0;
            else if (d.isDataTexture3D) c.texImage3D(32879, 0, u, g.width, g.height, g.depth, 0, r, t, g.data), b.__maxMipLevel = 0;
            else if (0 < n.length && k) {
                w = 0;
                for(x = n.length; w < x; w++)h = n[w], c.texImage2D(3553, w, u, r, t, h);
                d.generateMipmaps = !1;
                b.__maxMipLevel = n.length - 1;
            } else c.texImage2D(3553, 0, u, r, t, g), b.__maxMipLevel = 0;
            q(d, k) && p(3553, d, g.width, g.height);
            b.__version = d.version;
            if (d.onUpdate) d.onUpdate(d);
        }
        function ua(b, e, g, h) {
            var l = f.convert(e.texture.format), m = f.convert(e.texture.type), q = v(l, m);
            c.texImage2D(h, 0, q, e.width, e.height, 0, l, m, null);
            a.bindFramebuffer(36160, b);
            a.framebufferTexture2D(36160, g, h, d.get(e.texture).__webglTexture, 0);
            a.bindFramebuffer(36160, null);
        }
        function pa(b, c, d) {
            a.bindRenderbuffer(36161, b);
            if (c.depthBuffer && !c.stencilBuffer) d ? (d = I(c), a.renderbufferStorageMultisample(36161, d, 33189, c.width, c.height)) : a.renderbufferStorage(36161, 33189, c.width, c.height), a.framebufferRenderbuffer(36160, 36096, 36161, b);
            else if (c.depthBuffer && c.stencilBuffer) d ? (d = I(c), a.renderbufferStorageMultisample(36161, d, 34041, c.width, c.height)) : a.renderbufferStorage(36161, 34041, c.width, c.height), a.framebufferRenderbuffer(36160, 33306, 36161, b);
            else {
                b = f.convert(c.texture.format);
                var e = f.convert(c.texture.type);
                b = v(b, e);
                d ? (d = I(c), a.renderbufferStorageMultisample(36161, d, b, c.width, c.height)) : a.renderbufferStorage(36161, b, c.width, c.height);
            }
            a.bindRenderbuffer(36161, null);
        }
        function I(a) {
            return e.isWebGL2 && a.isWebGLMultisampleRenderTarget ? Math.min(e.maxSamples, a.samples) : 0;
        }
        var C = {}, E, D = "undefined" !== typeof OffscreenCanvas, B = 0, J = !1, A = !1;
        this.allocateTextureUnit = function() {
            var a = B;
            a >= e.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + a + " texture units while this GPU supports only " + e.maxTextures);
            B += 1;
            return a;
        };
        this.resetTextureUnits = function() {
            B = 0;
        };
        this.setTexture2D = n;
        this.setTexture2DArray = function(a, b) {
            var e = d.get(a);
            0 < a.version && e.__version !== a.version ? G(e, a, b) : (c.activeTexture(33984 + b), c.bindTexture(35866, e.__webglTexture));
        };
        this.setTexture3D = function(a, b) {
            var e = d.get(a);
            0 < a.version && e.__version !== a.version ? G(e, a, b) : (c.activeTexture(33984 + b), c.bindTexture(32879, e.__webglTexture));
        };
        this.setTextureCube = z;
        this.setTextureCubeDynamic = x;
        this.setupRenderTarget = function(b) {
            var h = d.get(b), l = d.get(b.texture);
            b.addEventListener("dispose", u);
            l.__webglTexture = a.createTexture();
            g.memory.textures++;
            var k = !0 === b.isWebGLRenderTargetCube, r = !0 === b.isWebGLMultisampleRenderTarget, t = m(b) || e.isWebGL2;
            if (k) for(h.__webglFramebuffer = [], r = 0; 6 > r; r++)h.__webglFramebuffer[r] = a.createFramebuffer();
            else if (h.__webglFramebuffer = a.createFramebuffer(), r) if (e.isWebGL2) {
                h.__webglMultisampledFramebuffer = a.createFramebuffer();
                h.__webglColorRenderbuffer = a.createRenderbuffer();
                a.bindRenderbuffer(36161, h.__webglColorRenderbuffer);
                r = f.convert(b.texture.format);
                var w = f.convert(b.texture.type);
                r = v(r, w);
                w = I(b);
                a.renderbufferStorageMultisample(36161, w, r, b.width, b.height);
                a.bindFramebuffer(36160, h.__webglMultisampledFramebuffer);
                a.framebufferRenderbuffer(36160, 36064, 36161, h.__webglColorRenderbuffer);
                a.bindRenderbuffer(36161, null);
                b.depthBuffer && (h.__webglDepthRenderbuffer = a.createRenderbuffer(), pa(h.__webglDepthRenderbuffer, b, !0));
                a.bindFramebuffer(36160, null);
            } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
            if (k) {
                c.bindTexture(34067, l.__webglTexture);
                y(34067, b.texture, t);
                for(r = 0; 6 > r; r++)ua(h.__webglFramebuffer[r], b, 36064, 34069 + r);
                q(b.texture, t) && p(34067, b.texture, b.width, b.height);
                c.bindTexture(34067, null);
            } else c.bindTexture(3553, l.__webglTexture), y(3553, b.texture, t), ua(h.__webglFramebuffer, b, 36064, 3553), q(b.texture, t) && p(3553, b.texture, b.width, b.height), c.bindTexture(3553, null);
            if (b.depthBuffer) {
                h = d.get(b);
                l = !0 === b.isWebGLRenderTargetCube;
                if (b.depthTexture) {
                    if (l) throw Error("target.depthTexture not supported in Cube render targets");
                    if (b && b.isWebGLRenderTargetCube) throw Error("Depth Texture with cube render targets is not supported");
                    a.bindFramebuffer(36160, h.__webglFramebuffer);
                    if (!b.depthTexture || !b.depthTexture.isDepthTexture) throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                    d.get(b.depthTexture).__webglTexture && b.depthTexture.image.width === b.width && b.depthTexture.image.height === b.height || (b.depthTexture.image.width = b.width, b.depthTexture.image.height = b.height, b.depthTexture.needsUpdate = !0);
                    n(b.depthTexture, 0);
                    h = d.get(b.depthTexture).__webglTexture;
                    if (1026 === b.depthTexture.format) a.framebufferTexture2D(36160, 36096, 3553, h, 0);
                    else if (1027 === b.depthTexture.format) a.framebufferTexture2D(36160, 33306, 3553, h, 0);
                    else throw Error("Unknown depthTexture format");
                } else if (l) for(h.__webglDepthbuffer = [], l = 0; 6 > l; l++)a.bindFramebuffer(36160, h.__webglFramebuffer[l]), h.__webglDepthbuffer[l] = a.createRenderbuffer(), pa(h.__webglDepthbuffer[l], b);
                else a.bindFramebuffer(36160, h.__webglFramebuffer), h.__webglDepthbuffer = a.createRenderbuffer(), pa(h.__webglDepthbuffer, b);
                a.bindFramebuffer(36160, null);
            }
        };
        this.updateRenderTargetMipmap = function(a) {
            var b = a.texture, f = m(a) || e.isWebGL2;
            if (q(b, f)) {
                f = a.isWebGLRenderTargetCube ? 34067 : 3553;
                var g = d.get(b).__webglTexture;
                c.bindTexture(f, g);
                p(f, b, a.width, a.height);
                c.bindTexture(f, null);
            }
        };
        this.updateMultisampleRenderTarget = function(b) {
            if (b.isWebGLMultisampleRenderTarget) if (e.isWebGL2) {
                var c = d.get(b);
                a.bindFramebuffer(36008, c.__webglMultisampledFramebuffer);
                a.bindFramebuffer(36009, c.__webglFramebuffer);
                c = b.width;
                var f = b.height, g = 16384;
                b.depthBuffer && (g |= 256);
                b.stencilBuffer && (g |= 1024);
                a.blitFramebuffer(0, 0, c, f, 0, 0, c, f, g, 9728);
            } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        };
        this.safeSetTexture2D = function(a, b) {
            a && a.isWebGLRenderTarget && (!1 === J && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), J = !0), a = a.texture);
            n(a, b);
        };
        this.safeSetTextureCube = function(a, b) {
            a && a.isWebGLRenderTargetCube && (!1 === A && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), A = !0), a = a.texture);
            a && a.isCubeTexture || Array.isArray(a.image) && 6 === a.image.length ? z(a, b) : x(a, b);
        };
    }
    function tf(a, b, c) {
        return {
            convert: function(a) {
                if (1E3 === a) return 10497;
                if (1001 === a) return 33071;
                if (1002 === a) return 33648;
                if (1003 === a) return 9728;
                if (1004 === a) return 9984;
                if (1005 === a) return 9986;
                if (1006 === a) return 9729;
                if (1007 === a) return 9985;
                if (1008 === a) return 9987;
                if (1009 === a) return 5121;
                if (1017 === a) return 32819;
                if (1018 === a) return 32820;
                if (1019 === a) return 33635;
                if (1010 === a) return 5120;
                if (1011 === a) return 5122;
                if (1012 === a) return 5123;
                if (1013 === a) return 5124;
                if (1014 === a) return 5125;
                if (1015 === a) return 5126;
                if (1016 === a) {
                    if (c.isWebGL2) return 5131;
                    var d = b.get("OES_texture_half_float");
                    if (null !== d) return d.HALF_FLOAT_OES;
                }
                if (1021 === a) return 6406;
                if (1022 === a) return 6407;
                if (1023 === a) return 6408;
                if (1024 === a) return 6409;
                if (1025 === a) return 6410;
                if (1026 === a) return 6402;
                if (1027 === a) return 34041;
                if (1028 === a) return 6403;
                if (100 === a) return 32774;
                if (101 === a) return 32778;
                if (102 === a) return 32779;
                if (200 === a) return 0;
                if (201 === a) return 1;
                if (202 === a) return 768;
                if (203 === a) return 769;
                if (204 === a) return 770;
                if (205 === a) return 771;
                if (206 === a) return 772;
                if (207 === a) return 773;
                if (208 === a) return 774;
                if (209 === a) return 775;
                if (210 === a) return 776;
                if (33776 === a || 33777 === a || 33778 === a || 33779 === a) {
                    if (d = b.get("WEBGL_compressed_texture_s3tc"), null !== d) {
                        if (33776 === a) return d.COMPRESSED_RGB_S3TC_DXT1_EXT;
                        if (33777 === a) return d.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                        if (33778 === a) return d.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                        if (33779 === a) return d.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                    }
                }
                if (35840 === a || 35841 === a || 35842 === a || 35843 === a) {
                    if (d = b.get("WEBGL_compressed_texture_pvrtc"), null !== d) {
                        if (35840 === a) return d.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                        if (35841 === a) return d.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                        if (35842 === a) return d.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                        if (35843 === a) return d.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                    }
                }
                if (36196 === a && (d = b.get("WEBGL_compressed_texture_etc1"), null !== d)) return d.COMPRESSED_RGB_ETC1_WEBGL;
                if (37808 === a || 37809 === a || 37810 === a || 37811 === a || 37812 === a || 37813 === a || 37814 === a || 37815 === a || 37816 === a || 37817 === a || 37818 === a || 37819 === a || 37820 === a || 37821 === a) {
                    if (d = b.get("WEBGL_compressed_texture_astc"), null !== d) return a;
                }
                if (103 === a || 104 === a) {
                    if (c.isWebGL2) {
                        if (103 === a) return 32775;
                        if (104 === a) return 32776;
                    }
                    d = b.get("EXT_blend_minmax");
                    if (null !== d) {
                        if (103 === a) return d.MIN_EXT;
                        if (104 === a) return d.MAX_EXT;
                    }
                }
                if (1020 === a) {
                    if (c.isWebGL2) return 34042;
                    d = b.get("WEBGL_depth_texture");
                    if (null !== d) return d.UNSIGNED_INT_24_8_WEBGL;
                }
                return 0;
            }
        };
    }
    function Xb() {
        D.call(this);
        this.type = "Group";
    }
    function Xa() {
        D.call(this);
        this.type = "Camera";
        this.matrixWorldInverse = new P;
        this.projectionMatrix = new P;
        this.projectionMatrixInverse = new P;
    }
    function ca(a, b, c, d) {
        Xa.call(this);
        this.type = "PerspectiveCamera";
        this.fov = void 0 !== a ? a : 50;
        this.zoom = 1;
        this.near = void 0 !== c ? c : .1;
        this.far = void 0 !== d ? d : 2E3;
        this.focus = 10;
        this.aspect = void 0 !== b ? b : 1;
        this.view = null;
        this.filmGauge = 35;
        this.filmOffset = 0;
        this.updateProjectionMatrix();
    }
    function Jc(a) {
        ca.call(this);
        this.cameras = a || [];
    }
    function uf(a, b, c) {
        vf.setFromMatrixPosition(b.matrixWorld);
        wf.setFromMatrixPosition(c.matrixWorld);
        var d = vf.distanceTo(wf), e = b.projectionMatrix.elements, f = c.projectionMatrix.elements, g = e[14] / (e[10] - 1);
        c = e[14] / (e[10] + 1);
        var h = (e[9] + 1) / e[5], l = (e[9] - 1) / e[5], m = (e[8] - 1) / e[0], q = (f[8] + 1) / f[0];
        e = g * m;
        f = g * q;
        q = d / (-m + q);
        m = q * -m;
        b.matrixWorld.decompose(a.position, a.quaternion, a.scale);
        a.translateX(m);
        a.translateZ(q);
        a.matrixWorld.compose(a.position, a.quaternion, a.scale);
        a.matrixWorldInverse.getInverse(a.matrixWorld);
        b = g + q;
        g = c + q;
        a.projectionMatrix.makePerspective(e - m, f + (d - m), h * c / g * b, l * c / g * b, b, g);
    }
    function xf(a) {
        function b() {
            return null !== e && !0 === e.isPresenting;
        }
        function c() {
            if (b()) {
                var c = e.getEyeParameters("left"), f = c.renderWidth * q;
                c = c.renderHeight * q;
                y = a.getPixelRatio();
                a.getSize(x);
                a.setDrawingBufferSize(2 * f, c, 1);
                G.start();
            } else d.enabled && a.setDrawingBufferSize(x.width, x.height, y), G.stop();
        }
        var d = this, e = null, f = null, g = null, h = [], l = new P, m = new P, q = 1, p = "stage";
        "undefined" !== typeof window && "VRFrameData" in window && (f = new window.VRFrameData, window.addEventListener("vrdisplaypresentchange", c, !1));
        var k = new P, t = new ma, r = new n, u = new ca;
        u.bounds = new W(0, 0, .5, 1);
        u.layers.enable(1);
        var w = new ca;
        w.bounds = new W(.5, 0, .5, 1);
        w.layers.enable(2);
        var z = new Jc([
            u,
            w
        ]);
        z.layers.enable(1);
        z.layers.enable(2);
        var x = new C, y, F = [];
        this.enabled = !1;
        this.getController = function(a) {
            var b = h[a];
            void 0 === b && (b = new Xb, b.matrixAutoUpdate = !1, b.visible = !1, h[a] = b);
            return b;
        };
        this.getDevice = function() {
            return e;
        };
        this.setDevice = function(a) {
            void 0 !== a && (e = a);
            G.setContext(a);
        };
        this.setFramebufferScaleFactor = function(a) {
            q = a;
        };
        this.setFrameOfReferenceType = function(a) {
            p = a;
        };
        this.setPoseTarget = function(a) {
            void 0 !== a && (g = a);
        };
        this.getCamera = function(a) {
            var c = "stage" === p ? 1.6 : 0;
            if (!1 === b()) return a.position.set(0, c, 0), a.rotation.set(0, 0, 0), a;
            e.depthNear = a.near;
            e.depthFar = a.far;
            e.getFrameData(f);
            if ("stage" === p) {
                var d = e.stageParameters;
                d ? l.fromArray(d.sittingToStandingTransform) : l.makeTranslation(0, c, 0);
            }
            c = f.pose;
            d = null !== g ? g : a;
            d.matrix.copy(l);
            d.matrix.decompose(d.position, d.quaternion, d.scale);
            null !== c.orientation && (t.fromArray(c.orientation), d.quaternion.multiply(t));
            null !== c.position && (t.setFromRotationMatrix(l), r.fromArray(c.position), r.applyQuaternion(t), d.position.add(r));
            d.updateMatrixWorld();
            u.near = a.near;
            w.near = a.near;
            u.far = a.far;
            w.far = a.far;
            u.matrixWorldInverse.fromArray(f.leftViewMatrix);
            w.matrixWorldInverse.fromArray(f.rightViewMatrix);
            m.getInverse(l);
            "stage" === p && (u.matrixWorldInverse.multiply(m), w.matrixWorldInverse.multiply(m));
            a = d.parent;
            null !== a && (k.getInverse(a.matrixWorld), u.matrixWorldInverse.multiply(k), w.matrixWorldInverse.multiply(k));
            u.matrixWorld.getInverse(u.matrixWorldInverse);
            w.matrixWorld.getInverse(w.matrixWorldInverse);
            u.projectionMatrix.fromArray(f.leftProjectionMatrix);
            w.projectionMatrix.fromArray(f.rightProjectionMatrix);
            uf(z, u, w);
            a = e.getLayers();
            a.length && (a = a[0], null !== a.leftBounds && 4 === a.leftBounds.length && u.bounds.fromArray(a.leftBounds), null !== a.rightBounds && 4 === a.rightBounds.length && w.bounds.fromArray(a.rightBounds));
            a: for(a = 0; a < h.length; a++){
                c = h[a];
                b: {
                    d = a;
                    for(var q = navigator.getGamepads && navigator.getGamepads(), v = 0, n = 0, y = q.length; v < y; v++){
                        var x = q[v];
                        if (x && ("Daydream Controller" === x.id || "Gear VR Controller" === x.id || "Oculus Go Controller" === x.id || "OpenVR Gamepad" === x.id || x.id.startsWith("Oculus Touch") || x.id.startsWith("Spatial Controller"))) {
                            if (n === d) {
                                d = x;
                                break b;
                            }
                            n++;
                        }
                    }
                    d = void 0;
                }
                if (void 0 !== d && void 0 !== d.pose) {
                    if (null === d.pose) break a;
                    q = d.pose;
                    !1 === q.hasPosition && c.position.set(.2, -.6, -.05);
                    null !== q.position && c.position.fromArray(q.position);
                    null !== q.orientation && c.quaternion.fromArray(q.orientation);
                    c.matrix.compose(c.position, c.quaternion, c.scale);
                    c.matrix.premultiply(l);
                    c.matrix.decompose(c.position, c.quaternion, c.scale);
                    c.matrixWorldNeedsUpdate = !0;
                    c.visible = !0;
                    q = "Daydream Controller" === d.id ? 0 : 1;
                    F[a] !== d.buttons[q].pressed && (F[a] = d.buttons[q].pressed, !0 === F[a] ? c.dispatchEvent({
                        type: "selectstart"
                    }) : (c.dispatchEvent({
                        type: "selectend"
                    }), c.dispatchEvent({
                        type: "select"
                    })));
                } else c.visible = !1;
            }
            return z;
        };
        this.getStandingMatrix = function() {
            return l;
        };
        this.isPresenting = b;
        var G = new de;
        this.setAnimationLoop = function(a) {
            G.setAnimationLoop(a);
            b() && G.start();
        };
        this.submitFrame = function() {
            b() && e.submitFrame();
        };
        this.dispose = function() {
            "undefined" !== typeof window && window.removeEventListener("vrdisplaypresentchange", c);
        };
    }
    function gh(a) {
        function b() {
            return null !== h && null !== m;
        }
        function c(a) {
            var b = k[t.indexOf(a.inputSource)];
            b && b.dispatchEvent({
                type: a.type
            });
        }
        function d() {
            a.setFramebuffer(null);
            a.setRenderTarget(a.getRenderTarget());
            x.stop();
        }
        function e(a, b) {
            null === b ? a.matrixWorld.copy(a.matrix) : a.matrixWorld.multiplyMatrices(b.matrixWorld, a.matrix);
            a.matrixWorldInverse.getInverse(a.matrixWorld);
        }
        var f = a.context, g = null, h = null, l = 1, m = null, q = "stage", p = null, k = [], t = [], r = new ca;
        r.layers.enable(1);
        r.viewport = new W;
        var u = new ca;
        u.layers.enable(2);
        u.viewport = new W;
        var n = new Jc([
            r,
            u
        ]);
        n.layers.enable(1);
        n.layers.enable(2);
        this.enabled = !1;
        this.getController = function(a) {
            var b = k[a];
            void 0 === b && (b = new Xb, b.matrixAutoUpdate = !1, b.visible = !1, k[a] = b);
            return b;
        };
        this.getDevice = function() {
            return g;
        };
        this.setDevice = function(a) {
            void 0 !== a && (g = a);
            a instanceof XRDevice && f.setCompatibleXRDevice(a);
        };
        this.setFramebufferScaleFactor = function(a) {
            l = a;
        };
        this.setFrameOfReferenceType = function(a) {
            q = a;
        };
        this.setSession = function(b) {
            h = b;
            null !== h && (h.addEventListener("select", c), h.addEventListener("selectstart", c), h.addEventListener("selectend", c), h.addEventListener("end", d), h.baseLayer = new XRWebGLLayer(h, f, {
                framebufferScaleFactor: l
            }), h.requestFrameOfReference(q).then(function(b) {
                m = b;
                a.setFramebuffer(h.baseLayer.framebuffer);
                x.setContext(h);
                x.start();
            }), t = h.getInputSources(), h.addEventListener("inputsourceschange", function() {
                t = h.getInputSources();
                console.log(t);
                for(var a = 0; a < k.length; a++)k[a].userData.inputSource = t[a];
            }));
        };
        this.getCamera = function(a) {
            if (b()) {
                var c = a.parent, d = n.cameras;
                e(n, c);
                for(var f = 0; f < d.length; f++)e(d[f], c);
                a.matrixWorld.copy(n.matrixWorld);
                a = a.children;
                f = 0;
                for(c = a.length; f < c; f++)a[f].updateMatrixWorld(!0);
                uf(n, r, u);
                return n;
            }
            return a;
        };
        this.isPresenting = b;
        var z = null, x = new de;
        x.setAnimationLoop(function(a, b) {
            p = b.getDevicePose(m);
            if (null !== p) for(var c = h.baseLayer, d = b.views, e = 0; e < d.length; e++){
                var f = d[e], g = c.getViewport(f), l = p.getViewMatrix(f), q = n.cameras[e];
                q.matrix.fromArray(l).getInverse(q.matrix);
                q.projectionMatrix.fromArray(f.projectionMatrix);
                q.viewport.set(g.x, g.y, g.width, g.height);
                0 === e && n.matrix.copy(q.matrix);
            }
            for(e = 0; e < k.length; e++){
                c = k[e];
                if (d = t[e]) {
                    if (d = b.getInputPose(d, m), null !== d) {
                        "targetRay" in d ? c.matrix.elements = d.targetRay.transformMatrix : "pointerMatrix" in d && (c.matrix.elements = d.pointerMatrix);
                        c.matrix.decompose(c.position, c.rotation, c.scale);
                        c.visible = !0;
                        continue;
                    }
                }
                c.visible = !1;
            }
            z && z(a);
        });
        this.setAnimationLoop = function(a) {
            z = a;
        };
        this.dispose = function() {};
        this.getStandingMatrix = function() {
            console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed.");
            return new P;
        };
        this.submitFrame = function() {};
    }
    function je(a) {
        var b;
        function c() {
            ja = new hg(N);
            Aa = new fg(N, ja, a);
            Aa.isWebGL2 || (ja.get("WEBGL_depth_texture"), ja.get("OES_texture_float"), ja.get("OES_texture_half_float"), ja.get("OES_texture_half_float_linear"), ja.get("OES_standard_derivatives"), ja.get("OES_element_index_uint"), ja.get("ANGLE_instanced_arrays"));
            ja.get("OES_texture_float_linear");
            ea = new tf(N, ja, Aa);
            aa = new eh(N, ja, ea, Aa);
            aa.scissor(Y.copy(Z).multiplyScalar(X));
            aa.viewport(U.copy(L).multiplyScalar(X));
            mb = new kg(N);
            Ba = new Xg;
            ba = new fh(N, ja, aa, Ba, Aa, ea, mb);
            qa = new Zf(N);
            sa = new ig(N, qa, mb);
            ka = new ng(sa, mb);
            va = new mg(N);
            da = new Wg(A, ja, Aa, ba);
            ra = new $g;
            oa = new dh;
            ia = new dg(A, aa, ka, ua);
            xa = new eg(N, ja, mb, Aa);
            ya = new jg(N, ja, mb, Aa);
            mb.programs = da.programs;
            A.context = N;
            A.capabilities = Aa;
            A.extensions = ja;
            A.properties = Ba;
            A.renderLists = ra;
            A.state = aa;
            A.info = mb;
        }
        function d(a) {
            a.preventDefault();
            M = !0;
        }
        function e() {
            console.log("THREE.WebGLRenderer: Context Restored.");
            M = !1;
            c();
        }
        function f(a) {
            a = a.target;
            a.removeEventListener("dispose", f);
            g(a);
            Ba.remove(a);
        }
        function g(a) {
            var b = Ba.get(a).program;
            a.program = void 0;
            void 0 !== b && da.releaseProgram(b);
        }
        function h(a, b) {
            a.render(function(a) {
                A.renderBufferImmediate(a, b);
            });
        }
        function l(a, b, c, d) {
            if (!1 !== a.visible) {
                if (a.layers.test(b.layers)) {
                    if (a.isGroup) c = a.renderOrder;
                    else if (a.isLight) B.pushLight(a), a.castShadow && B.pushShadow(a);
                    else if (a.isSprite) {
                        if (!a.frustumCulled || ma.intersectsSprite(a)) {
                            d && lb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ic);
                            var e = ka.update(a), f = a.material;
                            f.visible && D.push(a, e, f, c, lb.z, null);
                        }
                    } else if (a.isImmediateRenderObject) d && lb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ic), D.push(a, null, a.material, c, lb.z, null);
                    else if (a.isMesh || a.isLine || a.isPoints) {
                        if (a.isSkinnedMesh && a.skeleton.update(), !a.frustumCulled || ma.intersectsObject(a)) if (d && lb.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ic), e = ka.update(a), f = a.material, Array.isArray(f)) for(var g = e.groups, h = 0, m = g.length; h < m; h++){
                            var q = g[h], p = f[q.materialIndex];
                            p && p.visible && D.push(a, e, p, c, lb.z, q);
                        }
                        else f.visible && D.push(a, e, f, c, lb.z, null);
                    }
                }
                a = a.children;
                h = 0;
                for(m = a.length; h < m; h++)l(a[h], b, c, d);
            }
        }
        function m(a, b, c, d) {
            for(var e = 0, f = a.length; e < f; e++){
                var g = a[e], h = g.object, l = g.geometry, m = void 0 === d ? g.material : d;
                g = g.group;
                if (c.isArrayCamera) {
                    R = c;
                    for(var p = c.cameras, k = 0, v = p.length; k < v; k++){
                        var r = p[k];
                        if (h.layers.test(r.layers)) {
                            if ("viewport" in r) aa.viewport(U.copy(r.viewport));
                            else {
                                var t = r.bounds;
                                aa.viewport(U.set(t.x * T, t.y * Wa, t.z * T, t.w * Wa).multiplyScalar(X));
                            }
                            B.setupLights(r);
                            q(h, b, r, l, m, g);
                        }
                    }
                } else R = null, q(h, b, c, l, m, g);
            }
        }
        function q(a, c, d, e, f, g) {
            a.onBeforeRender(A, c, d, e, f, g);
            B = oa.get(c, R || d);
            a.modelViewMatrix.multiplyMatrices(d.matrixWorldInverse, a.matrixWorld);
            a.normalMatrix.getNormalMatrix(a.modelViewMatrix);
            if (a.isImmediateRenderObject) {
                aa.setMaterial(f);
                var l = k(d, c.fog, f, a);
                H = b = null;
                xb = !1;
                h(a, l);
            } else A.renderBufferDirect(d, c.fog, e, f, a, g);
            a.onAfterRender(A, c, d, e, f, g);
            B = oa.get(c, R || d);
        }
        function p(a, b, c) {
            var d = Ba.get(a), e = B.state.lights, h = d.lightsHash, l = e.state.hash;
            c = da.getParameters(a, e.state, B.state.shadowsArray, b, Ha.numPlanes, Ha.numIntersection, c);
            var m = da.getProgramCode(a, c), q = d.program, p = !0;
            if (void 0 === q) a.addEventListener("dispose", f);
            else if (q.code !== m) g(a);
            else {
                if (h.stateID !== l.stateID || h.directionalLength !== l.directionalLength || h.pointLength !== l.pointLength || h.spotLength !== l.spotLength || h.rectAreaLength !== l.rectAreaLength || h.hemiLength !== l.hemiLength || h.shadowsLength !== l.shadowsLength) h.stateID = l.stateID, h.directionalLength = l.directionalLength, h.pointLength = l.pointLength, h.spotLength = l.spotLength, h.rectAreaLength = l.rectAreaLength, h.hemiLength = l.hemiLength, h.shadowsLength = l.shadowsLength;
                else if (void 0 !== c.shaderID) return;
                p = !1;
            }
            p && (c.shaderID ? (m = Va[c.shaderID], d.shader = {
                name: a.type,
                uniforms: Rb(m.uniforms),
                vertexShader: m.vertexShader,
                fragmentShader: m.fragmentShader
            }) : d.shader = {
                name: a.type,
                uniforms: a.uniforms,
                vertexShader: a.vertexShader,
                fragmentShader: a.fragmentShader
            }, a.onBeforeCompile(d.shader, A), m = da.getProgramCode(a, c), q = da.acquireProgram(a, d.shader, c, m), d.program = q, a.program = q);
            c = q.getAttributes();
            if (a.morphTargets) for(m = a.numSupportedMorphTargets = 0; m < A.maxMorphTargets; m++)0 <= c["morphTarget" + m] && a.numSupportedMorphTargets++;
            if (a.morphNormals) for(m = a.numSupportedMorphNormals = 0; m < A.maxMorphNormals; m++)0 <= c["morphNormal" + m] && a.numSupportedMorphNormals++;
            c = d.shader.uniforms;
            if (!a.isShaderMaterial && !a.isRawShaderMaterial || !0 === a.clipping) d.numClippingPlanes = Ha.numPlanes, d.numIntersection = Ha.numIntersection, c.clippingPlanes = Ha.uniform;
            d.fog = b;
            void 0 === h && (d.lightsHash = h = {});
            h.stateID = l.stateID;
            h.directionalLength = l.directionalLength;
            h.pointLength = l.pointLength;
            h.spotLength = l.spotLength;
            h.rectAreaLength = l.rectAreaLength;
            h.hemiLength = l.hemiLength;
            h.shadowsLength = l.shadowsLength;
            a.lights && (c.ambientLightColor.value = e.state.ambient, c.lightProbe.value = e.state.probe, c.directionalLights.value = e.state.directional, c.spotLights.value = e.state.spot, c.rectAreaLights.value = e.state.rectArea, c.pointLights.value = e.state.point, c.hemisphereLights.value = e.state.hemi, c.directionalShadowMap.value = e.state.directionalShadowMap, c.directionalShadowMatrix.value = e.state.directionalShadowMatrix, c.spotShadowMap.value = e.state.spotShadowMap, c.spotShadowMatrix.value = e.state.spotShadowMatrix, c.pointShadowMap.value = e.state.pointShadowMap, c.pointShadowMatrix.value = e.state.pointShadowMatrix);
            a = d.program.getUniforms();
            a = ib.seqWithValue(a.seq, c);
            d.uniformsList = a;
        }
        function k(a, b, c, d) {
            ba.resetTextureUnits();
            var e = Ba.get(c), f = e.lightsHash, g = B.state.lights.state.hash;
            na && (fa || a !== bb) && Ha.setState(c.clippingPlanes, c.clipIntersection, c.clipShadows, a, e, a === bb && c.id === S);
            !1 === c.needsUpdate && (void 0 === e.program ? c.needsUpdate = !0 : c.fog && e.fog !== b ? c.needsUpdate = !0 : !c.lights || f.stateID === g.stateID && f.directionalLength === g.directionalLength && f.pointLength === g.pointLength && f.spotLength === g.spotLength && f.rectAreaLength === g.rectAreaLength && f.hemiLength === g.hemiLength && f.shadowsLength === g.shadowsLength ? void 0 === e.numClippingPlanes || e.numClippingPlanes === Ha.numPlanes && e.numIntersection === Ha.numIntersection || (c.needsUpdate = !0) : c.needsUpdate = !0);
            c.needsUpdate && (p(c, b, d), c.needsUpdate = !1);
            var h = !1, l = !1, m = !1;
            f = e.program;
            g = f.getUniforms();
            var q = e.shader.uniforms;
            aa.useProgram(f.program) && (m = l = h = !0);
            c.id !== S && (S = c.id, l = !0);
            if (h || bb !== a) {
                g.setValue(N, "projectionMatrix", a.projectionMatrix);
                Aa.logarithmicDepthBuffer && g.setValue(N, "logDepthBufFC", 2 / (Math.log(a.far + 1) / Math.LN2));
                bb !== a && (bb = a, m = l = !0);
                if (c.isShaderMaterial || c.isMeshPhongMaterial || c.isMeshStandardMaterial || c.envMap) h = g.map.cameraPosition, void 0 !== h && h.setValue(N, lb.setFromMatrixPosition(a.matrixWorld));
                (c.isMeshPhongMaterial || c.isMeshLambertMaterial || c.isMeshBasicMaterial || c.isMeshStandardMaterial || c.isShaderMaterial || c.skinning) && g.setValue(N, "viewMatrix", a.matrixWorldInverse);
            }
            if (c.skinning && (g.setOptional(N, d, "bindMatrix"), g.setOptional(N, d, "bindMatrixInverse"), a = d.skeleton)) if (h = a.bones, Aa.floatVertexTextures) {
                if (void 0 === a.boneTexture) {
                    h = Math.sqrt(4 * h.length);
                    h = O.ceilPowerOfTwo(h);
                    h = Math.max(h, 4);
                    var k = new Float32Array(h * h * 4);
                    k.set(a.boneMatrices);
                    var v = new sb(k, h, h, 1023, 1015);
                    v.needsUpdate = !0;
                    a.boneMatrices = k;
                    a.boneTexture = v;
                    a.boneTextureSize = h;
                }
                g.setValue(N, "boneTexture", a.boneTexture, ba);
                g.setValue(N, "boneTextureSize", a.boneTextureSize);
            } else g.setOptional(N, a, "boneMatrices");
            l && (g.setValue(N, "toneMappingExposure", A.toneMappingExposure), g.setValue(N, "toneMappingWhitePoint", A.toneMappingWhitePoint), c.lights && (l = m, q.ambientLightColor.needsUpdate = l, q.lightProbe.needsUpdate = l, q.directionalLights.needsUpdate = l, q.pointLights.needsUpdate = l, q.spotLights.needsUpdate = l, q.rectAreaLights.needsUpdate = l, q.hemisphereLights.needsUpdate = l), b && c.fog && (q.fogColor.value.copy(b.color), b.isFog ? (q.fogNear.value = b.near, q.fogFar.value = b.far) : b.isFogExp2 && (q.fogDensity.value = b.density)), c.isMeshBasicMaterial ? t(q, c) : c.isMeshLambertMaterial ? (t(q, c), c.emissiveMap && (q.emissiveMap.value = c.emissiveMap)) : c.isMeshPhongMaterial ? (t(q, c), c.isMeshToonMaterial ? (r(q, c), c.gradientMap && (q.gradientMap.value = c.gradientMap)) : r(q, c)) : c.isMeshStandardMaterial ? (t(q, c), c.isMeshPhysicalMaterial ? (u(q, c), q.reflectivity.value = c.reflectivity, q.clearCoat.value = c.clearCoat, q.clearCoatRoughness.value = c.clearCoatRoughness) : u(q, c)) : c.isMeshMatcapMaterial ? (t(q, c), c.matcap && (q.matcap.value = c.matcap), c.bumpMap && (q.bumpMap.value = c.bumpMap, q.bumpScale.value = c.bumpScale, 1 === c.side && (q.bumpScale.value *= -1)), c.normalMap && (q.normalMap.value = c.normalMap, q.normalScale.value.copy(c.normalScale), 1 === c.side && q.normalScale.value.negate()), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias)) : c.isMeshDepthMaterial ? (t(q, c), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias)) : c.isMeshDistanceMaterial ? (t(q, c), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias), q.referencePosition.value.copy(c.referencePosition), q.nearDistance.value = c.nearDistance, q.farDistance.value = c.farDistance) : c.isMeshNormalMaterial ? (t(q, c), c.bumpMap && (q.bumpMap.value = c.bumpMap, q.bumpScale.value = c.bumpScale, 1 === c.side && (q.bumpScale.value *= -1)), c.normalMap && (q.normalMap.value = c.normalMap, q.normalScale.value.copy(c.normalScale), 1 === c.side && q.normalScale.value.negate()), c.displacementMap && (q.displacementMap.value = c.displacementMap, q.displacementScale.value = c.displacementScale, q.displacementBias.value = c.displacementBias)) : c.isLineBasicMaterial ? (q.diffuse.value.copy(c.color), q.opacity.value = c.opacity, c.isLineDashedMaterial && (q.dashSize.value = c.dashSize, q.totalSize.value = c.dashSize + c.gapSize, q.scale.value = c.scale)) : c.isPointsMaterial ? (q.diffuse.value.copy(c.color), q.opacity.value = c.opacity, q.size.value = c.size * X, q.scale.value = .5 * Wa, q.map.value = c.map, null !== c.map && (!0 === c.map.matrixAutoUpdate && c.map.updateMatrix(), q.uvTransform.value.copy(c.map.matrix))) : c.isSpriteMaterial ? (q.diffuse.value.copy(c.color), q.opacity.value = c.opacity, q.rotation.value = c.rotation, q.map.value = c.map, null !== c.map && (!0 === c.map.matrixAutoUpdate && c.map.updateMatrix(), q.uvTransform.value.copy(c.map.matrix))) : c.isShadowMaterial && (q.color.value.copy(c.color), q.opacity.value = c.opacity), void 0 !== q.ltc_1 && (q.ltc_1.value = J.LTC_1), void 0 !== q.ltc_2 && (q.ltc_2.value = J.LTC_2), ib.upload(N, e.uniformsList, q, ba));
            c.isShaderMaterial && !0 === c.uniformsNeedUpdate && (ib.upload(N, e.uniformsList, q, ba), c.uniformsNeedUpdate = !1);
            c.isSpriteMaterial && g.setValue(N, "center", d.center);
            g.setValue(N, "modelViewMatrix", d.modelViewMatrix);
            g.setValue(N, "normalMatrix", d.normalMatrix);
            g.setValue(N, "modelMatrix", d.matrixWorld);
            return f;
        }
        function t(a, b) {
            a.opacity.value = b.opacity;
            b.color && a.diffuse.value.copy(b.color);
            b.emissive && a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity);
            b.map && (a.map.value = b.map);
            b.alphaMap && (a.alphaMap.value = b.alphaMap);
            b.specularMap && (a.specularMap.value = b.specularMap);
            b.envMap && (a.envMap.value = b.envMap, a.flipEnvMap.value = b.envMap.isCubeTexture ? -1 : 1, a.reflectivity.value = b.reflectivity, a.refractionRatio.value = b.refractionRatio, a.maxMipLevel.value = Ba.get(b.envMap).__maxMipLevel);
            b.lightMap && (a.lightMap.value = b.lightMap, a.lightMapIntensity.value = b.lightMapIntensity);
            b.aoMap && (a.aoMap.value = b.aoMap, a.aoMapIntensity.value = b.aoMapIntensity);
            if (b.map) var c = b.map;
            else b.specularMap ? c = b.specularMap : b.displacementMap ? c = b.displacementMap : b.normalMap ? c = b.normalMap : b.bumpMap ? c = b.bumpMap : b.roughnessMap ? c = b.roughnessMap : b.metalnessMap ? c = b.metalnessMap : b.alphaMap ? c = b.alphaMap : b.emissiveMap && (c = b.emissiveMap);
            void 0 !== c && (c.isWebGLRenderTarget && (c = c.texture), !0 === c.matrixAutoUpdate && c.updateMatrix(), a.uvTransform.value.copy(c.matrix));
        }
        function r(a, b) {
            a.specular.value.copy(b.specular);
            a.shininess.value = Math.max(b.shininess, 1E-4);
            b.emissiveMap && (a.emissiveMap.value = b.emissiveMap);
            b.bumpMap && (a.bumpMap.value = b.bumpMap, a.bumpScale.value = b.bumpScale, 1 === b.side && (a.bumpScale.value *= -1));
            b.normalMap && (a.normalMap.value = b.normalMap, a.normalScale.value.copy(b.normalScale), 1 === b.side && a.normalScale.value.negate());
            b.displacementMap && (a.displacementMap.value = b.displacementMap, a.displacementScale.value = b.displacementScale, a.displacementBias.value = b.displacementBias);
        }
        function u(a, b) {
            a.roughness.value = b.roughness;
            a.metalness.value = b.metalness;
            b.roughnessMap && (a.roughnessMap.value = b.roughnessMap);
            b.metalnessMap && (a.metalnessMap.value = b.metalnessMap);
            b.emissiveMap && (a.emissiveMap.value = b.emissiveMap);
            b.bumpMap && (a.bumpMap.value = b.bumpMap, a.bumpScale.value = b.bumpScale, 1 === b.side && (a.bumpScale.value *= -1));
            b.normalMap && (a.normalMap.value = b.normalMap, a.normalScale.value.copy(b.normalScale), 1 === b.side && a.normalScale.value.negate());
            b.displacementMap && (a.displacementMap.value = b.displacementMap, a.displacementScale.value = b.displacementScale, a.displacementBias.value = b.displacementBias);
            b.envMap && (a.envMapIntensity.value = b.envMapIntensity);
        }
        console.log("THREE.WebGLRenderer", "104");
        a = a || {};
        var w = void 0 !== a.canvas ? a.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), z = void 0 !== a.context ? a.context : null, x = void 0 !== a.alpha ? a.alpha : !1, y = void 0 !== a.depth ? a.depth : !0, F = void 0 !== a.stencil ? a.stencil : !0, G = void 0 !== a.antialias ? a.antialias : !1, ua = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0, E = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1, I = void 0 !== a.powerPreference ? a.powerPreference : "default", D = null, B = null;
        this.domElement = w;
        this.context = null;
        this.debug = {
            checkShaderErrors: !1
        };
        this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
        this.clippingPlanes = [];
        this.localClippingEnabled = !1;
        this.gammaFactor = 2;
        this.physicallyCorrectLights = this.gammaOutput = this.gammaInput = !1;
        this.toneMappingWhitePoint = this.toneMappingExposure = this.toneMapping = 1;
        this.maxMorphTargets = 8;
        this.maxMorphNormals = 4;
        var A = this, M = !1, K = null, Q = null, ha = null, S = -1;
        var H = b = null;
        var xb = !1;
        var bb = null, R = null, U = new W, Y = new W, V = null, T = w.width, Wa = w.height, X = 1, L = new W(0, 0, T, Wa), Z = new W(0, 0, T, Wa), ca = !1, ma = new yd, Ha = new gg, na = !1, fa = !1, Ic = new P, lb = new n;
        try {
            x = {
                alpha: x,
                depth: y,
                stencil: F,
                antialias: G,
                premultipliedAlpha: ua,
                preserveDrawingBuffer: E,
                powerPreference: I
            };
            w.addEventListener("webglcontextlost", d, !1);
            w.addEventListener("webglcontextrestored", e, !1);
            var N = z || w.getContext("webgl", x) || w.getContext("experimental-webgl", x);
            if (null === N) {
                if (null !== w.getContext("webgl")) throw Error("Error creating WebGL context with your selected attributes.");
                throw Error("Error creating WebGL context.");
            }
            void 0 === N.getShaderPrecisionFormat && (N.getShaderPrecisionFormat = function() {
                return {
                    rangeMin: 1,
                    rangeMax: 1,
                    precision: 1
                };
            });
        } catch (yf) {
            throw console.error("THREE.WebGLRenderer: " + yf.message), yf;
        }
        var ja, Aa, aa, mb, Ba, ba, qa, sa, ka, da, ra, oa, ia, va, xa, ya, ea;
        c();
        var la = "undefined" !== typeof navigator && "xr" in navigator ? new gh(A) : new xf(A);
        this.vr = la;
        var za = new rf(A, ka, Aa.maxTextureSize);
        this.shadowMap = za;
        this.getContext = function() {
            return N;
        };
        this.getContextAttributes = function() {
            return N.getContextAttributes();
        };
        this.forceContextLoss = function() {
            var a = ja.get("WEBGL_lose_context");
            a && a.loseContext();
        };
        this.forceContextRestore = function() {
            var a = ja.get("WEBGL_lose_context");
            a && a.restoreContext();
        };
        this.getPixelRatio = function() {
            return X;
        };
        this.setPixelRatio = function(a) {
            void 0 !== a && (X = a, this.setSize(T, Wa, !1));
        };
        this.getSize = function(a) {
            void 0 === a && (console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"), a = new C);
            return a.set(T, Wa);
        };
        this.setSize = function(a, b, c) {
            la.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (T = a, Wa = b, w.width = a * X, w.height = b * X, !1 !== c && (w.style.width = a + "px", w.style.height = b + "px"), this.setViewport(0, 0, a, b));
        };
        this.getDrawingBufferSize = function(a) {
            void 0 === a && (console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"), a = new C);
            return a.set(T * X, Wa * X);
        };
        this.setDrawingBufferSize = function(a, b, c) {
            T = a;
            Wa = b;
            X = c;
            w.width = a * c;
            w.height = b * c;
            this.setViewport(0, 0, a, b);
        };
        this.getCurrentViewport = function(a) {
            void 0 === a && (console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"), a = new W);
            return a.copy(U);
        };
        this.getViewport = function(a) {
            return a.copy(L);
        };
        this.setViewport = function(a, b, c, d) {
            a.isVector4 ? L.set(a.x, a.y, a.z, a.w) : L.set(a, b, c, d);
            aa.viewport(U.copy(L).multiplyScalar(X));
        };
        this.getScissor = function(a) {
            return a.copy(Z);
        };
        this.setScissor = function(a, b, c, d) {
            a.isVector4 ? Z.set(a.x, a.y, a.z, a.w) : Z.set(a, b, c, d);
            aa.scissor(Y.copy(Z).multiplyScalar(X));
        };
        this.getScissorTest = function() {
            return ca;
        };
        this.setScissorTest = function(a) {
            aa.setScissorTest(ca = a);
        };
        this.getClearColor = function() {
            return ia.getClearColor();
        };
        this.setClearColor = function() {
            ia.setClearColor.apply(ia, arguments);
        };
        this.getClearAlpha = function() {
            return ia.getClearAlpha();
        };
        this.setClearAlpha = function() {
            ia.setClearAlpha.apply(ia, arguments);
        };
        this.clear = function(a, b, c) {
            var d = 0;
            if (void 0 === a || a) d |= 16384;
            if (void 0 === b || b) d |= 256;
            if (void 0 === c || c) d |= 1024;
            N.clear(d);
        };
        this.clearColor = function() {
            this.clear(!0, !1, !1);
        };
        this.clearDepth = function() {
            this.clear(!1, !0, !1);
        };
        this.clearStencil = function() {
            this.clear(!1, !1, !0);
        };
        this.dispose = function() {
            w.removeEventListener("webglcontextlost", d, !1);
            w.removeEventListener("webglcontextrestored", e, !1);
            ra.dispose();
            oa.dispose();
            Ba.dispose();
            ka.dispose();
            la.dispose();
            ta.stop();
        };
        this.renderBufferImmediate = function(a, b) {
            aa.initAttributes();
            var c = Ba.get(a);
            a.hasPositions && !c.position && (c.position = N.createBuffer());
            a.hasNormals && !c.normal && (c.normal = N.createBuffer());
            a.hasUvs && !c.uv && (c.uv = N.createBuffer());
            a.hasColors && !c.color && (c.color = N.createBuffer());
            b = b.getAttributes();
            a.hasPositions && (N.bindBuffer(34962, c.position), N.bufferData(34962, a.positionArray, 35048), aa.enableAttribute(b.position), N.vertexAttribPointer(b.position, 3, 5126, !1, 0, 0));
            a.hasNormals && (N.bindBuffer(34962, c.normal), N.bufferData(34962, a.normalArray, 35048), aa.enableAttribute(b.normal), N.vertexAttribPointer(b.normal, 3, 5126, !1, 0, 0));
            a.hasUvs && (N.bindBuffer(34962, c.uv), N.bufferData(34962, a.uvArray, 35048), aa.enableAttribute(b.uv), N.vertexAttribPointer(b.uv, 2, 5126, !1, 0, 0));
            a.hasColors && (N.bindBuffer(34962, c.color), N.bufferData(34962, a.colorArray, 35048), aa.enableAttribute(b.color), N.vertexAttribPointer(b.color, 3, 5126, !1, 0, 0));
            aa.disableUnusedAttributes();
            N.drawArrays(4, 0, a.count);
            a.count = 0;
        };
        this.renderBufferDirect = function(a, c, d, e, f, g) {
            var h = f.isMesh && 0 > f.matrixWorld.determinant();
            aa.setMaterial(e, h);
            var l = k(a, c, e, f), m = !1;
            if (b !== d.id || H !== l.id || xb !== (!0 === e.wireframe)) b = d.id, H = l.id, xb = !0 === e.wireframe, m = !0;
            f.morphTargetInfluences && (va.update(f, d, e, l), m = !0);
            h = d.index;
            var q = d.attributes.position;
            c = 1;
            !0 === e.wireframe && (h = sa.getWireframeAttribute(d), c = 2);
            a = xa;
            if (null !== h) {
                var p = qa.get(h);
                a = ya;
                a.setIndex(p);
            }
            if (m) {
                if (d && d.isInstancedBufferGeometry && !Aa.isWebGL2 && null === ja.get("ANGLE_instanced_arrays")) console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                else {
                    aa.initAttributes();
                    m = d.attributes;
                    l = l.getAttributes();
                    var v = e.defaultAttributeValues;
                    for(F in l){
                        var r = l[F];
                        if (0 <= r) {
                            var t = m[F];
                            if (void 0 !== t) {
                                var n = t.normalized, u = t.itemSize, w = qa.get(t);
                                if (void 0 !== w) {
                                    var x = w.buffer, y = w.type;
                                    w = w.bytesPerElement;
                                    if (t.isInterleavedBufferAttribute) {
                                        var z = t.data, G = z.stride;
                                        t = t.offset;
                                        z && z.isInstancedInterleavedBuffer ? (aa.enableAttributeAndDivisor(r, z.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = z.meshPerAttribute * z.count)) : aa.enableAttribute(r);
                                        N.bindBuffer(34962, x);
                                        N.vertexAttribPointer(r, u, y, n, G * w, t * w);
                                    } else t.isInstancedBufferAttribute ? (aa.enableAttributeAndDivisor(r, t.meshPerAttribute), void 0 === d.maxInstancedCount && (d.maxInstancedCount = t.meshPerAttribute * t.count)) : aa.enableAttribute(r), N.bindBuffer(34962, x), N.vertexAttribPointer(r, u, y, n, 0, 0);
                                }
                            } else if (void 0 !== v && (n = v[F], void 0 !== n)) switch(n.length){
                                case 2:
                                    N.vertexAttrib2fv(r, n);
                                    break;
                                case 3:
                                    N.vertexAttrib3fv(r, n);
                                    break;
                                case 4:
                                    N.vertexAttrib4fv(r, n);
                                    break;
                                default:
                                    N.vertexAttrib1fv(r, n);
                            }
                        }
                    }
                    aa.disableUnusedAttributes();
                }
                null !== h && N.bindBuffer(34963, p.buffer);
            }
            p = Infinity;
            null !== h ? p = h.count : void 0 !== q && (p = q.count);
            h = d.drawRange.start * c;
            q = null !== g ? g.start * c : 0;
            var F = Math.max(h, q);
            g = Math.max(0, Math.min(p, h + d.drawRange.count * c, q + (null !== g ? g.count * c : Infinity)) - 1 - F + 1);
            if (0 !== g) {
                if (f.isMesh) if (!0 === e.wireframe) aa.setLineWidth(e.wireframeLinewidth * (null === Q ? X : 1)), a.setMode(1);
                else switch(f.drawMode){
                    case 0:
                        a.setMode(4);
                        break;
                    case 1:
                        a.setMode(5);
                        break;
                    case 2:
                        a.setMode(6);
                }
                else f.isLine ? (e = e.linewidth, void 0 === e && (e = 1), aa.setLineWidth(e * (null === Q ? X : 1)), f.isLineSegments ? a.setMode(1) : f.isLineLoop ? a.setMode(2) : a.setMode(3)) : f.isPoints ? a.setMode(0) : f.isSprite && a.setMode(4);
                d && d.isInstancedBufferGeometry ? 0 < d.maxInstancedCount && a.renderInstances(d, F, g) : a.render(F, g);
            }
        };
        this.compile = function(a, b) {
            B = oa.get(a, b);
            B.init();
            a.traverse(function(a) {
                a.isLight && (B.pushLight(a), a.castShadow && B.pushShadow(a));
            });
            B.setupLights(b);
            a.traverse(function(b) {
                if (b.material) if (Array.isArray(b.material)) for(var c = 0; c < b.material.length; c++)p(b.material[c], a.fog, b);
                else p(b.material, a.fog, b);
            });
        };
        var wa = null, ta = new de;
        ta.setAnimationLoop(function(a) {
            la.isPresenting() || wa && wa(a);
        });
        "undefined" !== typeof window && ta.setContext(window);
        this.setAnimationLoop = function(a) {
            wa = a;
            la.setAnimationLoop(a);
            ta.start();
        };
        this.render = function(a, c, d, e) {
            if (void 0 !== d) {
                console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
                var f = d;
            }
            if (void 0 !== e) {
                console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
                var g = e;
            }
            c && c.isCamera ? M || (H = b = null, xb = !1, S = -1, bb = null, !0 === a.autoUpdate && a.updateMatrixWorld(), null === c.parent && c.updateMatrixWorld(), la.enabled && (c = la.getCamera(c)), B = oa.get(a, c), B.init(), a.onBeforeRender(A, a, c, f || Q), Ic.multiplyMatrices(c.projectionMatrix, c.matrixWorldInverse), ma.setFromMatrix(Ic), fa = this.localClippingEnabled, na = Ha.init(this.clippingPlanes, fa, c), D = ra.get(a, c), D.init(), l(a, c, 0, A.sortObjects), !0 === A.sortObjects && D.sort(), na && Ha.beginShadows(), za.render(B.state.shadowsArray, a, c), B.setupLights(c), na && Ha.endShadows(), this.info.autoReset && this.info.reset(), void 0 !== f && this.setRenderTarget(f), ia.render(D, a, c, g), d = D.opaque, e = D.transparent, a.overrideMaterial ? (f = a.overrideMaterial, d.length && m(d, a, c, f), e.length && m(e, a, c, f)) : (d.length && m(d, a, c), e.length && m(e, a, c)), a.onAfterRender(A, a, c), null !== Q && (ba.updateRenderTargetMipmap(Q), ba.updateMultisampleRenderTarget(Q)), aa.buffers.depth.setTest(!0), aa.buffers.depth.setMask(!0), aa.buffers.color.setMask(!0), aa.setPolygonOffset(!1), la.enabled && la.submitFrame(), B = D = null) : console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        };
        this.setFramebuffer = function(a) {
            K = a;
        };
        this.getRenderTarget = function() {
            return Q;
        };
        this.setRenderTarget = function(a, b, c) {
            (Q = a) && void 0 === Ba.get(a).__webglFramebuffer && ba.setupRenderTarget(a);
            var d = K, e = !1;
            a ? (d = Ba.get(a).__webglFramebuffer, a.isWebGLRenderTargetCube ? (d = d[b || 0], e = !0) : d = a.isWebGLMultisampleRenderTarget ? Ba.get(a).__webglMultisampledFramebuffer : d, U.copy(a.viewport), Y.copy(a.scissor), V = a.scissorTest) : (U.copy(L).multiplyScalar(X), Y.copy(Z).multiplyScalar(X), V = ca);
            ha !== d && (N.bindFramebuffer(36160, d), ha = d);
            aa.viewport(U);
            aa.scissor(Y);
            aa.setScissorTest(V);
            e && (a = Ba.get(a.texture), N.framebufferTexture2D(36160, 36064, 34069 + (b || 0), a.__webglTexture, c || 0));
        };
        this.readRenderTargetPixels = function(a, b, c, d, e, f) {
            if (a && a.isWebGLRenderTarget) {
                var g = Ba.get(a).__webglFramebuffer;
                if (g) {
                    var h = !1;
                    g !== ha && (N.bindFramebuffer(36160, g), h = !0);
                    try {
                        var l = a.texture, m = l.format, q = l.type;
                        1023 !== m && ea.convert(m) !== N.getParameter(35739) ? console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.") : 1009 === q || ea.convert(q) === N.getParameter(35738) || 1015 === q && (Aa.isWebGL2 || ja.get("OES_texture_float") || ja.get("WEBGL_color_buffer_float")) || 1016 === q && (Aa.isWebGL2 ? ja.get("EXT_color_buffer_float") : ja.get("EXT_color_buffer_half_float")) ? 36053 === N.checkFramebufferStatus(36160) ? 0 <= b && b <= a.width - d && 0 <= c && c <= a.height - e && N.readPixels(b, c, d, e, ea.convert(m), ea.convert(q), f) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") : console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                    } finally{
                        h && N.bindFramebuffer(36160, ha);
                    }
                }
            } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        };
        this.copyFramebufferToTexture = function(a, b, c) {
            var d = b.image.width, e = b.image.height, f = ea.convert(b.format);
            ba.setTexture2D(b, 0);
            N.copyTexImage2D(3553, c || 0, f, a.x, a.y, d, e, 0);
        };
        this.copyTextureToTexture = function(a, b, c, d) {
            var e = b.image.width, f = b.image.height, g = ea.convert(c.format), h = ea.convert(c.type);
            ba.setTexture2D(c, 0);
            b.isDataTexture ? N.texSubImage2D(3553, d || 0, a.x, a.y, e, f, g, h, b.image.data) : N.texSubImage2D(3553, d || 0, a.x, a.y, g, h, b.image);
        };
    }
    function Ad(a, b) {
        this.name = "";
        this.color = new A(a);
        this.density = void 0 !== b ? b : 2.5E-4;
    }
    function Bd(a, b, c) {
        this.name = "";
        this.color = new A(a);
        this.near = void 0 !== b ? b : 1;
        this.far = void 0 !== c ? c : 1E3;
    }
    function Cd() {
        D.call(this);
        this.type = "Scene";
        this.overrideMaterial = this.fog = this.background = null;
        this.autoUpdate = !0;
    }
    function Ab(a, b) {
        this.array = a;
        this.stride = b;
        this.count = void 0 !== a ? a.length / b : 0;
        this.dynamic = !1;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
    }
    function Kc(a, b, c, d) {
        this.data = a;
        this.itemSize = b;
        this.offset = c;
        this.normalized = !0 === d;
    }
    function nb(a) {
        Q.call(this);
        this.type = "SpriteMaterial";
        this.color = new A(16777215);
        this.map = null;
        this.rotation = 0;
        this.sizeAttenuation = !0;
        this.lights = !1;
        this.transparent = !0;
        this.setValues(a);
    }
    function Lc(a) {
        D.call(this);
        this.type = "Sprite";
        if (void 0 === Yb) {
            Yb = new B;
            var b = new Float32Array([
                -.5,
                -.5,
                0,
                0,
                0,
                .5,
                -.5,
                0,
                1,
                0,
                .5,
                .5,
                0,
                1,
                1,
                -.5,
                .5,
                0,
                0,
                1
            ]);
            b = new Ab(b, 5);
            Yb.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]);
            Yb.addAttribute("position", new Kc(b, 3, 0, !1));
            Yb.addAttribute("uv", new Kc(b, 2, 3, !1));
        }
        this.geometry = Yb;
        this.material = void 0 !== a ? a : new nb;
        this.center = new C(.5, .5);
    }
    function Mc() {
        D.call(this);
        this.type = "LOD";
        Object.defineProperties(this, {
            levels: {
                enumerable: !0,
                value: []
            }
        });
    }
    function Nc(a, b) {
        a && a.isGeometry && console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        qa.call(this, a, b);
        this.type = "SkinnedMesh";
        this.bindMode = "attached";
        this.bindMatrix = new P;
        this.bindMatrixInverse = new P;
    }
    function Dd(a, b) {
        a = a || [];
        this.bones = a.slice(0);
        this.boneMatrices = new Float32Array(16 * this.bones.length);
        if (void 0 === b) this.calculateInverses();
        else if (this.bones.length === b.length) this.boneInverses = b.slice(0);
        else for(console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [], a = 0, b = this.bones.length; a < b; a++)this.boneInverses.push(new P);
    }
    function ke() {
        D.call(this);
        this.type = "Bone";
    }
    function U(a) {
        Q.call(this);
        this.type = "LineBasicMaterial";
        this.color = new A(16777215);
        this.linewidth = 1;
        this.linejoin = this.linecap = "round";
        this.lights = !1;
        this.setValues(a);
    }
    function ka(a, b, c) {
        1 === c && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
        D.call(this);
        this.type = "Line";
        this.geometry = void 0 !== a ? a : new B;
        this.material = void 0 !== b ? b : new U({
            color: 16777215 * Math.random()
        });
    }
    function V(a, b) {
        ka.call(this, a, b);
        this.type = "LineSegments";
    }
    function Ed(a, b) {
        ka.call(this, a, b);
        this.type = "LineLoop";
    }
    function Ia(a) {
        Q.call(this);
        this.type = "PointsMaterial";
        this.color = new A(16777215);
        this.map = null;
        this.size = 1;
        this.sizeAttenuation = !0;
        this.lights = this.morphTargets = !1;
        this.setValues(a);
    }
    function Zb(a, b) {
        D.call(this);
        this.type = "Points";
        this.geometry = void 0 !== a ? a : new B;
        this.material = void 0 !== b ? b : new Ia({
            color: 16777215 * Math.random()
        });
    }
    function le(a, b, c, d, e, f, g, h, l) {
        Y.call(this, a, b, c, d, e, f, g, h, l);
        this.format = void 0 !== g ? g : 1022;
        this.minFilter = void 0 !== f ? f : 1006;
        this.magFilter = void 0 !== e ? e : 1006;
        this.generateMipmaps = !1;
    }
    function $b(a, b, c, d, e, f, g, h, l, m, q, p) {
        Y.call(this, null, f, g, h, l, m, d, e, q, p);
        this.image = {
            width: b,
            height: c
        };
        this.mipmaps = a;
        this.generateMipmaps = this.flipY = !1;
    }
    function Oc(a, b, c, d, e, f, g, h, l) {
        Y.call(this, a, b, c, d, e, f, g, h, l);
        this.needsUpdate = !0;
    }
    function Pc(a, b, c, d, e, f, g, h, l, m) {
        m = void 0 !== m ? m : 1026;
        if (1026 !== m && 1027 !== m) throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        void 0 === c && 1026 === m && (c = 1012);
        void 0 === c && 1027 === m && (c = 1020);
        Y.call(this, null, d, e, f, g, h, m, c, l);
        this.image = {
            width: a,
            height: b
        };
        this.magFilter = void 0 !== g ? g : 1003;
        this.minFilter = void 0 !== h ? h : 1003;
        this.generateMipmaps = this.flipY = !1;
    }
    function ac(a) {
        B.call(this);
        this.type = "WireframeGeometry";
        var b = [], c, d, e, f = [
            0,
            0
        ], g = {}, h = [
            "a",
            "b",
            "c"
        ];
        if (a && a.isGeometry) {
            var l = a.faces;
            var m = 0;
            for(d = l.length; m < d; m++){
                var q = l[m];
                for(c = 0; 3 > c; c++){
                    var p = q[h[c]];
                    var k = q[h[(c + 1) % 3]];
                    f[0] = Math.min(p, k);
                    f[1] = Math.max(p, k);
                    p = f[0] + "," + f[1];
                    void 0 === g[p] && (g[p] = {
                        index1: f[0],
                        index2: f[1]
                    });
                }
            }
            for(p in g)m = g[p], h = a.vertices[m.index1], b.push(h.x, h.y, h.z), h = a.vertices[m.index2], b.push(h.x, h.y, h.z);
        } else if (a && a.isBufferGeometry) if (h = new n, null !== a.index) {
            l = a.attributes.position;
            q = a.index;
            var t = a.groups;
            0 === t.length && (t = [
                {
                    start: 0,
                    count: q.count,
                    materialIndex: 0
                }
            ]);
            a = 0;
            for(e = t.length; a < e; ++a)for(m = t[a], c = m.start, d = m.count, m = c, d = c + d; m < d; m += 3)for(c = 0; 3 > c; c++)p = q.getX(m + c), k = q.getX(m + (c + 1) % 3), f[0] = Math.min(p, k), f[1] = Math.max(p, k), p = f[0] + "," + f[1], void 0 === g[p] && (g[p] = {
                index1: f[0],
                index2: f[1]
            });
            for(p in g)m = g[p], h.fromBufferAttribute(l, m.index1), b.push(h.x, h.y, h.z), h.fromBufferAttribute(l, m.index2), b.push(h.x, h.y, h.z);
        } else for(l = a.attributes.position, m = 0, d = l.count / 3; m < d; m++)for(c = 0; 3 > c; c++)g = 3 * m + c, h.fromBufferAttribute(l, g), b.push(h.x, h.y, h.z), g = 3 * m + (c + 1) % 3, h.fromBufferAttribute(l, g), b.push(h.x, h.y, h.z);
        this.addAttribute("position", new E(b, 3));
    }
    function Qc(a, b, c) {
        K.call(this);
        this.type = "ParametricGeometry";
        this.parameters = {
            func: a,
            slices: b,
            stacks: c
        };
        this.fromBufferGeometry(new bc(a, b, c));
        this.mergeVertices();
    }
    function bc(a, b, c) {
        B.call(this);
        this.type = "ParametricBufferGeometry";
        this.parameters = {
            func: a,
            slices: b,
            stacks: c
        };
        var d = [], e = [], f = [], g = [], h = new n, l = new n, m = new n, q = new n, p = new n, k, t;
        3 > a.length && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
        var r = b + 1;
        for(k = 0; k <= c; k++){
            var u = k / c;
            for(t = 0; t <= b; t++){
                var w = t / b;
                a(w, u, l);
                e.push(l.x, l.y, l.z);
                0 <= w - 1E-5 ? (a(w - 1E-5, u, m), q.subVectors(l, m)) : (a(w + 1E-5, u, m), q.subVectors(m, l));
                0 <= u - 1E-5 ? (a(w, u - 1E-5, m), p.subVectors(l, m)) : (a(w, u + 1E-5, m), p.subVectors(m, l));
                h.crossVectors(q, p).normalize();
                f.push(h.x, h.y, h.z);
                g.push(w, u);
            }
        }
        for(k = 0; k < c; k++)for(t = 0; t < b; t++)a = k * r + t + 1, h = (k + 1) * r + t + 1, l = (k + 1) * r + t, d.push(k * r + t, a, l), d.push(a, h, l);
        this.setIndex(d);
        this.addAttribute("position", new E(e, 3));
        this.addAttribute("normal", new E(f, 3));
        this.addAttribute("uv", new E(g, 2));
    }
    function Rc(a, b, c, d) {
        K.call(this);
        this.type = "PolyhedronGeometry";
        this.parameters = {
            vertices: a,
            indices: b,
            radius: c,
            detail: d
        };
        this.fromBufferGeometry(new la(a, b, c, d));
        this.mergeVertices();
    }
    function la(a, b, c, d) {
        function e(a) {
            h.push(a.x, a.y, a.z);
        }
        function f(b, c) {
            b *= 3;
            c.x = a[b + 0];
            c.y = a[b + 1];
            c.z = a[b + 2];
        }
        function g(a, b, c, d) {
            0 > d && 1 === a.x && (l[b] = a.x - 1);
            0 === c.x && 0 === c.z && (l[b] = d / 2 / Math.PI + .5);
        }
        B.call(this);
        this.type = "PolyhedronBufferGeometry";
        this.parameters = {
            vertices: a,
            indices: b,
            radius: c,
            detail: d
        };
        c = c || 1;
        d = d || 0;
        var h = [], l = [];
        (function(a) {
            for(var c = new n, d = new n, g = new n, h = 0; h < b.length; h += 3){
                f(b[h + 0], c);
                f(b[h + 1], d);
                f(b[h + 2], g);
                var l, m, k = c, z = d, x = g, y = Math.pow(2, a), F = [];
                for(m = 0; m <= y; m++){
                    F[m] = [];
                    var G = k.clone().lerp(x, m / y), C = z.clone().lerp(x, m / y), B = y - m;
                    for(l = 0; l <= B; l++)F[m][l] = 0 === l && m === y ? G : G.clone().lerp(C, l / B);
                }
                for(m = 0; m < y; m++)for(l = 0; l < 2 * (y - m) - 1; l++)k = Math.floor(l / 2), 0 === l % 2 ? (e(F[m][k + 1]), e(F[m + 1][k]), e(F[m][k])) : (e(F[m][k + 1]), e(F[m + 1][k + 1]), e(F[m + 1][k]));
            }
        })(d);
        (function(a) {
            for(var b = new n, c = 0; c < h.length; c += 3)b.x = h[c + 0], b.y = h[c + 1], b.z = h[c + 2], b.normalize().multiplyScalar(a), h[c + 0] = b.x, h[c + 1] = b.y, h[c + 2] = b.z;
        })(c);
        (function() {
            for(var a = new n, b = 0; b < h.length; b += 3)a.x = h[b + 0], a.y = h[b + 1], a.z = h[b + 2], l.push(Math.atan2(a.z, -a.x) / 2 / Math.PI + .5, 1 - (Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + .5));
            a = new n;
            b = new n;
            for(var c = new n, d = new n, e = new C, f = new C, k = new C, w = 0, z = 0; w < h.length; w += 9, z += 6){
                a.set(h[w + 0], h[w + 1], h[w + 2]);
                b.set(h[w + 3], h[w + 4], h[w + 5]);
                c.set(h[w + 6], h[w + 7], h[w + 8]);
                e.set(l[z + 0], l[z + 1]);
                f.set(l[z + 2], l[z + 3]);
                k.set(l[z + 4], l[z + 5]);
                d.copy(a).add(b).add(c).divideScalar(3);
                var x = Math.atan2(d.z, -d.x);
                g(e, z + 0, a, x);
                g(f, z + 2, b, x);
                g(k, z + 4, c, x);
            }
            for(a = 0; a < l.length; a += 6)b = l[a + 0], c = l[a + 2], d = l[a + 4], e = Math.min(b, c, d), .9 < Math.max(b, c, d) && .1 > e && (.2 > b && (l[a + 0] += 1), .2 > c && (l[a + 2] += 1), .2 > d && (l[a + 4] += 1));
        })();
        this.addAttribute("position", new E(h, 3));
        this.addAttribute("normal", new E(h.slice(), 3));
        this.addAttribute("uv", new E(l, 2));
        0 === d ? this.computeVertexNormals() : this.normalizeNormals();
    }
    function Sc(a, b) {
        K.call(this);
        this.type = "TetrahedronGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
        this.fromBufferGeometry(new cc(a, b));
        this.mergeVertices();
    }
    function cc(a, b) {
        la.call(this, [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ], [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ], a, b);
        this.type = "TetrahedronBufferGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
    }
    function Tc(a, b) {
        K.call(this);
        this.type = "OctahedronGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
        this.fromBufferGeometry(new Bb(a, b));
        this.mergeVertices();
    }
    function Bb(a, b) {
        la.call(this, [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ], [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ], a, b);
        this.type = "OctahedronBufferGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
    }
    function Uc(a, b) {
        K.call(this);
        this.type = "IcosahedronGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
        this.fromBufferGeometry(new dc(a, b));
        this.mergeVertices();
    }
    function dc(a, b) {
        var c = (1 + Math.sqrt(5)) / 2;
        la.call(this, [
            -1,
            c,
            0,
            1,
            c,
            0,
            -1,
            -c,
            0,
            1,
            -c,
            0,
            0,
            -1,
            c,
            0,
            1,
            c,
            0,
            -1,
            -c,
            0,
            1,
            -c,
            c,
            0,
            -1,
            c,
            0,
            1,
            -c,
            0,
            -1,
            -c,
            0,
            1
        ], [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ], a, b);
        this.type = "IcosahedronBufferGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
    }
    function Vc(a, b) {
        K.call(this);
        this.type = "DodecahedronGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
        this.fromBufferGeometry(new ec(a, b));
        this.mergeVertices();
    }
    function ec(a, b) {
        var c = (1 + Math.sqrt(5)) / 2, d = 1 / c;
        la.call(this, [
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            0,
            -d,
            -c,
            0,
            -d,
            c,
            0,
            d,
            -c,
            0,
            d,
            c,
            -d,
            -c,
            0,
            -d,
            c,
            0,
            d,
            -c,
            0,
            d,
            c,
            0,
            -c,
            0,
            -d,
            c,
            0,
            -d,
            -c,
            0,
            d,
            c,
            0,
            d
        ], [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ], a, b);
        this.type = "DodecahedronBufferGeometry";
        this.parameters = {
            radius: a,
            detail: b
        };
    }
    function Wc(a, b, c, d, e, f) {
        K.call(this);
        this.type = "TubeGeometry";
        this.parameters = {
            path: a,
            tubularSegments: b,
            radius: c,
            radialSegments: d,
            closed: e
        };
        void 0 !== f && console.warn("THREE.TubeGeometry: taper has been removed.");
        a = new Cb(a, b, c, d, e);
        this.tangents = a.tangents;
        this.normals = a.normals;
        this.binormals = a.binormals;
        this.fromBufferGeometry(a);
        this.mergeVertices();
    }
    function Cb(a, b, c, d, e) {
        function f(e) {
            q = a.getPointAt(e / b, q);
            var f = g.normals[e];
            e = g.binormals[e];
            for(k = 0; k <= d; k++){
                var m = k / d * Math.PI * 2, p = Math.sin(m);
                m = -Math.cos(m);
                l.x = m * f.x + p * e.x;
                l.y = m * f.y + p * e.y;
                l.z = m * f.z + p * e.z;
                l.normalize();
                r.push(l.x, l.y, l.z);
                h.x = q.x + c * l.x;
                h.y = q.y + c * l.y;
                h.z = q.z + c * l.z;
                t.push(h.x, h.y, h.z);
            }
        }
        B.call(this);
        this.type = "TubeBufferGeometry";
        this.parameters = {
            path: a,
            tubularSegments: b,
            radius: c,
            radialSegments: d,
            closed: e
        };
        b = b || 64;
        c = c || 1;
        d = d || 8;
        e = e || !1;
        var g = a.computeFrenetFrames(b, e);
        this.tangents = g.tangents;
        this.normals = g.normals;
        this.binormals = g.binormals;
        var h = new n, l = new n, m = new C, q = new n, p, k, t = [], r = [], u = [], w = [];
        for(p = 0; p < b; p++)f(p);
        f(!1 === e ? b : 0);
        for(p = 0; p <= b; p++)for(k = 0; k <= d; k++)m.x = p / b, m.y = k / d, u.push(m.x, m.y);
        (function() {
            for(k = 1; k <= b; k++)for(p = 1; p <= d; p++){
                var a = (d + 1) * k + (p - 1), c = (d + 1) * k + p, e = (d + 1) * (k - 1) + p;
                w.push((d + 1) * (k - 1) + (p - 1), a, e);
                w.push(a, c, e);
            }
        })();
        this.setIndex(w);
        this.addAttribute("position", new E(t, 3));
        this.addAttribute("normal", new E(r, 3));
        this.addAttribute("uv", new E(u, 2));
    }
    function Xc(a, b, c, d, e, f, g) {
        K.call(this);
        this.type = "TorusKnotGeometry";
        this.parameters = {
            radius: a,
            tube: b,
            tubularSegments: c,
            radialSegments: d,
            p: e,
            q: f
        };
        void 0 !== g && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
        this.fromBufferGeometry(new fc(a, b, c, d, e, f));
        this.mergeVertices();
    }
    function fc(a, b, c, d, e, f) {
        function g(a, b, c, d, e) {
            var f = Math.sin(a);
            b = c / b * a;
            c = Math.cos(b);
            e.x = d * (2 + c) * .5 * Math.cos(a);
            e.y = d * (2 + c) * f * .5;
            e.z = d * Math.sin(b) * .5;
        }
        B.call(this);
        this.type = "TorusKnotBufferGeometry";
        this.parameters = {
            radius: a,
            tube: b,
            tubularSegments: c,
            radialSegments: d,
            p: e,
            q: f
        };
        a = a || 1;
        b = b || .4;
        c = Math.floor(c) || 64;
        d = Math.floor(d) || 8;
        e = e || 2;
        f = f || 3;
        var h = [], l = [], m = [], q = [], p, k = new n, t = new n, r = new n, u = new n, w = new n, z = new n, x = new n;
        for(p = 0; p <= c; ++p){
            var y = p / c * e * Math.PI * 2;
            g(y, e, f, a, r);
            g(y + .01, e, f, a, u);
            z.subVectors(u, r);
            x.addVectors(u, r);
            w.crossVectors(z, x);
            x.crossVectors(w, z);
            w.normalize();
            x.normalize();
            for(y = 0; y <= d; ++y){
                var F = y / d * Math.PI * 2, G = -b * Math.cos(F);
                F = b * Math.sin(F);
                k.x = r.x + (G * x.x + F * w.x);
                k.y = r.y + (G * x.y + F * w.y);
                k.z = r.z + (G * x.z + F * w.z);
                l.push(k.x, k.y, k.z);
                t.subVectors(k, r).normalize();
                m.push(t.x, t.y, t.z);
                q.push(p / c);
                q.push(y / d);
            }
        }
        for(y = 1; y <= c; y++)for(p = 1; p <= d; p++)a = (d + 1) * y + (p - 1), b = (d + 1) * y + p, e = (d + 1) * (y - 1) + p, h.push((d + 1) * (y - 1) + (p - 1), a, e), h.push(a, b, e);
        this.setIndex(h);
        this.addAttribute("position", new E(l, 3));
        this.addAttribute("normal", new E(m, 3));
        this.addAttribute("uv", new E(q, 2));
    }
    function Yc(a, b, c, d, e) {
        K.call(this);
        this.type = "TorusGeometry";
        this.parameters = {
            radius: a,
            tube: b,
            radialSegments: c,
            tubularSegments: d,
            arc: e
        };
        this.fromBufferGeometry(new gc(a, b, c, d, e));
        this.mergeVertices();
    }
    function gc(a, b, c, d, e) {
        B.call(this);
        this.type = "TorusBufferGeometry";
        this.parameters = {
            radius: a,
            tube: b,
            radialSegments: c,
            tubularSegments: d,
            arc: e
        };
        a = a || 1;
        b = b || .4;
        c = Math.floor(c) || 8;
        d = Math.floor(d) || 6;
        e = e || 2 * Math.PI;
        var f = [], g = [], h = [], l = [], m = new n, q = new n, p = new n, k, t;
        for(k = 0; k <= c; k++)for(t = 0; t <= d; t++){
            var r = t / d * e, u = k / c * Math.PI * 2;
            q.x = (a + b * Math.cos(u)) * Math.cos(r);
            q.y = (a + b * Math.cos(u)) * Math.sin(r);
            q.z = b * Math.sin(u);
            g.push(q.x, q.y, q.z);
            m.x = a * Math.cos(r);
            m.y = a * Math.sin(r);
            p.subVectors(q, m).normalize();
            h.push(p.x, p.y, p.z);
            l.push(t / d);
            l.push(k / c);
        }
        for(k = 1; k <= c; k++)for(t = 1; t <= d; t++)a = (d + 1) * (k - 1) + t - 1, b = (d + 1) * (k - 1) + t, e = (d + 1) * k + t, f.push((d + 1) * k + t - 1, a, e), f.push(a, b, e);
        this.setIndex(f);
        this.addAttribute("position", new E(g, 3));
        this.addAttribute("normal", new E(h, 3));
        this.addAttribute("uv", new E(l, 2));
    }
    function zf(a, b, c, d, e) {
        for(var f, g = 0, h = b, l = c - d; h < c; h += d)g += (a[l] - a[h]) * (a[h + 1] + a[l + 1]), l = h;
        if (e === 0 < g) for(e = b; e < c; e += d)f = Af(e, a[e], a[e + 1], f);
        else for(e = c - d; e >= b; e -= d)f = Af(e, a[e], a[e + 1], f);
        f && Db(f, f.next) && (Zc(f), f = f.next);
        return f;
    }
    function $c(a, b) {
        if (!a) return a;
        b || (b = a);
        do {
            var c = !1;
            if (a.steiner || !Db(a, a.next) && 0 !== va(a.prev, a, a.next)) a = a.next;
            else {
                Zc(a);
                a = b = a.prev;
                if (a === a.next) break;
                c = !0;
            }
        }while (c || a !== b)
        return b;
    }
    function ad(a, b, c, d, e, f, g) {
        if (a) {
            if (!g && f) {
                var h = a, l = h;
                do null === l.z && (l.z = me(l.x, l.y, d, e, f)), l.prevZ = l.prev, l = l.nextZ = l.next;
                while (l !== h)
                l.prevZ.nextZ = null;
                l.prevZ = null;
                h = l;
                var m, q, p, k, t = 1;
                do {
                    l = h;
                    var r = h = null;
                    for(q = 0; l;){
                        q++;
                        var n = l;
                        for(m = p = 0; m < t && (p++, n = n.nextZ, n); m++);
                        for(k = t; 0 < p || 0 < k && n;)0 !== p && (0 === k || !n || l.z <= n.z) ? (m = l, l = l.nextZ, p--) : (m = n, n = n.nextZ, k--), r ? r.nextZ = m : h = m, m.prevZ = r, r = m;
                        l = n;
                    }
                    r.nextZ = null;
                    t *= 2;
                }while (1 < q)
            }
            for(h = a; a.prev !== a.next;){
                l = a.prev;
                n = a.next;
                if (f) a: {
                    r = a;
                    k = d;
                    var w = e, z = f;
                    q = r.prev;
                    p = r;
                    t = r.next;
                    if (0 <= va(q, p, t)) r = !1;
                    else {
                        var x = q.x > p.x ? q.x > t.x ? q.x : t.x : p.x > t.x ? p.x : t.x, y = q.y > p.y ? q.y > t.y ? q.y : t.y : p.y > t.y ? p.y : t.y;
                        m = me(q.x < p.x ? q.x < t.x ? q.x : t.x : p.x < t.x ? p.x : t.x, q.y < p.y ? q.y < t.y ? q.y : t.y : p.y < t.y ? p.y : t.y, k, w, z);
                        k = me(x, y, k, w, z);
                        for(w = r.nextZ; w && w.z <= k;){
                            if (w !== r.prev && w !== r.next && Fd(q.x, q.y, p.x, p.y, t.x, t.y, w.x, w.y) && 0 <= va(w.prev, w, w.next)) {
                                r = !1;
                                break a;
                            }
                            w = w.nextZ;
                        }
                        for(w = r.prevZ; w && w.z >= m;){
                            if (w !== r.prev && w !== r.next && Fd(q.x, q.y, p.x, p.y, t.x, t.y, w.x, w.y) && 0 <= va(w.prev, w, w.next)) {
                                r = !1;
                                break a;
                            }
                            w = w.prevZ;
                        }
                        r = !0;
                    }
                }
                else a: if (r = a, q = r.prev, p = r, t = r.next, 0 <= va(q, p, t)) r = !1;
                else {
                    for(m = r.next.next; m !== r.prev;){
                        if (Fd(q.x, q.y, p.x, p.y, t.x, t.y, m.x, m.y) && 0 <= va(m.prev, m, m.next)) {
                            r = !1;
                            break a;
                        }
                        m = m.next;
                    }
                    r = !0;
                }
                if (r) b.push(l.i / c), b.push(a.i / c), b.push(n.i / c), Zc(a), h = a = n.next;
                else if (a = n, a === h) {
                    if (!g) ad($c(a), b, c, d, e, f, 1);
                    else if (1 === g) {
                        g = b;
                        h = c;
                        l = a;
                        do n = l.prev, r = l.next.next, !Db(n, r) && Bf(n, l, l.next, r) && bd(n, r) && bd(r, n) && (g.push(n.i / h), g.push(l.i / h), g.push(r.i / h), Zc(l), Zc(l.next), l = a = r), l = l.next;
                        while (l !== a)
                        a = l;
                        ad(a, b, c, d, e, f, 2);
                    } else if (2 === g) a: {
                        g = a;
                        do {
                            for(h = g.next.next; h !== g.prev;){
                                if (l = g.i !== h.i) {
                                    l = g;
                                    n = h;
                                    if (r = l.next.i !== n.i && l.prev.i !== n.i) {
                                        b: {
                                            r = l;
                                            do {
                                                if (r.i !== l.i && r.next.i !== l.i && r.i !== n.i && r.next.i !== n.i && Bf(r, r.next, l, n)) {
                                                    r = !0;
                                                    break b;
                                                }
                                                r = r.next;
                                            }while (r !== l)
                                            r = !1;
                                        }
                                        r = !r;
                                    }
                                    if (r = r && bd(l, n) && bd(n, l)) {
                                        r = l;
                                        q = !1;
                                        p = (l.x + n.x) / 2;
                                        n = (l.y + n.y) / 2;
                                        do r.y > n !== r.next.y > n && r.next.y !== r.y && p < (r.next.x - r.x) * (n - r.y) / (r.next.y - r.y) + r.x && (q = !q), r = r.next;
                                        while (r !== l)
                                        r = q;
                                    }
                                    l = r;
                                }
                                if (l) {
                                    a = Cf(g, h);
                                    g = $c(g, g.next);
                                    a = $c(a, a.next);
                                    ad(g, b, c, d, e, f);
                                    ad(a, b, c, d, e, f);
                                    break a;
                                }
                                h = h.next;
                            }
                            g = g.next;
                        }while (g !== a)
                    }
                    break;
                }
            }
        }
    }
    function hh(a, b) {
        return a.x - b.x;
    }
    function ih(a, b) {
        var c = b, d = a.x, e = a.y, f = -Infinity;
        do {
            if (e <= c.y && e >= c.next.y && c.next.y !== c.y) {
                var g = c.x + (e - c.y) * (c.next.x - c.x) / (c.next.y - c.y);
                if (g <= d && g > f) {
                    f = g;
                    if (g === d) {
                        if (e === c.y) return c;
                        if (e === c.next.y) return c.next;
                    }
                    var h = c.x < c.next.x ? c : c.next;
                }
            }
            c = c.next;
        }while (c !== b)
        if (!h) return null;
        if (d === f) return h.prev;
        b = h;
        g = h.x;
        var l = h.y, m = Infinity;
        for(c = h.next; c !== b;){
            if (d >= c.x && c.x >= g && d !== c.x && Fd(e < l ? d : f, e, g, l, e < l ? f : d, e, c.x, c.y)) {
                var q = Math.abs(e - c.y) / (d - c.x);
                (q < m || q === m && c.x > h.x) && bd(c, a) && (h = c, m = q);
            }
            c = c.next;
        }
        return h;
    }
    function me(a, b, c, d, e) {
        a = 32767 * (a - c) * e;
        b = 32767 * (b - d) * e;
        a = (a | a << 8) & 16711935;
        a = (a | a << 4) & 252645135;
        a = (a | a << 2) & 858993459;
        b = (b | b << 8) & 16711935;
        b = (b | b << 4) & 252645135;
        b = (b | b << 2) & 858993459;
        return (a | a << 1) & 1431655765 | ((b | b << 1) & 1431655765) << 1;
    }
    function jh(a) {
        var b = a, c = a;
        do b.x < c.x && (c = b), b = b.next;
        while (b !== a)
        return c;
    }
    function Fd(a, b, c, d, e, f, g, h) {
        return 0 <= (e - g) * (b - h) - (a - g) * (f - h) && 0 <= (a - g) * (d - h) - (c - g) * (b - h) && 0 <= (c - g) * (f - h) - (e - g) * (d - h);
    }
    function va(a, b, c) {
        return (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
    }
    function Db(a, b) {
        return a.x === b.x && a.y === b.y;
    }
    function Bf(a, b, c, d) {
        return Db(a, b) && Db(c, d) || Db(a, d) && Db(c, b) ? !0 : 0 < va(a, b, c) !== 0 < va(a, b, d) && 0 < va(c, d, a) !== 0 < va(c, d, b);
    }
    function bd(a, b) {
        return 0 > va(a.prev, a, a.next) ? 0 <= va(a, b, a.next) && 0 <= va(a, a.prev, b) : 0 > va(a, b, a.prev) || 0 > va(a, a.next, b);
    }
    function Cf(a, b) {
        var c = new ne(a.i, a.x, a.y), d = new ne(b.i, b.x, b.y), e = a.next, f = b.prev;
        a.next = b;
        b.prev = a;
        c.next = e;
        e.prev = c;
        d.next = c;
        c.prev = d;
        f.next = d;
        d.prev = f;
        return d;
    }
    function Af(a, b, c, d) {
        a = new ne(a, b, c);
        d ? (a.next = d.next, a.prev = d, d.next.prev = a, d.next = a) : (a.prev = a, a.next = a);
        return a;
    }
    function Zc(a) {
        a.next.prev = a.prev;
        a.prev.next = a.next;
        a.prevZ && (a.prevZ.nextZ = a.nextZ);
        a.nextZ && (a.nextZ.prevZ = a.prevZ);
    }
    function ne(a, b, c) {
        this.i = a;
        this.x = b;
        this.y = c;
        this.nextZ = this.prevZ = this.z = this.next = this.prev = null;
        this.steiner = !1;
    }
    function Df(a) {
        var b = a.length;
        2 < b && a[b - 1].equals(a[0]) && a.pop();
    }
    function Ef(a, b) {
        for(var c = 0; c < b.length; c++)a.push(b[c].x), a.push(b[c].y);
    }
    function Eb(a, b) {
        K.call(this);
        this.type = "ExtrudeGeometry";
        this.parameters = {
            shapes: a,
            options: b
        };
        this.fromBufferGeometry(new Ya(a, b));
        this.mergeVertices();
    }
    function Ya(a, b) {
        function c(a) {
            function c(a, b, c) {
                b || console.error("THREE.ExtrudeGeometry: vec does not exist");
                return b.clone().multiplyScalar(c).add(a);
            }
            function g(a, b, c) {
                var d = a.x - b.x;
                var e = a.y - b.y;
                var f = c.x - a.x;
                var g = c.y - a.y, h = d * d + e * e;
                if (Math.abs(d * g - e * f) > Number.EPSILON) {
                    var l = Math.sqrt(h), m = Math.sqrt(f * f + g * g);
                    h = b.x - e / l;
                    b = b.y + d / l;
                    g = ((c.x - g / m - h) * g - (c.y + f / m - b) * f) / (d * g - e * f);
                    f = h + d * g - a.x;
                    d = b + e * g - a.y;
                    e = f * f + d * d;
                    if (2 >= e) return new C(f, d);
                    e = Math.sqrt(e / 2);
                } else a = !1, d > Number.EPSILON ? f > Number.EPSILON && (a = !0) : d < -Number.EPSILON ? f < -Number.EPSILON && (a = !0) : Math.sign(e) === Math.sign(g) && (a = !0), a ? (f = -e, e = Math.sqrt(h)) : (f = d, d = e, e = Math.sqrt(h / 2));
                return new C(f / e, d / e);
            }
            function h(a, b) {
                for(L = a.length; 0 <= --L;){
                    var c = L;
                    var f = L - 1;
                    0 > f && (f = a.length - 1);
                    var g, h = x + 2 * I;
                    for(g = 0; g < h; g++){
                        var l = Y * g, m = Y * (g + 1), q = b + f + l, p = b + f + m;
                        m = b + c + m;
                        r(b + c + l);
                        r(q);
                        r(m);
                        r(q);
                        r(p);
                        r(m);
                        l = e.length / 3;
                        l = E.generateSideWallUV(d, e, l - 6, l - 3, l - 2, l - 1);
                        u(l[0]);
                        u(l[1]);
                        u(l[3]);
                        u(l[1]);
                        u(l[2]);
                        u(l[3]);
                    }
                }
            }
            function l(a, b, c) {
                w.push(a);
                w.push(b);
                w.push(c);
            }
            function k(a, b, c) {
                r(a);
                r(b);
                r(c);
                a = e.length / 3;
                a = E.generateTopUV(d, e, a - 3, a - 2, a - 1);
                u(a[0]);
                u(a[1]);
                u(a[2]);
            }
            function r(a) {
                e.push(w[3 * a]);
                e.push(w[3 * a + 1]);
                e.push(w[3 * a + 2]);
            }
            function u(a) {
                f.push(a.x);
                f.push(a.y);
            }
            var w = [], z = void 0 !== b.curveSegments ? b.curveSegments : 12, x = void 0 !== b.steps ? b.steps : 1, y = void 0 !== b.depth ? b.depth : 100, F = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0, G = void 0 !== b.bevelThickness ? b.bevelThickness : 6, B = void 0 !== b.bevelSize ? b.bevelSize : G - 2, A = void 0 !== b.bevelOffset ? b.bevelOffset : 0, I = void 0 !== b.bevelSegments ? b.bevelSegments : 3, D = b.extrudePath, E = void 0 !== b.UVGenerator ? b.UVGenerator : kh;
            void 0 !== b.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), y = b.amount);
            var J = !1;
            if (D) {
                var M = D.getSpacedPoints(x);
                J = !0;
                F = !1;
                var P = D.computeFrenetFrames(x, !1);
                var Q = new n;
                var ha = new n;
                var S = new n;
            }
            F || (A = B = G = I = 0);
            var K;
            z = a.extractPoints(z);
            a = z.shape;
            var O = z.holes;
            if (!db.isClockWise(a)) {
                a = a.reverse();
                var H = 0;
                for(K = O.length; H < K; H++){
                    var R = O[H];
                    db.isClockWise(R) && (O[H] = R.reverse());
                }
            }
            var X = db.triangulateShape(a, O), U = a;
            H = 0;
            for(K = O.length; H < K; H++)R = O[H], a = a.concat(R);
            var T, Y = a.length, V, ba = X.length;
            z = [];
            var L = 0;
            var Z = U.length;
            var W = Z - 1;
            for(T = L + 1; L < Z; L++, W++, T++)W === Z && (W = 0), T === Z && (T = 0), z[L] = g(U[L], U[W], U[T]);
            D = [];
            var ea = z.concat();
            H = 0;
            for(K = O.length; H < K; H++){
                R = O[H];
                var ca = [];
                L = 0;
                Z = R.length;
                W = Z - 1;
                for(T = L + 1; L < Z; L++, W++, T++)W === Z && (W = 0), T === Z && (T = 0), ca[L] = g(R[L], R[W], R[T]);
                D.push(ca);
                ea = ea.concat(ca);
            }
            for(W = 0; W < I; W++){
                Z = W / I;
                var da = G * Math.cos(Z * Math.PI / 2);
                T = B * Math.sin(Z * Math.PI / 2) + A;
                L = 0;
                for(Z = U.length; L < Z; L++){
                    var fa = c(U[L], z[L], T);
                    l(fa.x, fa.y, -da);
                }
                H = 0;
                for(K = O.length; H < K; H++)for(R = O[H], ca = D[H], L = 0, Z = R.length; L < Z; L++)fa = c(R[L], ca[L], T), l(fa.x, fa.y, -da);
            }
            T = B + A;
            for(L = 0; L < Y; L++)fa = F ? c(a[L], ea[L], T) : a[L], J ? (ha.copy(P.normals[0]).multiplyScalar(fa.x), Q.copy(P.binormals[0]).multiplyScalar(fa.y), S.copy(M[0]).add(ha).add(Q), l(S.x, S.y, S.z)) : l(fa.x, fa.y, 0);
            for(Z = 1; Z <= x; Z++)for(L = 0; L < Y; L++)fa = F ? c(a[L], ea[L], T) : a[L], J ? (ha.copy(P.normals[Z]).multiplyScalar(fa.x), Q.copy(P.binormals[Z]).multiplyScalar(fa.y), S.copy(M[Z]).add(ha).add(Q), l(S.x, S.y, S.z)) : l(fa.x, fa.y, y / x * Z);
            for(W = I - 1; 0 <= W; W--){
                Z = W / I;
                da = G * Math.cos(Z * Math.PI / 2);
                T = B * Math.sin(Z * Math.PI / 2) + A;
                L = 0;
                for(Z = U.length; L < Z; L++)fa = c(U[L], z[L], T), l(fa.x, fa.y, y + da);
                H = 0;
                for(K = O.length; H < K; H++)for(R = O[H], ca = D[H], L = 0, Z = R.length; L < Z; L++)fa = c(R[L], ca[L], T), J ? l(fa.x, fa.y + M[x - 1].y, M[x - 1].x + da) : l(fa.x, fa.y, y + da);
            }
            (function() {
                var a = e.length / 3;
                if (F) {
                    var b = 0 * Y;
                    for(L = 0; L < ba; L++)V = X[L], k(V[2] + b, V[1] + b, V[0] + b);
                    b = Y * (x + 2 * I);
                    for(L = 0; L < ba; L++)V = X[L], k(V[0] + b, V[1] + b, V[2] + b);
                } else {
                    for(L = 0; L < ba; L++)V = X[L], k(V[2], V[1], V[0]);
                    for(L = 0; L < ba; L++)V = X[L], k(V[0] + Y * x, V[1] + Y * x, V[2] + Y * x);
                }
                d.addGroup(a, e.length / 3 - a, 0);
            })();
            (function() {
                var a = e.length / 3, b = 0;
                h(U, b);
                b += U.length;
                H = 0;
                for(K = O.length; H < K; H++)R = O[H], h(R, b), b += R.length;
                d.addGroup(a, e.length / 3 - a, 1);
            })();
        }
        B.call(this);
        this.type = "ExtrudeBufferGeometry";
        this.parameters = {
            shapes: a,
            options: b
        };
        a = Array.isArray(a) ? a : [
            a
        ];
        for(var d = this, e = [], f = [], g = 0, h = a.length; g < h; g++)c(a[g]);
        this.addAttribute("position", new E(e, 3));
        this.addAttribute("uv", new E(f, 2));
        this.computeVertexNormals();
    }
    function Ff(a, b, c) {
        c.shapes = [];
        if (Array.isArray(a)) for(var d = 0, e = a.length; d < e; d++)c.shapes.push(a[d].uuid);
        else c.shapes.push(a.uuid);
        void 0 !== b.extrudePath && (c.options.extrudePath = b.extrudePath.toJSON());
        return c;
    }
    function cd(a, b) {
        K.call(this);
        this.type = "TextGeometry";
        this.parameters = {
            text: a,
            parameters: b
        };
        this.fromBufferGeometry(new hc(a, b));
        this.mergeVertices();
    }
    function hc(a, b) {
        b = b || {};
        var c = b.font;
        if (!c || !c.isFont) return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new K;
        a = c.generateShapes(a, b.size);
        b.depth = void 0 !== b.height ? b.height : 50;
        void 0 === b.bevelThickness && (b.bevelThickness = 10);
        void 0 === b.bevelSize && (b.bevelSize = 8);
        void 0 === b.bevelEnabled && (b.bevelEnabled = !1);
        Ya.call(this, a, b);
        this.type = "TextBufferGeometry";
    }
    function dd(a, b, c, d, e, f, g) {
        K.call(this);
        this.type = "SphereGeometry";
        this.parameters = {
            radius: a,
            widthSegments: b,
            heightSegments: c,
            phiStart: d,
            phiLength: e,
            thetaStart: f,
            thetaLength: g
        };
        this.fromBufferGeometry(new ob(a, b, c, d, e, f, g));
        this.mergeVertices();
    }
    function ob(a, b, c, d, e, f, g) {
        B.call(this);
        this.type = "SphereBufferGeometry";
        this.parameters = {
            radius: a,
            widthSegments: b,
            heightSegments: c,
            phiStart: d,
            phiLength: e,
            thetaStart: f,
            thetaLength: g
        };
        a = a || 1;
        b = Math.max(3, Math.floor(b) || 8);
        c = Math.max(2, Math.floor(c) || 6);
        d = void 0 !== d ? d : 0;
        e = void 0 !== e ? e : 2 * Math.PI;
        f = void 0 !== f ? f : 0;
        g = void 0 !== g ? g : Math.PI;
        var h = f + g, l, m, q = 0, p = [], k = new n, t = new n, r = [], u = [], w = [], z = [];
        for(m = 0; m <= c; m++){
            var x = [], y = m / c, F = 0 == m ? .5 / b : m == c ? -.5 / b : 0;
            for(l = 0; l <= b; l++){
                var G = l / b;
                k.x = -a * Math.cos(d + G * e) * Math.sin(f + y * g);
                k.y = a * Math.cos(f + y * g);
                k.z = a * Math.sin(d + G * e) * Math.sin(f + y * g);
                u.push(k.x, k.y, k.z);
                t.copy(k).normalize();
                w.push(t.x, t.y, t.z);
                z.push(G + F, 1 - y);
                x.push(q++);
            }
            p.push(x);
        }
        for(m = 0; m < c; m++)for(l = 0; l < b; l++)a = p[m][l + 1], d = p[m][l], e = p[m + 1][l], g = p[m + 1][l + 1], (0 !== m || 0 < f) && r.push(a, d, g), (m !== c - 1 || h < Math.PI) && r.push(d, e, g);
        this.setIndex(r);
        this.addAttribute("position", new E(u, 3));
        this.addAttribute("normal", new E(w, 3));
        this.addAttribute("uv", new E(z, 2));
    }
    function ed(a, b, c, d, e, f) {
        K.call(this);
        this.type = "RingGeometry";
        this.parameters = {
            innerRadius: a,
            outerRadius: b,
            thetaSegments: c,
            phiSegments: d,
            thetaStart: e,
            thetaLength: f
        };
        this.fromBufferGeometry(new ic(a, b, c, d, e, f));
        this.mergeVertices();
    }
    function ic(a, b, c, d, e, f) {
        B.call(this);
        this.type = "RingBufferGeometry";
        this.parameters = {
            innerRadius: a,
            outerRadius: b,
            thetaSegments: c,
            phiSegments: d,
            thetaStart: e,
            thetaLength: f
        };
        a = a || .5;
        b = b || 1;
        e = void 0 !== e ? e : 0;
        f = void 0 !== f ? f : 2 * Math.PI;
        c = void 0 !== c ? Math.max(3, c) : 8;
        d = void 0 !== d ? Math.max(1, d) : 1;
        var g = [], h = [], l = [], m = [], q = a, p = (b - a) / d, k = new n, t = new C, r, u;
        for(r = 0; r <= d; r++){
            for(u = 0; u <= c; u++)a = e + u / c * f, k.x = q * Math.cos(a), k.y = q * Math.sin(a), h.push(k.x, k.y, k.z), l.push(0, 0, 1), t.x = (k.x / b + 1) / 2, t.y = (k.y / b + 1) / 2, m.push(t.x, t.y);
            q += p;
        }
        for(r = 0; r < d; r++)for(b = r * (c + 1), u = 0; u < c; u++)a = u + b, e = a + c + 1, f = a + c + 2, q = a + 1, g.push(a, e, q), g.push(e, f, q);
        this.setIndex(g);
        this.addAttribute("position", new E(h, 3));
        this.addAttribute("normal", new E(l, 3));
        this.addAttribute("uv", new E(m, 2));
    }
    function fd(a, b, c, d) {
        K.call(this);
        this.type = "LatheGeometry";
        this.parameters = {
            points: a,
            segments: b,
            phiStart: c,
            phiLength: d
        };
        this.fromBufferGeometry(new jc(a, b, c, d));
        this.mergeVertices();
    }
    function jc(a, b, c, d) {
        B.call(this);
        this.type = "LatheBufferGeometry";
        this.parameters = {
            points: a,
            segments: b,
            phiStart: c,
            phiLength: d
        };
        b = Math.floor(b) || 12;
        c = c || 0;
        d = d || 2 * Math.PI;
        d = O.clamp(d, 0, 2 * Math.PI);
        var e = [], f = [], g = [], h = 1 / b, l = new n, m = new C, q;
        for(q = 0; q <= b; q++){
            var k = c + q * h * d;
            var v = Math.sin(k), t = Math.cos(k);
            for(k = 0; k <= a.length - 1; k++)l.x = a[k].x * v, l.y = a[k].y, l.z = a[k].x * t, f.push(l.x, l.y, l.z), m.x = q / b, m.y = k / (a.length - 1), g.push(m.x, m.y);
        }
        for(q = 0; q < b; q++)for(k = 0; k < a.length - 1; k++)c = k + q * a.length, h = c + a.length, l = c + a.length + 1, m = c + 1, e.push(c, h, m), e.push(h, l, m);
        this.setIndex(e);
        this.addAttribute("position", new E(f, 3));
        this.addAttribute("uv", new E(g, 2));
        this.computeVertexNormals();
        if (d === 2 * Math.PI) for(d = this.attributes.normal.array, e = new n, f = new n, g = new n, c = b * a.length * 3, k = q = 0; q < a.length; q++, k += 3)e.x = d[k + 0], e.y = d[k + 1], e.z = d[k + 2], f.x = d[c + k + 0], f.y = d[c + k + 1], f.z = d[c + k + 2], g.addVectors(e, f).normalize(), d[k + 0] = d[c + k + 0] = g.x, d[k + 1] = d[c + k + 1] = g.y, d[k + 2] = d[c + k + 2] = g.z;
    }
    function Fb(a, b) {
        K.call(this);
        this.type = "ShapeGeometry";
        "object" === typeof b && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), b = b.curveSegments);
        this.parameters = {
            shapes: a,
            curveSegments: b
        };
        this.fromBufferGeometry(new Gb(a, b));
        this.mergeVertices();
    }
    function Gb(a, b) {
        function c(a) {
            var c, h = e.length / 3;
            a = a.extractPoints(b);
            var m = a.shape, q = a.holes;
            !1 === db.isClockWise(m) && (m = m.reverse());
            a = 0;
            for(c = q.length; a < c; a++){
                var k = q[a];
                !0 === db.isClockWise(k) && (q[a] = k.reverse());
            }
            var n = db.triangulateShape(m, q);
            a = 0;
            for(c = q.length; a < c; a++)k = q[a], m = m.concat(k);
            a = 0;
            for(c = m.length; a < c; a++)k = m[a], e.push(k.x, k.y, 0), f.push(0, 0, 1), g.push(k.x, k.y);
            a = 0;
            for(c = n.length; a < c; a++)m = n[a], d.push(m[0] + h, m[1] + h, m[2] + h), l += 3;
        }
        B.call(this);
        this.type = "ShapeBufferGeometry";
        this.parameters = {
            shapes: a,
            curveSegments: b
        };
        b = b || 12;
        var d = [], e = [], f = [], g = [], h = 0, l = 0;
        if (!1 === Array.isArray(a)) c(a);
        else for(var m = 0; m < a.length; m++)c(a[m]), this.addGroup(h, l, m), h += l, l = 0;
        this.setIndex(d);
        this.addAttribute("position", new E(e, 3));
        this.addAttribute("normal", new E(f, 3));
        this.addAttribute("uv", new E(g, 2));
    }
    function Gf(a, b) {
        b.shapes = [];
        if (Array.isArray(a)) for(var c = 0, d = a.length; c < d; c++)b.shapes.push(a[c].uuid);
        else b.shapes.push(a.uuid);
        return b;
    }
    function kc(a, b) {
        B.call(this);
        this.type = "EdgesGeometry";
        this.parameters = {
            thresholdAngle: b
        };
        var c = [];
        b = Math.cos(O.DEG2RAD * (void 0 !== b ? b : 1));
        var d = [
            0,
            0
        ], e = {}, f = [
            "a",
            "b",
            "c"
        ];
        if (a.isBufferGeometry) {
            var g = new K;
            g.fromBufferGeometry(a);
        } else g = a.clone();
        g.mergeVertices();
        g.computeFaceNormals();
        a = g.vertices;
        g = g.faces;
        for(var h = 0, l = g.length; h < l; h++)for(var m = g[h], q = 0; 3 > q; q++){
            var k = m[f[q]];
            var n = m[f[(q + 1) % 3]];
            d[0] = Math.min(k, n);
            d[1] = Math.max(k, n);
            k = d[0] + "," + d[1];
            void 0 === e[k] ? e[k] = {
                index1: d[0],
                index2: d[1],
                face1: h,
                face2: void 0
            } : e[k].face2 = h;
        }
        for(k in e)if (d = e[k], void 0 === d.face2 || g[d.face1].normal.dot(g[d.face2].normal) <= b) f = a[d.index1], c.push(f.x, f.y, f.z), f = a[d.index2], c.push(f.x, f.y, f.z);
        this.addAttribute("position", new E(c, 3));
    }
    function Hb(a, b, c, d, e, f, g, h) {
        K.call(this);
        this.type = "CylinderGeometry";
        this.parameters = {
            radiusTop: a,
            radiusBottom: b,
            height: c,
            radialSegments: d,
            heightSegments: e,
            openEnded: f,
            thetaStart: g,
            thetaLength: h
        };
        this.fromBufferGeometry(new eb(a, b, c, d, e, f, g, h));
        this.mergeVertices();
    }
    function eb(a, b, c, d, e, f, g, h) {
        function l(c) {
            var e, f = new C, l = new n, p = 0, u = !0 === c ? a : b, x = !0 === c ? 1 : -1;
            var B = r;
            for(e = 1; e <= d; e++)k.push(0, w * x, 0), v.push(0, x, 0), t.push(.5, .5), r++;
            var D = r;
            for(e = 0; e <= d; e++){
                var A = e / d * h + g, E = Math.cos(A);
                A = Math.sin(A);
                l.x = u * A;
                l.y = w * x;
                l.z = u * E;
                k.push(l.x, l.y, l.z);
                v.push(0, x, 0);
                f.x = .5 * E + .5;
                f.y = .5 * A * x + .5;
                t.push(f.x, f.y);
                r++;
            }
            for(e = 0; e < d; e++)f = B + e, l = D + e, !0 === c ? q.push(l, l + 1, f) : q.push(l + 1, l, f), p += 3;
            m.addGroup(z, p, !0 === c ? 1 : 2);
            z += p;
        }
        B.call(this);
        this.type = "CylinderBufferGeometry";
        this.parameters = {
            radiusTop: a,
            radiusBottom: b,
            height: c,
            radialSegments: d,
            heightSegments: e,
            openEnded: f,
            thetaStart: g,
            thetaLength: h
        };
        var m = this;
        a = void 0 !== a ? a : 1;
        b = void 0 !== b ? b : 1;
        c = c || 1;
        d = Math.floor(d) || 8;
        e = Math.floor(e) || 1;
        f = void 0 !== f ? f : !1;
        g = void 0 !== g ? g : 0;
        h = void 0 !== h ? h : 2 * Math.PI;
        var q = [], k = [], v = [], t = [], r = 0, u = [], w = c / 2, z = 0;
        (function() {
            var f, l, p = new n, G = new n, C = 0, B = (b - a) / c;
            for(l = 0; l <= e; l++){
                var I = [], A = l / e, D = A * (b - a) + a;
                for(f = 0; f <= d; f++){
                    var E = f / d, H = E * h + g, J = Math.sin(H);
                    H = Math.cos(H);
                    G.x = D * J;
                    G.y = -A * c + w;
                    G.z = D * H;
                    k.push(G.x, G.y, G.z);
                    p.set(J, B, H).normalize();
                    v.push(p.x, p.y, p.z);
                    t.push(E, 1 - A);
                    I.push(r++);
                }
                u.push(I);
            }
            for(f = 0; f < d; f++)for(l = 0; l < e; l++)p = u[l + 1][f], G = u[l + 1][f + 1], B = u[l][f + 1], q.push(u[l][f], p, B), q.push(p, G, B), C += 6;
            m.addGroup(z, C, 0);
            z += C;
        })();
        !1 === f && (0 < a && l(!0), 0 < b && l(!1));
        this.setIndex(q);
        this.addAttribute("position", new E(k, 3));
        this.addAttribute("normal", new E(v, 3));
        this.addAttribute("uv", new E(t, 2));
    }
    function gd(a, b, c, d, e, f, g) {
        Hb.call(this, 0, a, b, c, d, e, f, g);
        this.type = "ConeGeometry";
        this.parameters = {
            radius: a,
            height: b,
            radialSegments: c,
            heightSegments: d,
            openEnded: e,
            thetaStart: f,
            thetaLength: g
        };
    }
    function hd(a, b, c, d, e, f, g) {
        eb.call(this, 0, a, b, c, d, e, f, g);
        this.type = "ConeBufferGeometry";
        this.parameters = {
            radius: a,
            height: b,
            radialSegments: c,
            heightSegments: d,
            openEnded: e,
            thetaStart: f,
            thetaLength: g
        };
    }
    function id(a, b, c, d) {
        K.call(this);
        this.type = "CircleGeometry";
        this.parameters = {
            radius: a,
            segments: b,
            thetaStart: c,
            thetaLength: d
        };
        this.fromBufferGeometry(new lc(a, b, c, d));
        this.mergeVertices();
    }
    function lc(a, b, c, d) {
        B.call(this);
        this.type = "CircleBufferGeometry";
        this.parameters = {
            radius: a,
            segments: b,
            thetaStart: c,
            thetaLength: d
        };
        a = a || 1;
        b = void 0 !== b ? Math.max(3, b) : 8;
        c = void 0 !== c ? c : 0;
        d = void 0 !== d ? d : 2 * Math.PI;
        var e = [], f = [], g = [], h = [], l, m = new n, q = new C;
        f.push(0, 0, 0);
        g.push(0, 0, 1);
        h.push(.5, .5);
        var k = 0;
        for(l = 3; k <= b; k++, l += 3){
            var v = c + k / b * d;
            m.x = a * Math.cos(v);
            m.y = a * Math.sin(v);
            f.push(m.x, m.y, m.z);
            g.push(0, 0, 1);
            q.x = (f[l] / a + 1) / 2;
            q.y = (f[l + 1] / a + 1) / 2;
            h.push(q.x, q.y);
        }
        for(l = 1; l <= b; l++)e.push(l, l + 1, 0);
        this.setIndex(e);
        this.addAttribute("position", new E(f, 3));
        this.addAttribute("normal", new E(g, 3));
        this.addAttribute("uv", new E(h, 2));
    }
    function Ib(a) {
        Q.call(this);
        this.type = "ShadowMaterial";
        this.color = new A(0);
        this.transparent = !0;
        this.setValues(a);
    }
    function mc(a) {
        ea.call(this, a);
        this.type = "RawShaderMaterial";
    }
    function Za(a) {
        Q.call(this);
        this.defines = {
            STANDARD: ""
        };
        this.type = "MeshStandardMaterial";
        this.color = new A(16777215);
        this.metalness = this.roughness = .5;
        this.lightMap = this.map = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new A(0);
        this.emissiveIntensity = 1;
        this.bumpMap = this.emissiveMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = 0;
        this.normalScale = new C(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null;
        this.envMapIntensity = 1;
        this.refractionRatio = .98;
        this.wireframe = !1;
        this.wireframeLinewidth = 1;
        this.wireframeLinejoin = this.wireframeLinecap = "round";
        this.morphNormals = this.morphTargets = this.skinning = !1;
        this.setValues(a);
    }
    function Jb(a) {
        Za.call(this);
        this.defines = {
            PHYSICAL: ""
        };
        this.type = "MeshPhysicalMaterial";
        this.reflectivity = .5;
        this.clearCoatRoughness = this.clearCoat = 0;
        this.setValues(a);
    }
    function Ja(a) {
        Q.call(this);
        this.type = "MeshPhongMaterial";
        this.color = new A(16777215);
        this.specular = new A(1118481);
        this.shininess = 30;
        this.lightMap = this.map = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new A(0);
        this.emissiveIntensity = 1;
        this.bumpMap = this.emissiveMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = 0;
        this.normalScale = new C(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.envMap = this.alphaMap = this.specularMap = null;
        this.combine = 0;
        this.reflectivity = 1;
        this.refractionRatio = .98;
        this.wireframe = !1;
        this.wireframeLinewidth = 1;
        this.wireframeLinejoin = this.wireframeLinecap = "round";
        this.morphNormals = this.morphTargets = this.skinning = !1;
        this.setValues(a);
    }
    function Kb(a) {
        Ja.call(this);
        this.defines = {
            TOON: ""
        };
        this.type = "MeshToonMaterial";
        this.gradientMap = null;
        this.setValues(a);
    }
    function Lb(a) {
        Q.call(this);
        this.type = "MeshNormalMaterial";
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = 0;
        this.normalScale = new C(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = !1;
        this.wireframeLinewidth = 1;
        this.morphNormals = this.morphTargets = this.skinning = this.lights = this.fog = !1;
        this.setValues(a);
    }
    function Mb(a) {
        Q.call(this);
        this.type = "MeshLambertMaterial";
        this.color = new A(16777215);
        this.lightMap = this.map = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new A(0);
        this.emissiveIntensity = 1;
        this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null;
        this.combine = 0;
        this.reflectivity = 1;
        this.refractionRatio = .98;
        this.wireframe = !1;
        this.wireframeLinewidth = 1;
        this.wireframeLinejoin = this.wireframeLinecap = "round";
        this.morphNormals = this.morphTargets = this.skinning = !1;
        this.setValues(a);
    }
    function Nb(a) {
        Q.call(this);
        this.defines = {
            MATCAP: ""
        };
        this.type = "MeshMatcapMaterial";
        this.color = new A(16777215);
        this.bumpMap = this.map = this.matcap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = 0;
        this.normalScale = new C(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.lights = this.morphNormals = this.morphTargets = this.skinning = !1;
        this.setValues(a);
    }
    function Ob(a) {
        U.call(this);
        this.type = "LineDashedMaterial";
        this.scale = 1;
        this.dashSize = 3;
        this.gapSize = 1;
        this.setValues(a);
    }
    function Da(a, b, c, d) {
        this.parameterPositions = a;
        this._cachedIndex = 0;
        this.resultBuffer = void 0 !== d ? d : new b.constructor(c);
        this.sampleValues = b;
        this.valueSize = c;
    }
    function Gd(a, b, c, d) {
        Da.call(this, a, b, c, d);
        this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0;
    }
    function jd(a, b, c, d) {
        Da.call(this, a, b, c, d);
    }
    function Hd(a, b, c, d) {
        Da.call(this, a, b, c, d);
    }
    function da(a, b, c, d) {
        if (void 0 === a) throw Error("THREE.KeyframeTrack: track name is undefined");
        if (void 0 === b || 0 === b.length) throw Error("THREE.KeyframeTrack: no keyframes in track named " + a);
        this.name = a;
        this.times = ba.convertArray(b, this.TimeBufferType);
        this.values = ba.convertArray(c, this.ValueBufferType);
        this.setInterpolation(d || this.DefaultInterpolation);
    }
    function Id(a, b, c) {
        da.call(this, a, b, c);
    }
    function Jd(a, b, c, d) {
        da.call(this, a, b, c, d);
    }
    function nc(a, b, c, d) {
        da.call(this, a, b, c, d);
    }
    function Kd(a, b, c, d) {
        Da.call(this, a, b, c, d);
    }
    function kd(a, b, c, d) {
        da.call(this, a, b, c, d);
    }
    function Ld(a, b, c, d) {
        da.call(this, a, b, c, d);
    }
    function oc(a, b, c, d) {
        da.call(this, a, b, c, d);
    }
    function Fa(a, b, c) {
        this.name = a;
        this.tracks = c;
        this.duration = void 0 !== b ? b : -1;
        this.uuid = O.generateUUID();
        0 > this.duration && this.resetDuration();
    }
    function lh(a) {
        switch(a.toLowerCase()){
            case "scalar":
            case "double":
            case "float":
            case "number":
            case "integer":
                return nc;
            case "vector":
            case "vector2":
            case "vector3":
            case "vector4":
                return oc;
            case "color":
                return Jd;
            case "quaternion":
                return kd;
            case "bool":
            case "boolean":
                return Id;
            case "string":
                return Ld;
        }
        throw Error("THREE.KeyframeTrack: Unsupported typeName: " + a);
    }
    function mh(a) {
        if (void 0 === a.type) throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
        var b = lh(a.type);
        if (void 0 === a.times) {
            var c = [], d = [];
            ba.flattenJSON(a.keys, c, d, "value");
            a.times = c;
            a.values = d;
        }
        return void 0 !== b.parse ? b.parse(a) : new b(a.name, a.times, a.values, a.interpolation);
    }
    function oe(a, b, c) {
        var d = this, e = !1, f = 0, g = 0, h = void 0;
        this.onStart = void 0;
        this.onLoad = a;
        this.onProgress = b;
        this.onError = c;
        this.itemStart = function(a) {
            g++;
            if (!1 === e && void 0 !== d.onStart) d.onStart(a, f, g);
            e = !0;
        };
        this.itemEnd = function(a) {
            f++;
            if (void 0 !== d.onProgress) d.onProgress(a, f, g);
            if (f === g && (e = !1, void 0 !== d.onLoad)) d.onLoad();
        };
        this.itemError = function(a) {
            if (void 0 !== d.onError) d.onError(a);
        };
        this.resolveURL = function(a) {
            return h ? h(a) : a;
        };
        this.setURLModifier = function(a) {
            h = a;
            return this;
        };
    }
    function Ka(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function Hf(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function If(a) {
        this.manager = void 0 !== a ? a : za;
        this._parser = null;
    }
    function pe(a) {
        this.manager = void 0 !== a ? a : za;
        this._parser = null;
    }
    function ld(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function qe(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function Md(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function M() {
        this.type = "Curve";
        this.arcLengthDivisions = 200;
    }
    function Ea(a, b, c, d, e, f, g, h) {
        M.call(this);
        this.type = "EllipseCurve";
        this.aX = a || 0;
        this.aY = b || 0;
        this.xRadius = c || 1;
        this.yRadius = d || 1;
        this.aStartAngle = e || 0;
        this.aEndAngle = f || 2 * Math.PI;
        this.aClockwise = g || !1;
        this.aRotation = h || 0;
    }
    function pc(a, b, c, d, e, f) {
        Ea.call(this, a, b, c, c, d, e, f);
        this.type = "ArcCurve";
    }
    function re() {
        var a = 0, b = 0, c = 0, d = 0;
        return {
            initCatmullRom: function(e, f, g, h, l) {
                e = l * (g - e);
                h = l * (h - f);
                a = f;
                b = e;
                c = -3 * f + 3 * g - 2 * e - h;
                d = 2 * f - 2 * g + e + h;
            },
            initNonuniformCatmullRom: function(e, f, g, h, l, m, q) {
                e = ((f - e) / l - (g - e) / (l + m) + (g - f) / m) * m;
                h = ((g - f) / m - (h - f) / (m + q) + (h - g) / q) * m;
                a = f;
                b = e;
                c = -3 * f + 3 * g - 2 * e - h;
                d = 2 * f - 2 * g + e + h;
            },
            calc: function(e) {
                var f = e * e;
                return a + b * e + c * f + d * f * e;
            }
        };
    }
    function oa(a, b, c, d) {
        M.call(this);
        this.type = "CatmullRomCurve3";
        this.points = a || [];
        this.closed = b || !1;
        this.curveType = c || "centripetal";
        this.tension = d || .5;
    }
    function Jf(a, b, c, d, e) {
        b = .5 * (d - b);
        e = .5 * (e - c);
        var f = a * a;
        return (2 * c - 2 * d + b + e) * a * f + (-3 * c + 3 * d - 2 * b - e) * f + b * a + c;
    }
    function md(a, b, c, d) {
        var e = 1 - a;
        return e * e * b + 2 * (1 - a) * a * c + a * a * d;
    }
    function nd(a, b, c, d, e) {
        var f = 1 - a, g = 1 - a;
        return f * f * f * b + 3 * g * g * a * c + 3 * (1 - a) * a * a * d + a * a * a * e;
    }
    function La(a, b, c, d) {
        M.call(this);
        this.type = "CubicBezierCurve";
        this.v0 = a || new C;
        this.v1 = b || new C;
        this.v2 = c || new C;
        this.v3 = d || new C;
    }
    function $a(a, b, c, d) {
        M.call(this);
        this.type = "CubicBezierCurve3";
        this.v0 = a || new n;
        this.v1 = b || new n;
        this.v2 = c || new n;
        this.v3 = d || new n;
    }
    function wa(a, b) {
        M.call(this);
        this.type = "LineCurve";
        this.v1 = a || new C;
        this.v2 = b || new C;
    }
    function Ma(a, b) {
        M.call(this);
        this.type = "LineCurve3";
        this.v1 = a || new n;
        this.v2 = b || new n;
    }
    function Na(a, b, c) {
        M.call(this);
        this.type = "QuadraticBezierCurve";
        this.v0 = a || new C;
        this.v1 = b || new C;
        this.v2 = c || new C;
    }
    function ab(a, b, c) {
        M.call(this);
        this.type = "QuadraticBezierCurve3";
        this.v0 = a || new n;
        this.v1 = b || new n;
        this.v2 = c || new n;
    }
    function Oa(a) {
        M.call(this);
        this.type = "SplineCurve";
        this.points = a || [];
    }
    function fb() {
        M.call(this);
        this.type = "CurvePath";
        this.curves = [];
        this.autoClose = !1;
    }
    function Pa(a) {
        fb.call(this);
        this.type = "Path";
        this.currentPoint = new C;
        a && this.setFromPoints(a);
    }
    function pb(a) {
        Pa.call(this, a);
        this.uuid = O.generateUUID();
        this.type = "Shape";
        this.holes = [];
    }
    function T(a, b) {
        D.call(this);
        this.type = "Light";
        this.color = new A(a);
        this.intensity = void 0 !== b ? b : 1;
        this.receiveShadow = void 0;
    }
    function Nd(a, b, c) {
        T.call(this, a, c);
        this.type = "HemisphereLight";
        this.castShadow = void 0;
        this.position.copy(D.DefaultUp);
        this.updateMatrix();
        this.groundColor = new A(b);
    }
    function Pb(a) {
        this.camera = a;
        this.bias = 0;
        this.radius = 1;
        this.mapSize = new C(512, 512);
        this.map = null;
        this.matrix = new P;
    }
    function Od() {
        Pb.call(this, new ca(50, 1, .5, 500));
    }
    function Pd(a, b, c, d, e, f) {
        T.call(this, a, b);
        this.type = "SpotLight";
        this.position.copy(D.DefaultUp);
        this.updateMatrix();
        this.target = new D;
        Object.defineProperty(this, "power", {
            get: function() {
                return this.intensity * Math.PI;
            },
            set: function(a) {
                this.intensity = a / Math.PI;
            }
        });
        this.distance = void 0 !== c ? c : 0;
        this.angle = void 0 !== d ? d : Math.PI / 3;
        this.penumbra = void 0 !== e ? e : 0;
        this.decay = void 0 !== f ? f : 1;
        this.shadow = new Od;
    }
    function Qd(a, b, c, d) {
        T.call(this, a, b);
        this.type = "PointLight";
        Object.defineProperty(this, "power", {
            get: function() {
                return 4 * this.intensity * Math.PI;
            },
            set: function(a) {
                this.intensity = a / (4 * Math.PI);
            }
        });
        this.distance = void 0 !== c ? c : 0;
        this.decay = void 0 !== d ? d : 1;
        this.shadow = new Pb(new ca(90, 1, .5, 500));
    }
    function od(a, b, c, d, e, f) {
        Xa.call(this);
        this.type = "OrthographicCamera";
        this.zoom = 1;
        this.view = null;
        this.left = void 0 !== a ? a : -1;
        this.right = void 0 !== b ? b : 1;
        this.top = void 0 !== c ? c : 1;
        this.bottom = void 0 !== d ? d : -1;
        this.near = void 0 !== e ? e : .1;
        this.far = void 0 !== f ? f : 2E3;
        this.updateProjectionMatrix();
    }
    function Rd() {
        Pb.call(this, new od(-5, 5, 5, -5, .5, 500));
    }
    function Sd(a, b) {
        T.call(this, a, b);
        this.type = "DirectionalLight";
        this.position.copy(D.DefaultUp);
        this.updateMatrix();
        this.target = new D;
        this.shadow = new Rd;
    }
    function Td(a, b) {
        T.call(this, a, b);
        this.type = "AmbientLight";
        this.castShadow = void 0;
    }
    function Ud(a, b, c, d) {
        T.call(this, a, b);
        this.type = "RectAreaLight";
        this.width = void 0 !== c ? c : 10;
        this.height = void 0 !== d ? d : 10;
    }
    function Vd(a) {
        this.manager = void 0 !== a ? a : za;
        this.textures = {};
    }
    function se(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function te(a) {
        this.manager = void 0 !== a ? a : za;
        this.resourcePath = "";
    }
    function ue(a) {
        "undefined" === typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
        "undefined" === typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
        this.manager = void 0 !== a ? a : za;
        this.options = void 0;
    }
    function ve() {
        this.type = "ShapePath";
        this.color = new A;
        this.subPaths = [];
        this.currentPath = null;
    }
    function we(a) {
        this.type = "Font";
        this.data = a;
    }
    function Kf(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function pd() {}
    function xe(a) {
        this.manager = void 0 !== a ? a : za;
    }
    function Wd() {
        this.coefficients = [];
        for(var a = 0; 9 > a; a++)this.coefficients.push(new n);
    }
    function Qa(a, b) {
        T.call(this, void 0, b);
        this.sh = void 0 !== a ? a : new Wd;
    }
    function ye(a, b, c) {
        Qa.call(this, void 0, c);
        a = (new A).set(a);
        c = (new A).set(b);
        b = new n(a.r, a.g, a.b);
        a = new n(c.r, c.g, c.b);
        c = Math.sqrt(Math.PI);
        var d = c * Math.sqrt(.75);
        this.sh.coefficients[0].copy(b).add(a).multiplyScalar(c);
        this.sh.coefficients[1].copy(b).sub(a).multiplyScalar(d);
    }
    function ze(a, b) {
        Qa.call(this, void 0, b);
        a = (new A).set(a);
        this.sh.coefficients[0].set(a.r, a.g, a.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
    function Lf() {
        this.type = "StereoCamera";
        this.aspect = 1;
        this.eyeSep = .064;
        this.cameraL = new ca;
        this.cameraL.layers.enable(1);
        this.cameraL.matrixAutoUpdate = !1;
        this.cameraR = new ca;
        this.cameraR.layers.enable(2);
        this.cameraR.matrixAutoUpdate = !1;
    }
    function qd(a, b, c, d) {
        D.call(this);
        this.type = "CubeCamera";
        var e = new ca(90, 1, a, b);
        e.up.set(0, -1, 0);
        e.lookAt(new n(1, 0, 0));
        this.add(e);
        var f = new ca(90, 1, a, b);
        f.up.set(0, -1, 0);
        f.lookAt(new n(-1, 0, 0));
        this.add(f);
        var g = new ca(90, 1, a, b);
        g.up.set(0, 0, 1);
        g.lookAt(new n(0, 1, 0));
        this.add(g);
        var h = new ca(90, 1, a, b);
        h.up.set(0, 0, -1);
        h.lookAt(new n(0, -1, 0));
        this.add(h);
        var l = new ca(90, 1, a, b);
        l.up.set(0, -1, 0);
        l.lookAt(new n(0, 0, 1));
        this.add(l);
        var m = new ca(90, 1, a, b);
        m.up.set(0, -1, 0);
        m.lookAt(new n(0, 0, -1));
        this.add(m);
        d = d || {
            format: 1022,
            magFilter: 1006,
            minFilter: 1006
        };
        this.renderTarget = new rb(c, c, d);
        this.renderTarget.texture.name = "CubeCamera";
        this.update = function(a, b) {
            null === this.parent && this.updateMatrixWorld();
            var c = a.getRenderTarget(), d = this.renderTarget, q = d.texture.generateMipmaps;
            d.texture.generateMipmaps = !1;
            a.setRenderTarget(d, 0);
            a.render(b, e);
            a.setRenderTarget(d, 1);
            a.render(b, f);
            a.setRenderTarget(d, 2);
            a.render(b, g);
            a.setRenderTarget(d, 3);
            a.render(b, h);
            a.setRenderTarget(d, 4);
            a.render(b, l);
            d.texture.generateMipmaps = q;
            a.setRenderTarget(d, 5);
            a.render(b, m);
            a.setRenderTarget(c);
        };
        this.clear = function(a, b, c, d) {
            for(var e = a.getRenderTarget(), f = this.renderTarget, g = 0; 6 > g; g++)a.setRenderTarget(f, g), a.clear(b, c, d);
            a.setRenderTarget(e);
        };
    }
    function Ae(a) {
        this.autoStart = void 0 !== a ? a : !0;
        this.elapsedTime = this.oldTime = this.startTime = 0;
        this.running = !1;
    }
    function Be() {
        D.call(this);
        this.type = "AudioListener";
        this.context = Ce.getContext();
        this.gain = this.context.createGain();
        this.gain.connect(this.context.destination);
        this.filter = null;
        this.timeDelta = 0;
    }
    function qc(a) {
        D.call(this);
        this.type = "Audio";
        this.listener = a;
        this.context = a.context;
        this.gain = this.context.createGain();
        this.gain.connect(a.getInput());
        this.autoplay = !1;
        this.buffer = null;
        this.detune = 0;
        this.loop = !1;
        this.offset = this.startTime = 0;
        this.playbackRate = 1;
        this.isPlaying = !1;
        this.hasPlaybackControl = !0;
        this.sourceType = "empty";
        this.filters = [];
    }
    function De(a) {
        qc.call(this, a);
        this.panner = this.context.createPanner();
        this.panner.connect(this.gain);
    }
    function Ee(a, b) {
        this.analyser = a.context.createAnalyser();
        this.analyser.fftSize = void 0 !== b ? b : 2048;
        this.data = new Uint8Array(this.analyser.frequencyBinCount);
        a.getOutput().connect(this.analyser);
    }
    function Fe(a, b, c) {
        this.binding = a;
        this.valueSize = c;
        a = Float64Array;
        switch(b){
            case "quaternion":
                b = this._slerp;
                break;
            case "string":
            case "bool":
                a = Array;
                b = this._select;
                break;
            default:
                b = this._lerp;
        }
        this.buffer = new a(4 * c);
        this._mixBufferRegion = b;
        this.referenceCount = this.useCount = this.cumulativeWeight = 0;
    }
    function Mf(a, b, c) {
        c = c || ia.parseTrackName(b);
        this._targetGroup = a;
        this._bindings = a.subscribe_(b, c);
    }
    function ia(a, b, c) {
        this.path = b;
        this.parsedPath = c || ia.parseTrackName(b);
        this.node = ia.findNode(a, this.parsedPath.nodeName) || a;
        this.rootNode = a;
    }
    function Nf() {
        this.uuid = O.generateUUID();
        this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0;
        var a = {};
        this._indicesByUUID = a;
        for(var b = 0, c = arguments.length; b !== c; ++b)a[arguments[b].uuid] = b;
        this._paths = [];
        this._parsedPaths = [];
        this._bindings = [];
        this._bindingsIndicesByPath = {};
        var d = this;
        this.stats = {
            objects: {
                get total () {
                    return d._objects.length;
                },
                get inUse () {
                    return this.total - d.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return d._bindings.length;
            }
        };
    }
    function Of(a, b, c) {
        this._mixer = a;
        this._clip = b;
        this._localRoot = c || null;
        a = b.tracks;
        b = a.length;
        c = Array(b);
        for(var d = {
            endingStart: 2400,
            endingEnd: 2400
        }, e = 0; e !== b; ++e){
            var f = a[e].createInterpolant(null);
            c[e] = f;
            f.settings = d;
        }
        this._interpolantSettings = d;
        this._interpolants = c;
        this._propertyBindings = Array(b);
        this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null;
        this.loop = 2201;
        this._loopCount = -1;
        this._startTime = null;
        this.time = 0;
        this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1;
        this.repetitions = Infinity;
        this.paused = !1;
        this.enabled = !0;
        this.clampWhenFinished = !1;
        this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0;
    }
    function Ge(a) {
        this._root = a;
        this._initMemoryManager();
        this.time = this._accuIndex = 0;
        this.timeScale = 1;
    }
    function Xd(a, b) {
        "string" === typeof a && (console.warn("THREE.Uniform: Type parameter is no longer needed."), a = b);
        this.value = a;
    }
    function He() {
        B.call(this);
        this.type = "InstancedBufferGeometry";
        this.maxInstancedCount = void 0;
    }
    function Ie(a, b, c) {
        Ab.call(this, a, b);
        this.meshPerAttribute = c || 1;
    }
    function Je(a, b, c, d) {
        "number" === typeof c && (d = c, c = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));
        H.call(this, a, b, c);
        this.meshPerAttribute = d || 1;
    }
    function Pf(a, b, c, d) {
        this.ray = new zb(a, b);
        this.near = c || 0;
        this.far = d || Infinity;
        this.params = {
            Mesh: {},
            Line: {},
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        };
        Object.defineProperties(this.params, {
            PointCloud: {
                get: function() {
                    console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
                    return this.Points;
                }
            }
        });
    }
    function Qf(a, b) {
        return a.distance - b.distance;
    }
    function Ke(a, b, c, d) {
        if (!1 !== a.visible && (a.raycast(b, c), !0 === d)) {
            a = a.children;
            d = 0;
            for(var e = a.length; d < e; d++)Ke(a[d], b, c, !0);
        }
    }
    function Rf(a, b, c) {
        this.radius = void 0 !== a ? a : 1;
        this.phi = void 0 !== b ? b : 0;
        this.theta = void 0 !== c ? c : 0;
        return this;
    }
    function Sf(a, b, c) {
        this.radius = void 0 !== a ? a : 1;
        this.theta = void 0 !== b ? b : 0;
        this.y = void 0 !== c ? c : 0;
        return this;
    }
    function Le(a, b) {
        this.min = void 0 !== a ? a : new C(Infinity, Infinity);
        this.max = void 0 !== b ? b : new C(-Infinity, -Infinity);
    }
    function Me(a, b) {
        this.start = void 0 !== a ? a : new n;
        this.end = void 0 !== b ? b : new n;
    }
    function rd(a) {
        D.call(this);
        this.material = a;
        this.render = function() {};
    }
    function sd(a, b, c, d) {
        this.object = a;
        this.size = void 0 !== b ? b : 1;
        a = void 0 !== c ? c : 16711680;
        d = void 0 !== d ? d : 1;
        b = 0;
        (c = this.object.geometry) && c.isGeometry ? b = 3 * c.faces.length : c && c.isBufferGeometry && (b = c.attributes.normal.count);
        c = new B;
        b = new E(6 * b, 3);
        c.addAttribute("position", b);
        V.call(this, c, new U({
            color: a,
            linewidth: d
        }));
        this.matrixAutoUpdate = !1;
        this.update();
    }
    function rc(a, b) {
        D.call(this);
        this.light = a;
        this.light.updateMatrixWorld();
        this.matrix = a.matrixWorld;
        this.matrixAutoUpdate = !1;
        this.color = b;
        a = new B;
        b = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(var c = 0, d = 1; 32 > c; c++, d++){
            var e = c / 32 * Math.PI * 2, f = d / 32 * Math.PI * 2;
            b.push(Math.cos(e), Math.sin(e), 1, Math.cos(f), Math.sin(f), 1);
        }
        a.addAttribute("position", new E(b, 3));
        b = new U({
            fog: !1
        });
        this.cone = new V(a, b);
        this.add(this.cone);
        this.update();
    }
    function Tf(a) {
        var b = [];
        a && a.isBone && b.push(a);
        for(var c = 0; c < a.children.length; c++)b.push.apply(b, Tf(a.children[c]));
        return b;
    }
    function sc(a) {
        for(var b = Tf(a), c = new B, d = [], e = [], f = new A(0, 0, 1), g = new A(0, 1, 0), h = 0; h < b.length; h++){
            var l = b[h];
            l.parent && l.parent.isBone && (d.push(0, 0, 0), d.push(0, 0, 0), e.push(f.r, f.g, f.b), e.push(g.r, g.g, g.b));
        }
        c.addAttribute("position", new E(d, 3));
        c.addAttribute("color", new E(e, 3));
        d = new U({
            vertexColors: 2,
            depthTest: !1,
            depthWrite: !1,
            transparent: !0
        });
        V.call(this, c, d);
        this.root = a;
        this.bones = b;
        this.matrix = a.matrixWorld;
        this.matrixAutoUpdate = !1;
    }
    function tc(a, b, c) {
        this.light = a;
        this.light.updateMatrixWorld();
        this.color = c;
        a = new ob(b, 4, 2);
        b = new Ca({
            wireframe: !0,
            fog: !1
        });
        qa.call(this, a, b);
        this.matrix = this.light.matrixWorld;
        this.matrixAutoUpdate = !1;
        this.update();
    }
    function uc(a, b) {
        this.type = "RectAreaLightHelper";
        this.light = a;
        this.color = b;
        a = new B;
        a.addAttribute("position", new E([
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0,
            1,
            1,
            0
        ], 3));
        a.computeBoundingSphere();
        b = new U({
            fog: !1
        });
        ka.call(this, a, b);
        a = new B;
        a.addAttribute("position", new E([
            1,
            1,
            0,
            -1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            1,
            0,
            -1,
            -1,
            0,
            1,
            -1,
            0
        ], 3));
        a.computeBoundingSphere();
        this.add(new qa(a, new Ca({
            side: 1,
            fog: !1
        })));
        this.update();
    }
    function vc(a, b, c) {
        D.call(this);
        this.light = a;
        this.light.updateMatrixWorld();
        this.matrix = a.matrixWorld;
        this.matrixAutoUpdate = !1;
        this.color = c;
        a = new Bb(b);
        a.rotateY(.5 * Math.PI);
        this.material = new Ca({
            wireframe: !0,
            fog: !1
        });
        void 0 === this.color && (this.material.vertexColors = 2);
        b = a.getAttribute("position");
        b = new Float32Array(3 * b.count);
        a.addAttribute("color", new H(b, 3));
        this.add(new qa(a, this.material));
        this.update();
    }
    function wc(a, b) {
        this.lightProbe = a;
        this.size = b;
        a = new ea({
            defines: {
                GAMMA_OUTPUT: ""
            },
            uniforms: {
                sh: {
                    value: this.lightProbe.sh.coefficients
                },
                intensity: {
                    value: this.lightProbe.intensity
                }
            },
            vertexShader: "varying vec3 vNormal;\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            fragmentShader: "#define RECIPROCAL_PI 0.318309886\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\t// matrix is assumed to be orthogonal\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 linearToOutput( in vec3 a ) {\n\t#ifdef GAMMA_OUTPUT\n\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\t#else\n\t\treturn a;\n\t#endif\n}\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\t// normal is assumed to have unit length\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nuniform vec3 sh[ 9 ]; // sh coefficients\nuniform float intensity; // light probe intensity\nvarying vec3 vNormal;\nvoid main() {\n\tvec3 normal = normalize( vNormal );\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );\n\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;\n\toutgoingLight = linearToOutput( outgoingLight );\n\tgl_FragColor = vec4( outgoingLight, 1.0 );\n}"
        });
        b = new ob(1, 32, 16);
        qa.call(this, b, a);
        this.onBeforeRender();
    }
    function Yd(a, b, c, d) {
        a = a || 10;
        b = b || 10;
        c = new A(void 0 !== c ? c : 4473924);
        d = new A(void 0 !== d ? d : 8947848);
        var e = b / 2, f = a / b, g = a / 2;
        a = [];
        for(var h = [], l = 0, m = 0, q = -g; l <= b; l++, q += f){
            a.push(-g, 0, q, g, 0, q);
            a.push(q, 0, -g, q, 0, g);
            var k = l === e ? c : d;
            k.toArray(h, m);
            m += 3;
            k.toArray(h, m);
            m += 3;
            k.toArray(h, m);
            m += 3;
            k.toArray(h, m);
            m += 3;
        }
        b = new B;
        b.addAttribute("position", new E(a, 3));
        b.addAttribute("color", new E(h, 3));
        c = new U({
            vertexColors: 2
        });
        V.call(this, b, c);
    }
    function Zd(a, b, c, d, e, f) {
        a = a || 10;
        b = b || 16;
        c = c || 8;
        d = d || 64;
        e = new A(void 0 !== e ? e : 4473924);
        f = new A(void 0 !== f ? f : 8947848);
        var g = [], h = [], l;
        for(l = 0; l <= b; l++){
            var m = l / b * 2 * Math.PI;
            var q = Math.sin(m) * a;
            m = Math.cos(m) * a;
            g.push(0, 0, 0);
            g.push(q, 0, m);
            var k = l & 1 ? e : f;
            h.push(k.r, k.g, k.b);
            h.push(k.r, k.g, k.b);
        }
        for(l = 0; l <= c; l++){
            k = l & 1 ? e : f;
            var n = a - a / c * l;
            for(b = 0; b < d; b++)m = b / d * 2 * Math.PI, q = Math.sin(m) * n, m = Math.cos(m) * n, g.push(q, 0, m), h.push(k.r, k.g, k.b), m = (b + 1) / d * 2 * Math.PI, q = Math.sin(m) * n, m = Math.cos(m) * n, g.push(q, 0, m), h.push(k.r, k.g, k.b);
        }
        a = new B;
        a.addAttribute("position", new E(g, 3));
        a.addAttribute("color", new E(h, 3));
        g = new U({
            vertexColors: 2
        });
        V.call(this, a, g);
    }
    function xc(a, b, c, d) {
        this.audio = a;
        this.range = b || 1;
        this.divisionsInnerAngle = c || 16;
        this.divisionsOuterAngle = d || 2;
        a = new B;
        b = new Float32Array(3 * (3 * (this.divisionsInnerAngle + 2 * this.divisionsOuterAngle) + 3));
        a.addAttribute("position", new H(b, 3));
        b = new U({
            color: 65280
        });
        c = new U({
            color: 16776960
        });
        ka.call(this, a, [
            c,
            b
        ]);
        this.update();
    }
    function td(a, b, c, d) {
        this.object = a;
        this.size = void 0 !== b ? b : 1;
        a = void 0 !== c ? c : 16776960;
        d = void 0 !== d ? d : 1;
        b = 0;
        (c = this.object.geometry) && c.isGeometry ? b = c.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
        c = new B;
        b = new E(6 * b, 3);
        c.addAttribute("position", b);
        V.call(this, c, new U({
            color: a,
            linewidth: d
        }));
        this.matrixAutoUpdate = !1;
        this.update();
    }
    function yc(a, b, c) {
        D.call(this);
        this.light = a;
        this.light.updateMatrixWorld();
        this.matrix = a.matrixWorld;
        this.matrixAutoUpdate = !1;
        this.color = c;
        void 0 === b && (b = 1);
        a = new B;
        a.addAttribute("position", new E([
            -b,
            b,
            0,
            b,
            b,
            0,
            b,
            -b,
            0,
            -b,
            -b,
            0,
            -b,
            b,
            0
        ], 3));
        b = new U({
            fog: !1
        });
        this.lightPlane = new ka(a, b);
        this.add(this.lightPlane);
        a = new B;
        a.addAttribute("position", new E([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3));
        this.targetLine = new ka(a, b);
        this.add(this.targetLine);
        this.update();
    }
    function ud(a) {
        function b(a, b, d) {
            c(a, d);
            c(b, d);
        }
        function c(a, b) {
            f.push(0, 0, 0);
            g.push(b.r, b.g, b.b);
            void 0 === h[a] && (h[a] = []);
            h[a].push(f.length / 3 - 1);
        }
        var d = new B, e = new U({
            color: 16777215,
            vertexColors: 1
        }), f = [], g = [], h = {}, l = new A(16755200), m = new A(16711680), k = new A(43775), p = new A(16777215), n = new A(3355443);
        b("n1", "n2", l);
        b("n2", "n4", l);
        b("n4", "n3", l);
        b("n3", "n1", l);
        b("f1", "f2", l);
        b("f2", "f4", l);
        b("f4", "f3", l);
        b("f3", "f1", l);
        b("n1", "f1", l);
        b("n2", "f2", l);
        b("n3", "f3", l);
        b("n4", "f4", l);
        b("p", "n1", m);
        b("p", "n2", m);
        b("p", "n3", m);
        b("p", "n4", m);
        b("u1", "u2", k);
        b("u2", "u3", k);
        b("u3", "u1", k);
        b("c", "t", p);
        b("p", "c", n);
        b("cn1", "cn2", n);
        b("cn3", "cn4", n);
        b("cf1", "cf2", n);
        b("cf3", "cf4", n);
        d.addAttribute("position", new E(f, 3));
        d.addAttribute("color", new E(g, 3));
        V.call(this, d, e);
        this.camera = a;
        this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix();
        this.matrix = a.matrixWorld;
        this.matrixAutoUpdate = !1;
        this.pointMap = h;
        this.update();
    }
    function gb(a, b) {
        this.object = a;
        void 0 === b && (b = 16776960);
        a = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        var c = new Float32Array(24), d = new B;
        d.setIndex(new H(a, 1));
        d.addAttribute("position", new H(c, 3));
        V.call(this, d, new U({
            color: b
        }));
        this.matrixAutoUpdate = !1;
        this.update();
    }
    function vd(a, b) {
        this.type = "Box3Helper";
        this.box = a;
        a = void 0 !== b ? b : 16776960;
        b = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        var c = new B;
        c.setIndex(new H(b, 1));
        c.addAttribute("position", new E([
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ], 3));
        V.call(this, c, new U({
            color: a
        }));
        this.geometry.computeBoundingSphere();
    }
    function wd(a, b, c) {
        this.type = "PlaneHelper";
        this.plane = a;
        this.size = void 0 === b ? 1 : b;
        a = void 0 !== c ? c : 16776960;
        b = new B;
        b.addAttribute("position", new E([
            1,
            -1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ], 3));
        b.computeBoundingSphere();
        ka.call(this, b, new U({
            color: a
        }));
        b = new B;
        b.addAttribute("position", new E([
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1
        ], 3));
        b.computeBoundingSphere();
        this.add(new qa(b, new Ca({
            color: a,
            opacity: .2,
            transparent: !0,
            depthWrite: !1
        })));
    }
    function hb(a, b, c, d, e, f) {
        D.call(this);
        void 0 === a && (a = new n(0, 0, 1));
        void 0 === b && (b = new n(0, 0, 0));
        void 0 === c && (c = 1);
        void 0 === d && (d = 16776960);
        void 0 === e && (e = .2 * c);
        void 0 === f && (f = .2 * e);
        void 0 === $d && ($d = new B, $d.addAttribute("position", new E([
            0,
            0,
            0,
            0,
            1,
            0
        ], 3)), Ne = new eb(0, .5, 1, 5, 1), Ne.translate(0, -.5, 0));
        this.position.copy(b);
        this.line = new ka($d, new U({
            color: d
        }));
        this.line.matrixAutoUpdate = !1;
        this.add(this.line);
        this.cone = new qa(Ne, new Ca({
            color: d
        }));
        this.cone.matrixAutoUpdate = !1;
        this.add(this.cone);
        this.setDirection(a);
        this.setLength(c, e, f);
    }
    function xd(a) {
        a = a || 1;
        var b = [
            0,
            0,
            0,
            a,
            0,
            0,
            0,
            0,
            0,
            0,
            a,
            0,
            0,
            0,
            0,
            0,
            0,
            a
        ];
        a = new B;
        a.addAttribute("position", new E(b, 3));
        a.addAttribute("color", new E([
            1,
            0,
            0,
            1,
            .6,
            0,
            0,
            1,
            0,
            .6,
            1,
            0,
            0,
            0,
            1,
            0,
            .6,
            1
        ], 3));
        b = new U({
            vertexColors: 2
        });
        V.call(this, a, b);
    }
    function Uf(a) {
        console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
        oa.call(this, a);
        this.type = "catmullrom";
        this.closed = !0;
    }
    function Vf(a) {
        console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
        oa.call(this, a);
        this.type = "catmullrom";
    }
    function Oe(a) {
        console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
        oa.call(this, a);
        this.type = "catmullrom";
    }
    void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52));
    void 0 === Number.isInteger && (Number.isInteger = function(a) {
        return "number" === typeof a && isFinite(a) && Math.floor(a) === a;
    });
    void 0 === Math.sign && (Math.sign = function(a) {
        return 0 > a ? -1 : 0 < a ? 1 : +a;
    });
    !1 === "name" in Function.prototype && Object.defineProperty(Function.prototype, "name", {
        get: function() {
            return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
        }
    });
    void 0 === Object.assign && function() {
        Object.assign = function(a) {
            if (void 0 === a || null === a) throw new TypeError("Cannot convert undefined or null to object");
            for(var b = Object(a), c = 1; c < arguments.length; c++){
                var d = arguments[c];
                if (void 0 !== d && null !== d) for(var e in d)Object.prototype.hasOwnProperty.call(d, e) && (b[e] = d[e]);
            }
            return b;
        };
    }();
    Object.assign(ta.prototype, {
        addEventListener: function(a, b) {
            void 0 === this._listeners && (this._listeners = {});
            var c = this._listeners;
            void 0 === c[a] && (c[a] = []);
            -1 === c[a].indexOf(b) && c[a].push(b);
        },
        hasEventListener: function(a, b) {
            if (void 0 === this._listeners) return !1;
            var c = this._listeners;
            return void 0 !== c[a] && -1 !== c[a].indexOf(b);
        },
        removeEventListener: function(a, b) {
            void 0 !== this._listeners && (a = this._listeners[a], void 0 !== a && (b = a.indexOf(b), -1 !== b && a.splice(b, 1)));
        },
        dispatchEvent: function(a) {
            if (void 0 !== this._listeners) {
                var b = this._listeners[a.type];
                if (void 0 !== b) {
                    a.target = this;
                    b = b.slice(0);
                    for(var c = 0, d = b.length; c < d; c++)b[c].call(this, a);
                }
            }
        }
    });
    var O = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: function() {
            for(var a = [], b = 0; 256 > b; b++)a[b] = (16 > b ? "0" : "") + b.toString(16);
            return function() {
                var b = 4294967295 * Math.random() | 0, d = 4294967295 * Math.random() | 0, e = 4294967295 * Math.random() | 0, f = 4294967295 * Math.random() | 0;
                return (a[b & 255] + a[b >> 8 & 255] + a[b >> 16 & 255] + a[b >> 24 & 255] + "-" + a[d & 255] + a[d >> 8 & 255] + "-" + a[d >> 16 & 15 | 64] + a[d >> 24 & 255] + "-" + a[e & 63 | 128] + a[e >> 8 & 255] + "-" + a[e >> 16 & 255] + a[e >> 24 & 255] + a[f & 255] + a[f >> 8 & 255] + a[f >> 16 & 255] + a[f >> 24 & 255]).toUpperCase();
            };
        }(),
        clamp: function(a, b, c) {
            return Math.max(b, Math.min(c, a));
        },
        euclideanModulo: function(a, b) {
            return (a % b + b) % b;
        },
        mapLinear: function(a, b, c, d, e) {
            return d + (a - b) * (e - d) / (c - b);
        },
        lerp: function(a, b, c) {
            return (1 - c) * a + c * b;
        },
        smoothstep: function(a, b, c) {
            if (a <= b) return 0;
            if (a >= c) return 1;
            a = (a - b) / (c - b);
            return a * a * (3 - 2 * a);
        },
        smootherstep: function(a, b, c) {
            if (a <= b) return 0;
            if (a >= c) return 1;
            a = (a - b) / (c - b);
            return a * a * a * (a * (6 * a - 15) + 10);
        },
        randInt: function(a, b) {
            return a + Math.floor(Math.random() * (b - a + 1));
        },
        randFloat: function(a, b) {
            return a + Math.random() * (b - a);
        },
        randFloatSpread: function(a) {
            return a * (.5 - Math.random());
        },
        degToRad: function(a) {
            return a * O.DEG2RAD;
        },
        radToDeg: function(a) {
            return a * O.RAD2DEG;
        },
        isPowerOfTwo: function(a) {
            return 0 === (a & a - 1) && 0 !== a;
        },
        ceilPowerOfTwo: function(a) {
            return Math.pow(2, Math.ceil(Math.log(a) / Math.LN2));
        },
        floorPowerOfTwo: function(a) {
            return Math.pow(2, Math.floor(Math.log(a) / Math.LN2));
        }
    };
    Object.defineProperties(C.prototype, {
        width: {
            get: function() {
                return this.x;
            },
            set: function(a) {
                this.x = a;
            }
        },
        height: {
            get: function() {
                return this.y;
            },
            set: function(a) {
                this.y = a;
            }
        }
    });
    Object.assign(C.prototype, {
        isVector2: !0,
        set: function(a, b) {
            this.x = a;
            this.y = b;
            return this;
        },
        setScalar: function(a) {
            this.y = this.x = a;
            return this;
        },
        setX: function(a) {
            this.x = a;
            return this;
        },
        setY: function(a) {
            this.y = a;
            return this;
        },
        setComponent: function(a, b) {
            switch(a){
                case 0:
                    this.x = b;
                    break;
                case 1:
                    this.y = b;
                    break;
                default:
                    throw Error("index is out of range: " + a);
            }
            return this;
        },
        getComponent: function(a) {
            switch(a){
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw Error("index is out of range: " + a);
            }
        },
        clone: function() {
            return new this.constructor(this.x, this.y);
        },
        copy: function(a) {
            this.x = a.x;
            this.y = a.y;
            return this;
        },
        add: function(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
            this.x += a.x;
            this.y += a.y;
            return this;
        },
        addScalar: function(a) {
            this.x += a;
            this.y += a;
            return this;
        },
        addVectors: function(a, b) {
            this.x = a.x + b.x;
            this.y = a.y + b.y;
            return this;
        },
        addScaledVector: function(a, b) {
            this.x += a.x * b;
            this.y += a.y * b;
            return this;
        },
        sub: function(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
            this.x -= a.x;
            this.y -= a.y;
            return this;
        },
        subScalar: function(a) {
            this.x -= a;
            this.y -= a;
            return this;
        },
        subVectors: function(a, b) {
            this.x = a.x - b.x;
            this.y = a.y - b.y;
            return this;
        },
        multiply: function(a) {
            this.x *= a.x;
            this.y *= a.y;
            return this;
        },
        multiplyScalar: function(a) {
            this.x *= a;
            this.y *= a;
            return this;
        },
        divide: function(a) {
            this.x /= a.x;
            this.y /= a.y;
            return this;
        },
        divideScalar: function(a) {
            return this.multiplyScalar(1 / a);
        },
        applyMatrix3: function(a) {
            var b = this.x, c = this.y;
            a = a.elements;
            this.x = a[0] * b + a[3] * c + a[6];
            this.y = a[1] * b + a[4] * c + a[7];
            return this;
        },
        min: function(a) {
            this.x = Math.min(this.x, a.x);
            this.y = Math.min(this.y, a.y);
            return this;
        },
        max: function(a) {
            this.x = Math.max(this.x, a.x);
            this.y = Math.max(this.y, a.y);
            return this;
        },
        clamp: function(a, b) {
            this.x = Math.max(a.x, Math.min(b.x, this.x));
            this.y = Math.max(a.y, Math.min(b.y, this.y));
            return this;
        },
        clampScalar: function(a, b) {
            this.x = Math.max(a, Math.min(b, this.x));
            this.y = Math.max(a, Math.min(b, this.y));
            return this;
        },
        clampLength: function(a, b) {
            var c = this.length();
            return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
        },
        floor: function() {
            this.x = Math.floor(this.x);
            this.y = Math.floor(this.y);
            return this;
        },
        ceil: function() {
            this.x = Math.ceil(this.x);
            this.y = Math.ceil(this.y);
            return this;
        },
        round: function() {
            this.x = Math.round(this.x);
            this.y = Math.round(this.y);
            return this;
        },
        roundToZero: function() {
            this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
            this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
            return this;
        },
        negate: function() {
            this.x = -this.x;
            this.y = -this.y;
            return this;
        },
        dot: function(a) {
            return this.x * a.x + this.y * a.y;
        },
        cross: function(a) {
            return this.x * a.y - this.y * a.x;
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y;
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y);
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1);
        },
        angle: function() {
            var a = Math.atan2(this.y, this.x);
            0 > a && (a += 2 * Math.PI);
            return a;
        },
        distanceTo: function(a) {
            return Math.sqrt(this.distanceToSquared(a));
        },
        distanceToSquared: function(a) {
            var b = this.x - a.x;
            a = this.y - a.y;
            return b * b + a * a;
        },
        manhattanDistanceTo: function(a) {
            return Math.abs(this.x - a.x) + Math.abs(this.y - a.y);
        },
        setLength: function(a) {
            return this.normalize().multiplyScalar(a);
        },
        lerp: function(a, b) {
            this.x += (a.x - this.x) * b;
            this.y += (a.y - this.y) * b;
            return this;
        },
        lerpVectors: function(a, b, c) {
            return this.subVectors(b, a).multiplyScalar(c).add(a);
        },
        equals: function(a) {
            return a.x === this.x && a.y === this.y;
        },
        fromArray: function(a, b) {
            void 0 === b && (b = 0);
            this.x = a[b];
            this.y = a[b + 1];
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            a[b] = this.x;
            a[b + 1] = this.y;
            return a;
        },
        fromBufferAttribute: function(a, b, c) {
            void 0 !== c && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
            this.x = a.getX(b);
            this.y = a.getY(b);
            return this;
        },
        rotateAround: function(a, b) {
            var c = Math.cos(b);
            b = Math.sin(b);
            var d = this.x - a.x, e = this.y - a.y;
            this.x = d * c - e * b + a.x;
            this.y = d * b + e * c + a.y;
            return this;
        }
    });
    Object.assign(ma, {
        slerp: function(a, b, c, d) {
            return c.copy(a).slerp(b, d);
        },
        slerpFlat: function(a, b, c, d, e, f, g) {
            var h = c[d + 0], l = c[d + 1], m = c[d + 2];
            c = c[d + 3];
            d = e[f + 0];
            var k = e[f + 1], p = e[f + 2];
            e = e[f + 3];
            if (c !== e || h !== d || l !== k || m !== p) {
                f = 1 - g;
                var n = h * d + l * k + m * p + c * e, t = 0 <= n ? 1 : -1, r = 1 - n * n;
                r > Number.EPSILON && (r = Math.sqrt(r), n = Math.atan2(r, n * t), f = Math.sin(f * n) / r, g = Math.sin(g * n) / r);
                t *= g;
                h = h * f + d * t;
                l = l * f + k * t;
                m = m * f + p * t;
                c = c * f + e * t;
                f === 1 - g && (g = 1 / Math.sqrt(h * h + l * l + m * m + c * c), h *= g, l *= g, m *= g, c *= g);
            }
            a[b] = h;
            a[b + 1] = l;
            a[b + 2] = m;
            a[b + 3] = c;
        }
    });
    Object.defineProperties(ma.prototype, {
        x: {
            get: function() {
                return this._x;
            },
            set: function(a) {
                this._x = a;
                this.onChangeCallback();
            }
        },
        y: {
            get: function() {
                return this._y;
            },
            set: function(a) {
                this._y = a;
                this.onChangeCallback();
            }
        },
        z: {
            get: function() {
                return this._z;
            },
            set: function(a) {
                this._z = a;
                this.onChangeCallback();
            }
        },
        w: {
            get: function() {
                return this._w;
            },
            set: function(a) {
                this._w = a;
                this.onChangeCallback();
            }
        }
    });
    Object.assign(ma.prototype, {
        isQuaternion: !0,
        set: function(a, b, c, d) {
            this._x = a;
            this._y = b;
            this._z = c;
            this._w = d;
            this.onChangeCallback();
            return this;
        },
        clone: function() {
            return new this.constructor(this._x, this._y, this._z, this._w);
        },
        copy: function(a) {
            this._x = a.x;
            this._y = a.y;
            this._z = a.z;
            this._w = a.w;
            this.onChangeCallback();
            return this;
        },
        setFromEuler: function(a, b) {
            if (!a || !a.isEuler) throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
            var c = a._x, d = a._y, e = a._z;
            a = a.order;
            var f = Math.cos, g = Math.sin, h = f(c / 2), l = f(d / 2);
            f = f(e / 2);
            c = g(c / 2);
            d = g(d / 2);
            e = g(e / 2);
            "XYZ" === a ? (this._x = c * l * f + h * d * e, this._y = h * d * f - c * l * e, this._z = h * l * e + c * d * f, this._w = h * l * f - c * d * e) : "YXZ" === a ? (this._x = c * l * f + h * d * e, this._y = h * d * f - c * l * e, this._z = h * l * e - c * d * f, this._w = h * l * f + c * d * e) : "ZXY" === a ? (this._x = c * l * f - h * d * e, this._y = h * d * f + c * l * e, this._z = h * l * e + c * d * f, this._w = h * l * f - c * d * e) : "ZYX" === a ? (this._x = c * l * f - h * d * e, this._y = h * d * f + c * l * e, this._z = h * l * e - c * d * f, this._w = h * l * f + c * d * e) : "YZX" === a ? (this._x = c * l * f + h * d * e, this._y = h * d * f + c * l * e, this._z = h * l * e - c * d * f, this._w = h * l * f - c * d * e) : "XZY" === a && (this._x = c * l * f - h * d * e, this._y = h * d * f - c * l * e, this._z = h * l * e + c * d * f, this._w = h * l * f + c * d * e);
            if (!1 !== b) this.onChangeCallback();
            return this;
        },
        setFromAxisAngle: function(a, b) {
            b /= 2;
            var c = Math.sin(b);
            this._x = a.x * c;
            this._y = a.y * c;
            this._z = a.z * c;
            this._w = Math.cos(b);
            this.onChangeCallback();
            return this;
        },
        setFromRotationMatrix: function(a) {
            var b = a.elements, c = b[0];
            a = b[4];
            var d = b[8], e = b[1], f = b[5], g = b[9], h = b[2], l = b[6];
            b = b[10];
            var m = c + f + b;
            0 < m ? (c = .5 / Math.sqrt(m + 1), this._w = .25 / c, this._x = (l - g) * c, this._y = (d - h) * c, this._z = (e - a) * c) : c > f && c > b ? (c = 2 * Math.sqrt(1 + c - f - b), this._w = (l - g) / c, this._x = .25 * c, this._y = (a + e) / c, this._z = (d + h) / c) : f > b ? (c = 2 * Math.sqrt(1 + f - c - b), this._w = (d - h) / c, this._x = (a + e) / c, this._y = .25 * c, this._z = (g + l) / c) : (c = 2 * Math.sqrt(1 + b - c - f), this._w = (e - a) / c, this._x = (d + h) / c, this._y = (g + l) / c, this._z = .25 * c);
            this.onChangeCallback();
            return this;
        },
        setFromUnitVectors: function(a, b) {
            var c = a.dot(b) + 1;
            1E-6 > c ? (c = 0, Math.abs(a.x) > Math.abs(a.z) ? (this._x = -a.y, this._y = a.x, this._z = 0) : (this._x = 0, this._y = -a.z, this._z = a.y)) : (this._x = a.y * b.z - a.z * b.y, this._y = a.z * b.x - a.x * b.z, this._z = a.x * b.y - a.y * b.x);
            this._w = c;
            return this.normalize();
        },
        angleTo: function(a) {
            return 2 * Math.acos(Math.abs(O.clamp(this.dot(a), -1, 1)));
        },
        rotateTowards: function(a, b) {
            var c = this.angleTo(a);
            if (0 === c) return this;
            this.slerp(a, Math.min(1, b / c));
            return this;
        },
        inverse: function() {
            return this.conjugate();
        },
        conjugate: function() {
            this._x *= -1;
            this._y *= -1;
            this._z *= -1;
            this.onChangeCallback();
            return this;
        },
        dot: function(a) {
            return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
        },
        lengthSq: function() {
            return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        },
        length: function() {
            return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        },
        normalize: function() {
            var a = this.length();
            0 === a ? (this._z = this._y = this._x = 0, this._w = 1) : (a = 1 / a, this._x *= a, this._y *= a, this._z *= a, this._w *= a);
            this.onChangeCallback();
            return this;
        },
        multiply: function(a, b) {
            return void 0 !== b ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
        },
        premultiply: function(a) {
            return this.multiplyQuaternions(a, this);
        },
        multiplyQuaternions: function(a, b) {
            var c = a._x, d = a._y, e = a._z;
            a = a._w;
            var f = b._x, g = b._y, h = b._z;
            b = b._w;
            this._x = c * b + a * f + d * h - e * g;
            this._y = d * b + a * g + e * f - c * h;
            this._z = e * b + a * h + c * g - d * f;
            this._w = a * b - c * f - d * g - e * h;
            this.onChangeCallback();
            return this;
        },
        slerp: function(a, b) {
            if (0 === b) return this;
            if (1 === b) return this.copy(a);
            var c = this._x, d = this._y, e = this._z, f = this._w, g = f * a._w + c * a._x + d * a._y + e * a._z;
            0 > g ? (this._w = -a._w, this._x = -a._x, this._y = -a._y, this._z = -a._z, g = -g) : this.copy(a);
            if (1 <= g) return this._w = f, this._x = c, this._y = d, this._z = e, this;
            a = 1 - g * g;
            if (a <= Number.EPSILON) return g = 1 - b, this._w = g * f + b * this._w, this._x = g * c + b * this._x, this._y = g * d + b * this._y, this._z = g * e + b * this._z, this.normalize();
            a = Math.sqrt(a);
            var h = Math.atan2(a, g);
            g = Math.sin((1 - b) * h) / a;
            b = Math.sin(b * h) / a;
            this._w = f * g + this._w * b;
            this._x = c * g + this._x * b;
            this._y = d * g + this._y * b;
            this._z = e * g + this._z * b;
            this.onChangeCallback();
            return this;
        },
        equals: function(a) {
            return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
        },
        fromArray: function(a, b) {
            void 0 === b && (b = 0);
            this._x = a[b];
            this._y = a[b + 1];
            this._z = a[b + 2];
            this._w = a[b + 3];
            this.onChangeCallback();
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            a[b] = this._x;
            a[b + 1] = this._y;
            a[b + 2] = this._z;
            a[b + 3] = this._w;
            return a;
        },
        onChange: function(a) {
            this.onChangeCallback = a;
            return this;
        },
        onChangeCallback: function() {}
    });
    Object.assign(n.prototype, {
        isVector3: !0,
        set: function(a, b, c) {
            this.x = a;
            this.y = b;
            this.z = c;
            return this;
        },
        setScalar: function(a) {
            this.z = this.y = this.x = a;
            return this;
        },
        setX: function(a) {
            this.x = a;
            return this;
        },
        setY: function(a) {
            this.y = a;
            return this;
        },
        setZ: function(a) {
            this.z = a;
            return this;
        },
        setComponent: function(a, b) {
            switch(a){
                case 0:
                    this.x = b;
                    break;
                case 1:
                    this.y = b;
                    break;
                case 2:
                    this.z = b;
                    break;
                default:
                    throw Error("index is out of range: " + a);
            }
            return this;
        },
        getComponent: function(a) {
            switch(a){
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw Error("index is out of range: " + a);
            }
        },
        clone: function() {
            return new this.constructor(this.x, this.y, this.z);
        },
        copy: function(a) {
            this.x = a.x;
            this.y = a.y;
            this.z = a.z;
            return this;
        },
        add: function(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
            this.x += a.x;
            this.y += a.y;
            this.z += a.z;
            return this;
        },
        addScalar: function(a) {
            this.x += a;
            this.y += a;
            this.z += a;
            return this;
        },
        addVectors: function(a, b) {
            this.x = a.x + b.x;
            this.y = a.y + b.y;
            this.z = a.z + b.z;
            return this;
        },
        addScaledVector: function(a, b) {
            this.x += a.x * b;
            this.y += a.y * b;
            this.z += a.z * b;
            return this;
        },
        sub: function(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
            this.x -= a.x;
            this.y -= a.y;
            this.z -= a.z;
            return this;
        },
        subScalar: function(a) {
            this.x -= a;
            this.y -= a;
            this.z -= a;
            return this;
        },
        subVectors: function(a, b) {
            this.x = a.x - b.x;
            this.y = a.y - b.y;
            this.z = a.z - b.z;
            return this;
        },
        multiply: function(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);
            this.x *= a.x;
            this.y *= a.y;
            this.z *= a.z;
            return this;
        },
        multiplyScalar: function(a) {
            this.x *= a;
            this.y *= a;
            this.z *= a;
            return this;
        },
        multiplyVectors: function(a, b) {
            this.x = a.x * b.x;
            this.y = a.y * b.y;
            this.z = a.z * b.z;
            return this;
        },
        applyEuler: function() {
            var a = new ma;
            return function(b) {
                b && b.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
                return this.applyQuaternion(a.setFromEuler(b));
            };
        }(),
        applyAxisAngle: function() {
            var a = new ma;
            return function(b, c) {
                return this.applyQuaternion(a.setFromAxisAngle(b, c));
            };
        }(),
        applyMatrix3: function(a) {
            var b = this.x, c = this.y, d = this.z;
            a = a.elements;
            this.x = a[0] * b + a[3] * c + a[6] * d;
            this.y = a[1] * b + a[4] * c + a[7] * d;
            this.z = a[2] * b + a[5] * c + a[8] * d;
            return this;
        },
        applyMatrix4: function(a) {
            var b = this.x, c = this.y, d = this.z;
            a = a.elements;
            var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);
            this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;
            this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;
            this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;
            return this;
        },
        applyQuaternion: function(a) {
            var b = this.x, c = this.y, d = this.z, e = a.x, f = a.y, g = a.z;
            a = a.w;
            var h = a * b + f * d - g * c, l = a * c + g * b - e * d, m = a * d + e * c - f * b;
            b = -e * b - f * c - g * d;
            this.x = h * a + b * -e + l * -g - m * -f;
            this.y = l * a + b * -f + m * -e - h * -g;
            this.z = m * a + b * -g + h * -f - l * -e;
            return this;
        },
        project: function(a) {
            return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix);
        },
        unproject: function(a) {
            return this.applyMatrix4(a.projectionMatrixInverse).applyMatrix4(a.matrixWorld);
        },
        transformDirection: function(a) {
            var b = this.x, c = this.y, d = this.z;
            a = a.elements;
            this.x = a[0] * b + a[4] * c + a[8] * d;
            this.y = a[1] * b + a[5] * c + a[9] * d;
            this.z = a[2] * b + a[6] * c + a[10] * d;
            return this.normalize();
        },
        divide: function(a) {
            this.x /= a.x;
            this.y /= a.y;
            this.z /= a.z;
            return this;
        },
        divideScalar: function(a) {
            return this.multiplyScalar(1 / a);
        },
        min: function(a) {
            this.x = Math.min(this.x, a.x);
            this.y = Math.min(this.y, a.y);
            this.z = Math.min(this.z, a.z);
            return this;
        },
        max: function(a) {
            this.x = Math.max(this.x, a.x);
            this.y = Math.max(this.y, a.y);
            this.z = Math.max(this.z, a.z);
            return this;
        },
        clamp: function(a, b) {
            this.x = Math.max(a.x, Math.min(b.x, this.x));
            this.y = Math.max(a.y, Math.min(b.y, this.y));
            this.z = Math.max(a.z, Math.min(b.z, this.z));
            return this;
        },
        clampScalar: function(a, b) {
            this.x = Math.max(a, Math.min(b, this.x));
            this.y = Math.max(a, Math.min(b, this.y));
            this.z = Math.max(a, Math.min(b, this.z));
            return this;
        },
        clampLength: function(a, b) {
            var c = this.length();
            return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
        },
        floor: function() {
            this.x = Math.floor(this.x);
            this.y = Math.floor(this.y);
            this.z = Math.floor(this.z);
            return this;
        },
        ceil: function() {
            this.x = Math.ceil(this.x);
            this.y = Math.ceil(this.y);
            this.z = Math.ceil(this.z);
            return this;
        },
        round: function() {
            this.x = Math.round(this.x);
            this.y = Math.round(this.y);
            this.z = Math.round(this.z);
            return this;
        },
        roundToZero: function() {
            this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
            this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
            this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
            return this;
        },
        negate: function() {
            this.x = -this.x;
            this.y = -this.y;
            this.z = -this.z;
            return this;
        },
        dot: function(a) {
            return this.x * a.x + this.y * a.y + this.z * a.z;
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z;
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1);
        },
        setLength: function(a) {
            return this.normalize().multiplyScalar(a);
        },
        lerp: function(a, b) {
            this.x += (a.x - this.x) * b;
            this.y += (a.y - this.y) * b;
            this.z += (a.z - this.z) * b;
            return this;
        },
        lerpVectors: function(a, b, c) {
            return this.subVectors(b, a).multiplyScalar(c).add(a);
        },
        cross: function(a, b) {
            return void 0 !== b ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b)) : this.crossVectors(this, a);
        },
        crossVectors: function(a, b) {
            var c = a.x, d = a.y;
            a = a.z;
            var e = b.x, f = b.y;
            b = b.z;
            this.x = d * b - a * f;
            this.y = a * e - c * b;
            this.z = c * f - d * e;
            return this;
        },
        projectOnVector: function(a) {
            var b = a.dot(this) / a.lengthSq();
            return this.copy(a).multiplyScalar(b);
        },
        projectOnPlane: function() {
            var a = new n;
            return function(b) {
                a.copy(this).projectOnVector(b);
                return this.sub(a);
            };
        }(),
        reflect: function() {
            var a = new n;
            return function(b) {
                return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
            };
        }(),
        angleTo: function(a) {
            a = this.dot(a) / Math.sqrt(this.lengthSq() * a.lengthSq());
            return Math.acos(O.clamp(a, -1, 1));
        },
        distanceTo: function(a) {
            return Math.sqrt(this.distanceToSquared(a));
        },
        distanceToSquared: function(a) {
            var b = this.x - a.x, c = this.y - a.y;
            a = this.z - a.z;
            return b * b + c * c + a * a;
        },
        manhattanDistanceTo: function(a) {
            return Math.abs(this.x - a.x) + Math.abs(this.y - a.y) + Math.abs(this.z - a.z);
        },
        setFromSpherical: function(a) {
            return this.setFromSphericalCoords(a.radius, a.phi, a.theta);
        },
        setFromSphericalCoords: function(a, b, c) {
            var d = Math.sin(b) * a;
            this.x = d * Math.sin(c);
            this.y = Math.cos(b) * a;
            this.z = d * Math.cos(c);
            return this;
        },
        setFromCylindrical: function(a) {
            return this.setFromCylindricalCoords(a.radius, a.theta, a.y);
        },
        setFromCylindricalCoords: function(a, b, c) {
            this.x = a * Math.sin(b);
            this.y = c;
            this.z = a * Math.cos(b);
            return this;
        },
        setFromMatrixPosition: function(a) {
            a = a.elements;
            this.x = a[12];
            this.y = a[13];
            this.z = a[14];
            return this;
        },
        setFromMatrixScale: function(a) {
            var b = this.setFromMatrixColumn(a, 0).length(), c = this.setFromMatrixColumn(a, 1).length();
            a = this.setFromMatrixColumn(a, 2).length();
            this.x = b;
            this.y = c;
            this.z = a;
            return this;
        },
        setFromMatrixColumn: function(a, b) {
            return this.fromArray(a.elements, 4 * b);
        },
        equals: function(a) {
            return a.x === this.x && a.y === this.y && a.z === this.z;
        },
        fromArray: function(a, b) {
            void 0 === b && (b = 0);
            this.x = a[b];
            this.y = a[b + 1];
            this.z = a[b + 2];
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            a[b] = this.x;
            a[b + 1] = this.y;
            a[b + 2] = this.z;
            return a;
        },
        fromBufferAttribute: function(a, b, c) {
            void 0 !== c && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
            this.x = a.getX(b);
            this.y = a.getY(b);
            this.z = a.getZ(b);
            return this;
        }
    });
    Object.assign(na.prototype, {
        isMatrix3: !0,
        set: function(a, b, c, d, e, f, g, h, l) {
            var m = this.elements;
            m[0] = a;
            m[1] = d;
            m[2] = g;
            m[3] = b;
            m[4] = e;
            m[5] = h;
            m[6] = c;
            m[7] = f;
            m[8] = l;
            return this;
        },
        identity: function() {
            this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
            return this;
        },
        clone: function() {
            return (new this.constructor).fromArray(this.elements);
        },
        copy: function(a) {
            var b = this.elements;
            a = a.elements;
            b[0] = a[0];
            b[1] = a[1];
            b[2] = a[2];
            b[3] = a[3];
            b[4] = a[4];
            b[5] = a[5];
            b[6] = a[6];
            b[7] = a[7];
            b[8] = a[8];
            return this;
        },
        setFromMatrix4: function(a) {
            a = a.elements;
            this.set(a[0], a[4], a[8], a[1], a[5], a[9], a[2], a[6], a[10]);
            return this;
        },
        applyToBufferAttribute: function() {
            var a = new n;
            return function(b) {
                for(var c = 0, d = b.count; c < d; c++)a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix3(this), b.setXYZ(c, a.x, a.y, a.z);
                return b;
            };
        }(),
        multiply: function(a) {
            return this.multiplyMatrices(this, a);
        },
        premultiply: function(a) {
            return this.multiplyMatrices(a, this);
        },
        multiplyMatrices: function(a, b) {
            var c = a.elements, d = b.elements;
            b = this.elements;
            a = c[0];
            var e = c[3], f = c[6], g = c[1], h = c[4], l = c[7], m = c[2], k = c[5];
            c = c[8];
            var p = d[0], n = d[3], t = d[6], r = d[1], u = d[4], w = d[7], z = d[2], x = d[5];
            d = d[8];
            b[0] = a * p + e * r + f * z;
            b[3] = a * n + e * u + f * x;
            b[6] = a * t + e * w + f * d;
            b[1] = g * p + h * r + l * z;
            b[4] = g * n + h * u + l * x;
            b[7] = g * t + h * w + l * d;
            b[2] = m * p + k * r + c * z;
            b[5] = m * n + k * u + c * x;
            b[8] = m * t + k * w + c * d;
            return this;
        },
        multiplyScalar: function(a) {
            var b = this.elements;
            b[0] *= a;
            b[3] *= a;
            b[6] *= a;
            b[1] *= a;
            b[4] *= a;
            b[7] *= a;
            b[2] *= a;
            b[5] *= a;
            b[8] *= a;
            return this;
        },
        determinant: function() {
            var a = this.elements, b = a[0], c = a[1], d = a[2], e = a[3], f = a[4], g = a[5], h = a[6], l = a[7];
            a = a[8];
            return b * f * a - b * g * l - c * e * a + c * g * h + d * e * l - d * f * h;
        },
        getInverse: function(a, b) {
            a && a.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
            var c = a.elements;
            a = this.elements;
            var d = c[0], e = c[1], f = c[2], g = c[3], h = c[4], l = c[5], m = c[6], k = c[7];
            c = c[8];
            var p = c * h - l * k, n = l * m - c * g, t = k * g - h * m, r = d * p + e * n + f * t;
            if (0 === r) {
                if (!0 === b) throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
                console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");
                return this.identity();
            }
            b = 1 / r;
            a[0] = p * b;
            a[1] = (f * k - c * e) * b;
            a[2] = (l * e - f * h) * b;
            a[3] = n * b;
            a[4] = (c * d - f * m) * b;
            a[5] = (f * g - l * d) * b;
            a[6] = t * b;
            a[7] = (e * m - k * d) * b;
            a[8] = (h * d - e * g) * b;
            return this;
        },
        transpose: function() {
            var a = this.elements;
            var b = a[1];
            a[1] = a[3];
            a[3] = b;
            b = a[2];
            a[2] = a[6];
            a[6] = b;
            b = a[5];
            a[5] = a[7];
            a[7] = b;
            return this;
        },
        getNormalMatrix: function(a) {
            return this.setFromMatrix4(a).getInverse(this).transpose();
        },
        transposeIntoArray: function(a) {
            var b = this.elements;
            a[0] = b[0];
            a[1] = b[3];
            a[2] = b[6];
            a[3] = b[1];
            a[4] = b[4];
            a[5] = b[7];
            a[6] = b[2];
            a[7] = b[5];
            a[8] = b[8];
            return this;
        },
        setUvTransform: function(a, b, c, d, e, f, g) {
            var h = Math.cos(e);
            e = Math.sin(e);
            this.set(c * h, c * e, -c * (h * f + e * g) + f + a, -d * e, d * h, -d * (-e * f + h * g) + g + b, 0, 0, 1);
        },
        scale: function(a, b) {
            var c = this.elements;
            c[0] *= a;
            c[3] *= a;
            c[6] *= a;
            c[1] *= b;
            c[4] *= b;
            c[7] *= b;
            return this;
        },
        rotate: function(a) {
            var b = Math.cos(a);
            a = Math.sin(a);
            var c = this.elements, d = c[0], e = c[3], f = c[6], g = c[1], h = c[4], l = c[7];
            c[0] = b * d + a * g;
            c[3] = b * e + a * h;
            c[6] = b * f + a * l;
            c[1] = -a * d + b * g;
            c[4] = -a * e + b * h;
            c[7] = -a * f + b * l;
            return this;
        },
        translate: function(a, b) {
            var c = this.elements;
            c[0] += a * c[2];
            c[3] += a * c[5];
            c[6] += a * c[8];
            c[1] += b * c[2];
            c[4] += b * c[5];
            c[7] += b * c[8];
            return this;
        },
        equals: function(a) {
            var b = this.elements;
            a = a.elements;
            for(var c = 0; 9 > c; c++)if (b[c] !== a[c]) return !1;
            return !0;
        },
        fromArray: function(a, b) {
            void 0 === b && (b = 0);
            for(var c = 0; 9 > c; c++)this.elements[c] = a[c + b];
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            var c = this.elements;
            a[b] = c[0];
            a[b + 1] = c[1];
            a[b + 2] = c[2];
            a[b + 3] = c[3];
            a[b + 4] = c[4];
            a[b + 5] = c[5];
            a[b + 6] = c[6];
            a[b + 7] = c[7];
            a[b + 8] = c[8];
            return a;
        }
    });
    var zc, qb = {
        getDataURL: function(a) {
            if ("undefined" == typeof HTMLCanvasElement) return a.src;
            if (!(a instanceof HTMLCanvasElement)) {
                void 0 === zc && (zc = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"));
                zc.width = a.width;
                zc.height = a.height;
                var b = zc.getContext("2d");
                a instanceof ImageData ? b.putImageData(a, 0, 0) : b.drawImage(a, 0, 0, a.width, a.height);
                a = zc;
            }
            return 2048 < a.width || 2048 < a.height ? a.toDataURL("image/jpeg", .6) : a.toDataURL("image/png");
        }
    }, Yf = 0;
    Y.DEFAULT_IMAGE = void 0;
    Y.DEFAULT_MAPPING = 300;
    Y.prototype = Object.assign(Object.create(ta.prototype), {
        constructor: Y,
        isTexture: !0,
        updateMatrix: function() {
            this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.name = a.name;
            this.image = a.image;
            this.mipmaps = a.mipmaps.slice(0);
            this.mapping = a.mapping;
            this.wrapS = a.wrapS;
            this.wrapT = a.wrapT;
            this.magFilter = a.magFilter;
            this.minFilter = a.minFilter;
            this.anisotropy = a.anisotropy;
            this.format = a.format;
            this.type = a.type;
            this.offset.copy(a.offset);
            this.repeat.copy(a.repeat);
            this.center.copy(a.center);
            this.rotation = a.rotation;
            this.matrixAutoUpdate = a.matrixAutoUpdate;
            this.matrix.copy(a.matrix);
            this.generateMipmaps = a.generateMipmaps;
            this.premultiplyAlpha = a.premultiplyAlpha;
            this.flipY = a.flipY;
            this.unpackAlignment = a.unpackAlignment;
            this.encoding = a.encoding;
            return this;
        },
        toJSON: function(a) {
            var b = void 0 === a || "string" === typeof a;
            if (!b && void 0 !== a.textures[this.uuid]) return a.textures[this.uuid];
            var c = {
                metadata: {
                    version: 4.5,
                    type: "Texture",
                    generator: "Texture.toJSON"
                },
                uuid: this.uuid,
                name: this.name,
                mapping: this.mapping,
                repeat: [
                    this.repeat.x,
                    this.repeat.y
                ],
                offset: [
                    this.offset.x,
                    this.offset.y
                ],
                center: [
                    this.center.x,
                    this.center.y
                ],
                rotation: this.rotation,
                wrap: [
                    this.wrapS,
                    this.wrapT
                ],
                format: this.format,
                type: this.type,
                encoding: this.encoding,
                minFilter: this.minFilter,
                magFilter: this.magFilter,
                anisotropy: this.anisotropy,
                flipY: this.flipY,
                premultiplyAlpha: this.premultiplyAlpha,
                unpackAlignment: this.unpackAlignment
            };
            if (void 0 !== this.image) {
                var d = this.image;
                void 0 === d.uuid && (d.uuid = O.generateUUID());
                if (!b && void 0 === a.images[d.uuid]) {
                    if (Array.isArray(d)) {
                        var e = [];
                        for(var f = 0, g = d.length; f < g; f++)e.push(qb.getDataURL(d[f]));
                    } else e = qb.getDataURL(d);
                    a.images[d.uuid] = {
                        uuid: d.uuid,
                        url: e
                    };
                }
                c.image = d.uuid;
            }
            b || (a.textures[this.uuid] = c);
            return c;
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            });
        },
        transformUv: function(a) {
            if (300 !== this.mapping) return a;
            a.applyMatrix3(this.matrix);
            if (0 > a.x || 1 < a.x) switch(this.wrapS){
                case 1E3:
                    a.x -= Math.floor(a.x);
                    break;
                case 1001:
                    a.x = 0 > a.x ? 0 : 1;
                    break;
                case 1002:
                    a.x = 1 === Math.abs(Math.floor(a.x) % 2) ? Math.ceil(a.x) - a.x : a.x - Math.floor(a.x);
            }
            if (0 > a.y || 1 < a.y) switch(this.wrapT){
                case 1E3:
                    a.y -= Math.floor(a.y);
                    break;
                case 1001:
                    a.y = 0 > a.y ? 0 : 1;
                    break;
                case 1002:
                    a.y = 1 === Math.abs(Math.floor(a.y) % 2) ? Math.ceil(a.y) - a.y : a.y - Math.floor(a.y);
            }
            this.flipY && (a.y = 1 - a.y);
            return a;
        }
    });
    Object.defineProperty(Y.prototype, "needsUpdate", {
        set: function(a) {
            !0 === a && this.version++;
        }
    });
    Object.assign(W.prototype, {
        isVector4: !0,
        set: function(a, b, c, d) {
            this.x = a;
            this.y = b;
            this.z = c;
            this.w = d;
            return this;
        },
        setScalar: function(a) {
            this.w = this.z = this.y = this.x = a;
            return this;
        },
        setX: function(a) {
            this.x = a;
            return this;
        },
        setY: function(a) {
            this.y = a;
            return this;
        },
        setZ: function(a) {
            this.z = a;
            return this;
        },
        setW: function(a) {
            this.w = a;
            return this;
        },
        setComponent: function(a, b) {
            switch(a){
                case 0:
                    this.x = b;
                    break;
                case 1:
                    this.y = b;
                    break;
                case 2:
                    this.z = b;
                    break;
                case 3:
                    this.w = b;
                    break;
                default:
                    throw Error("index is out of range: " + a);
            }
            return this;
        },
        getComponent: function(a) {
            switch(a){
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                case 3:
                    return this.w;
                default:
                    throw Error("index is out of range: " + a);
            }
        },
        clone: function() {
            return new this.constructor(this.x, this.y, this.z, this.w);
        },
        copy: function(a) {
            this.x = a.x;
            this.y = a.y;
            this.z = a.z;
            this.w = void 0 !== a.w ? a.w : 1;
            return this;
        },
        add: function(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
            this.x += a.x;
            this.y += a.y;
            this.z += a.z;
            this.w += a.w;
            return this;
        },
        addScalar: function(a) {
            this.x += a;
            this.y += a;
            this.z += a;
            this.w += a;
            return this;
        },
        addVectors: function(a, b) {
            this.x = a.x + b.x;
            this.y = a.y + b.y;
            this.z = a.z + b.z;
            this.w = a.w + b.w;
            return this;
        },
        addScaledVector: function(a, b) {
            this.x += a.x * b;
            this.y += a.y * b;
            this.z += a.z * b;
            this.w += a.w * b;
            return this;
        },
        sub: function(a, b) {
            if (void 0 !== b) return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
            this.x -= a.x;
            this.y -= a.y;
            this.z -= a.z;
            this.w -= a.w;
            return this;
        },
        subScalar: function(a) {
            this.x -= a;
            this.y -= a;
            this.z -= a;
            this.w -= a;
            return this;
        },
        subVectors: function(a, b) {
            this.x = a.x - b.x;
            this.y = a.y - b.y;
            this.z = a.z - b.z;
            this.w = a.w - b.w;
            return this;
        },
        multiplyScalar: function(a) {
            this.x *= a;
            this.y *= a;
            this.z *= a;
            this.w *= a;
            return this;
        },
        applyMatrix4: function(a) {
            var b = this.x, c = this.y, d = this.z, e = this.w;
            a = a.elements;
            this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;
            this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;
            this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;
            this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;
            return this;
        },
        divideScalar: function(a) {
            return this.multiplyScalar(1 / a);
        },
        setAxisAngleFromQuaternion: function(a) {
            this.w = 2 * Math.acos(a.w);
            var b = Math.sqrt(1 - a.w * a.w);
            1E-4 > b ? (this.x = 1, this.z = this.y = 0) : (this.x = a.x / b, this.y = a.y / b, this.z = a.z / b);
            return this;
        },
        setAxisAngleFromRotationMatrix: function(a) {
            a = a.elements;
            var b = a[0];
            var c = a[4];
            var d = a[8], e = a[1], f = a[5], g = a[9];
            var h = a[2];
            var l = a[6];
            var m = a[10];
            if (.01 > Math.abs(c - e) && .01 > Math.abs(d - h) && .01 > Math.abs(g - l)) {
                if (.1 > Math.abs(c + e) && .1 > Math.abs(d + h) && .1 > Math.abs(g + l) && .1 > Math.abs(b + f + m - 3)) return this.set(1, 0, 0, 0), this;
                a = Math.PI;
                b = (b + 1) / 2;
                f = (f + 1) / 2;
                m = (m + 1) / 2;
                c = (c + e) / 4;
                d = (d + h) / 4;
                g = (g + l) / 4;
                b > f && b > m ? .01 > b ? (l = 0, c = h = .707106781) : (l = Math.sqrt(b), h = c / l, c = d / l) : f > m ? .01 > f ? (l = .707106781, h = 0, c = .707106781) : (h = Math.sqrt(f), l = c / h, c = g / h) : .01 > m ? (h = l = .707106781, c = 0) : (c = Math.sqrt(m), l = d / c, h = g / c);
                this.set(l, h, c, a);
                return this;
            }
            a = Math.sqrt((l - g) * (l - g) + (d - h) * (d - h) + (e - c) * (e - c));
            .001 > Math.abs(a) && (a = 1);
            this.x = (l - g) / a;
            this.y = (d - h) / a;
            this.z = (e - c) / a;
            this.w = Math.acos((b + f + m - 1) / 2);
            return this;
        },
        min: function(a) {
            this.x = Math.min(this.x, a.x);
            this.y = Math.min(this.y, a.y);
            this.z = Math.min(this.z, a.z);
            this.w = Math.min(this.w, a.w);
            return this;
        },
        max: function(a) {
            this.x = Math.max(this.x, a.x);
            this.y = Math.max(this.y, a.y);
            this.z = Math.max(this.z, a.z);
            this.w = Math.max(this.w, a.w);
            return this;
        },
        clamp: function(a, b) {
            this.x = Math.max(a.x, Math.min(b.x, this.x));
            this.y = Math.max(a.y, Math.min(b.y, this.y));
            this.z = Math.max(a.z, Math.min(b.z, this.z));
            this.w = Math.max(a.w, Math.min(b.w, this.w));
            return this;
        },
        clampScalar: function() {
            var a, b;
            return function(c, d) {
                void 0 === a && (a = new W, b = new W);
                a.set(c, c, c, c);
                b.set(d, d, d, d);
                return this.clamp(a, b);
            };
        }(),
        clampLength: function(a, b) {
            var c = this.length();
            return this.divideScalar(c || 1).multiplyScalar(Math.max(a, Math.min(b, c)));
        },
        floor: function() {
            this.x = Math.floor(this.x);
            this.y = Math.floor(this.y);
            this.z = Math.floor(this.z);
            this.w = Math.floor(this.w);
            return this;
        },
        ceil: function() {
            this.x = Math.ceil(this.x);
            this.y = Math.ceil(this.y);
            this.z = Math.ceil(this.z);
            this.w = Math.ceil(this.w);
            return this;
        },
        round: function() {
            this.x = Math.round(this.x);
            this.y = Math.round(this.y);
            this.z = Math.round(this.z);
            this.w = Math.round(this.w);
            return this;
        },
        roundToZero: function() {
            this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
            this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
            this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
            this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
            return this;
        },
        negate: function() {
            this.x = -this.x;
            this.y = -this.y;
            this.z = -this.z;
            this.w = -this.w;
            return this;
        },
        dot: function(a) {
            return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1);
        },
        setLength: function(a) {
            return this.normalize().multiplyScalar(a);
        },
        lerp: function(a, b) {
            this.x += (a.x - this.x) * b;
            this.y += (a.y - this.y) * b;
            this.z += (a.z - this.z) * b;
            this.w += (a.w - this.w) * b;
            return this;
        },
        lerpVectors: function(a, b, c) {
            return this.subVectors(b, a).multiplyScalar(c).add(a);
        },
        equals: function(a) {
            return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
        },
        fromArray: function(a, b) {
            void 0 === b && (b = 0);
            this.x = a[b];
            this.y = a[b + 1];
            this.z = a[b + 2];
            this.w = a[b + 3];
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            a[b] = this.x;
            a[b + 1] = this.y;
            a[b + 2] = this.z;
            a[b + 3] = this.w;
            return a;
        },
        fromBufferAttribute: function(a, b, c) {
            void 0 !== c && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
            this.x = a.getX(b);
            this.y = a.getY(b);
            this.z = a.getZ(b);
            this.w = a.getW(b);
            return this;
        }
    });
    Sa.prototype = Object.assign(Object.create(ta.prototype), {
        constructor: Sa,
        isWebGLRenderTarget: !0,
        setSize: function(a, b) {
            if (this.width !== a || this.height !== b) this.width = a, this.height = b, this.dispose();
            this.viewport.set(0, 0, a, b);
            this.scissor.set(0, 0, a, b);
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.width = a.width;
            this.height = a.height;
            this.viewport.copy(a.viewport);
            this.texture = a.texture.clone();
            this.depthBuffer = a.depthBuffer;
            this.stencilBuffer = a.stencilBuffer;
            this.depthTexture = a.depthTexture;
            return this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            });
        }
    });
    ce.prototype = Object.assign(Object.create(Sa.prototype), {
        constructor: ce,
        isWebGLMultisampleRenderTarget: !0,
        copy: function(a) {
            Sa.prototype.copy.call(this, a);
            this.samples = a.samples;
            return this;
        }
    });
    rb.prototype = Object.create(Sa.prototype);
    rb.prototype.constructor = rb;
    rb.prototype.isWebGLRenderTargetCube = !0;
    sb.prototype = Object.create(Y.prototype);
    sb.prototype.constructor = sb;
    sb.prototype.isDataTexture = !0;
    Object.assign(Ga.prototype, {
        isBox3: !0,
        set: function(a, b) {
            this.min.copy(a);
            this.max.copy(b);
            return this;
        },
        setFromArray: function(a) {
            for(var b = Infinity, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = -Infinity, h = 0, l = a.length; h < l; h += 3){
                var m = a[h], k = a[h + 1], p = a[h + 2];
                m < b && (b = m);
                k < c && (c = k);
                p < d && (d = p);
                m > e && (e = m);
                k > f && (f = k);
                p > g && (g = p);
            }
            this.min.set(b, c, d);
            this.max.set(e, f, g);
            return this;
        },
        setFromBufferAttribute: function(a) {
            for(var b = Infinity, c = Infinity, d = Infinity, e = -Infinity, f = -Infinity, g = -Infinity, h = 0, l = a.count; h < l; h++){
                var m = a.getX(h), k = a.getY(h), p = a.getZ(h);
                m < b && (b = m);
                k < c && (c = k);
                p < d && (d = p);
                m > e && (e = m);
                k > f && (f = k);
                p > g && (g = p);
            }
            this.min.set(b, c, d);
            this.max.set(e, f, g);
            return this;
        },
        setFromPoints: function(a) {
            this.makeEmpty();
            for(var b = 0, c = a.length; b < c; b++)this.expandByPoint(a[b]);
            return this;
        },
        setFromCenterAndSize: function() {
            var a = new n;
            return function(b, c) {
                c = a.copy(c).multiplyScalar(.5);
                this.min.copy(b).sub(c);
                this.max.copy(b).add(c);
                return this;
            };
        }(),
        setFromObject: function(a) {
            this.makeEmpty();
            return this.expandByObject(a);
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.min.copy(a.min);
            this.max.copy(a.max);
            return this;
        },
        makeEmpty: function() {
            this.min.x = this.min.y = this.min.z = Infinity;
            this.max.x = this.max.y = this.max.z = -Infinity;
            return this;
        },
        isEmpty: function() {
            return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        },
        getCenter: function(a) {
            void 0 === a && (console.warn("THREE.Box3: .getCenter() target is now required"), a = new n);
            return this.isEmpty() ? a.set(0, 0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
        },
        getSize: function(a) {
            void 0 === a && (console.warn("THREE.Box3: .getSize() target is now required"), a = new n);
            return this.isEmpty() ? a.set(0, 0, 0) : a.subVectors(this.max, this.min);
        },
        expandByPoint: function(a) {
            this.min.min(a);
            this.max.max(a);
            return this;
        },
        expandByVector: function(a) {
            this.min.sub(a);
            this.max.add(a);
            return this;
        },
        expandByScalar: function(a) {
            this.min.addScalar(-a);
            this.max.addScalar(a);
            return this;
        },
        expandByObject: function() {
            function a(a) {
                var f = a.geometry;
                if (void 0 !== f) {
                    if (f.isGeometry) for(f = f.vertices, c = 0, d = f.length; c < d; c++)e.copy(f[c]), e.applyMatrix4(a.matrixWorld), b.expandByPoint(e);
                    else if (f.isBufferGeometry && (f = f.attributes.position, void 0 !== f)) for(c = 0, d = f.count; c < d; c++)e.fromBufferAttribute(f, c).applyMatrix4(a.matrixWorld), b.expandByPoint(e);
                }
            }
            var b, c, d, e = new n;
            return function(c) {
                b = this;
                c.updateMatrixWorld(!0);
                c.traverse(a);
                return this;
            };
        }(),
        containsPoint: function(a) {
            return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
        },
        containsBox: function(a) {
            return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z;
        },
        getParameter: function(a, b) {
            void 0 === b && (console.warn("THREE.Box3: .getParameter() target is now required"), b = new n);
            return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
        },
        intersectsBox: function(a) {
            return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
        },
        intersectsSphere: function() {
            var a = new n;
            return function(b) {
                this.clampPoint(b.center, a);
                return a.distanceToSquared(b.center) <= b.radius * b.radius;
            };
        }(),
        intersectsPlane: function(a) {
            if (0 < a.normal.x) {
                var b = a.normal.x * this.min.x;
                var c = a.normal.x * this.max.x;
            } else b = a.normal.x * this.max.x, c = a.normal.x * this.min.x;
            0 < a.normal.y ? (b += a.normal.y * this.min.y, c += a.normal.y * this.max.y) : (b += a.normal.y * this.max.y, c += a.normal.y * this.min.y);
            0 < a.normal.z ? (b += a.normal.z * this.min.z, c += a.normal.z * this.max.z) : (b += a.normal.z * this.max.z, c += a.normal.z * this.min.z);
            return b <= -a.constant && c >= -a.constant;
        },
        intersectsTriangle: function() {
            function a(a) {
                var e;
                var f = 0;
                for(e = a.length - 3; f <= e; f += 3){
                    h.fromArray(a, f);
                    var g = m.x * Math.abs(h.x) + m.y * Math.abs(h.y) + m.z * Math.abs(h.z), l = b.dot(h), k = c.dot(h), q = d.dot(h);
                    if (Math.max(-Math.max(l, k, q), Math.min(l, k, q)) > g) return !1;
                }
                return !0;
            }
            var b = new n, c = new n, d = new n, e = new n, f = new n, g = new n, h = new n, l = new n, m = new n, k = new n;
            return function(h) {
                if (this.isEmpty()) return !1;
                this.getCenter(l);
                m.subVectors(this.max, l);
                b.subVectors(h.a, l);
                c.subVectors(h.b, l);
                d.subVectors(h.c, l);
                e.subVectors(c, b);
                f.subVectors(d, c);
                g.subVectors(b, d);
                h = [
                    0,
                    -e.z,
                    e.y,
                    0,
                    -f.z,
                    f.y,
                    0,
                    -g.z,
                    g.y,
                    e.z,
                    0,
                    -e.x,
                    f.z,
                    0,
                    -f.x,
                    g.z,
                    0,
                    -g.x,
                    -e.y,
                    e.x,
                    0,
                    -f.y,
                    f.x,
                    0,
                    -g.y,
                    g.x,
                    0
                ];
                if (!a(h)) return !1;
                h = [
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1
                ];
                if (!a(h)) return !1;
                k.crossVectors(e, f);
                h = [
                    k.x,
                    k.y,
                    k.z
                ];
                return a(h);
            };
        }(),
        clampPoint: function(a, b) {
            void 0 === b && (console.warn("THREE.Box3: .clampPoint() target is now required"), b = new n);
            return b.copy(a).clamp(this.min, this.max);
        },
        distanceToPoint: function() {
            var a = new n;
            return function(b) {
                return a.copy(b).clamp(this.min, this.max).sub(b).length();
            };
        }(),
        getBoundingSphere: function() {
            var a = new n;
            return function(b) {
                void 0 === b && console.error("THREE.Box3: .getBoundingSphere() target is now required");
                this.getCenter(b.center);
                b.radius = .5 * this.getSize(a).length();
                return b;
            };
        }(),
        intersect: function(a) {
            this.min.max(a.min);
            this.max.min(a.max);
            this.isEmpty() && this.makeEmpty();
            return this;
        },
        union: function(a) {
            this.min.min(a.min);
            this.max.max(a.max);
            return this;
        },
        applyMatrix4: function() {
            var a = [
                new n,
                new n,
                new n,
                new n,
                new n,
                new n,
                new n,
                new n
            ];
            return function(b) {
                if (this.isEmpty()) return this;
                a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);
                a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);
                a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);
                a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);
                a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);
                a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);
                a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);
                a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);
                this.setFromPoints(a);
                return this;
            };
        }(),
        translate: function(a) {
            this.min.add(a);
            this.max.add(a);
            return this;
        },
        equals: function(a) {
            return a.min.equals(this.min) && a.max.equals(this.max);
        }
    });
    Object.assign(Ta.prototype, {
        set: function(a, b) {
            this.center.copy(a);
            this.radius = b;
            return this;
        },
        setFromPoints: function() {
            var a = new Ga;
            return function(b, c) {
                var d = this.center;
                void 0 !== c ? d.copy(c) : a.setFromPoints(b).getCenter(d);
                for(var e = c = 0, f = b.length; e < f; e++)c = Math.max(c, d.distanceToSquared(b[e]));
                this.radius = Math.sqrt(c);
                return this;
            };
        }(),
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.center.copy(a.center);
            this.radius = a.radius;
            return this;
        },
        empty: function() {
            return 0 >= this.radius;
        },
        containsPoint: function(a) {
            return a.distanceToSquared(this.center) <= this.radius * this.radius;
        },
        distanceToPoint: function(a) {
            return a.distanceTo(this.center) - this.radius;
        },
        intersectsSphere: function(a) {
            var b = this.radius + a.radius;
            return a.center.distanceToSquared(this.center) <= b * b;
        },
        intersectsBox: function(a) {
            return a.intersectsSphere(this);
        },
        intersectsPlane: function(a) {
            return Math.abs(a.distanceToPoint(this.center)) <= this.radius;
        },
        clampPoint: function(a, b) {
            var c = this.center.distanceToSquared(a);
            void 0 === b && (console.warn("THREE.Sphere: .clampPoint() target is now required"), b = new n);
            b.copy(a);
            c > this.radius * this.radius && (b.sub(this.center).normalize(), b.multiplyScalar(this.radius).add(this.center));
            return b;
        },
        getBoundingBox: function(a) {
            void 0 === a && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), a = new Ga);
            a.set(this.center, this.center);
            a.expandByScalar(this.radius);
            return a;
        },
        applyMatrix4: function(a) {
            this.center.applyMatrix4(a);
            this.radius *= a.getMaxScaleOnAxis();
            return this;
        },
        translate: function(a) {
            this.center.add(a);
            return this;
        },
        equals: function(a) {
            return a.center.equals(this.center) && a.radius === this.radius;
        }
    });
    Object.assign(Ua.prototype, {
        set: function(a, b) {
            this.normal.copy(a);
            this.constant = b;
            return this;
        },
        setComponents: function(a, b, c, d) {
            this.normal.set(a, b, c);
            this.constant = d;
            return this;
        },
        setFromNormalAndCoplanarPoint: function(a, b) {
            this.normal.copy(a);
            this.constant = -b.dot(this.normal);
            return this;
        },
        setFromCoplanarPoints: function() {
            var a = new n, b = new n;
            return function(c, d, e) {
                d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();
                this.setFromNormalAndCoplanarPoint(d, c);
                return this;
            };
        }(),
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.normal.copy(a.normal);
            this.constant = a.constant;
            return this;
        },
        normalize: function() {
            var a = 1 / this.normal.length();
            this.normal.multiplyScalar(a);
            this.constant *= a;
            return this;
        },
        negate: function() {
            this.constant *= -1;
            this.normal.negate();
            return this;
        },
        distanceToPoint: function(a) {
            return this.normal.dot(a) + this.constant;
        },
        distanceToSphere: function(a) {
            return this.distanceToPoint(a.center) - a.radius;
        },
        projectPoint: function(a, b) {
            void 0 === b && (console.warn("THREE.Plane: .projectPoint() target is now required"), b = new n);
            return b.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a);
        },
        intersectLine: function() {
            var a = new n;
            return function(b, c) {
                void 0 === c && (console.warn("THREE.Plane: .intersectLine() target is now required"), c = new n);
                var d = b.delta(a), e = this.normal.dot(d);
                if (0 === e) {
                    if (0 === this.distanceToPoint(b.start)) return c.copy(b.start);
                } else if (e = -(b.start.dot(this.normal) + this.constant) / e, !(0 > e || 1 < e)) return c.copy(d).multiplyScalar(e).add(b.start);
            };
        }(),
        intersectsLine: function(a) {
            var b = this.distanceToPoint(a.start);
            a = this.distanceToPoint(a.end);
            return 0 > b && 0 < a || 0 > a && 0 < b;
        },
        intersectsBox: function(a) {
            return a.intersectsPlane(this);
        },
        intersectsSphere: function(a) {
            return a.intersectsPlane(this);
        },
        coplanarPoint: function(a) {
            void 0 === a && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), a = new n);
            return a.copy(this.normal).multiplyScalar(-this.constant);
        },
        applyMatrix4: function() {
            var a = new n, b = new na;
            return function(c, d) {
                d = d || b.getNormalMatrix(c);
                c = this.coplanarPoint(a).applyMatrix4(c);
                d = this.normal.applyMatrix3(d).normalize();
                this.constant = -c.dot(d);
                return this;
            };
        }(),
        translate: function(a) {
            this.constant -= a.dot(this.normal);
            return this;
        },
        equals: function(a) {
            return a.normal.equals(this.normal) && a.constant === this.constant;
        }
    });
    Object.assign(yd.prototype, {
        set: function(a, b, c, d, e, f) {
            var g = this.planes;
            g[0].copy(a);
            g[1].copy(b);
            g[2].copy(c);
            g[3].copy(d);
            g[4].copy(e);
            g[5].copy(f);
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            for(var b = this.planes, c = 0; 6 > c; c++)b[c].copy(a.planes[c]);
            return this;
        },
        setFromMatrix: function(a) {
            var b = this.planes, c = a.elements;
            a = c[0];
            var d = c[1], e = c[2], f = c[3], g = c[4], h = c[5], l = c[6], m = c[7], k = c[8], p = c[9], n = c[10], t = c[11], r = c[12], u = c[13], w = c[14];
            c = c[15];
            b[0].setComponents(f - a, m - g, t - k, c - r).normalize();
            b[1].setComponents(f + a, m + g, t + k, c + r).normalize();
            b[2].setComponents(f + d, m + h, t + p, c + u).normalize();
            b[3].setComponents(f - d, m - h, t - p, c - u).normalize();
            b[4].setComponents(f - e, m - l, t - n, c - w).normalize();
            b[5].setComponents(f + e, m + l, t + n, c + w).normalize();
            return this;
        },
        intersectsObject: function() {
            var a = new Ta;
            return function(b) {
                var c = b.geometry;
                null === c.boundingSphere && c.computeBoundingSphere();
                a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);
                return this.intersectsSphere(a);
            };
        }(),
        intersectsSprite: function() {
            var a = new Ta;
            return function(b) {
                a.center.set(0, 0, 0);
                a.radius = .7071067811865476;
                a.applyMatrix4(b.matrixWorld);
                return this.intersectsSphere(a);
            };
        }(),
        intersectsSphere: function(a) {
            var b = this.planes, c = a.center;
            a = -a.radius;
            for(var d = 0; 6 > d; d++)if (b[d].distanceToPoint(c) < a) return !1;
            return !0;
        },
        intersectsBox: function() {
            var a = new n;
            return function(b) {
                for(var c = this.planes, d = 0; 6 > d; d++){
                    var e = c[d];
                    a.x = 0 < e.normal.x ? b.max.x : b.min.x;
                    a.y = 0 < e.normal.y ? b.max.y : b.min.y;
                    a.z = 0 < e.normal.z ? b.max.z : b.min.z;
                    if (0 > e.distanceToPoint(a)) return !1;
                }
                return !0;
            };
        }(),
        containsPoint: function(a) {
            for(var b = this.planes, c = 0; 6 > c; c++)if (0 > b[c].distanceToPoint(a)) return !1;
            return !0;
        }
    });
    Object.assign(P.prototype, {
        isMatrix4: !0,
        set: function(a, b, c, d, e, f, g, h, l, m, k, p, n, t, r, u) {
            var q = this.elements;
            q[0] = a;
            q[4] = b;
            q[8] = c;
            q[12] = d;
            q[1] = e;
            q[5] = f;
            q[9] = g;
            q[13] = h;
            q[2] = l;
            q[6] = m;
            q[10] = k;
            q[14] = p;
            q[3] = n;
            q[7] = t;
            q[11] = r;
            q[15] = u;
            return this;
        },
        identity: function() {
            this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            return this;
        },
        clone: function() {
            return (new P).fromArray(this.elements);
        },
        copy: function(a) {
            var b = this.elements;
            a = a.elements;
            b[0] = a[0];
            b[1] = a[1];
            b[2] = a[2];
            b[3] = a[3];
            b[4] = a[4];
            b[5] = a[5];
            b[6] = a[6];
            b[7] = a[7];
            b[8] = a[8];
            b[9] = a[9];
            b[10] = a[10];
            b[11] = a[11];
            b[12] = a[12];
            b[13] = a[13];
            b[14] = a[14];
            b[15] = a[15];
            return this;
        },
        copyPosition: function(a) {
            var b = this.elements;
            a = a.elements;
            b[12] = a[12];
            b[13] = a[13];
            b[14] = a[14];
            return this;
        },
        extractBasis: function(a, b, c) {
            a.setFromMatrixColumn(this, 0);
            b.setFromMatrixColumn(this, 1);
            c.setFromMatrixColumn(this, 2);
            return this;
        },
        makeBasis: function(a, b, c) {
            this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);
            return this;
        },
        extractRotation: function() {
            var a = new n;
            return function(b) {
                var c = this.elements, d = b.elements, e = 1 / a.setFromMatrixColumn(b, 0).length(), f = 1 / a.setFromMatrixColumn(b, 1).length();
                b = 1 / a.setFromMatrixColumn(b, 2).length();
                c[0] = d[0] * e;
                c[1] = d[1] * e;
                c[2] = d[2] * e;
                c[3] = 0;
                c[4] = d[4] * f;
                c[5] = d[5] * f;
                c[6] = d[6] * f;
                c[7] = 0;
                c[8] = d[8] * b;
                c[9] = d[9] * b;
                c[10] = d[10] * b;
                c[11] = 0;
                c[12] = 0;
                c[13] = 0;
                c[14] = 0;
                c[15] = 1;
                return this;
            };
        }(),
        makeRotationFromEuler: function(a) {
            a && a.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
            var b = this.elements, c = a.x, d = a.y, e = a.z, f = Math.cos(c);
            c = Math.sin(c);
            var g = Math.cos(d);
            d = Math.sin(d);
            var h = Math.cos(e);
            e = Math.sin(e);
            if ("XYZ" === a.order) {
                a = f * h;
                var l = f * e, m = c * h, k = c * e;
                b[0] = g * h;
                b[4] = -g * e;
                b[8] = d;
                b[1] = l + m * d;
                b[5] = a - k * d;
                b[9] = -c * g;
                b[2] = k - a * d;
                b[6] = m + l * d;
                b[10] = f * g;
            } else "YXZ" === a.order ? (a = g * h, l = g * e, m = d * h, k = d * e, b[0] = a + k * c, b[4] = m * c - l, b[8] = f * d, b[1] = f * e, b[5] = f * h, b[9] = -c, b[2] = l * c - m, b[6] = k + a * c, b[10] = f * g) : "ZXY" === a.order ? (a = g * h, l = g * e, m = d * h, k = d * e, b[0] = a - k * c, b[4] = -f * e, b[8] = m + l * c, b[1] = l + m * c, b[5] = f * h, b[9] = k - a * c, b[2] = -f * d, b[6] = c, b[10] = f * g) : "ZYX" === a.order ? (a = f * h, l = f * e, m = c * h, k = c * e, b[0] = g * h, b[4] = m * d - l, b[8] = a * d + k, b[1] = g * e, b[5] = k * d + a, b[9] = l * d - m, b[2] = -d, b[6] = c * g, b[10] = f * g) : "YZX" === a.order ? (a = f * g, l = f * d, m = c * g, k = c * d, b[0] = g * h, b[4] = k - a * e, b[8] = m * e + l, b[1] = e, b[5] = f * h, b[9] = -c * h, b[2] = -d * h, b[6] = l * e + m, b[10] = a - k * e) : "XZY" === a.order && (a = f * g, l = f * d, m = c * g, k = c * d, b[0] = g * h, b[4] = -e, b[8] = d * h, b[1] = a * e + k, b[5] = f * h, b[9] = l * e - m, b[2] = m * e - l, b[6] = c * h, b[10] = k * e + a);
            b[3] = 0;
            b[7] = 0;
            b[11] = 0;
            b[12] = 0;
            b[13] = 0;
            b[14] = 0;
            b[15] = 1;
            return this;
        },
        makeRotationFromQuaternion: function() {
            var a = new n(0, 0, 0), b = new n(1, 1, 1);
            return function(c) {
                return this.compose(a, c, b);
            };
        }(),
        lookAt: function() {
            var a = new n, b = new n, c = new n;
            return function(d, e, f) {
                var g = this.elements;
                c.subVectors(d, e);
                0 === c.lengthSq() && (c.z = 1);
                c.normalize();
                a.crossVectors(f, c);
                0 === a.lengthSq() && (1 === Math.abs(f.z) ? c.x += 1E-4 : c.z += 1E-4, c.normalize(), a.crossVectors(f, c));
                a.normalize();
                b.crossVectors(c, a);
                g[0] = a.x;
                g[4] = b.x;
                g[8] = c.x;
                g[1] = a.y;
                g[5] = b.y;
                g[9] = c.y;
                g[2] = a.z;
                g[6] = b.z;
                g[10] = c.z;
                return this;
            };
        }(),
        multiply: function(a, b) {
            return void 0 !== b ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
        },
        premultiply: function(a) {
            return this.multiplyMatrices(a, this);
        },
        multiplyMatrices: function(a, b) {
            var c = a.elements, d = b.elements;
            b = this.elements;
            a = c[0];
            var e = c[4], f = c[8], g = c[12], h = c[1], l = c[5], m = c[9], k = c[13], p = c[2], n = c[6], t = c[10], r = c[14], u = c[3], w = c[7], z = c[11];
            c = c[15];
            var x = d[0], y = d[4], F = d[8], G = d[12], C = d[1], B = d[5], I = d[9], A = d[13], D = d[2], E = d[6], H = d[10], J = d[14], K = d[3], M = d[7], S = d[11];
            d = d[15];
            b[0] = a * x + e * C + f * D + g * K;
            b[4] = a * y + e * B + f * E + g * M;
            b[8] = a * F + e * I + f * H + g * S;
            b[12] = a * G + e * A + f * J + g * d;
            b[1] = h * x + l * C + m * D + k * K;
            b[5] = h * y + l * B + m * E + k * M;
            b[9] = h * F + l * I + m * H + k * S;
            b[13] = h * G + l * A + m * J + k * d;
            b[2] = p * x + n * C + t * D + r * K;
            b[6] = p * y + n * B + t * E + r * M;
            b[10] = p * F + n * I + t * H + r * S;
            b[14] = p * G + n * A + t * J + r * d;
            b[3] = u * x + w * C + z * D + c * K;
            b[7] = u * y + w * B + z * E + c * M;
            b[11] = u * F + w * I + z * H + c * S;
            b[15] = u * G + w * A + z * J + c * d;
            return this;
        },
        multiplyScalar: function(a) {
            var b = this.elements;
            b[0] *= a;
            b[4] *= a;
            b[8] *= a;
            b[12] *= a;
            b[1] *= a;
            b[5] *= a;
            b[9] *= a;
            b[13] *= a;
            b[2] *= a;
            b[6] *= a;
            b[10] *= a;
            b[14] *= a;
            b[3] *= a;
            b[7] *= a;
            b[11] *= a;
            b[15] *= a;
            return this;
        },
        applyToBufferAttribute: function() {
            var a = new n;
            return function(b) {
                for(var c = 0, d = b.count; c < d; c++)a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.applyMatrix4(this), b.setXYZ(c, a.x, a.y, a.z);
                return b;
            };
        }(),
        determinant: function() {
            var a = this.elements, b = a[0], c = a[4], d = a[8], e = a[12], f = a[1], g = a[5], h = a[9], l = a[13], m = a[2], k = a[6], p = a[10], n = a[14];
            return a[3] * (+e * h * k - d * l * k - e * g * p + c * l * p + d * g * n - c * h * n) + a[7] * (+b * h * n - b * l * p + e * f * p - d * f * n + d * l * m - e * h * m) + a[11] * (+b * l * k - b * g * n - e * f * k + c * f * n + e * g * m - c * l * m) + a[15] * (-d * g * m - b * h * k + b * g * p + d * f * k - c * f * p + c * h * m);
        },
        transpose: function() {
            var a = this.elements;
            var b = a[1];
            a[1] = a[4];
            a[4] = b;
            b = a[2];
            a[2] = a[8];
            a[8] = b;
            b = a[6];
            a[6] = a[9];
            a[9] = b;
            b = a[3];
            a[3] = a[12];
            a[12] = b;
            b = a[7];
            a[7] = a[13];
            a[13] = b;
            b = a[11];
            a[11] = a[14];
            a[14] = b;
            return this;
        },
        setPosition: function(a) {
            var b = this.elements;
            b[12] = a.x;
            b[13] = a.y;
            b[14] = a.z;
            return this;
        },
        getInverse: function(a, b) {
            var c = this.elements, d = a.elements;
            a = d[0];
            var e = d[1], f = d[2], g = d[3], h = d[4], l = d[5], m = d[6], k = d[7], p = d[8], n = d[9], t = d[10], r = d[11], u = d[12], w = d[13], z = d[14];
            d = d[15];
            var x = n * z * k - w * t * k + w * m * r - l * z * r - n * m * d + l * t * d, y = u * t * k - p * z * k - u * m * r + h * z * r + p * m * d - h * t * d, F = p * w * k - u * n * k + u * l * r - h * w * r - p * l * d + h * n * d, G = u * n * m - p * w * m - u * l * t + h * w * t + p * l * z - h * n * z, C = a * x + e * y + f * F + g * G;
            if (0 === C) {
                if (!0 === b) throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
                console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
                return this.identity();
            }
            b = 1 / C;
            c[0] = x * b;
            c[1] = (w * t * g - n * z * g - w * f * r + e * z * r + n * f * d - e * t * d) * b;
            c[2] = (l * z * g - w * m * g + w * f * k - e * z * k - l * f * d + e * m * d) * b;
            c[3] = (n * m * g - l * t * g - n * f * k + e * t * k + l * f * r - e * m * r) * b;
            c[4] = y * b;
            c[5] = (p * z * g - u * t * g + u * f * r - a * z * r - p * f * d + a * t * d) * b;
            c[6] = (u * m * g - h * z * g - u * f * k + a * z * k + h * f * d - a * m * d) * b;
            c[7] = (h * t * g - p * m * g + p * f * k - a * t * k - h * f * r + a * m * r) * b;
            c[8] = F * b;
            c[9] = (u * n * g - p * w * g - u * e * r + a * w * r + p * e * d - a * n * d) * b;
            c[10] = (h * w * g - u * l * g + u * e * k - a * w * k - h * e * d + a * l * d) * b;
            c[11] = (p * l * g - h * n * g - p * e * k + a * n * k + h * e * r - a * l * r) * b;
            c[12] = G * b;
            c[13] = (p * w * f - u * n * f + u * e * t - a * w * t - p * e * z + a * n * z) * b;
            c[14] = (u * l * f - h * w * f - u * e * m + a * w * m + h * e * z - a * l * z) * b;
            c[15] = (h * n * f - p * l * f + p * e * m - a * n * m - h * e * t + a * l * t) * b;
            return this;
        },
        scale: function(a) {
            var b = this.elements, c = a.x, d = a.y;
            a = a.z;
            b[0] *= c;
            b[4] *= d;
            b[8] *= a;
            b[1] *= c;
            b[5] *= d;
            b[9] *= a;
            b[2] *= c;
            b[6] *= d;
            b[10] *= a;
            b[3] *= c;
            b[7] *= d;
            b[11] *= a;
            return this;
        },
        getMaxScaleOnAxis: function() {
            var a = this.elements;
            return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10]));
        },
        makeTranslation: function(a, b, c) {
            this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);
            return this;
        },
        makeRotationX: function(a) {
            var b = Math.cos(a);
            a = Math.sin(a);
            this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);
            return this;
        },
        makeRotationY: function(a) {
            var b = Math.cos(a);
            a = Math.sin(a);
            this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);
            return this;
        },
        makeRotationZ: function(a) {
            var b = Math.cos(a);
            a = Math.sin(a);
            this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            return this;
        },
        makeRotationAxis: function(a, b) {
            var c = Math.cos(b);
            b = Math.sin(b);
            var d = 1 - c, e = a.x, f = a.y;
            a = a.z;
            var g = d * e, h = d * f;
            this.set(g * e + c, g * f - b * a, g * a + b * f, 0, g * f + b * a, h * f + c, h * a - b * e, 0, g * a - b * f, h * a + b * e, d * a * a + c, 0, 0, 0, 0, 1);
            return this;
        },
        makeScale: function(a, b, c) {
            this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);
            return this;
        },
        makeShear: function(a, b, c) {
            this.set(1, b, c, 0, a, 1, c, 0, a, b, 1, 0, 0, 0, 0, 1);
            return this;
        },
        compose: function(a, b, c) {
            var d = this.elements, e = b._x, f = b._y, g = b._z, h = b._w, l = e + e, m = f + f, k = g + g;
            b = e * l;
            var p = e * m;
            e *= k;
            var n = f * m;
            f *= k;
            g *= k;
            l *= h;
            m *= h;
            h *= k;
            k = c.x;
            var t = c.y;
            c = c.z;
            d[0] = (1 - (n + g)) * k;
            d[1] = (p + h) * k;
            d[2] = (e - m) * k;
            d[3] = 0;
            d[4] = (p - h) * t;
            d[5] = (1 - (b + g)) * t;
            d[6] = (f + l) * t;
            d[7] = 0;
            d[8] = (e + m) * c;
            d[9] = (f - l) * c;
            d[10] = (1 - (b + n)) * c;
            d[11] = 0;
            d[12] = a.x;
            d[13] = a.y;
            d[14] = a.z;
            d[15] = 1;
            return this;
        },
        decompose: function() {
            var a = new n, b = new P;
            return function(c, d, e) {
                var f = this.elements, g = a.set(f[0], f[1], f[2]).length(), h = a.set(f[4], f[5], f[6]).length(), l = a.set(f[8], f[9], f[10]).length();
                0 > this.determinant() && (g = -g);
                c.x = f[12];
                c.y = f[13];
                c.z = f[14];
                b.copy(this);
                c = 1 / g;
                f = 1 / h;
                var m = 1 / l;
                b.elements[0] *= c;
                b.elements[1] *= c;
                b.elements[2] *= c;
                b.elements[4] *= f;
                b.elements[5] *= f;
                b.elements[6] *= f;
                b.elements[8] *= m;
                b.elements[9] *= m;
                b.elements[10] *= m;
                d.setFromRotationMatrix(b);
                e.x = g;
                e.y = h;
                e.z = l;
                return this;
            };
        }(),
        makePerspective: function(a, b, c, d, e, f) {
            void 0 === f && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
            var g = this.elements;
            g[0] = 2 * e / (b - a);
            g[4] = 0;
            g[8] = (b + a) / (b - a);
            g[12] = 0;
            g[1] = 0;
            g[5] = 2 * e / (c - d);
            g[9] = (c + d) / (c - d);
            g[13] = 0;
            g[2] = 0;
            g[6] = 0;
            g[10] = -(f + e) / (f - e);
            g[14] = -2 * f * e / (f - e);
            g[3] = 0;
            g[7] = 0;
            g[11] = -1;
            g[15] = 0;
            return this;
        },
        makeOrthographic: function(a, b, c, d, e, f) {
            var g = this.elements, h = 1 / (b - a), l = 1 / (c - d), m = 1 / (f - e);
            g[0] = 2 * h;
            g[4] = 0;
            g[8] = 0;
            g[12] = -((b + a) * h);
            g[1] = 0;
            g[5] = 2 * l;
            g[9] = 0;
            g[13] = -((c + d) * l);
            g[2] = 0;
            g[6] = 0;
            g[10] = -2 * m;
            g[14] = -((f + e) * m);
            g[3] = 0;
            g[7] = 0;
            g[11] = 0;
            g[15] = 1;
            return this;
        },
        equals: function(a) {
            var b = this.elements;
            a = a.elements;
            for(var c = 0; 16 > c; c++)if (b[c] !== a[c]) return !1;
            return !0;
        },
        fromArray: function(a, b) {
            void 0 === b && (b = 0);
            for(var c = 0; 16 > c; c++)this.elements[c] = a[c + b];
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            var c = this.elements;
            a[b] = c[0];
            a[b + 1] = c[1];
            a[b + 2] = c[2];
            a[b + 3] = c[3];
            a[b + 4] = c[4];
            a[b + 5] = c[5];
            a[b + 6] = c[6];
            a[b + 7] = c[7];
            a[b + 8] = c[8];
            a[b + 9] = c[9];
            a[b + 10] = c[10];
            a[b + 11] = c[11];
            a[b + 12] = c[12];
            a[b + 13] = c[13];
            a[b + 14] = c[14];
            a[b + 15] = c[15];
            return a;
        }
    });
    var R = {
        alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
        alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
        alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",
        aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
        aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
        begin_vertex: "vec3 transformed = vec3( position );",
        beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
        bsdfs: "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick( specularColor, dotNV );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}",
        bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
        clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
        clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
        clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",
        clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",
        color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
        color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
        color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
        color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",
        common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}",
        cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",
        defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
        displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
        displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif",
        emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
        emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
        encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
        encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
        envmap_fragment: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
        envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
        envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
        envmap_physical_pars_fragment: "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
        envmap_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
        fog_vertex: "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",
        fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",
        fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
        fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
        gradientmap_pars_fragment: "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",
        lightmap_fragment: "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",
        lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
        lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",
        lights_pars_begin: "uniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
        lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
        lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
        lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif",
        lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor;\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
        lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif",
        lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif",
        lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif",
        logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
        logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif",
        logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
        logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif",
        map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
        map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
        map_particle_fragment: "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif",
        map_particle_pars_fragment: "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif",
        metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
        metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
        morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",
        morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
        morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
        normal_fragment_begin: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif",
        normal_fragment_maps: "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",
        normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif",
        packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
        premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
        project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;",
        dithering_fragment: "#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
        dithering_pars_fragment: "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
        roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
        roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
        shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
        shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif",
        shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",
        shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",
        skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
        skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
        skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
        skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
        specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
        specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
        tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
        tonemapping_pars_fragment: "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",
        uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",
        uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif",
        uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
        uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
        uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
        uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",
        worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif",
        background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
        cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
        depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",
        depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",
        distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
        distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
        equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
        linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
        meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
        meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
        meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
        normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
        points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
        shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",
        shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"
    }, nh = {
        clone: Rb,
        merge: ya
    }, oh = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
    };
    Object.assign(A.prototype, {
        isColor: !0,
        r: 1,
        g: 1,
        b: 1,
        set: function(a) {
            a && a.isColor ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);
            return this;
        },
        setScalar: function(a) {
            this.b = this.g = this.r = a;
            return this;
        },
        setHex: function(a) {
            a = Math.floor(a);
            this.r = (a >> 16 & 255) / 255;
            this.g = (a >> 8 & 255) / 255;
            this.b = (a & 255) / 255;
            return this;
        },
        setRGB: function(a, b, c) {
            this.r = a;
            this.g = b;
            this.b = c;
            return this;
        },
        setHSL: function() {
            function a(a, c, d) {
                0 > d && (d += 1);
                1 < d && --d;
                return d < 1 / 6 ? a + 6 * (c - a) * d : .5 > d ? c : d < 2 / 3 ? a + 6 * (c - a) * (2 / 3 - d) : a;
            }
            return function(b, c, d) {
                b = O.euclideanModulo(b, 1);
                c = O.clamp(c, 0, 1);
                d = O.clamp(d, 0, 1);
                0 === c ? this.r = this.g = this.b = d : (c = .5 >= d ? d * (1 + c) : d + c - d * c, d = 2 * d - c, this.r = a(d, c, b + 1 / 3), this.g = a(d, c, b), this.b = a(d, c, b - 1 / 3));
                return this;
            };
        }(),
        setStyle: function(a) {
            function b(b) {
                void 0 !== b && 1 > parseFloat(b) && console.warn("THREE.Color: Alpha component of " + a + " will be ignored.");
            }
            var c;
            if (c = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)) {
                var d = c[2];
                switch(c[1]){
                    case "rgb":
                    case "rgba":
                        if (c = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(255, parseInt(c[1], 10)) / 255, this.g = Math.min(255, parseInt(c[2], 10)) / 255, this.b = Math.min(255, parseInt(c[3], 10)) / 255, b(c[5]), this;
                        if (c = /^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) return this.r = Math.min(100, parseInt(c[1], 10)) / 100, this.g = Math.min(100, parseInt(c[2], 10)) / 100, this.b = Math.min(100, parseInt(c[3], 10)) / 100, b(c[5]), this;
                        break;
                    case "hsl":
                    case "hsla":
                        if (c = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)) {
                            d = parseFloat(c[1]) / 360;
                            var e = parseInt(c[2], 10) / 100, f = parseInt(c[3], 10) / 100;
                            b(c[5]);
                            return this.setHSL(d, e, f);
                        }
                }
            } else if (c = /^#([A-Fa-f0-9]+)$/.exec(a)) {
                c = c[1];
                d = c.length;
                if (3 === d) return this.r = parseInt(c.charAt(0) + c.charAt(0), 16) / 255, this.g = parseInt(c.charAt(1) + c.charAt(1), 16) / 255, this.b = parseInt(c.charAt(2) + c.charAt(2), 16) / 255, this;
                if (6 === d) return this.r = parseInt(c.charAt(0) + c.charAt(1), 16) / 255, this.g = parseInt(c.charAt(2) + c.charAt(3), 16) / 255, this.b = parseInt(c.charAt(4) + c.charAt(5), 16) / 255, this;
            }
            a && 0 < a.length && (c = oh[a], void 0 !== c ? this.setHex(c) : console.warn("THREE.Color: Unknown color " + a));
            return this;
        },
        clone: function() {
            return new this.constructor(this.r, this.g, this.b);
        },
        copy: function(a) {
            this.r = a.r;
            this.g = a.g;
            this.b = a.b;
            return this;
        },
        copyGammaToLinear: function(a, b) {
            void 0 === b && (b = 2);
            this.r = Math.pow(a.r, b);
            this.g = Math.pow(a.g, b);
            this.b = Math.pow(a.b, b);
            return this;
        },
        copyLinearToGamma: function(a, b) {
            void 0 === b && (b = 2);
            b = 0 < b ? 1 / b : 1;
            this.r = Math.pow(a.r, b);
            this.g = Math.pow(a.g, b);
            this.b = Math.pow(a.b, b);
            return this;
        },
        convertGammaToLinear: function(a) {
            this.copyGammaToLinear(this, a);
            return this;
        },
        convertLinearToGamma: function(a) {
            this.copyLinearToGamma(this, a);
            return this;
        },
        copySRGBToLinear: function() {
            function a(a) {
                return .04045 > a ? .0773993808 * a : Math.pow(.9478672986 * a + .0521327014, 2.4);
            }
            return function(b) {
                this.r = a(b.r);
                this.g = a(b.g);
                this.b = a(b.b);
                return this;
            };
        }(),
        copyLinearToSRGB: function() {
            function a(a) {
                return .0031308 > a ? 12.92 * a : 1.055 * Math.pow(a, .41666) - .055;
            }
            return function(b) {
                this.r = a(b.r);
                this.g = a(b.g);
                this.b = a(b.b);
                return this;
            };
        }(),
        convertSRGBToLinear: function() {
            this.copySRGBToLinear(this);
            return this;
        },
        convertLinearToSRGB: function() {
            this.copyLinearToSRGB(this);
            return this;
        },
        getHex: function() {
            return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
        },
        getHexString: function() {
            return ("000000" + this.getHex().toString(16)).slice(-6);
        },
        getHSL: function(a) {
            void 0 === a && (console.warn("THREE.Color: .getHSL() target is now required"), a = {
                h: 0,
                s: 0,
                l: 0
            });
            var b = this.r, c = this.g, d = this.b, e = Math.max(b, c, d), f = Math.min(b, c, d), g, h = (f + e) / 2;
            if (f === e) f = g = 0;
            else {
                var l = e - f;
                f = .5 >= h ? l / (e + f) : l / (2 - e - f);
                switch(e){
                    case b:
                        g = (c - d) / l + (c < d ? 6 : 0);
                        break;
                    case c:
                        g = (d - b) / l + 2;
                        break;
                    case d:
                        g = (b - c) / l + 4;
                }
                g /= 6;
            }
            a.h = g;
            a.s = f;
            a.l = h;
            return a;
        },
        getStyle: function() {
            return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
        },
        offsetHSL: function() {
            var a = {};
            return function(b, c, d) {
                this.getHSL(a);
                a.h += b;
                a.s += c;
                a.l += d;
                this.setHSL(a.h, a.s, a.l);
                return this;
            };
        }(),
        add: function(a) {
            this.r += a.r;
            this.g += a.g;
            this.b += a.b;
            return this;
        },
        addColors: function(a, b) {
            this.r = a.r + b.r;
            this.g = a.g + b.g;
            this.b = a.b + b.b;
            return this;
        },
        addScalar: function(a) {
            this.r += a;
            this.g += a;
            this.b += a;
            return this;
        },
        sub: function(a) {
            this.r = Math.max(0, this.r - a.r);
            this.g = Math.max(0, this.g - a.g);
            this.b = Math.max(0, this.b - a.b);
            return this;
        },
        multiply: function(a) {
            this.r *= a.r;
            this.g *= a.g;
            this.b *= a.b;
            return this;
        },
        multiplyScalar: function(a) {
            this.r *= a;
            this.g *= a;
            this.b *= a;
            return this;
        },
        lerp: function(a, b) {
            this.r += (a.r - this.r) * b;
            this.g += (a.g - this.g) * b;
            this.b += (a.b - this.b) * b;
            return this;
        },
        lerpHSL: function() {
            var a = {
                h: 0,
                s: 0,
                l: 0
            }, b = {
                h: 0,
                s: 0,
                l: 0
            };
            return function(c, d) {
                this.getHSL(a);
                c.getHSL(b);
                c = O.lerp(a.h, b.h, d);
                var e = O.lerp(a.s, b.s, d);
                d = O.lerp(a.l, b.l, d);
                this.setHSL(c, e, d);
                return this;
            };
        }(),
        equals: function(a) {
            return a.r === this.r && a.g === this.g && a.b === this.b;
        },
        fromArray: function(a, b) {
            void 0 === b && (b = 0);
            this.r = a[b];
            this.g = a[b + 1];
            this.b = a[b + 2];
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            a[b] = this.r;
            a[b + 1] = this.g;
            a[b + 2] = this.b;
            return a;
        },
        toJSON: function() {
            return this.getHex();
        }
    });
    var J = {
        common: {
            diffuse: {
                value: new A(15658734)
            },
            opacity: {
                value: 1
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new na
            },
            alphaMap: {
                value: null
            }
        },
        specularmap: {
            specularMap: {
                value: null
            }
        },
        envmap: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            reflectivity: {
                value: 1
            },
            refractionRatio: {
                value: .98
            },
            maxMipLevel: {
                value: 0
            }
        },
        aomap: {
            aoMap: {
                value: null
            },
            aoMapIntensity: {
                value: 1
            }
        },
        lightmap: {
            lightMap: {
                value: null
            },
            lightMapIntensity: {
                value: 1
            }
        },
        emissivemap: {
            emissiveMap: {
                value: null
            }
        },
        bumpmap: {
            bumpMap: {
                value: null
            },
            bumpScale: {
                value: 1
            }
        },
        normalmap: {
            normalMap: {
                value: null
            },
            normalScale: {
                value: new C(1, 1)
            }
        },
        displacementmap: {
            displacementMap: {
                value: null
            },
            displacementScale: {
                value: 1
            },
            displacementBias: {
                value: 0
            }
        },
        roughnessmap: {
            roughnessMap: {
                value: null
            }
        },
        metalnessmap: {
            metalnessMap: {
                value: null
            }
        },
        gradientmap: {
            gradientMap: {
                value: null
            }
        },
        fog: {
            fogDensity: {
                value: 2.5E-4
            },
            fogNear: {
                value: 1
            },
            fogFar: {
                value: 2E3
            },
            fogColor: {
                value: new A(16777215)
            }
        },
        lights: {
            ambientLightColor: {
                value: []
            },
            lightProbe: {
                value: []
            },
            directionalLights: {
                value: [],
                properties: {
                    direction: {},
                    color: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            directionalShadowMap: {
                value: []
            },
            directionalShadowMatrix: {
                value: []
            },
            spotLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    direction: {},
                    distance: {},
                    coneCos: {},
                    penumbraCos: {},
                    decay: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            spotShadowMap: {
                value: []
            },
            spotShadowMatrix: {
                value: []
            },
            pointLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    decay: {},
                    distance: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {},
                    shadowCameraNear: {},
                    shadowCameraFar: {}
                }
            },
            pointShadowMap: {
                value: []
            },
            pointShadowMatrix: {
                value: []
            },
            hemisphereLights: {
                value: [],
                properties: {
                    direction: {},
                    skyColor: {},
                    groundColor: {}
                }
            },
            rectAreaLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    width: {},
                    height: {}
                }
            }
        },
        points: {
            diffuse: {
                value: new A(15658734)
            },
            opacity: {
                value: 1
            },
            size: {
                value: 1
            },
            scale: {
                value: 1
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new na
            }
        },
        sprite: {
            diffuse: {
                value: new A(15658734)
            },
            opacity: {
                value: 1
            },
            center: {
                value: new C(.5, .5)
            },
            rotation: {
                value: 0
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new na
            }
        }
    }, Va = {
        basic: {
            uniforms: ya([
                J.common,
                J.specularmap,
                J.envmap,
                J.aomap,
                J.lightmap,
                J.fog
            ]),
            vertexShader: R.meshbasic_vert,
            fragmentShader: R.meshbasic_frag
        },
        lambert: {
            uniforms: ya([
                J.common,
                J.specularmap,
                J.envmap,
                J.aomap,
                J.lightmap,
                J.emissivemap,
                J.fog,
                J.lights,
                {
                    emissive: {
                        value: new A(0)
                    }
                }
            ]),
            vertexShader: R.meshlambert_vert,
            fragmentShader: R.meshlambert_frag
        },
        phong: {
            uniforms: ya([
                J.common,
                J.specularmap,
                J.envmap,
                J.aomap,
                J.lightmap,
                J.emissivemap,
                J.bumpmap,
                J.normalmap,
                J.displacementmap,
                J.gradientmap,
                J.fog,
                J.lights,
                {
                    emissive: {
                        value: new A(0)
                    },
                    specular: {
                        value: new A(1118481)
                    },
                    shininess: {
                        value: 30
                    }
                }
            ]),
            vertexShader: R.meshphong_vert,
            fragmentShader: R.meshphong_frag
        },
        standard: {
            uniforms: ya([
                J.common,
                J.envmap,
                J.aomap,
                J.lightmap,
                J.emissivemap,
                J.bumpmap,
                J.normalmap,
                J.displacementmap,
                J.roughnessmap,
                J.metalnessmap,
                J.fog,
                J.lights,
                {
                    emissive: {
                        value: new A(0)
                    },
                    roughness: {
                        value: .5
                    },
                    metalness: {
                        value: .5
                    },
                    envMapIntensity: {
                        value: 1
                    }
                }
            ]),
            vertexShader: R.meshphysical_vert,
            fragmentShader: R.meshphysical_frag
        },
        matcap: {
            uniforms: ya([
                J.common,
                J.bumpmap,
                J.normalmap,
                J.displacementmap,
                J.fog,
                {
                    matcap: {
                        value: null
                    }
                }
            ]),
            vertexShader: R.meshmatcap_vert,
            fragmentShader: R.meshmatcap_frag
        },
        points: {
            uniforms: ya([
                J.points,
                J.fog
            ]),
            vertexShader: R.points_vert,
            fragmentShader: R.points_frag
        },
        dashed: {
            uniforms: ya([
                J.common,
                J.fog,
                {
                    scale: {
                        value: 1
                    },
                    dashSize: {
                        value: 1
                    },
                    totalSize: {
                        value: 2
                    }
                }
            ]),
            vertexShader: R.linedashed_vert,
            fragmentShader: R.linedashed_frag
        },
        depth: {
            uniforms: ya([
                J.common,
                J.displacementmap
            ]),
            vertexShader: R.depth_vert,
            fragmentShader: R.depth_frag
        },
        normal: {
            uniforms: ya([
                J.common,
                J.bumpmap,
                J.normalmap,
                J.displacementmap,
                {
                    opacity: {
                        value: 1
                    }
                }
            ]),
            vertexShader: R.normal_vert,
            fragmentShader: R.normal_frag
        },
        sprite: {
            uniforms: ya([
                J.sprite,
                J.fog
            ]),
            vertexShader: R.sprite_vert,
            fragmentShader: R.sprite_frag
        },
        background: {
            uniforms: {
                uvTransform: {
                    value: new na
                },
                t2D: {
                    value: null
                }
            },
            vertexShader: R.background_vert,
            fragmentShader: R.background_frag
        },
        cube: {
            uniforms: {
                tCube: {
                    value: null
                },
                tFlip: {
                    value: -1
                },
                opacity: {
                    value: 1
                }
            },
            vertexShader: R.cube_vert,
            fragmentShader: R.cube_frag
        },
        equirect: {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: R.equirect_vert,
            fragmentShader: R.equirect_frag
        },
        distanceRGBA: {
            uniforms: ya([
                J.common,
                J.displacementmap,
                {
                    referencePosition: {
                        value: new n
                    },
                    nearDistance: {
                        value: 1
                    },
                    farDistance: {
                        value: 1E3
                    }
                }
            ]),
            vertexShader: R.distanceRGBA_vert,
            fragmentShader: R.distanceRGBA_frag
        },
        shadow: {
            uniforms: ya([
                J.lights,
                J.fog,
                {
                    color: {
                        value: new A(0)
                    },
                    opacity: {
                        value: 1
                    }
                }
            ]),
            vertexShader: R.shadow_vert,
            fragmentShader: R.shadow_frag
        }
    };
    Va.physical = {
        uniforms: ya([
            Va.standard.uniforms,
            {
                clearCoat: {
                    value: 0
                },
                clearCoatRoughness: {
                    value: 0
                }
            }
        ]),
        vertexShader: R.meshphysical_vert,
        fragmentShader: R.meshphysical_frag
    };
    Object.assign(Sb.prototype, {
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.a = a.a;
            this.b = a.b;
            this.c = a.c;
            this.normal.copy(a.normal);
            this.color.copy(a.color);
            this.materialIndex = a.materialIndex;
            for(var b = 0, c = a.vertexNormals.length; b < c; b++)this.vertexNormals[b] = a.vertexNormals[b].clone();
            b = 0;
            for(c = a.vertexColors.length; b < c; b++)this.vertexColors[b] = a.vertexColors[b].clone();
            return this;
        }
    });
    tb.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
    tb.DefaultOrder = "XYZ";
    Object.defineProperties(tb.prototype, {
        x: {
            get: function() {
                return this._x;
            },
            set: function(a) {
                this._x = a;
                this.onChangeCallback();
            }
        },
        y: {
            get: function() {
                return this._y;
            },
            set: function(a) {
                this._y = a;
                this.onChangeCallback();
            }
        },
        z: {
            get: function() {
                return this._z;
            },
            set: function(a) {
                this._z = a;
                this.onChangeCallback();
            }
        },
        order: {
            get: function() {
                return this._order;
            },
            set: function(a) {
                this._order = a;
                this.onChangeCallback();
            }
        }
    });
    Object.assign(tb.prototype, {
        isEuler: !0,
        set: function(a, b, c, d) {
            this._x = a;
            this._y = b;
            this._z = c;
            this._order = d || this._order;
            this.onChangeCallback();
            return this;
        },
        clone: function() {
            return new this.constructor(this._x, this._y, this._z, this._order);
        },
        copy: function(a) {
            this._x = a._x;
            this._y = a._y;
            this._z = a._z;
            this._order = a._order;
            this.onChangeCallback();
            return this;
        },
        setFromRotationMatrix: function(a, b, c) {
            var d = O.clamp, e = a.elements;
            a = e[0];
            var f = e[4], g = e[8], h = e[1], l = e[5], m = e[9], k = e[2], p = e[6];
            e = e[10];
            b = b || this._order;
            "XYZ" === b ? (this._y = Math.asin(d(g, -1, 1)), .99999 > Math.abs(g) ? (this._x = Math.atan2(-m, e), this._z = Math.atan2(-f, a)) : (this._x = Math.atan2(p, l), this._z = 0)) : "YXZ" === b ? (this._x = Math.asin(-d(m, -1, 1)), .99999 > Math.abs(m) ? (this._y = Math.atan2(g, e), this._z = Math.atan2(h, l)) : (this._y = Math.atan2(-k, a), this._z = 0)) : "ZXY" === b ? (this._x = Math.asin(d(p, -1, 1)), .99999 > Math.abs(p) ? (this._y = Math.atan2(-k, e), this._z = Math.atan2(-f, l)) : (this._y = 0, this._z = Math.atan2(h, a))) : "ZYX" === b ? (this._y = Math.asin(-d(k, -1, 1)), .99999 > Math.abs(k) ? (this._x = Math.atan2(p, e), this._z = Math.atan2(h, a)) : (this._x = 0, this._z = Math.atan2(-f, l))) : "YZX" === b ? (this._z = Math.asin(d(h, -1, 1)), .99999 > Math.abs(h) ? (this._x = Math.atan2(-m, l), this._y = Math.atan2(-k, a)) : (this._x = 0, this._y = Math.atan2(g, e))) : "XZY" === b ? (this._z = Math.asin(-d(f, -1, 1)), .99999 > Math.abs(f) ? (this._x = Math.atan2(p, l), this._y = Math.atan2(g, a)) : (this._x = Math.atan2(-m, e), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);
            this._order = b;
            if (!1 !== c) this.onChangeCallback();
            return this;
        },
        setFromQuaternion: function() {
            var a = new P;
            return function(b, c, d) {
                a.makeRotationFromQuaternion(b);
                return this.setFromRotationMatrix(a, c, d);
            };
        }(),
        setFromVector3: function(a, b) {
            return this.set(a.x, a.y, a.z, b || this._order);
        },
        reorder: function() {
            var a = new ma;
            return function(b) {
                a.setFromEuler(this);
                return this.setFromQuaternion(a, b);
            };
        }(),
        equals: function(a) {
            return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
        },
        fromArray: function(a) {
            this._x = a[0];
            this._y = a[1];
            this._z = a[2];
            void 0 !== a[3] && (this._order = a[3]);
            this.onChangeCallback();
            return this;
        },
        toArray: function(a, b) {
            void 0 === a && (a = []);
            void 0 === b && (b = 0);
            a[b] = this._x;
            a[b + 1] = this._y;
            a[b + 2] = this._z;
            a[b + 3] = this._order;
            return a;
        },
        toVector3: function(a) {
            return a ? a.set(this._x, this._y, this._z) : new n(this._x, this._y, this._z);
        },
        onChange: function(a) {
            this.onChangeCallback = a;
            return this;
        },
        onChangeCallback: function() {}
    });
    Object.assign(ee.prototype, {
        set: function(a) {
            this.mask = 1 << a | 0;
        },
        enable: function(a) {
            this.mask = this.mask | 1 << a | 0;
        },
        toggle: function(a) {
            this.mask ^= 1 << a | 0;
        },
        disable: function(a) {
            this.mask &= ~(1 << a | 0);
        },
        test: function(a) {
            return 0 !== (this.mask & a.mask);
        }
    });
    var $f = 0;
    D.DefaultUp = new n(0, 1, 0);
    D.DefaultMatrixAutoUpdate = !0;
    D.prototype = Object.assign(Object.create(ta.prototype), {
        constructor: D,
        isObject3D: !0,
        onBeforeRender: function() {},
        onAfterRender: function() {},
        applyMatrix: function(a) {
            this.matrixAutoUpdate && this.updateMatrix();
            this.matrix.premultiply(a);
            this.matrix.decompose(this.position, this.quaternion, this.scale);
        },
        applyQuaternion: function(a) {
            this.quaternion.premultiply(a);
            return this;
        },
        setRotationFromAxisAngle: function(a, b) {
            this.quaternion.setFromAxisAngle(a, b);
        },
        setRotationFromEuler: function(a) {
            this.quaternion.setFromEuler(a, !0);
        },
        setRotationFromMatrix: function(a) {
            this.quaternion.setFromRotationMatrix(a);
        },
        setRotationFromQuaternion: function(a) {
            this.quaternion.copy(a);
        },
        rotateOnAxis: function() {
            var a = new ma;
            return function(b, c) {
                a.setFromAxisAngle(b, c);
                this.quaternion.multiply(a);
                return this;
            };
        }(),
        rotateOnWorldAxis: function() {
            var a = new ma;
            return function(b, c) {
                a.setFromAxisAngle(b, c);
                this.quaternion.premultiply(a);
                return this;
            };
        }(),
        rotateX: function() {
            var a = new n(1, 0, 0);
            return function(b) {
                return this.rotateOnAxis(a, b);
            };
        }(),
        rotateY: function() {
            var a = new n(0, 1, 0);
            return function(b) {
                return this.rotateOnAxis(a, b);
            };
        }(),
        rotateZ: function() {
            var a = new n(0, 0, 1);
            return function(b) {
                return this.rotateOnAxis(a, b);
            };
        }(),
        translateOnAxis: function() {
            var a = new n;
            return function(b, c) {
                a.copy(b).applyQuaternion(this.quaternion);
                this.position.add(a.multiplyScalar(c));
                return this;
            };
        }(),
        translateX: function() {
            var a = new n(1, 0, 0);
            return function(b) {
                return this.translateOnAxis(a, b);
            };
        }(),
        translateY: function() {
            var a = new n(0, 1, 0);
            return function(b) {
                return this.translateOnAxis(a, b);
            };
        }(),
        translateZ: function() {
            var a = new n(0, 0, 1);
            return function(b) {
                return this.translateOnAxis(a, b);
            };
        }(),
        localToWorld: function(a) {
            return a.applyMatrix4(this.matrixWorld);
        },
        worldToLocal: function() {
            var a = new P;
            return function(b) {
                return b.applyMatrix4(a.getInverse(this.matrixWorld));
            };
        }(),
        lookAt: function() {
            var a = new ma, b = new P, c = new n, d = new n;
            return function(e, f, g) {
                e.isVector3 ? c.copy(e) : c.set(e, f, g);
                e = this.parent;
                this.updateWorldMatrix(!0, !1);
                d.setFromMatrixPosition(this.matrixWorld);
                this.isCamera || this.isLight ? b.lookAt(d, c, this.up) : b.lookAt(c, d, this.up);
                this.quaternion.setFromRotationMatrix(b);
                e && (b.extractRotation(e.matrixWorld), a.setFromRotationMatrix(b), this.quaternion.premultiply(a.inverse()));
            };
        }(),
        add: function(a) {
            if (1 < arguments.length) {
                for(var b = 0; b < arguments.length; b++)this.add(arguments[b]);
                return this;
            }
            if (a === this) return console.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
            a && a.isObject3D ? (null !== a.parent && a.parent.remove(a), a.parent = this, a.dispatchEvent({
                type: "added"
            }), this.children.push(a)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
            return this;
        },
        remove: function(a) {
            if (1 < arguments.length) {
                for(var b = 0; b < arguments.length; b++)this.remove(arguments[b]);
                return this;
            }
            b = this.children.indexOf(a);
            -1 !== b && (a.parent = null, a.dispatchEvent({
                type: "removed"
            }), this.children.splice(b, 1));
            return this;
        },
        getObjectById: function(a) {
            return this.getObjectByProperty("id", a);
        },
        getObjectByName: function(a) {
            return this.getObjectByProperty("name", a);
        },
        getObjectByProperty: function(a, b) {
            if (this[a] === b) return this;
            for(var c = 0, d = this.children.length; c < d; c++){
                var e = this.children[c].getObjectByProperty(a, b);
                if (void 0 !== e) return e;
            }
        },
        getWorldPosition: function(a) {
            void 0 === a && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), a = new n);
            this.updateMatrixWorld(!0);
            return a.setFromMatrixPosition(this.matrixWorld);
        },
        getWorldQuaternion: function() {
            var a = new n, b = new n;
            return function(c) {
                void 0 === c && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), c = new ma);
                this.updateMatrixWorld(!0);
                this.matrixWorld.decompose(a, c, b);
                return c;
            };
        }(),
        getWorldScale: function() {
            var a = new n, b = new ma;
            return function(c) {
                void 0 === c && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), c = new n);
                this.updateMatrixWorld(!0);
                this.matrixWorld.decompose(a, b, c);
                return c;
            };
        }(),
        getWorldDirection: function(a) {
            void 0 === a && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), a = new n);
            this.updateMatrixWorld(!0);
            var b = this.matrixWorld.elements;
            return a.set(b[8], b[9], b[10]).normalize();
        },
        raycast: function() {},
        traverse: function(a) {
            a(this);
            for(var b = this.children, c = 0, d = b.length; c < d; c++)b[c].traverse(a);
        },
        traverseVisible: function(a) {
            if (!1 !== this.visible) {
                a(this);
                for(var b = this.children, c = 0, d = b.length; c < d; c++)b[c].traverseVisible(a);
            }
        },
        traverseAncestors: function(a) {
            var b = this.parent;
            null !== b && (a(b), b.traverseAncestors(a));
        },
        updateMatrix: function() {
            this.matrix.compose(this.position, this.quaternion, this.scale);
            this.matrixWorldNeedsUpdate = !0;
        },
        updateMatrixWorld: function(a) {
            this.matrixAutoUpdate && this.updateMatrix();
            if (this.matrixWorldNeedsUpdate || a) null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, a = !0;
            for(var b = this.children, c = 0, d = b.length; c < d; c++)b[c].updateMatrixWorld(a);
        },
        updateWorldMatrix: function(a, b) {
            var c = this.parent;
            !0 === a && null !== c && c.updateWorldMatrix(!0, !1);
            this.matrixAutoUpdate && this.updateMatrix();
            null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
            if (!0 === b) for(a = this.children, b = 0, c = a.length; b < c; b++)a[b].updateWorldMatrix(!1, !0);
        },
        toJSON: function(a) {
            function b(b, c) {
                void 0 === b[c.uuid] && (b[c.uuid] = c.toJSON(a));
                return c.uuid;
            }
            function c(a) {
                var b = [], c;
                for(c in a){
                    var d = a[c];
                    delete d.metadata;
                    b.push(d);
                }
                return b;
            }
            var d = void 0 === a || "string" === typeof a, e = {};
            d && (a = {
                geometries: {},
                materials: {},
                textures: {},
                images: {},
                shapes: {}
            }, e.metadata = {
                version: 4.5,
                type: "Object",
                generator: "Object3D.toJSON"
            });
            var f = {};
            f.uuid = this.uuid;
            f.type = this.type;
            "" !== this.name && (f.name = this.name);
            !0 === this.castShadow && (f.castShadow = !0);
            !0 === this.receiveShadow && (f.receiveShadow = !0);
            !1 === this.visible && (f.visible = !1);
            !1 === this.frustumCulled && (f.frustumCulled = !1);
            0 !== this.renderOrder && (f.renderOrder = this.renderOrder);
            "{}" !== JSON.stringify(this.userData) && (f.userData = this.userData);
            f.layers = this.layers.mask;
            f.matrix = this.matrix.toArray();
            !1 === this.matrixAutoUpdate && (f.matrixAutoUpdate = !1);
            this.isMesh && 0 !== this.drawMode && (f.drawMode = this.drawMode);
            if (this.isMesh || this.isLine || this.isPoints) {
                f.geometry = b(a.geometries, this.geometry);
                var g = this.geometry.parameters;
                if (void 0 !== g && void 0 !== g.shapes) if (g = g.shapes, Array.isArray(g)) for(var h = 0, l = g.length; h < l; h++)b(a.shapes, g[h]);
                else b(a.shapes, g);
            }
            if (void 0 !== this.material) if (Array.isArray(this.material)) {
                g = [];
                h = 0;
                for(l = this.material.length; h < l; h++)g.push(b(a.materials, this.material[h]));
                f.material = g;
            } else f.material = b(a.materials, this.material);
            if (0 < this.children.length) for(f.children = [], h = 0; h < this.children.length; h++)f.children.push(this.children[h].toJSON(a).object);
            if (d) {
                d = c(a.geometries);
                h = c(a.materials);
                l = c(a.textures);
                var m = c(a.images);
                g = c(a.shapes);
                0 < d.length && (e.geometries = d);
                0 < h.length && (e.materials = h);
                0 < l.length && (e.textures = l);
                0 < m.length && (e.images = m);
                0 < g.length && (e.shapes = g);
            }
            e.object = f;
            return e;
        },
        clone: function(a) {
            return (new this.constructor).copy(this, a);
        },
        copy: function(a, b) {
            void 0 === b && (b = !0);
            this.name = a.name;
            this.up.copy(a.up);
            this.position.copy(a.position);
            this.quaternion.copy(a.quaternion);
            this.scale.copy(a.scale);
            this.matrix.copy(a.matrix);
            this.matrixWorld.copy(a.matrixWorld);
            this.matrixAutoUpdate = a.matrixAutoUpdate;
            this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate;
            this.layers.mask = a.layers.mask;
            this.visible = a.visible;
            this.castShadow = a.castShadow;
            this.receiveShadow = a.receiveShadow;
            this.frustumCulled = a.frustumCulled;
            this.renderOrder = a.renderOrder;
            this.userData = JSON.parse(JSON.stringify(a.userData));
            if (!0 === b) for(b = 0; b < a.children.length; b++)this.add(a.children[b].clone());
            return this;
        }
    });
    var ag = 0;
    K.prototype = Object.assign(Object.create(ta.prototype), {
        constructor: K,
        isGeometry: !0,
        applyMatrix: function(a) {
            for(var b = (new na).getNormalMatrix(a), c = 0, d = this.vertices.length; c < d; c++)this.vertices[c].applyMatrix4(a);
            c = 0;
            for(d = this.faces.length; c < d; c++){
                a = this.faces[c];
                a.normal.applyMatrix3(b).normalize();
                for(var e = 0, f = a.vertexNormals.length; e < f; e++)a.vertexNormals[e].applyMatrix3(b).normalize();
            }
            null !== this.boundingBox && this.computeBoundingBox();
            null !== this.boundingSphere && this.computeBoundingSphere();
            this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
            return this;
        },
        rotateX: function() {
            var a = new P;
            return function(b) {
                a.makeRotationX(b);
                this.applyMatrix(a);
                return this;
            };
        }(),
        rotateY: function() {
            var a = new P;
            return function(b) {
                a.makeRotationY(b);
                this.applyMatrix(a);
                return this;
            };
        }(),
        rotateZ: function() {
            var a = new P;
            return function(b) {
                a.makeRotationZ(b);
                this.applyMatrix(a);
                return this;
            };
        }(),
        translate: function() {
            var a = new P;
            return function(b, c, d) {
                a.makeTranslation(b, c, d);
                this.applyMatrix(a);
                return this;
            };
        }(),
        scale: function() {
            var a = new P;
            return function(b, c, d) {
                a.makeScale(b, c, d);
                this.applyMatrix(a);
                return this;
            };
        }(),
        lookAt: function() {
            var a = new D;
            return function(b) {
                a.lookAt(b);
                a.updateMatrix();
                this.applyMatrix(a.matrix);
            };
        }(),
        fromBufferGeometry: function(a) {
            function b(a, b, d, e) {
                var f = void 0 === h ? [] : [
                    c.colors[a].clone(),
                    c.colors[b].clone(),
                    c.colors[d].clone()
                ], k = void 0 === g ? [] : [
                    (new n).fromArray(g, 3 * a),
                    (new n).fromArray(g, 3 * b),
                    (new n).fromArray(g, 3 * d)
                ];
                e = new Sb(a, b, d, k, f, e);
                c.faces.push(e);
                void 0 !== l && c.faceVertexUvs[0].push([
                    (new C).fromArray(l, 2 * a),
                    (new C).fromArray(l, 2 * b),
                    (new C).fromArray(l, 2 * d)
                ]);
                void 0 !== m && c.faceVertexUvs[1].push([
                    (new C).fromArray(m, 2 * a),
                    (new C).fromArray(m, 2 * b),
                    (new C).fromArray(m, 2 * d)
                ]);
            }
            var c = this, d = null !== a.index ? a.index.array : void 0, e = a.attributes, f = e.position.array, g = void 0 !== e.normal ? e.normal.array : void 0, h = void 0 !== e.color ? e.color.array : void 0, l = void 0 !== e.uv ? e.uv.array : void 0, m = void 0 !== e.uv2 ? e.uv2.array : void 0;
            void 0 !== m && (this.faceVertexUvs[1] = []);
            for(var k = e = 0; e < f.length; e += 3, k += 2)c.vertices.push((new n).fromArray(f, e)), void 0 !== h && c.colors.push((new A).fromArray(h, e));
            var p = a.groups;
            if (0 < p.length) for(e = 0; e < p.length; e++){
                f = p[e];
                var v = f.start, t = f.count;
                k = v;
                for(v += t; k < v; k += 3)void 0 !== d ? b(d[k], d[k + 1], d[k + 2], f.materialIndex) : b(k, k + 1, k + 2, f.materialIndex);
            }
            else if (void 0 !== d) for(e = 0; e < d.length; e += 3)b(d[e], d[e + 1], d[e + 2]);
            else for(e = 0; e < f.length / 3; e += 3)b(e, e + 1, e + 2);
            this.computeFaceNormals();
            null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
            null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
            return this;
        },
        center: function() {
            var a = new n;
            return function() {
                this.computeBoundingBox();
                this.boundingBox.getCenter(a).negate();
                this.translate(a.x, a.y, a.z);
                return this;
            };
        }(),
        normalize: function() {
            this.computeBoundingSphere();
            var a = this.boundingSphere.center, b = this.boundingSphere.radius;
            b = 0 === b ? 1 : 1 / b;
            var c = new P;
            c.set(b, 0, 0, -b * a.x, 0, b, 0, -b * a.y, 0, 0, b, -b * a.z, 0, 0, 0, 1);
            this.applyMatrix(c);
            return this;
        },
        computeFaceNormals: function() {
            for(var a = new n, b = new n, c = 0, d = this.faces.length; c < d; c++){
                var e = this.faces[c], f = this.vertices[e.a], g = this.vertices[e.b];
                a.subVectors(this.vertices[e.c], g);
                b.subVectors(f, g);
                a.cross(b);
                a.normalize();
                e.normal.copy(a);
            }
        },
        computeVertexNormals: function(a) {
            void 0 === a && (a = !0);
            var b;
            var c = Array(this.vertices.length);
            var d = 0;
            for(b = this.vertices.length; d < b; d++)c[d] = new n;
            if (a) {
                var e = new n, f = new n;
                a = 0;
                for(d = this.faces.length; a < d; a++){
                    b = this.faces[a];
                    var g = this.vertices[b.a];
                    var h = this.vertices[b.b];
                    var l = this.vertices[b.c];
                    e.subVectors(l, h);
                    f.subVectors(g, h);
                    e.cross(f);
                    c[b.a].add(e);
                    c[b.b].add(e);
                    c[b.c].add(e);
                }
            } else for(this.computeFaceNormals(), a = 0, d = this.faces.length; a < d; a++)b = this.faces[a], c[b.a].add(b.normal), c[b.b].add(b.normal), c[b.c].add(b.normal);
            d = 0;
            for(b = this.vertices.length; d < b; d++)c[d].normalize();
            a = 0;
            for(d = this.faces.length; a < d; a++)b = this.faces[a], g = b.vertexNormals, 3 === g.length ? (g[0].copy(c[b.a]), g[1].copy(c[b.b]), g[2].copy(c[b.c])) : (g[0] = c[b.a].clone(), g[1] = c[b.b].clone(), g[2] = c[b.c].clone());
            0 < this.faces.length && (this.normalsNeedUpdate = !0);
        },
        computeFlatVertexNormals: function() {
            var a;
            this.computeFaceNormals();
            var b = 0;
            for(a = this.faces.length; b < a; b++){
                var c = this.faces[b];
                var d = c.vertexNormals;
                3 === d.length ? (d[0].copy(c.normal), d[1].copy(c.normal), d[2].copy(c.normal)) : (d[0] = c.normal.clone(), d[1] = c.normal.clone(), d[2] = c.normal.clone());
            }
            0 < this.faces.length && (this.normalsNeedUpdate = !0);
        },
        computeMorphNormals: function() {
            var a, b;
            var c = 0;
            for(b = this.faces.length; c < b; c++){
                var d = this.faces[c];
                d.__originalFaceNormal ? d.__originalFaceNormal.copy(d.normal) : d.__originalFaceNormal = d.normal.clone();
                d.__originalVertexNormals || (d.__originalVertexNormals = []);
                var e = 0;
                for(a = d.vertexNormals.length; e < a; e++)d.__originalVertexNormals[e] ? d.__originalVertexNormals[e].copy(d.vertexNormals[e]) : d.__originalVertexNormals[e] = d.vertexNormals[e].clone();
            }
            var f = new K;
            f.faces = this.faces;
            e = 0;
            for(a = this.morphTargets.length; e < a; e++){
                if (!this.morphNormals[e]) {
                    this.morphNormals[e] = {};
                    this.morphNormals[e].faceNormals = [];
                    this.morphNormals[e].vertexNormals = [];
                    d = this.morphNormals[e].faceNormals;
                    var g = this.morphNormals[e].vertexNormals;
                    c = 0;
                    for(b = this.faces.length; c < b; c++){
                        var h = new n;
                        var l = {
                            a: new n,
                            b: new n,
                            c: new n
                        };
                        d.push(h);
                        g.push(l);
                    }
                }
                g = this.morphNormals[e];
                f.vertices = this.morphTargets[e].vertices;
                f.computeFaceNormals();
                f.computeVertexNormals();
                c = 0;
                for(b = this.faces.length; c < b; c++)d = this.faces[c], h = g.faceNormals[c], l = g.vertexNormals[c], h.copy(d.normal), l.a.copy(d.vertexNormals[0]), l.b.copy(d.vertexNormals[1]), l.c.copy(d.vertexNormals[2]);
            }
            c = 0;
            for(b = this.faces.length; c < b; c++)d = this.faces[c], d.normal = d.__originalFaceNormal, d.vertexNormals = d.__originalVertexNormals;
        },
        computeBoundingBox: function() {
            null === this.boundingBox && (this.boundingBox = new Ga);
            this.boundingBox.setFromPoints(this.vertices);
        },
        computeBoundingSphere: function() {
            null === this.boundingSphere && (this.boundingSphere = new Ta);
            this.boundingSphere.setFromPoints(this.vertices);
        },
        merge: function(a, b, c) {
            if (a && a.isGeometry) {
                var d, e = this.vertices.length, f = this.vertices, g = a.vertices, h = this.faces, l = a.faces, m = this.faceVertexUvs[0], k = a.faceVertexUvs[0], p = this.colors, n = a.colors;
                void 0 === c && (c = 0);
                void 0 !== b && (d = (new na).getNormalMatrix(b));
                a = 0;
                for(var t = g.length; a < t; a++){
                    var r = g[a].clone();
                    void 0 !== b && r.applyMatrix4(b);
                    f.push(r);
                }
                a = 0;
                for(t = n.length; a < t; a++)p.push(n[a].clone());
                a = 0;
                for(t = l.length; a < t; a++){
                    g = l[a];
                    var u = g.vertexNormals;
                    n = g.vertexColors;
                    p = new Sb(g.a + e, g.b + e, g.c + e);
                    p.normal.copy(g.normal);
                    void 0 !== d && p.normal.applyMatrix3(d).normalize();
                    b = 0;
                    for(f = u.length; b < f; b++)r = u[b].clone(), void 0 !== d && r.applyMatrix3(d).normalize(), p.vertexNormals.push(r);
                    p.color.copy(g.color);
                    b = 0;
                    for(f = n.length; b < f; b++)r = n[b], p.vertexColors.push(r.clone());
                    p.materialIndex = g.materialIndex + c;
                    h.push(p);
                }
                a = 0;
                for(t = k.length; a < t; a++)if (c = k[a], d = [], void 0 !== c) {
                    b = 0;
                    for(f = c.length; b < f; b++)d.push(c[b].clone());
                    m.push(d);
                }
            } else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
        },
        mergeMesh: function(a) {
            a && a.isMesh ? (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a);
        },
        mergeVertices: function() {
            var a = {}, b = [], c = [], d = Math.pow(10, 4), e;
            var f = 0;
            for(e = this.vertices.length; f < e; f++){
                var g = this.vertices[f];
                g = Math.round(g.x * d) + "_" + Math.round(g.y * d) + "_" + Math.round(g.z * d);
                void 0 === a[g] ? (a[g] = f, b.push(this.vertices[f]), c[f] = b.length - 1) : c[f] = c[a[g]];
            }
            a = [];
            f = 0;
            for(e = this.faces.length; f < e; f++)for(d = this.faces[f], d.a = c[d.a], d.b = c[d.b], d.c = c[d.c], d = [
                d.a,
                d.b,
                d.c
            ], g = 0; 3 > g; g++)if (d[g] === d[(g + 1) % 3]) {
                a.push(f);
                break;
            }
            for(f = a.length - 1; 0 <= f; f--)for(d = a[f], this.faces.splice(d, 1), c = 0, e = this.faceVertexUvs.length; c < e; c++)this.faceVertexUvs[c].splice(d, 1);
            f = this.vertices.length - b.length;
            this.vertices = b;
            return f;
        },
        setFromPoints: function(a) {
            this.vertices = [];
            for(var b = 0, c = a.length; b < c; b++){
                var d = a[b];
                this.vertices.push(new n(d.x, d.y, d.z || 0));
            }
            return this;
        },
        sortFacesByMaterialIndex: function() {
            for(var a = this.faces, b = a.length, c = 0; c < b; c++)a[c]._id = c;
            a.sort(function(a, b) {
                return a.materialIndex - b.materialIndex;
            });
            var d = this.faceVertexUvs[0], e = this.faceVertexUvs[1], f, g;
            d && d.length === b && (f = []);
            e && e.length === b && (g = []);
            for(c = 0; c < b; c++){
                var h = a[c]._id;
                f && f.push(d[h]);
                g && g.push(e[h]);
            }
            f && (this.faceVertexUvs[0] = f);
            g && (this.faceVertexUvs[1] = g);
        },
        toJSON: function() {
            function a(a, b, c) {
                return c ? a | 1 << b : a & ~(1 << b);
            }
            function b(a) {
                var b = a.x.toString() + a.y.toString() + a.z.toString();
                if (void 0 !== m[b]) return m[b];
                m[b] = l.length / 3;
                l.push(a.x, a.y, a.z);
                return m[b];
            }
            function c(a) {
                var b = a.r.toString() + a.g.toString() + a.b.toString();
                if (void 0 !== p[b]) return p[b];
                p[b] = k.length;
                k.push(a.getHex());
                return p[b];
            }
            function d(a) {
                var b = a.x.toString() + a.y.toString();
                if (void 0 !== t[b]) return t[b];
                t[b] = n.length / 2;
                n.push(a.x, a.y);
                return t[b];
            }
            var e = {
                metadata: {
                    version: 4.5,
                    type: "Geometry",
                    generator: "Geometry.toJSON"
                }
            };
            e.uuid = this.uuid;
            e.type = this.type;
            "" !== this.name && (e.name = this.name);
            if (void 0 !== this.parameters) {
                var f = this.parameters, g;
                for(g in f)void 0 !== f[g] && (e[g] = f[g]);
                return e;
            }
            f = [];
            for(g = 0; g < this.vertices.length; g++){
                var h = this.vertices[g];
                f.push(h.x, h.y, h.z);
            }
            h = [];
            var l = [], m = {}, k = [], p = {}, n = [], t = {};
            for(g = 0; g < this.faces.length; g++){
                var r = this.faces[g], u = void 0 !== this.faceVertexUvs[0][g], w = 0 < r.normal.length(), z = 0 < r.vertexNormals.length, x = 1 !== r.color.r || 1 !== r.color.g || 1 !== r.color.b, y = 0 < r.vertexColors.length, F = 0;
                F = a(F, 0, 0);
                F = a(F, 1, !0);
                F = a(F, 2, !1);
                F = a(F, 3, u);
                F = a(F, 4, w);
                F = a(F, 5, z);
                F = a(F, 6, x);
                F = a(F, 7, y);
                h.push(F);
                h.push(r.a, r.b, r.c);
                h.push(r.materialIndex);
                u && (u = this.faceVertexUvs[0][g], h.push(d(u[0]), d(u[1]), d(u[2])));
                w && h.push(b(r.normal));
                z && (w = r.vertexNormals, h.push(b(w[0]), b(w[1]), b(w[2])));
                x && h.push(c(r.color));
                y && (r = r.vertexColors, h.push(c(r[0]), c(r[1]), c(r[2])));
            }
            e.data = {};
            e.data.vertices = f;
            e.data.normals = l;
            0 < k.length && (e.data.colors = k);
            0 < n.length && (e.data.uvs = [
                n
            ]);
            e.data.faces = h;
            return e;
        },
        clone: function() {
            return (new K).copy(this);
        },
        copy: function(a) {
            var b, c, d;
            this.vertices = [];
            this.colors = [];
            this.faces = [];
            this.faceVertexUvs = [
                []
            ];
            this.morphTargets = [];
            this.morphNormals = [];
            this.skinWeights = [];
            this.skinIndices = [];
            this.lineDistances = [];
            this.boundingSphere = this.boundingBox = null;
            this.name = a.name;
            var e = a.vertices;
            var f = 0;
            for(b = e.length; f < b; f++)this.vertices.push(e[f].clone());
            e = a.colors;
            f = 0;
            for(b = e.length; f < b; f++)this.colors.push(e[f].clone());
            e = a.faces;
            f = 0;
            for(b = e.length; f < b; f++)this.faces.push(e[f].clone());
            f = 0;
            for(b = a.faceVertexUvs.length; f < b; f++){
                var g = a.faceVertexUvs[f];
                void 0 === this.faceVertexUvs[f] && (this.faceVertexUvs[f] = []);
                e = 0;
                for(c = g.length; e < c; e++){
                    var h = g[e], l = [];
                    var m = 0;
                    for(d = h.length; m < d; m++)l.push(h[m].clone());
                    this.faceVertexUvs[f].push(l);
                }
            }
            m = a.morphTargets;
            f = 0;
            for(b = m.length; f < b; f++){
                d = {};
                d.name = m[f].name;
                if (void 0 !== m[f].vertices) for(d.vertices = [], e = 0, c = m[f].vertices.length; e < c; e++)d.vertices.push(m[f].vertices[e].clone());
                if (void 0 !== m[f].normals) for(d.normals = [], e = 0, c = m[f].normals.length; e < c; e++)d.normals.push(m[f].normals[e].clone());
                this.morphTargets.push(d);
            }
            m = a.morphNormals;
            f = 0;
            for(b = m.length; f < b; f++){
                d = {};
                if (void 0 !== m[f].vertexNormals) for(d.vertexNormals = [], e = 0, c = m[f].vertexNormals.length; e < c; e++)g = m[f].vertexNormals[e], h = {}, h.a = g.a.clone(), h.b = g.b.clone(), h.c = g.c.clone(), d.vertexNormals.push(h);
                if (void 0 !== m[f].faceNormals) for(d.faceNormals = [], e = 0, c = m[f].faceNormals.length; e < c; e++)d.faceNormals.push(m[f].faceNormals[e].clone());
                this.morphNormals.push(d);
            }
            e = a.skinWeights;
            f = 0;
            for(b = e.length; f < b; f++)this.skinWeights.push(e[f].clone());
            e = a.skinIndices;
            f = 0;
            for(b = e.length; f < b; f++)this.skinIndices.push(e[f].clone());
            e = a.lineDistances;
            f = 0;
            for(b = e.length; f < b; f++)this.lineDistances.push(e[f]);
            f = a.boundingBox;
            null !== f && (this.boundingBox = f.clone());
            f = a.boundingSphere;
            null !== f && (this.boundingSphere = f.clone());
            this.elementsNeedUpdate = a.elementsNeedUpdate;
            this.verticesNeedUpdate = a.verticesNeedUpdate;
            this.uvsNeedUpdate = a.uvsNeedUpdate;
            this.normalsNeedUpdate = a.normalsNeedUpdate;
            this.colorsNeedUpdate = a.colorsNeedUpdate;
            this.lineDistancesNeedUpdate = a.lineDistancesNeedUpdate;
            this.groupsNeedUpdate = a.groupsNeedUpdate;
            return this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            });
        }
    });
    Object.defineProperty(H.prototype, "needsUpdate", {
        set: function(a) {
            !0 === a && this.version++;
        }
    });
    Object.assign(H.prototype, {
        isBufferAttribute: !0,
        onUploadCallback: function() {},
        setArray: function(a) {
            if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
            this.count = void 0 !== a ? a.length / this.itemSize : 0;
            this.array = a;
            return this;
        },
        setDynamic: function(a) {
            this.dynamic = a;
            return this;
        },
        copy: function(a) {
            this.name = a.name;
            this.array = new a.array.constructor(a.array);
            this.itemSize = a.itemSize;
            this.count = a.count;
            this.normalized = a.normalized;
            this.dynamic = a.dynamic;
            return this;
        },
        copyAt: function(a, b, c) {
            a *= this.itemSize;
            c *= b.itemSize;
            for(var d = 0, e = this.itemSize; d < e; d++)this.array[a + d] = b.array[c + d];
            return this;
        },
        copyArray: function(a) {
            this.array.set(a);
            return this;
        },
        copyColorsArray: function(a) {
            for(var b = this.array, c = 0, d = 0, e = a.length; d < e; d++){
                var f = a[d];
                void 0 === f && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", d), f = new A);
                b[c++] = f.r;
                b[c++] = f.g;
                b[c++] = f.b;
            }
            return this;
        },
        copyVector2sArray: function(a) {
            for(var b = this.array, c = 0, d = 0, e = a.length; d < e; d++){
                var f = a[d];
                void 0 === f && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", d), f = new C);
                b[c++] = f.x;
                b[c++] = f.y;
            }
            return this;
        },
        copyVector3sArray: function(a) {
            for(var b = this.array, c = 0, d = 0, e = a.length; d < e; d++){
                var f = a[d];
                void 0 === f && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", d), f = new n);
                b[c++] = f.x;
                b[c++] = f.y;
                b[c++] = f.z;
            }
            return this;
        },
        copyVector4sArray: function(a) {
            for(var b = this.array, c = 0, d = 0, e = a.length; d < e; d++){
                var f = a[d];
                void 0 === f && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", d), f = new W);
                b[c++] = f.x;
                b[c++] = f.y;
                b[c++] = f.z;
                b[c++] = f.w;
            }
            return this;
        },
        set: function(a, b) {
            void 0 === b && (b = 0);
            this.array.set(a, b);
            return this;
        },
        getX: function(a) {
            return this.array[a * this.itemSize];
        },
        setX: function(a, b) {
            this.array[a * this.itemSize] = b;
            return this;
        },
        getY: function(a) {
            return this.array[a * this.itemSize + 1];
        },
        setY: function(a, b) {
            this.array[a * this.itemSize + 1] = b;
            return this;
        },
        getZ: function(a) {
            return this.array[a * this.itemSize + 2];
        },
        setZ: function(a, b) {
            this.array[a * this.itemSize + 2] = b;
            return this;
        },
        getW: function(a) {
            return this.array[a * this.itemSize + 3];
        },
        setW: function(a, b) {
            this.array[a * this.itemSize + 3] = b;
            return this;
        },
        setXY: function(a, b, c) {
            a *= this.itemSize;
            this.array[a + 0] = b;
            this.array[a + 1] = c;
            return this;
        },
        setXYZ: function(a, b, c, d) {
            a *= this.itemSize;
            this.array[a + 0] = b;
            this.array[a + 1] = c;
            this.array[a + 2] = d;
            return this;
        },
        setXYZW: function(a, b, c, d, e) {
            a *= this.itemSize;
            this.array[a + 0] = b;
            this.array[a + 1] = c;
            this.array[a + 2] = d;
            this.array[a + 3] = e;
            return this;
        },
        onUpload: function(a) {
            this.onUploadCallback = a;
            return this;
        },
        clone: function() {
            return new this.constructor(this.array, this.itemSize).copy(this);
        }
    });
    Ac.prototype = Object.create(H.prototype);
    Ac.prototype.constructor = Ac;
    Bc.prototype = Object.create(H.prototype);
    Bc.prototype.constructor = Bc;
    Cc.prototype = Object.create(H.prototype);
    Cc.prototype.constructor = Cc;
    Dc.prototype = Object.create(H.prototype);
    Dc.prototype.constructor = Dc;
    ub.prototype = Object.create(H.prototype);
    ub.prototype.constructor = ub;
    Ec.prototype = Object.create(H.prototype);
    Ec.prototype.constructor = Ec;
    vb.prototype = Object.create(H.prototype);
    vb.prototype.constructor = vb;
    E.prototype = Object.create(H.prototype);
    E.prototype.constructor = E;
    Fc.prototype = Object.create(H.prototype);
    Fc.prototype.constructor = Fc;
    Object.assign(Ve.prototype, {
        computeGroups: function(a) {
            var b = [], c = void 0;
            a = a.faces;
            for(var d = 0; d < a.length; d++){
                var e = a[d];
                if (e.materialIndex !== c) {
                    c = e.materialIndex;
                    void 0 !== f && (f.count = 3 * d - f.start, b.push(f));
                    var f = {
                        start: 3 * d,
                        materialIndex: c
                    };
                }
            }
            void 0 !== f && (f.count = 3 * d - f.start, b.push(f));
            this.groups = b;
        },
        fromGeometry: function(a) {
            var b = a.faces, c = a.vertices, d = a.faceVertexUvs, e = d[0] && 0 < d[0].length, f = d[1] && 0 < d[1].length, g = a.morphTargets, h = g.length;
            if (0 < h) {
                var l = [];
                for(var m = 0; m < h; m++)l[m] = {
                    name: g[m].name,
                    data: []
                };
                this.morphTargets.position = l;
            }
            var k = a.morphNormals, p = k.length;
            if (0 < p) {
                var n = [];
                for(m = 0; m < p; m++)n[m] = {
                    name: k[m].name,
                    data: []
                };
                this.morphTargets.normal = n;
            }
            var t = a.skinIndices, r = a.skinWeights, u = t.length === c.length, w = r.length === c.length;
            0 < c.length && 0 === b.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
            for(m = 0; m < b.length; m++){
                var z = b[m];
                this.vertices.push(c[z.a], c[z.b], c[z.c]);
                var x = z.vertexNormals;
                3 === x.length ? this.normals.push(x[0], x[1], x[2]) : (x = z.normal, this.normals.push(x, x, x));
                x = z.vertexColors;
                3 === x.length ? this.colors.push(x[0], x[1], x[2]) : (x = z.color, this.colors.push(x, x, x));
                !0 === e && (x = d[0][m], void 0 !== x ? this.uvs.push(x[0], x[1], x[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", m), this.uvs.push(new C, new C, new C)));
                !0 === f && (x = d[1][m], void 0 !== x ? this.uvs2.push(x[0], x[1], x[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", m), this.uvs2.push(new C, new C, new C)));
                for(x = 0; x < h; x++){
                    var y = g[x].vertices;
                    l[x].data.push(y[z.a], y[z.b], y[z.c]);
                }
                for(x = 0; x < p; x++)y = k[x].vertexNormals[m], n[x].data.push(y.a, y.b, y.c);
                u && this.skinIndices.push(t[z.a], t[z.b], t[z.c]);
                w && this.skinWeights.push(r[z.a], r[z.b], r[z.c]);
            }
            this.computeGroups(a);
            this.verticesNeedUpdate = a.verticesNeedUpdate;
            this.normalsNeedUpdate = a.normalsNeedUpdate;
            this.colorsNeedUpdate = a.colorsNeedUpdate;
            this.uvsNeedUpdate = a.uvsNeedUpdate;
            this.groupsNeedUpdate = a.groupsNeedUpdate;
            return this;
        }
    });
    var bg = 1;
    B.prototype = Object.assign(Object.create(ta.prototype), {
        constructor: B,
        isBufferGeometry: !0,
        getIndex: function() {
            return this.index;
        },
        setIndex: function(a) {
            Array.isArray(a) ? this.index = new (65535 < We(a) ? vb : ub)(a, 1) : this.index = a;
        },
        addAttribute: function(a, b, c) {
            if (!(b && b.isBufferAttribute || b && b.isInterleavedBufferAttribute)) return console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.addAttribute(a, new H(b, c));
            if ("index" === a) return console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(b), this;
            this.attributes[a] = b;
            return this;
        },
        getAttribute: function(a) {
            return this.attributes[a];
        },
        removeAttribute: function(a) {
            delete this.attributes[a];
            return this;
        },
        addGroup: function(a, b, c) {
            this.groups.push({
                start: a,
                count: b,
                materialIndex: void 0 !== c ? c : 0
            });
        },
        clearGroups: function() {
            this.groups = [];
        },
        setDrawRange: function(a, b) {
            this.drawRange.start = a;
            this.drawRange.count = b;
        },
        applyMatrix: function(a) {
            var b = this.attributes.position;
            void 0 !== b && (a.applyToBufferAttribute(b), b.needsUpdate = !0);
            var c = this.attributes.normal;
            void 0 !== c && (b = (new na).getNormalMatrix(a), b.applyToBufferAttribute(c), c.needsUpdate = !0);
            c = this.attributes.tangent;
            void 0 !== c && (b = (new na).getNormalMatrix(a), b.applyToBufferAttribute(c), c.needsUpdate = !0);
            null !== this.boundingBox && this.computeBoundingBox();
            null !== this.boundingSphere && this.computeBoundingSphere();
            return this;
        },
        rotateX: function() {
            var a = new P;
            return function(b) {
                a.makeRotationX(b);
                this.applyMatrix(a);
                return this;
            };
        }(),
        rotateY: function() {
            var a = new P;
            return function(b) {
                a.makeRotationY(b);
                this.applyMatrix(a);
                return this;
            };
        }(),
        rotateZ: function() {
            var a = new P;
            return function(b) {
                a.makeRotationZ(b);
                this.applyMatrix(a);
                return this;
            };
        }(),
        translate: function() {
            var a = new P;
            return function(b, c, d) {
                a.makeTranslation(b, c, d);
                this.applyMatrix(a);
                return this;
            };
        }(),
        scale: function() {
            var a = new P;
            return function(b, c, d) {
                a.makeScale(b, c, d);
                this.applyMatrix(a);
                return this;
            };
        }(),
        lookAt: function() {
            var a = new D;
            return function(b) {
                a.lookAt(b);
                a.updateMatrix();
                this.applyMatrix(a.matrix);
            };
        }(),
        center: function() {
            var a = new n;
            return function() {
                this.computeBoundingBox();
                this.boundingBox.getCenter(a).negate();
                this.translate(a.x, a.y, a.z);
                return this;
            };
        }(),
        setFromObject: function(a) {
            var b = a.geometry;
            if (a.isPoints || a.isLine) {
                a = new E(3 * b.vertices.length, 3);
                var c = new E(3 * b.colors.length, 3);
                this.addAttribute("position", a.copyVector3sArray(b.vertices));
                this.addAttribute("color", c.copyColorsArray(b.colors));
                b.lineDistances && b.lineDistances.length === b.vertices.length && (a = new E(b.lineDistances.length, 1), this.addAttribute("lineDistance", a.copyArray(b.lineDistances)));
                null !== b.boundingSphere && (this.boundingSphere = b.boundingSphere.clone());
                null !== b.boundingBox && (this.boundingBox = b.boundingBox.clone());
            } else a.isMesh && b && b.isGeometry && this.fromGeometry(b);
            return this;
        },
        setFromPoints: function(a) {
            for(var b = [], c = 0, d = a.length; c < d; c++){
                var e = a[c];
                b.push(e.x, e.y, e.z || 0);
            }
            this.addAttribute("position", new E(b, 3));
            return this;
        },
        updateFromObject: function(a) {
            var b = a.geometry;
            if (a.isMesh) {
                var c = b.__directGeometry;
                !0 === b.elementsNeedUpdate && (c = void 0, b.elementsNeedUpdate = !1);
                if (void 0 === c) return this.fromGeometry(b);
                c.verticesNeedUpdate = b.verticesNeedUpdate;
                c.normalsNeedUpdate = b.normalsNeedUpdate;
                c.colorsNeedUpdate = b.colorsNeedUpdate;
                c.uvsNeedUpdate = b.uvsNeedUpdate;
                c.groupsNeedUpdate = b.groupsNeedUpdate;
                b.verticesNeedUpdate = !1;
                b.normalsNeedUpdate = !1;
                b.colorsNeedUpdate = !1;
                b.uvsNeedUpdate = !1;
                b.groupsNeedUpdate = !1;
                b = c;
            }
            !0 === b.verticesNeedUpdate && (c = this.attributes.position, void 0 !== c && (c.copyVector3sArray(b.vertices), c.needsUpdate = !0), b.verticesNeedUpdate = !1);
            !0 === b.normalsNeedUpdate && (c = this.attributes.normal, void 0 !== c && (c.copyVector3sArray(b.normals), c.needsUpdate = !0), b.normalsNeedUpdate = !1);
            !0 === b.colorsNeedUpdate && (c = this.attributes.color, void 0 !== c && (c.copyColorsArray(b.colors), c.needsUpdate = !0), b.colorsNeedUpdate = !1);
            b.uvsNeedUpdate && (c = this.attributes.uv, void 0 !== c && (c.copyVector2sArray(b.uvs), c.needsUpdate = !0), b.uvsNeedUpdate = !1);
            b.lineDistancesNeedUpdate && (c = this.attributes.lineDistance, void 0 !== c && (c.copyArray(b.lineDistances), c.needsUpdate = !0), b.lineDistancesNeedUpdate = !1);
            b.groupsNeedUpdate && (b.computeGroups(a.geometry), this.groups = b.groups, b.groupsNeedUpdate = !1);
            return this;
        },
        fromGeometry: function(a) {
            a.__directGeometry = (new Ve).fromGeometry(a);
            return this.fromDirectGeometry(a.__directGeometry);
        },
        fromDirectGeometry: function(a) {
            var b = new Float32Array(3 * a.vertices.length);
            this.addAttribute("position", new H(b, 3).copyVector3sArray(a.vertices));
            0 < a.normals.length && (b = new Float32Array(3 * a.normals.length), this.addAttribute("normal", new H(b, 3).copyVector3sArray(a.normals)));
            0 < a.colors.length && (b = new Float32Array(3 * a.colors.length), this.addAttribute("color", new H(b, 3).copyColorsArray(a.colors)));
            0 < a.uvs.length && (b = new Float32Array(2 * a.uvs.length), this.addAttribute("uv", new H(b, 2).copyVector2sArray(a.uvs)));
            0 < a.uvs2.length && (b = new Float32Array(2 * a.uvs2.length), this.addAttribute("uv2", new H(b, 2).copyVector2sArray(a.uvs2)));
            this.groups = a.groups;
            for(var c in a.morphTargets){
                b = [];
                for(var d = a.morphTargets[c], e = 0, f = d.length; e < f; e++){
                    var g = d[e], h = new E(3 * g.data.length, 3);
                    h.name = g.name;
                    b.push(h.copyVector3sArray(g.data));
                }
                this.morphAttributes[c] = b;
            }
            0 < a.skinIndices.length && (c = new E(4 * a.skinIndices.length, 4), this.addAttribute("skinIndex", c.copyVector4sArray(a.skinIndices)));
            0 < a.skinWeights.length && (c = new E(4 * a.skinWeights.length, 4), this.addAttribute("skinWeight", c.copyVector4sArray(a.skinWeights)));
            null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
            null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
            return this;
        },
        computeBoundingBox: function() {
            var a = new Ga;
            return function() {
                null === this.boundingBox && (this.boundingBox = new Ga);
                var b = this.attributes.position, c = this.morphAttributes.position;
                if (void 0 !== b) {
                    if (this.boundingBox.setFromBufferAttribute(b), c) {
                        b = 0;
                        for(var d = c.length; b < d; b++)a.setFromBufferAttribute(c[b]), this.boundingBox.expandByPoint(a.min), this.boundingBox.expandByPoint(a.max);
                    }
                } else this.boundingBox.makeEmpty();
                (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
            };
        }(),
        computeBoundingSphere: function() {
            var a = new Ga, b = new Ga, c = new n;
            return function() {
                null === this.boundingSphere && (this.boundingSphere = new Ta);
                var d = this.attributes.position, e = this.morphAttributes.position;
                if (d) {
                    var f = this.boundingSphere.center;
                    a.setFromBufferAttribute(d);
                    if (e) for(var g = 0, h = e.length; g < h; g++){
                        var l = e[g];
                        b.setFromBufferAttribute(l);
                        a.expandByPoint(b.min);
                        a.expandByPoint(b.max);
                    }
                    a.getCenter(f);
                    var m = 0;
                    g = 0;
                    for(h = d.count; g < h; g++)c.fromBufferAttribute(d, g), m = Math.max(m, f.distanceToSquared(c));
                    if (e) for(g = 0, h = e.length; g < h; g++){
                        l = e[g];
                        d = 0;
                        for(var k = l.count; d < k; d++)c.fromBufferAttribute(l, d), m = Math.max(m, f.distanceToSquared(c));
                    }
                    this.boundingSphere.radius = Math.sqrt(m);
                    isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
                }
            };
        }(),
        computeFaceNormals: function() {},
        computeVertexNormals: function() {
            var a = this.index, b = this.attributes;
            if (b.position) {
                var c = b.position.array;
                if (void 0 === b.normal) this.addAttribute("normal", new H(new Float32Array(c.length), 3));
                else for(var d = b.normal.array, e = 0, f = d.length; e < f; e++)d[e] = 0;
                d = b.normal.array;
                var g = new n, h = new n, l = new n, m = new n, k = new n;
                if (a) {
                    var p = a.array;
                    e = 0;
                    for(f = a.count; e < f; e += 3){
                        a = 3 * p[e + 0];
                        var v = 3 * p[e + 1];
                        var t = 3 * p[e + 2];
                        g.fromArray(c, a);
                        h.fromArray(c, v);
                        l.fromArray(c, t);
                        m.subVectors(l, h);
                        k.subVectors(g, h);
                        m.cross(k);
                        d[a] += m.x;
                        d[a + 1] += m.y;
                        d[a + 2] += m.z;
                        d[v] += m.x;
                        d[v + 1] += m.y;
                        d[v + 2] += m.z;
                        d[t] += m.x;
                        d[t + 1] += m.y;
                        d[t + 2] += m.z;
                    }
                } else for(e = 0, f = c.length; e < f; e += 9)g.fromArray(c, e), h.fromArray(c, e + 3), l.fromArray(c, e + 6), m.subVectors(l, h), k.subVectors(g, h), m.cross(k), d[e] = m.x, d[e + 1] = m.y, d[e + 2] = m.z, d[e + 3] = m.x, d[e + 4] = m.y, d[e + 5] = m.z, d[e + 6] = m.x, d[e + 7] = m.y, d[e + 8] = m.z;
                this.normalizeNormals();
                b.normal.needsUpdate = !0;
            }
        },
        merge: function(a, b) {
            if (a && a.isBufferGeometry) {
                void 0 === b && (b = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                var c = this.attributes, d;
                for(d in c)if (void 0 !== a.attributes[d]) {
                    var e = c[d].array, f = a.attributes[d], g = f.array, h = f.itemSize * b;
                    f = Math.min(g.length, e.length - h);
                    for(var l = 0; l < f; l++, h++)e[h] = g[l];
                }
                return this;
            }
            console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
        },
        normalizeNormals: function() {
            var a = new n;
            return function() {
                for(var b = this.attributes.normal, c = 0, d = b.count; c < d; c++)a.x = b.getX(c), a.y = b.getY(c), a.z = b.getZ(c), a.normalize(), b.setXYZ(c, a.x, a.y, a.z);
            };
        }(),
        toNonIndexed: function() {
            function a(a, b) {
                var c = a.array;
                a = a.itemSize;
                for(var d = new c.constructor(b.length * a), e, f = 0, g = 0, h = b.length; g < h; g++){
                    e = b[g] * a;
                    for(var l = 0; l < a; l++)d[f++] = c[e++];
                }
                return new H(d, a);
            }
            if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
            var b = new B, c = this.index.array, d = this.attributes, e;
            for(e in d){
                var f = d[e];
                f = a(f, c);
                b.addAttribute(e, f);
            }
            var g = this.morphAttributes;
            for(e in g){
                var h = [], l = g[e];
                d = 0;
                for(var m = l.length; d < m; d++)f = l[d], f = a(f, c), h.push(f);
                b.morphAttributes[e] = h;
            }
            c = this.groups;
            d = 0;
            for(e = c.length; d < e; d++)f = c[d], b.addGroup(f.start, f.count, f.materialIndex);
            return b;
        },
        toJSON: function() {
            var a = {
                metadata: {
                    version: 4.5,
                    type: "BufferGeometry",
                    generator: "BufferGeometry.toJSON"
                }
            };
            a.uuid = this.uuid;
            a.type = this.type;
            "" !== this.name && (a.name = this.name);
            0 < Object.keys(this.userData).length && (a.userData = this.userData);
            if (void 0 !== this.parameters) {
                var b = this.parameters;
                for(m in b)void 0 !== b[m] && (a[m] = b[m]);
                return a;
            }
            a.data = {
                attributes: {}
            };
            b = this.index;
            null !== b && (a.data.index = {
                type: b.array.constructor.name,
                array: Array.prototype.slice.call(b.array)
            });
            var c = this.attributes;
            for(m in c){
                b = c[m];
                var d = {
                    itemSize: b.itemSize,
                    type: b.array.constructor.name,
                    array: Array.prototype.slice.call(b.array),
                    normalized: b.normalized
                };
                "" !== b.name && (d.name = b.name);
                a.data.attributes[m] = d;
            }
            c = {};
            var e = !1;
            for(m in this.morphAttributes){
                for(var f = this.morphAttributes[m], g = [], h = 0, l = f.length; h < l; h++)b = f[h], d = {
                    itemSize: b.itemSize,
                    type: b.array.constructor.name,
                    array: Array.prototype.slice.call(b.array),
                    normalized: b.normalized
                }, "" !== b.name && (d.name = b.name), g.push(d);
                0 < g.length && (c[m] = g, e = !0);
            }
            e && (a.data.morphAttributes = c);
            var m = this.groups;
            0 < m.length && (a.data.groups = JSON.parse(JSON.stringify(m)));
            m = this.boundingSphere;
            null !== m && (a.data.boundingSphere = {
                center: m.center.toArray(),
                radius: m.radius
            });
            return a;
        },
        clone: function() {
            return (new B).copy(this);
        },
        copy: function(a) {
            var b;
            this.index = null;
            this.attributes = {};
            this.morphAttributes = {};
            this.groups = [];
            this.boundingSphere = this.boundingBox = null;
            this.name = a.name;
            var c = a.index;
            null !== c && this.setIndex(c.clone());
            c = a.attributes;
            for(g in c)this.addAttribute(g, c[g].clone());
            var d = a.morphAttributes;
            for(g in d){
                var e = [], f = d[g];
                c = 0;
                for(b = f.length; c < b; c++)e.push(f[c].clone());
                this.morphAttributes[g] = e;
            }
            var g = a.groups;
            c = 0;
            for(b = g.length; c < b; c++)d = g[c], this.addGroup(d.start, d.count, d.materialIndex);
            g = a.boundingBox;
            null !== g && (this.boundingBox = g.clone());
            g = a.boundingSphere;
            null !== g && (this.boundingSphere = g.clone());
            this.drawRange.start = a.drawRange.start;
            this.drawRange.count = a.drawRange.count;
            this.userData = a.userData;
            return this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            });
        }
    });
    Tb.prototype = Object.create(K.prototype);
    Tb.prototype.constructor = Tb;
    wb.prototype = Object.create(B.prototype);
    wb.prototype.constructor = wb;
    Gc.prototype = Object.create(K.prototype);
    Gc.prototype.constructor = Gc;
    yb.prototype = Object.create(B.prototype);
    yb.prototype.constructor = yb;
    var cg = 0;
    Q.prototype = Object.assign(Object.create(ta.prototype), {
        constructor: Q,
        isMaterial: !0,
        onBeforeCompile: function() {},
        setValues: function(a) {
            if (void 0 !== a) for(var b in a){
                var c = a[b];
                if (void 0 === c) console.warn("THREE.Material: '" + b + "' parameter is undefined.");
                else if ("shading" === b) console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === c ? !0 : !1;
                else {
                    var d = this[b];
                    void 0 === d ? console.warn("THREE." + this.type + ": '" + b + "' is not a property of this material.") : d && d.isColor ? d.set(c) : d && d.isVector3 && c && c.isVector3 ? d.copy(c) : this[b] = c;
                }
            }
        },
        toJSON: function(a) {
            function b(a) {
                var b = [], c;
                for(c in a){
                    var d = a[c];
                    delete d.metadata;
                    b.push(d);
                }
                return b;
            }
            var c = void 0 === a || "string" === typeof a;
            c && (a = {
                textures: {},
                images: {}
            });
            var d = {
                metadata: {
                    version: 4.5,
                    type: "Material",
                    generator: "Material.toJSON"
                }
            };
            d.uuid = this.uuid;
            d.type = this.type;
            "" !== this.name && (d.name = this.name);
            this.color && this.color.isColor && (d.color = this.color.getHex());
            void 0 !== this.roughness && (d.roughness = this.roughness);
            void 0 !== this.metalness && (d.metalness = this.metalness);
            this.emissive && this.emissive.isColor && (d.emissive = this.emissive.getHex());
            1 !== this.emissiveIntensity && (d.emissiveIntensity = this.emissiveIntensity);
            this.specular && this.specular.isColor && (d.specular = this.specular.getHex());
            void 0 !== this.shininess && (d.shininess = this.shininess);
            void 0 !== this.clearCoat && (d.clearCoat = this.clearCoat);
            void 0 !== this.clearCoatRoughness && (d.clearCoatRoughness = this.clearCoatRoughness);
            this.map && this.map.isTexture && (d.map = this.map.toJSON(a).uuid);
            this.matcap && this.matcap.isTexture && (d.matcap = this.matcap.toJSON(a).uuid);
            this.alphaMap && this.alphaMap.isTexture && (d.alphaMap = this.alphaMap.toJSON(a).uuid);
            this.lightMap && this.lightMap.isTexture && (d.lightMap = this.lightMap.toJSON(a).uuid);
            this.aoMap && this.aoMap.isTexture && (d.aoMap = this.aoMap.toJSON(a).uuid, d.aoMapIntensity = this.aoMapIntensity);
            this.bumpMap && this.bumpMap.isTexture && (d.bumpMap = this.bumpMap.toJSON(a).uuid, d.bumpScale = this.bumpScale);
            this.normalMap && this.normalMap.isTexture && (d.normalMap = this.normalMap.toJSON(a).uuid, d.normalMapType = this.normalMapType, d.normalScale = this.normalScale.toArray());
            this.displacementMap && this.displacementMap.isTexture && (d.displacementMap = this.displacementMap.toJSON(a).uuid, d.displacementScale = this.displacementScale, d.displacementBias = this.displacementBias);
            this.roughnessMap && this.roughnessMap.isTexture && (d.roughnessMap = this.roughnessMap.toJSON(a).uuid);
            this.metalnessMap && this.metalnessMap.isTexture && (d.metalnessMap = this.metalnessMap.toJSON(a).uuid);
            this.emissiveMap && this.emissiveMap.isTexture && (d.emissiveMap = this.emissiveMap.toJSON(a).uuid);
            this.specularMap && this.specularMap.isTexture && (d.specularMap = this.specularMap.toJSON(a).uuid);
            this.envMap && this.envMap.isTexture && (d.envMap = this.envMap.toJSON(a).uuid, d.reflectivity = this.reflectivity, void 0 !== this.combine && (d.combine = this.combine), void 0 !== this.envMapIntensity && (d.envMapIntensity = this.envMapIntensity));
            this.gradientMap && this.gradientMap.isTexture && (d.gradientMap = this.gradientMap.toJSON(a).uuid);
            void 0 !== this.size && (d.size = this.size);
            void 0 !== this.sizeAttenuation && (d.sizeAttenuation = this.sizeAttenuation);
            1 !== this.blending && (d.blending = this.blending);
            !0 === this.flatShading && (d.flatShading = this.flatShading);
            0 !== this.side && (d.side = this.side);
            0 !== this.vertexColors && (d.vertexColors = this.vertexColors);
            1 > this.opacity && (d.opacity = this.opacity);
            !0 === this.transparent && (d.transparent = this.transparent);
            d.depthFunc = this.depthFunc;
            d.depthTest = this.depthTest;
            d.depthWrite = this.depthWrite;
            0 !== this.rotation && (d.rotation = this.rotation);
            !0 === this.polygonOffset && (d.polygonOffset = !0);
            0 !== this.polygonOffsetFactor && (d.polygonOffsetFactor = this.polygonOffsetFactor);
            0 !== this.polygonOffsetUnits && (d.polygonOffsetUnits = this.polygonOffsetUnits);
            1 !== this.linewidth && (d.linewidth = this.linewidth);
            void 0 !== this.dashSize && (d.dashSize = this.dashSize);
            void 0 !== this.gapSize && (d.gapSize = this.gapSize);
            void 0 !== this.scale && (d.scale = this.scale);
            !0 === this.dithering && (d.dithering = !0);
            0 < this.alphaTest && (d.alphaTest = this.alphaTest);
            !0 === this.premultipliedAlpha && (d.premultipliedAlpha = this.premultipliedAlpha);
            !0 === this.wireframe && (d.wireframe = this.wireframe);
            1 < this.wireframeLinewidth && (d.wireframeLinewidth = this.wireframeLinewidth);
            "round" !== this.wireframeLinecap && (d.wireframeLinecap = this.wireframeLinecap);
            "round" !== this.wireframeLinejoin && (d.wireframeLinejoin = this.wireframeLinejoin);
            !0 === this.morphTargets && (d.morphTargets = !0);
            !0 === this.skinning && (d.skinning = !0);
            !1 === this.visible && (d.visible = !1);
            "{}" !== JSON.stringify(this.userData) && (d.userData = this.userData);
            c && (c = b(a.textures), a = b(a.images), 0 < c.length && (d.textures = c), 0 < a.length && (d.images = a));
            return d;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.name = a.name;
            this.fog = a.fog;
            this.lights = a.lights;
            this.blending = a.blending;
            this.side = a.side;
            this.flatShading = a.flatShading;
            this.vertexColors = a.vertexColors;
            this.opacity = a.opacity;
            this.transparent = a.transparent;
            this.blendSrc = a.blendSrc;
            this.blendDst = a.blendDst;
            this.blendEquation = a.blendEquation;
            this.blendSrcAlpha = a.blendSrcAlpha;
            this.blendDstAlpha = a.blendDstAlpha;
            this.blendEquationAlpha = a.blendEquationAlpha;
            this.depthFunc = a.depthFunc;
            this.depthTest = a.depthTest;
            this.depthWrite = a.depthWrite;
            this.colorWrite = a.colorWrite;
            this.precision = a.precision;
            this.polygonOffset = a.polygonOffset;
            this.polygonOffsetFactor = a.polygonOffsetFactor;
            this.polygonOffsetUnits = a.polygonOffsetUnits;
            this.dithering = a.dithering;
            this.alphaTest = a.alphaTest;
            this.premultipliedAlpha = a.premultipliedAlpha;
            this.visible = a.visible;
            this.userData = JSON.parse(JSON.stringify(a.userData));
            this.clipShadows = a.clipShadows;
            this.clipIntersection = a.clipIntersection;
            var b = a.clippingPlanes, c = null;
            if (null !== b) {
                var d = b.length;
                c = Array(d);
                for(var e = 0; e !== d; ++e)c[e] = b[e].clone();
            }
            this.clippingPlanes = c;
            this.shadowSide = a.shadowSide;
            return this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            });
        }
    });
    ea.prototype = Object.create(Q.prototype);
    ea.prototype.constructor = ea;
    ea.prototype.isShaderMaterial = !0;
    ea.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.fragmentShader = a.fragmentShader;
        this.vertexShader = a.vertexShader;
        this.uniforms = Rb(a.uniforms);
        this.defines = Object.assign({}, a.defines);
        this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;
        this.lights = a.lights;
        this.clipping = a.clipping;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.morphNormals = a.morphNormals;
        this.extensions = a.extensions;
        return this;
    };
    ea.prototype.toJSON = function(a) {
        var b = Q.prototype.toJSON.call(this, a);
        b.uniforms = {};
        for(var c in this.uniforms){
            var d = this.uniforms[c].value;
            b.uniforms[c] = d && d.isTexture ? {
                type: "t",
                value: d.toJSON(a).uuid
            } : d && d.isColor ? {
                type: "c",
                value: d.getHex()
            } : d && d.isVector2 ? {
                type: "v2",
                value: d.toArray()
            } : d && d.isVector3 ? {
                type: "v3",
                value: d.toArray()
            } : d && d.isVector4 ? {
                type: "v4",
                value: d.toArray()
            } : d && d.isMatrix3 ? {
                type: "m3",
                value: d.toArray()
            } : d && d.isMatrix4 ? {
                type: "m4",
                value: d.toArray()
            } : {
                value: d
            };
        }
        0 < Object.keys(this.defines).length && (b.defines = this.defines);
        b.vertexShader = this.vertexShader;
        b.fragmentShader = this.fragmentShader;
        a = {};
        for(var e in this.extensions)!0 === this.extensions[e] && (a[e] = !0);
        0 < Object.keys(a).length && (b.extensions = a);
        return b;
    };
    Object.assign(zb.prototype, {
        set: function(a, b) {
            this.origin.copy(a);
            this.direction.copy(b);
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.origin.copy(a.origin);
            this.direction.copy(a.direction);
            return this;
        },
        at: function(a, b) {
            void 0 === b && (console.warn("THREE.Ray: .at() target is now required"), b = new n);
            return b.copy(this.direction).multiplyScalar(a).add(this.origin);
        },
        lookAt: function(a) {
            this.direction.copy(a).sub(this.origin).normalize();
            return this;
        },
        recast: function() {
            var a = new n;
            return function(b) {
                this.origin.copy(this.at(b, a));
                return this;
            };
        }(),
        closestPointToPoint: function(a, b) {
            void 0 === b && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), b = new n);
            b.subVectors(a, this.origin);
            a = b.dot(this.direction);
            return 0 > a ? b.copy(this.origin) : b.copy(this.direction).multiplyScalar(a).add(this.origin);
        },
        distanceToPoint: function(a) {
            return Math.sqrt(this.distanceSqToPoint(a));
        },
        distanceSqToPoint: function() {
            var a = new n;
            return function(b) {
                var c = a.subVectors(b, this.origin).dot(this.direction);
                if (0 > c) return this.origin.distanceToSquared(b);
                a.copy(this.direction).multiplyScalar(c).add(this.origin);
                return a.distanceToSquared(b);
            };
        }(),
        distanceSqToSegment: function() {
            var a = new n, b = new n, c = new n;
            return function(d, e, f, g) {
                a.copy(d).add(e).multiplyScalar(.5);
                b.copy(e).sub(d).normalize();
                c.copy(this.origin).sub(a);
                var h = .5 * d.distanceTo(e), l = -this.direction.dot(b), m = c.dot(this.direction), k = -c.dot(b), p = c.lengthSq(), n = Math.abs(1 - l * l);
                if (0 < n) {
                    d = l * k - m;
                    e = l * m - k;
                    var t = h * n;
                    0 <= d ? e >= -t ? e <= t ? (h = 1 / n, d *= h, e *= h, l = d * (d + l * e + 2 * m) + e * (l * d + e + 2 * k) + p) : (e = h, d = Math.max(0, -(l * e + m)), l = -d * d + e * (e + 2 * k) + p) : (e = -h, d = Math.max(0, -(l * e + m)), l = -d * d + e * (e + 2 * k) + p) : e <= -t ? (d = Math.max(0, -(-l * h + m)), e = 0 < d ? -h : Math.min(Math.max(-h, -k), h), l = -d * d + e * (e + 2 * k) + p) : e <= t ? (d = 0, e = Math.min(Math.max(-h, -k), h), l = e * (e + 2 * k) + p) : (d = Math.max(0, -(l * h + m)), e = 0 < d ? h : Math.min(Math.max(-h, -k), h), l = -d * d + e * (e + 2 * k) + p);
                } else e = 0 < l ? -h : h, d = Math.max(0, -(l * e + m)), l = -d * d + e * (e + 2 * k) + p;
                f && f.copy(this.direction).multiplyScalar(d).add(this.origin);
                g && g.copy(b).multiplyScalar(e).add(a);
                return l;
            };
        }(),
        intersectSphere: function() {
            var a = new n;
            return function(b, c) {
                a.subVectors(b.center, this.origin);
                var d = a.dot(this.direction), e = a.dot(a) - d * d;
                b = b.radius * b.radius;
                if (e > b) return null;
                b = Math.sqrt(b - e);
                e = d - b;
                d += b;
                return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
            };
        }(),
        intersectsSphere: function(a) {
            return this.distanceSqToPoint(a.center) <= a.radius * a.radius;
        },
        distanceToPlane: function(a) {
            var b = a.normal.dot(this.direction);
            if (0 === b) return 0 === a.distanceToPoint(this.origin) ? 0 : null;
            a = -(this.origin.dot(a.normal) + a.constant) / b;
            return 0 <= a ? a : null;
        },
        intersectPlane: function(a, b) {
            a = this.distanceToPlane(a);
            return null === a ? null : this.at(a, b);
        },
        intersectsPlane: function(a) {
            var b = a.distanceToPoint(this.origin);
            return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
        },
        intersectBox: function(a, b) {
            var c = 1 / this.direction.x;
            var d = 1 / this.direction.y;
            var e = 1 / this.direction.z, f = this.origin;
            if (0 <= c) {
                var g = (a.min.x - f.x) * c;
                c *= a.max.x - f.x;
            } else g = (a.max.x - f.x) * c, c *= a.min.x - f.x;
            if (0 <= d) {
                var h = (a.min.y - f.y) * d;
                d *= a.max.y - f.y;
            } else h = (a.max.y - f.y) * d, d *= a.min.y - f.y;
            if (g > d || h > c) return null;
            if (h > g || g !== g) g = h;
            if (d < c || c !== c) c = d;
            0 <= e ? (h = (a.min.z - f.z) * e, a = (a.max.z - f.z) * e) : (h = (a.max.z - f.z) * e, a = (a.min.z - f.z) * e);
            if (g > a || h > c) return null;
            if (h > g || g !== g) g = h;
            if (a < c || c !== c) c = a;
            return 0 > c ? null : this.at(0 <= g ? g : c, b);
        },
        intersectsBox: function() {
            var a = new n;
            return function(b) {
                return null !== this.intersectBox(b, a);
            };
        }(),
        intersectTriangle: function() {
            var a = new n, b = new n, c = new n, d = new n;
            return function(e, f, g, h, l) {
                b.subVectors(f, e);
                c.subVectors(g, e);
                d.crossVectors(b, c);
                f = this.direction.dot(d);
                if (0 < f) {
                    if (h) return null;
                    h = 1;
                } else if (0 > f) h = -1, f = -f;
                else return null;
                a.subVectors(this.origin, e);
                e = h * this.direction.dot(c.crossVectors(a, c));
                if (0 > e) return null;
                g = h * this.direction.dot(b.cross(a));
                if (0 > g || e + g > f) return null;
                e = -h * a.dot(d);
                return 0 > e ? null : this.at(e / f, l);
            };
        }(),
        applyMatrix4: function(a) {
            this.origin.applyMatrix4(a);
            this.direction.transformDirection(a);
            return this;
        },
        equals: function(a) {
            return a.origin.equals(this.origin) && a.direction.equals(this.direction);
        }
    });
    Object.assign(ra, {
        getNormal: function() {
            var a = new n;
            return function(b, c, d, e) {
                void 0 === e && (console.warn("THREE.Triangle: .getNormal() target is now required"), e = new n);
                e.subVectors(d, c);
                a.subVectors(b, c);
                e.cross(a);
                b = e.lengthSq();
                return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
            };
        }(),
        getBarycoord: function() {
            var a = new n, b = new n, c = new n;
            return function(d, e, f, g, h) {
                a.subVectors(g, e);
                b.subVectors(f, e);
                c.subVectors(d, e);
                d = a.dot(a);
                e = a.dot(b);
                f = a.dot(c);
                var l = b.dot(b);
                g = b.dot(c);
                var m = d * l - e * e;
                void 0 === h && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), h = new n);
                if (0 === m) return h.set(-2, -1, -1);
                m = 1 / m;
                l = (l * f - e * g) * m;
                d = (d * g - e * f) * m;
                return h.set(1 - l - d, d, l);
            };
        }(),
        containsPoint: function() {
            var a = new n;
            return function(b, c, d, e) {
                ra.getBarycoord(b, c, d, e, a);
                return 0 <= a.x && 0 <= a.y && 1 >= a.x + a.y;
            };
        }(),
        getUV: function() {
            var a = new n;
            return function(b, c, d, e, f, g, h, l) {
                this.getBarycoord(b, c, d, e, a);
                l.set(0, 0);
                l.addScaledVector(f, a.x);
                l.addScaledVector(g, a.y);
                l.addScaledVector(h, a.z);
                return l;
            };
        }()
    });
    Object.assign(ra.prototype, {
        set: function(a, b, c) {
            this.a.copy(a);
            this.b.copy(b);
            this.c.copy(c);
            return this;
        },
        setFromPointsAndIndices: function(a, b, c, d) {
            this.a.copy(a[b]);
            this.b.copy(a[c]);
            this.c.copy(a[d]);
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.a.copy(a.a);
            this.b.copy(a.b);
            this.c.copy(a.c);
            return this;
        },
        getArea: function() {
            var a = new n, b = new n;
            return function() {
                a.subVectors(this.c, this.b);
                b.subVectors(this.a, this.b);
                return .5 * a.cross(b).length();
            };
        }(),
        getMidpoint: function(a) {
            void 0 === a && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), a = new n);
            return a.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        },
        getNormal: function(a) {
            return ra.getNormal(this.a, this.b, this.c, a);
        },
        getPlane: function(a) {
            void 0 === a && (console.warn("THREE.Triangle: .getPlane() target is now required"), a = new n);
            return a.setFromCoplanarPoints(this.a, this.b, this.c);
        },
        getBarycoord: function(a, b) {
            return ra.getBarycoord(a, this.a, this.b, this.c, b);
        },
        containsPoint: function(a) {
            return ra.containsPoint(a, this.a, this.b, this.c);
        },
        getUV: function(a, b, c, d, e) {
            return ra.getUV(a, this.a, this.b, this.c, b, c, d, e);
        },
        intersectsBox: function(a) {
            return a.intersectsTriangle(this);
        },
        closestPointToPoint: function() {
            var a = new n, b = new n, c = new n, d = new n, e = new n, f = new n;
            return function(g, h) {
                void 0 === h && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), h = new n);
                var l = this.a, m = this.b, k = this.c;
                a.subVectors(m, l);
                b.subVectors(k, l);
                d.subVectors(g, l);
                var p = a.dot(d), v = b.dot(d);
                if (0 >= p && 0 >= v) return h.copy(l);
                e.subVectors(g, m);
                var t = a.dot(e), r = b.dot(e);
                if (0 <= t && r <= t) return h.copy(m);
                var u = p * r - t * v;
                if (0 >= u && 0 <= p && 0 >= t) return m = p / (p - t), h.copy(l).addScaledVector(a, m);
                f.subVectors(g, k);
                g = a.dot(f);
                var w = b.dot(f);
                if (0 <= w && g <= w) return h.copy(k);
                p = g * v - p * w;
                if (0 >= p && 0 <= v && 0 >= w) return u = v / (v - w), h.copy(l).addScaledVector(b, u);
                v = t * w - g * r;
                if (0 >= v && 0 <= r - t && 0 <= g - w) return c.subVectors(k, m), u = (r - t) / (r - t + (g - w)), h.copy(m).addScaledVector(c, u);
                k = 1 / (v + p + u);
                m = p * k;
                u *= k;
                return h.copy(l).addScaledVector(a, m).addScaledVector(b, u);
            };
        }(),
        equals: function(a) {
            return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
        }
    });
    Ca.prototype = Object.create(Q.prototype);
    Ca.prototype.constructor = Ca;
    Ca.prototype.isMeshBasicMaterial = !0;
    Ca.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.color.copy(a.color);
        this.map = a.map;
        this.lightMap = a.lightMap;
        this.lightMapIntensity = a.lightMapIntensity;
        this.aoMap = a.aoMap;
        this.aoMapIntensity = a.aoMapIntensity;
        this.specularMap = a.specularMap;
        this.alphaMap = a.alphaMap;
        this.envMap = a.envMap;
        this.combine = a.combine;
        this.reflectivity = a.reflectivity;
        this.refractionRatio = a.refractionRatio;
        this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;
        this.wireframeLinecap = a.wireframeLinecap;
        this.wireframeLinejoin = a.wireframeLinejoin;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        return this;
    };
    qa.prototype = Object.assign(Object.create(D.prototype), {
        constructor: qa,
        isMesh: !0,
        setDrawMode: function(a) {
            this.drawMode = a;
        },
        copy: function(a) {
            D.prototype.copy.call(this, a);
            this.drawMode = a.drawMode;
            void 0 !== a.morphTargetInfluences && (this.morphTargetInfluences = a.morphTargetInfluences.slice());
            void 0 !== a.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, a.morphTargetDictionary));
            return this;
        },
        updateMorphTargets: function() {
            var a = this.geometry;
            if (a.isBufferGeometry) {
                a = a.morphAttributes;
                var b = Object.keys(a);
                if (0 < b.length) {
                    var c = a[b[0]];
                    if (void 0 !== c) for(this.morphTargetInfluences = [], this.morphTargetDictionary = {}, a = 0, b = c.length; a < b; a++){
                        var d = c[a].name || String(a);
                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[d] = a;
                    }
                }
            } else a = a.morphTargets, void 0 !== a && 0 < a.length && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
        },
        raycast: function() {
            function a(a, b, c, d, e, f, g, h) {
                if (null === (1 === b.side ? d.intersectTriangle(g, f, e, !0, h) : d.intersectTriangle(e, f, g, 2 !== b.side, h))) return null;
                x.copy(h);
                x.applyMatrix4(a.matrixWorld);
                b = c.ray.origin.distanceTo(x);
                return b < c.near || b > c.far ? null : {
                    distance: b,
                    point: x.clone(),
                    object: a
                };
            }
            function b(b, c, d, e, q, n, x, B, A, D) {
                f.fromBufferAttribute(q, B);
                g.fromBufferAttribute(q, A);
                h.fromBufferAttribute(q, D);
                q = b.morphTargetInfluences;
                if (c.morphTargets && n && q) {
                    p.set(0, 0, 0);
                    v.set(0, 0, 0);
                    t.set(0, 0, 0);
                    for(var y = 0, G = n.length; y < G; y++){
                        var F = q[y], E = n[y];
                        0 !== F && (l.fromBufferAttribute(E, B), m.fromBufferAttribute(E, A), k.fromBufferAttribute(E, D), p.addScaledVector(l.sub(f), F), v.addScaledVector(m.sub(g), F), t.addScaledVector(k.sub(h), F));
                    }
                    f.add(p);
                    g.add(v);
                    h.add(t);
                }
                if (b = a(b, c, d, e, f, g, h, z)) x && (r.fromBufferAttribute(x, B), u.fromBufferAttribute(x, A), w.fromBufferAttribute(x, D), b.uv = ra.getUV(z, f, g, h, r, u, w, new C)), x = new Sb(B, A, D), ra.getNormal(f, g, h, x.normal), b.face = x;
                return b;
            }
            var c = new P, d = new zb, e = new Ta, f = new n, g = new n, h = new n, l = new n, m = new n, k = new n, p = new n, v = new n, t = new n, r = new C, u = new C, w = new C, z = new n, x = new n;
            return function(f, g) {
                var h = this.geometry, l = this.material, m = this.matrixWorld;
                if (void 0 !== l && (null === h.boundingSphere && h.computeBoundingSphere(), e.copy(h.boundingSphere), e.applyMatrix4(m), !1 !== f.ray.intersectsSphere(e) && (c.getInverse(m), d.copy(f.ray).applyMatrix4(c), null === h.boundingBox || !1 !== d.intersectsBox(h.boundingBox)))) {
                    if (h.isBufferGeometry) {
                        var k = h.index;
                        m = h.attributes.position;
                        var q = h.morphAttributes.position, p = h.attributes.uv, n = h.groups, t = h.drawRange, v, x;
                        if (null !== k) if (Array.isArray(l)) {
                            var y = 0;
                            for(v = n.length; y < v; y++){
                                var B = n[y];
                                var F = l[B.materialIndex];
                                var A = Math.max(B.start, t.start);
                                for(x = h = Math.min(B.start + B.count, t.start + t.count); A < x; A += 3){
                                    h = k.getX(A);
                                    var D = k.getX(A + 1);
                                    var E = k.getX(A + 2);
                                    if (h = b(this, F, f, d, m, q, p, h, D, E)) h.faceIndex = Math.floor(A / 3), h.face.materialIndex = B.materialIndex, g.push(h);
                                }
                            }
                        } else for(A = Math.max(0, t.start), h = Math.min(k.count, t.start + t.count), y = A, v = h; y < v; y += 3){
                            if (h = k.getX(y), D = k.getX(y + 1), E = k.getX(y + 2), h = b(this, l, f, d, m, q, p, h, D, E)) h.faceIndex = Math.floor(y / 3), g.push(h);
                        }
                        else if (void 0 !== m) {
                            if (Array.isArray(l)) for(y = 0, v = n.length; y < v; y++)for(B = n[y], F = l[B.materialIndex], A = Math.max(B.start, t.start), x = h = Math.min(B.start + B.count, t.start + t.count); A < x; A += 3){
                                if (h = A, D = A + 1, E = A + 2, h = b(this, F, f, d, m, q, p, h, D, E)) h.faceIndex = Math.floor(A / 3), h.face.materialIndex = B.materialIndex, g.push(h);
                            }
                            else for(A = Math.max(0, t.start), h = Math.min(m.count, t.start + t.count), y = A, v = h; y < v; y += 3)if (h = y, D = y + 1, E = y + 2, h = b(this, l, f, d, m, q, p, h, D, E)) h.faceIndex = Math.floor(y / 3), g.push(h);
                        }
                    } else if (h.isGeometry) {
                        for(m = Array.isArray(l), q = h.vertices, p = h.faces, h = h.faceVertexUvs[0], 0 < h.length && (k = h), v = 0, B = p.length; v < B; v++)if (F = p[v], h = m ? l[F.materialIndex] : l, void 0 !== h && (n = q[F.a], t = q[F.b], y = q[F.c], h = a(this, h, f, d, n, t, y, z))) k && k[v] && (A = k[v], r.copy(A[0]), u.copy(A[1]), w.copy(A[2]), h.uv = ra.getUV(z, n, t, y, r, u, w, new C)), h.face = F, h.faceIndex = v, g.push(h);
                    }
                }
            };
        }(),
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this);
        }
    });
    cb.prototype = Object.create(Y.prototype);
    cb.prototype.constructor = cb;
    cb.prototype.isCubeTexture = !0;
    Object.defineProperty(cb.prototype, "images", {
        get: function() {
            return this.image;
        },
        set: function(a) {
            this.image = a;
        }
    });
    Ub.prototype = Object.create(Y.prototype);
    Ub.prototype.constructor = Ub;
    Ub.prototype.isDataTexture2DArray = !0;
    Vb.prototype = Object.create(Y.prototype);
    Vb.prototype.constructor = Vb;
    Vb.prototype.isDataTexture3D = !0;
    var cf = new Y, yg = new Ub, Ag = new Vb, df = new cb, Xe = [], Ze = [], bf = new Float32Array(16), af = new Float32Array(9), $e = new Float32Array(4);
    hf.prototype.updateCache = function(a) {
        var b = this.cache;
        a instanceof Float32Array && b.length !== a.length && (this.cache = new Float32Array(a.length));
        sa(b, a);
    };
    jf.prototype.setValue = function(a, b, c) {
        for(var d = this.seq, e = 0, f = d.length; e !== f; ++e){
            var g = d[e];
            g.setValue(a, b[g.id], c);
        }
    };
    var he = /([\w\d_]+)(\])?(\[|\.)?/g;
    ib.prototype.setValue = function(a, b, c, d) {
        b = this.map[b];
        void 0 !== b && b.setValue(a, c, d);
    };
    ib.prototype.setOptional = function(a, b, c) {
        b = b[c];
        void 0 !== b && this.setValue(a, c, b);
    };
    ib.upload = function(a, b, c, d) {
        for(var e = 0, f = b.length; e !== f; ++e){
            var g = b[e], h = c[g.id];
            !1 !== h.needsUpdate && g.setValue(a, h.value, d);
        }
    };
    ib.seqWithValue = function(a, b) {
        for(var c = [], d = 0, e = a.length; d !== e; ++d){
            var f = a[d];
            f.id in b && c.push(f);
        }
        return c;
    };
    var Vg = 0, ch = 0;
    jb.prototype = Object.create(Q.prototype);
    jb.prototype.constructor = jb;
    jb.prototype.isMeshDepthMaterial = !0;
    jb.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.depthPacking = a.depthPacking;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.map = a.map;
        this.alphaMap = a.alphaMap;
        this.displacementMap = a.displacementMap;
        this.displacementScale = a.displacementScale;
        this.displacementBias = a.displacementBias;
        this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;
        return this;
    };
    kb.prototype = Object.create(Q.prototype);
    kb.prototype.constructor = kb;
    kb.prototype.isMeshDistanceMaterial = !0;
    kb.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.referencePosition.copy(a.referencePosition);
        this.nearDistance = a.nearDistance;
        this.farDistance = a.farDistance;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.map = a.map;
        this.alphaMap = a.alphaMap;
        this.displacementMap = a.displacementMap;
        this.displacementScale = a.displacementScale;
        this.displacementBias = a.displacementBias;
        return this;
    };
    Xb.prototype = Object.assign(Object.create(D.prototype), {
        constructor: Xb,
        isGroup: !0
    });
    Xa.prototype = Object.assign(Object.create(D.prototype), {
        constructor: Xa,
        isCamera: !0,
        copy: function(a, b) {
            D.prototype.copy.call(this, a, b);
            this.matrixWorldInverse.copy(a.matrixWorldInverse);
            this.projectionMatrix.copy(a.projectionMatrix);
            this.projectionMatrixInverse.copy(a.projectionMatrixInverse);
            return this;
        },
        getWorldDirection: function(a) {
            void 0 === a && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), a = new n);
            this.updateMatrixWorld(!0);
            var b = this.matrixWorld.elements;
            return a.set(-b[8], -b[9], -b[10]).normalize();
        },
        updateMatrixWorld: function(a) {
            D.prototype.updateMatrixWorld.call(this, a);
            this.matrixWorldInverse.getInverse(this.matrixWorld);
        },
        clone: function() {
            return (new this.constructor).copy(this);
        }
    });
    ca.prototype = Object.assign(Object.create(Xa.prototype), {
        constructor: ca,
        isPerspectiveCamera: !0,
        copy: function(a, b) {
            Xa.prototype.copy.call(this, a, b);
            this.fov = a.fov;
            this.zoom = a.zoom;
            this.near = a.near;
            this.far = a.far;
            this.focus = a.focus;
            this.aspect = a.aspect;
            this.view = null === a.view ? null : Object.assign({}, a.view);
            this.filmGauge = a.filmGauge;
            this.filmOffset = a.filmOffset;
            return this;
        },
        setFocalLength: function(a) {
            a = .5 * this.getFilmHeight() / a;
            this.fov = 2 * O.RAD2DEG * Math.atan(a);
            this.updateProjectionMatrix();
        },
        getFocalLength: function() {
            var a = Math.tan(.5 * O.DEG2RAD * this.fov);
            return .5 * this.getFilmHeight() / a;
        },
        getEffectiveFOV: function() {
            return 2 * O.RAD2DEG * Math.atan(Math.tan(.5 * O.DEG2RAD * this.fov) / this.zoom);
        },
        getFilmWidth: function() {
            return this.filmGauge * Math.min(this.aspect, 1);
        },
        getFilmHeight: function() {
            return this.filmGauge / Math.max(this.aspect, 1);
        },
        setViewOffset: function(a, b, c, d, e, f) {
            this.aspect = a / b;
            null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            });
            this.view.enabled = !0;
            this.view.fullWidth = a;
            this.view.fullHeight = b;
            this.view.offsetX = c;
            this.view.offsetY = d;
            this.view.width = e;
            this.view.height = f;
            this.updateProjectionMatrix();
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1);
            this.updateProjectionMatrix();
        },
        updateProjectionMatrix: function() {
            var a = this.near, b = a * Math.tan(.5 * O.DEG2RAD * this.fov) / this.zoom, c = 2 * b, d = this.aspect * c, e = -.5 * d, f = this.view;
            if (null !== this.view && this.view.enabled) {
                var g = f.fullWidth, h = f.fullHeight;
                e += f.offsetX * d / g;
                b -= f.offsetY * c / h;
                d *= f.width / g;
                c *= f.height / h;
            }
            f = this.filmOffset;
            0 !== f && (e += a * f / this.getFilmWidth());
            this.projectionMatrix.makePerspective(e, e + d, b, b - c, a, this.far);
            this.projectionMatrixInverse.getInverse(this.projectionMatrix);
        },
        toJSON: function(a) {
            a = D.prototype.toJSON.call(this, a);
            a.object.fov = this.fov;
            a.object.zoom = this.zoom;
            a.object.near = this.near;
            a.object.far = this.far;
            a.object.focus = this.focus;
            a.object.aspect = this.aspect;
            null !== this.view && (a.object.view = Object.assign({}, this.view));
            a.object.filmGauge = this.filmGauge;
            a.object.filmOffset = this.filmOffset;
            return a;
        }
    });
    Jc.prototype = Object.assign(Object.create(ca.prototype), {
        constructor: Jc,
        isArrayCamera: !0
    });
    var vf = new n, wf = new n;
    Object.assign(Ad.prototype, {
        isFogExp2: !0,
        clone: function() {
            return new Ad(this.color, this.density);
        },
        toJSON: function() {
            return {
                type: "FogExp2",
                color: this.color.getHex(),
                density: this.density
            };
        }
    });
    Object.assign(Bd.prototype, {
        isFog: !0,
        clone: function() {
            return new Bd(this.color, this.near, this.far);
        },
        toJSON: function() {
            return {
                type: "Fog",
                color: this.color.getHex(),
                near: this.near,
                far: this.far
            };
        }
    });
    Cd.prototype = Object.assign(Object.create(D.prototype), {
        constructor: Cd,
        isScene: !0,
        copy: function(a, b) {
            D.prototype.copy.call(this, a, b);
            null !== a.background && (this.background = a.background.clone());
            null !== a.fog && (this.fog = a.fog.clone());
            null !== a.overrideMaterial && (this.overrideMaterial = a.overrideMaterial.clone());
            this.autoUpdate = a.autoUpdate;
            this.matrixAutoUpdate = a.matrixAutoUpdate;
            return this;
        },
        toJSON: function(a) {
            var b = D.prototype.toJSON.call(this, a);
            null !== this.background && (b.object.background = this.background.toJSON(a));
            null !== this.fog && (b.object.fog = this.fog.toJSON());
            return b;
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            });
        }
    });
    Object.defineProperty(Ab.prototype, "needsUpdate", {
        set: function(a) {
            !0 === a && this.version++;
        }
    });
    Object.assign(Ab.prototype, {
        isInterleavedBuffer: !0,
        onUploadCallback: function() {},
        setArray: function(a) {
            if (Array.isArray(a)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
            this.count = void 0 !== a ? a.length / this.stride : 0;
            this.array = a;
            return this;
        },
        setDynamic: function(a) {
            this.dynamic = a;
            return this;
        },
        copy: function(a) {
            this.array = new a.array.constructor(a.array);
            this.count = a.count;
            this.stride = a.stride;
            this.dynamic = a.dynamic;
            return this;
        },
        copyAt: function(a, b, c) {
            a *= this.stride;
            c *= b.stride;
            for(var d = 0, e = this.stride; d < e; d++)this.array[a + d] = b.array[c + d];
            return this;
        },
        set: function(a, b) {
            void 0 === b && (b = 0);
            this.array.set(a, b);
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        onUpload: function(a) {
            this.onUploadCallback = a;
            return this;
        }
    });
    Object.defineProperties(Kc.prototype, {
        count: {
            get: function() {
                return this.data.count;
            }
        },
        array: {
            get: function() {
                return this.data.array;
            }
        }
    });
    Object.assign(Kc.prototype, {
        isInterleavedBufferAttribute: !0,
        setX: function(a, b) {
            this.data.array[a * this.data.stride + this.offset] = b;
            return this;
        },
        setY: function(a, b) {
            this.data.array[a * this.data.stride + this.offset + 1] = b;
            return this;
        },
        setZ: function(a, b) {
            this.data.array[a * this.data.stride + this.offset + 2] = b;
            return this;
        },
        setW: function(a, b) {
            this.data.array[a * this.data.stride + this.offset + 3] = b;
            return this;
        },
        getX: function(a) {
            return this.data.array[a * this.data.stride + this.offset];
        },
        getY: function(a) {
            return this.data.array[a * this.data.stride + this.offset + 1];
        },
        getZ: function(a) {
            return this.data.array[a * this.data.stride + this.offset + 2];
        },
        getW: function(a) {
            return this.data.array[a * this.data.stride + this.offset + 3];
        },
        setXY: function(a, b, c) {
            a = a * this.data.stride + this.offset;
            this.data.array[a + 0] = b;
            this.data.array[a + 1] = c;
            return this;
        },
        setXYZ: function(a, b, c, d) {
            a = a * this.data.stride + this.offset;
            this.data.array[a + 0] = b;
            this.data.array[a + 1] = c;
            this.data.array[a + 2] = d;
            return this;
        },
        setXYZW: function(a, b, c, d, e) {
            a = a * this.data.stride + this.offset;
            this.data.array[a + 0] = b;
            this.data.array[a + 1] = c;
            this.data.array[a + 2] = d;
            this.data.array[a + 3] = e;
            return this;
        }
    });
    nb.prototype = Object.create(Q.prototype);
    nb.prototype.constructor = nb;
    nb.prototype.isSpriteMaterial = !0;
    nb.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.color.copy(a.color);
        this.map = a.map;
        this.rotation = a.rotation;
        this.sizeAttenuation = a.sizeAttenuation;
        return this;
    };
    var Yb;
    Lc.prototype = Object.assign(Object.create(D.prototype), {
        constructor: Lc,
        isSprite: !0,
        raycast: function() {
            function a(a, b, c, d, h, l) {
                e.subVectors(a, c).addScalar(.5).multiply(d);
                void 0 !== h ? (f.x = l * e.x - h * e.y, f.y = h * e.x + l * e.y) : f.copy(e);
                a.copy(b);
                a.x += f.x;
                a.y += f.y;
                a.applyMatrix4(g);
            }
            var b = new n, c = new n, d = new n, e = new C, f = new C, g = new P, h = new n, l = new n, m = new n, k = new C, p = new C, v = new C;
            return function(e, f) {
                c.setFromMatrixScale(this.matrixWorld);
                g.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld);
                d.setFromMatrixPosition(this.modelViewMatrix);
                var q = this.material.rotation;
                if (0 !== q) {
                    var n = Math.cos(q);
                    var r = Math.sin(q);
                }
                q = this.center;
                a(h.set(-.5, -.5, 0), d, q, c, r, n);
                a(l.set(.5, -.5, 0), d, q, c, r, n);
                a(m.set(.5, .5, 0), d, q, c, r, n);
                k.set(0, 0);
                p.set(1, 0);
                v.set(1, 1);
                var t = e.ray.intersectTriangle(h, l, m, !1, b);
                if (null === t && (a(l.set(-.5, .5, 0), d, q, c, r, n), p.set(0, 1), t = e.ray.intersectTriangle(h, m, l, !1, b), null === t)) return;
                r = e.ray.origin.distanceTo(b);
                r < e.near || r > e.far || f.push({
                    distance: r,
                    point: b.clone(),
                    uv: ra.getUV(b, h, l, m, k, p, v, new C),
                    face: null,
                    object: this
                });
            };
        }(),
        clone: function() {
            return new this.constructor(this.material).copy(this);
        },
        copy: function(a) {
            D.prototype.copy.call(this, a);
            void 0 !== a.center && this.center.copy(a.center);
            return this;
        }
    });
    Mc.prototype = Object.assign(Object.create(D.prototype), {
        constructor: Mc,
        isLOD: !0,
        copy: function(a) {
            D.prototype.copy.call(this, a, !1);
            a = a.levels;
            for(var b = 0, c = a.length; b < c; b++){
                var d = a[b];
                this.addLevel(d.object.clone(), d.distance);
            }
            return this;
        },
        addLevel: function(a, b) {
            void 0 === b && (b = 0);
            b = Math.abs(b);
            for(var c = this.levels, d = 0; d < c.length && !(b < c[d].distance); d++);
            c.splice(d, 0, {
                distance: b,
                object: a
            });
            this.add(a);
            return this;
        },
        getObjectForDistance: function(a) {
            for(var b = this.levels, c = 1, d = b.length; c < d && !(a < b[c].distance); c++);
            return b[c - 1].object;
        },
        raycast: function() {
            var a = new n;
            return function(b, c) {
                a.setFromMatrixPosition(this.matrixWorld);
                var d = b.ray.origin.distanceTo(a);
                this.getObjectForDistance(d).raycast(b, c);
            };
        }(),
        update: function() {
            var a = new n, b = new n;
            return function(c) {
                var d = this.levels;
                if (1 < d.length) {
                    a.setFromMatrixPosition(c.matrixWorld);
                    b.setFromMatrixPosition(this.matrixWorld);
                    c = a.distanceTo(b);
                    d[0].object.visible = !0;
                    for(var e = 1, f = d.length; e < f; e++)if (c >= d[e].distance) d[e - 1].object.visible = !1, d[e].object.visible = !0;
                    else break;
                    for(; e < f; e++)d[e].object.visible = !1;
                }
            };
        }(),
        toJSON: function(a) {
            a = D.prototype.toJSON.call(this, a);
            a.object.levels = [];
            for(var b = this.levels, c = 0, d = b.length; c < d; c++){
                var e = b[c];
                a.object.levels.push({
                    object: e.object.uuid,
                    distance: e.distance
                });
            }
            return a;
        }
    });
    Nc.prototype = Object.assign(Object.create(qa.prototype), {
        constructor: Nc,
        isSkinnedMesh: !0,
        bind: function(a, b) {
            this.skeleton = a;
            void 0 === b && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), b = this.matrixWorld);
            this.bindMatrix.copy(b);
            this.bindMatrixInverse.getInverse(b);
        },
        pose: function() {
            this.skeleton.pose();
        },
        normalizeSkinWeights: function() {
            for(var a = new W, b = this.geometry.attributes.skinWeight, c = 0, d = b.count; c < d; c++){
                a.x = b.getX(c);
                a.y = b.getY(c);
                a.z = b.getZ(c);
                a.w = b.getW(c);
                var e = 1 / a.manhattanLength();
                Infinity !== e ? a.multiplyScalar(e) : a.set(1, 0, 0, 0);
                b.setXYZW(c, a.x, a.y, a.z, a.w);
            }
        },
        updateMatrixWorld: function(a) {
            qa.prototype.updateMatrixWorld.call(this, a);
            "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
        },
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this);
        }
    });
    Object.assign(Dd.prototype, {
        calculateInverses: function() {
            this.boneInverses = [];
            for(var a = 0, b = this.bones.length; a < b; a++){
                var c = new P;
                this.bones[a] && c.getInverse(this.bones[a].matrixWorld);
                this.boneInverses.push(c);
            }
        },
        pose: function() {
            var a, b;
            var c = 0;
            for(b = this.bones.length; c < b; c++)(a = this.bones[c]) && a.matrixWorld.getInverse(this.boneInverses[c]);
            c = 0;
            for(b = this.bones.length; c < b; c++)if (a = this.bones[c]) a.parent && a.parent.isBone ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
        },
        update: function() {
            var a = new P, b = new P;
            return function() {
                for(var c = this.bones, d = this.boneInverses, e = this.boneMatrices, f = this.boneTexture, g = 0, h = c.length; g < h; g++)a.multiplyMatrices(c[g] ? c[g].matrixWorld : b, d[g]), a.toArray(e, 16 * g);
                void 0 !== f && (f.needsUpdate = !0);
            };
        }(),
        clone: function() {
            return new Dd(this.bones, this.boneInverses);
        },
        getBoneByName: function(a) {
            for(var b = 0, c = this.bones.length; b < c; b++){
                var d = this.bones[b];
                if (d.name === a) return d;
            }
        }
    });
    ke.prototype = Object.assign(Object.create(D.prototype), {
        constructor: ke,
        isBone: !0
    });
    U.prototype = Object.create(Q.prototype);
    U.prototype.constructor = U;
    U.prototype.isLineBasicMaterial = !0;
    U.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.color.copy(a.color);
        this.linewidth = a.linewidth;
        this.linecap = a.linecap;
        this.linejoin = a.linejoin;
        return this;
    };
    ka.prototype = Object.assign(Object.create(D.prototype), {
        constructor: ka,
        isLine: !0,
        computeLineDistances: function() {
            var a = new n, b = new n;
            return function() {
                var c = this.geometry;
                if (c.isBufferGeometry) if (null === c.index) {
                    for(var d = c.attributes.position, e = [
                        0
                    ], f = 1, g = d.count; f < g; f++)a.fromBufferAttribute(d, f - 1), b.fromBufferAttribute(d, f), e[f] = e[f - 1], e[f] += a.distanceTo(b);
                    c.addAttribute("lineDistance", new E(e, 1));
                } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else if (c.isGeometry) for(d = c.vertices, e = c.lineDistances, e[0] = 0, f = 1, g = d.length; f < g; f++)e[f] = e[f - 1], e[f] += d[f - 1].distanceTo(d[f]);
                return this;
            };
        }(),
        raycast: function() {
            var a = new P, b = new zb, c = new Ta;
            return function(d, e) {
                var f = d.linePrecision, g = this.geometry, h = this.matrixWorld;
                null === g.boundingSphere && g.computeBoundingSphere();
                c.copy(g.boundingSphere);
                c.applyMatrix4(h);
                c.radius += f;
                if (!1 !== d.ray.intersectsSphere(c)) {
                    a.getInverse(h);
                    b.copy(d.ray).applyMatrix4(a);
                    f /= (this.scale.x + this.scale.y + this.scale.z) / 3;
                    f *= f;
                    var l = new n, m = new n;
                    h = new n;
                    var k = new n, p = this && this.isLineSegments ? 2 : 1;
                    if (g.isBufferGeometry) {
                        var v = g.index, t = g.attributes.position.array;
                        if (null !== v) {
                            v = v.array;
                            g = 0;
                            for(var r = v.length - 1; g < r; g += p){
                                var u = v[g + 1];
                                l.fromArray(t, 3 * v[g]);
                                m.fromArray(t, 3 * u);
                                u = b.distanceSqToSegment(l, m, k, h);
                                u > f || (k.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(k), u < d.near || u > d.far || e.push({
                                    distance: u,
                                    point: h.clone().applyMatrix4(this.matrixWorld),
                                    index: g,
                                    face: null,
                                    faceIndex: null,
                                    object: this
                                }));
                            }
                        } else for(g = 0, r = t.length / 3 - 1; g < r; g += p)l.fromArray(t, 3 * g), m.fromArray(t, 3 * g + 3), u = b.distanceSqToSegment(l, m, k, h), u > f || (k.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(k), u < d.near || u > d.far || e.push({
                            distance: u,
                            point: h.clone().applyMatrix4(this.matrixWorld),
                            index: g,
                            face: null,
                            faceIndex: null,
                            object: this
                        }));
                    } else if (g.isGeometry) for(l = g.vertices, m = l.length, g = 0; g < m - 1; g += p)u = b.distanceSqToSegment(l[g], l[g + 1], k, h), u > f || (k.applyMatrix4(this.matrixWorld), u = d.ray.origin.distanceTo(k), u < d.near || u > d.far || e.push({
                        distance: u,
                        point: h.clone().applyMatrix4(this.matrixWorld),
                        index: g,
                        face: null,
                        faceIndex: null,
                        object: this
                    }));
                }
            };
        }(),
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this);
        }
    });
    V.prototype = Object.assign(Object.create(ka.prototype), {
        constructor: V,
        isLineSegments: !0,
        computeLineDistances: function() {
            var a = new n, b = new n;
            return function() {
                var c = this.geometry;
                if (c.isBufferGeometry) if (null === c.index) {
                    for(var d = c.attributes.position, e = [], f = 0, g = d.count; f < g; f += 2)a.fromBufferAttribute(d, f), b.fromBufferAttribute(d, f + 1), e[f] = 0 === f ? 0 : e[f - 1], e[f + 1] = e[f] + a.distanceTo(b);
                    c.addAttribute("lineDistance", new E(e, 1));
                } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else if (c.isGeometry) for(d = c.vertices, e = c.lineDistances, f = 0, g = d.length; f < g; f += 2)a.copy(d[f]), b.copy(d[f + 1]), e[f] = 0 === f ? 0 : e[f - 1], e[f + 1] = e[f] + a.distanceTo(b);
                return this;
            };
        }()
    });
    Ed.prototype = Object.assign(Object.create(ka.prototype), {
        constructor: Ed,
        isLineLoop: !0
    });
    Ia.prototype = Object.create(Q.prototype);
    Ia.prototype.constructor = Ia;
    Ia.prototype.isPointsMaterial = !0;
    Ia.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.color.copy(a.color);
        this.map = a.map;
        this.size = a.size;
        this.sizeAttenuation = a.sizeAttenuation;
        this.morphTargets = a.morphTargets;
        return this;
    };
    Zb.prototype = Object.assign(Object.create(D.prototype), {
        constructor: Zb,
        isPoints: !0,
        raycast: function() {
            var a = new P, b = new zb, c = new Ta;
            return function(d, e) {
                function f(a, c) {
                    var f = b.distanceSqToPoint(a);
                    f < k && (b.closestPointToPoint(a, p), p.applyMatrix4(l), a = d.ray.origin.distanceTo(p), a < d.near || a > d.far || e.push({
                        distance: a,
                        distanceToRay: Math.sqrt(f),
                        point: p.clone(),
                        index: c,
                        face: null,
                        object: g
                    }));
                }
                var g = this, h = this.geometry, l = this.matrixWorld, m = d.params.Points.threshold;
                null === h.boundingSphere && h.computeBoundingSphere();
                c.copy(h.boundingSphere);
                c.applyMatrix4(l);
                c.radius += m;
                if (!1 !== d.ray.intersectsSphere(c)) {
                    a.getInverse(l);
                    b.copy(d.ray).applyMatrix4(a);
                    m /= (this.scale.x + this.scale.y + this.scale.z) / 3;
                    var k = m * m;
                    m = new n;
                    var p = new n;
                    if (h.isBufferGeometry) {
                        var v = h.index;
                        h = h.attributes.position.array;
                        if (null !== v) {
                            var t = v.array;
                            v = 0;
                            for(var r = t.length; v < r; v++){
                                var u = t[v];
                                m.fromArray(h, 3 * u);
                                f(m, u);
                            }
                        } else for(v = 0, t = h.length / 3; v < t; v++)m.fromArray(h, 3 * v), f(m, v);
                    } else for(m = h.vertices, v = 0, t = m.length; v < t; v++)f(m[v], v);
                }
            };
        }(),
        clone: function() {
            return new this.constructor(this.geometry, this.material).copy(this);
        }
    });
    le.prototype = Object.assign(Object.create(Y.prototype), {
        constructor: le,
        isVideoTexture: !0,
        update: function() {
            var a = this.image;
            a.readyState >= a.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
        }
    });
    $b.prototype = Object.create(Y.prototype);
    $b.prototype.constructor = $b;
    $b.prototype.isCompressedTexture = !0;
    Oc.prototype = Object.create(Y.prototype);
    Oc.prototype.constructor = Oc;
    Oc.prototype.isCanvasTexture = !0;
    Pc.prototype = Object.create(Y.prototype);
    Pc.prototype.constructor = Pc;
    Pc.prototype.isDepthTexture = !0;
    ac.prototype = Object.create(B.prototype);
    ac.prototype.constructor = ac;
    Qc.prototype = Object.create(K.prototype);
    Qc.prototype.constructor = Qc;
    bc.prototype = Object.create(B.prototype);
    bc.prototype.constructor = bc;
    Rc.prototype = Object.create(K.prototype);
    Rc.prototype.constructor = Rc;
    la.prototype = Object.create(B.prototype);
    la.prototype.constructor = la;
    Sc.prototype = Object.create(K.prototype);
    Sc.prototype.constructor = Sc;
    cc.prototype = Object.create(la.prototype);
    cc.prototype.constructor = cc;
    Tc.prototype = Object.create(K.prototype);
    Tc.prototype.constructor = Tc;
    Bb.prototype = Object.create(la.prototype);
    Bb.prototype.constructor = Bb;
    Uc.prototype = Object.create(K.prototype);
    Uc.prototype.constructor = Uc;
    dc.prototype = Object.create(la.prototype);
    dc.prototype.constructor = dc;
    Vc.prototype = Object.create(K.prototype);
    Vc.prototype.constructor = Vc;
    ec.prototype = Object.create(la.prototype);
    ec.prototype.constructor = ec;
    Wc.prototype = Object.create(K.prototype);
    Wc.prototype.constructor = Wc;
    Cb.prototype = Object.create(B.prototype);
    Cb.prototype.constructor = Cb;
    Cb.prototype.toJSON = function() {
        var a = B.prototype.toJSON.call(this);
        a.path = this.parameters.path.toJSON();
        return a;
    };
    Xc.prototype = Object.create(K.prototype);
    Xc.prototype.constructor = Xc;
    fc.prototype = Object.create(B.prototype);
    fc.prototype.constructor = fc;
    Yc.prototype = Object.create(K.prototype);
    Yc.prototype.constructor = Yc;
    gc.prototype = Object.create(B.prototype);
    gc.prototype.constructor = gc;
    var ph = {
        triangulate: function(a, b, c) {
            c = c || 2;
            var d = b && b.length, e = d ? b[0] * c : a.length, f = zf(a, 0, e, c, !0), g = [];
            if (!f) return g;
            var h;
            if (d) {
                var l = c;
                d = [];
                var m;
                var k = 0;
                for(m = b.length; k < m; k++){
                    var p = b[k] * l;
                    var n = k < m - 1 ? b[k + 1] * l : a.length;
                    p = zf(a, p, n, l, !1);
                    p === p.next && (p.steiner = !0);
                    d.push(jh(p));
                }
                d.sort(hh);
                for(k = 0; k < d.length; k++){
                    b = d[k];
                    l = f;
                    if (l = ih(b, l)) b = Cf(l, b), $c(b, b.next);
                    f = $c(f, f.next);
                }
            }
            if (a.length > 80 * c) {
                var t = h = a[0];
                var r = d = a[1];
                for(l = c; l < e; l += c)k = a[l], b = a[l + 1], k < t && (t = k), b < r && (r = b), k > h && (h = k), b > d && (d = b);
                h = Math.max(h - t, d - r);
                h = 0 !== h ? 1 / h : 0;
            }
            ad(f, g, c, t, r, h);
            return g;
        }
    }, db = {
        area: function(a) {
            for(var b = a.length, c = 0, d = b - 1, e = 0; e < b; d = e++)c += a[d].x * a[e].y - a[e].x * a[d].y;
            return .5 * c;
        },
        isClockWise: function(a) {
            return 0 > db.area(a);
        },
        triangulateShape: function(a, b) {
            var c = [], d = [], e = [];
            Df(a);
            Ef(c, a);
            var f = a.length;
            b.forEach(Df);
            for(a = 0; a < b.length; a++)d.push(f), f += b[a].length, Ef(c, b[a]);
            b = ph.triangulate(c, d);
            for(a = 0; a < b.length; a += 3)e.push(b.slice(a, a + 3));
            return e;
        }
    };
    Eb.prototype = Object.create(K.prototype);
    Eb.prototype.constructor = Eb;
    Eb.prototype.toJSON = function() {
        var a = K.prototype.toJSON.call(this);
        return Ff(this.parameters.shapes, this.parameters.options, a);
    };
    Ya.prototype = Object.create(B.prototype);
    Ya.prototype.constructor = Ya;
    Ya.prototype.toJSON = function() {
        var a = B.prototype.toJSON.call(this);
        return Ff(this.parameters.shapes, this.parameters.options, a);
    };
    var kh = {
        generateTopUV: function(a, b, c, d, e) {
            a = b[3 * d];
            d = b[3 * d + 1];
            var f = b[3 * e];
            e = b[3 * e + 1];
            return [
                new C(b[3 * c], b[3 * c + 1]),
                new C(a, d),
                new C(f, e)
            ];
        },
        generateSideWallUV: function(a, b, c, d, e, f) {
            a = b[3 * c];
            var g = b[3 * c + 1];
            c = b[3 * c + 2];
            var h = b[3 * d], l = b[3 * d + 1];
            d = b[3 * d + 2];
            var m = b[3 * e], k = b[3 * e + 1];
            e = b[3 * e + 2];
            var p = b[3 * f], n = b[3 * f + 1];
            b = b[3 * f + 2];
            return .01 > Math.abs(g - l) ? [
                new C(a, 1 - c),
                new C(h, 1 - d),
                new C(m, 1 - e),
                new C(p, 1 - b)
            ] : [
                new C(g, 1 - c),
                new C(l, 1 - d),
                new C(k, 1 - e),
                new C(n, 1 - b)
            ];
        }
    };
    cd.prototype = Object.create(K.prototype);
    cd.prototype.constructor = cd;
    hc.prototype = Object.create(Ya.prototype);
    hc.prototype.constructor = hc;
    dd.prototype = Object.create(K.prototype);
    dd.prototype.constructor = dd;
    ob.prototype = Object.create(B.prototype);
    ob.prototype.constructor = ob;
    ed.prototype = Object.create(K.prototype);
    ed.prototype.constructor = ed;
    ic.prototype = Object.create(B.prototype);
    ic.prototype.constructor = ic;
    fd.prototype = Object.create(K.prototype);
    fd.prototype.constructor = fd;
    jc.prototype = Object.create(B.prototype);
    jc.prototype.constructor = jc;
    Fb.prototype = Object.create(K.prototype);
    Fb.prototype.constructor = Fb;
    Fb.prototype.toJSON = function() {
        var a = K.prototype.toJSON.call(this);
        return Gf(this.parameters.shapes, a);
    };
    Gb.prototype = Object.create(B.prototype);
    Gb.prototype.constructor = Gb;
    Gb.prototype.toJSON = function() {
        var a = B.prototype.toJSON.call(this);
        return Gf(this.parameters.shapes, a);
    };
    kc.prototype = Object.create(B.prototype);
    kc.prototype.constructor = kc;
    Hb.prototype = Object.create(K.prototype);
    Hb.prototype.constructor = Hb;
    eb.prototype = Object.create(B.prototype);
    eb.prototype.constructor = eb;
    gd.prototype = Object.create(Hb.prototype);
    gd.prototype.constructor = gd;
    hd.prototype = Object.create(eb.prototype);
    hd.prototype.constructor = hd;
    id.prototype = Object.create(K.prototype);
    id.prototype.constructor = id;
    lc.prototype = Object.create(B.prototype);
    lc.prototype.constructor = lc;
    var xa = Object.freeze({
        WireframeGeometry: ac,
        ParametricGeometry: Qc,
        ParametricBufferGeometry: bc,
        TetrahedronGeometry: Sc,
        TetrahedronBufferGeometry: cc,
        OctahedronGeometry: Tc,
        OctahedronBufferGeometry: Bb,
        IcosahedronGeometry: Uc,
        IcosahedronBufferGeometry: dc,
        DodecahedronGeometry: Vc,
        DodecahedronBufferGeometry: ec,
        PolyhedronGeometry: Rc,
        PolyhedronBufferGeometry: la,
        TubeGeometry: Wc,
        TubeBufferGeometry: Cb,
        TorusKnotGeometry: Xc,
        TorusKnotBufferGeometry: fc,
        TorusGeometry: Yc,
        TorusBufferGeometry: gc,
        TextGeometry: cd,
        TextBufferGeometry: hc,
        SphereGeometry: dd,
        SphereBufferGeometry: ob,
        RingGeometry: ed,
        RingBufferGeometry: ic,
        PlaneGeometry: Gc,
        PlaneBufferGeometry: yb,
        LatheGeometry: fd,
        LatheBufferGeometry: jc,
        ShapeGeometry: Fb,
        ShapeBufferGeometry: Gb,
        ExtrudeGeometry: Eb,
        ExtrudeBufferGeometry: Ya,
        EdgesGeometry: kc,
        ConeGeometry: gd,
        ConeBufferGeometry: hd,
        CylinderGeometry: Hb,
        CylinderBufferGeometry: eb,
        CircleGeometry: id,
        CircleBufferGeometry: lc,
        BoxGeometry: Tb,
        BoxBufferGeometry: wb
    });
    Ib.prototype = Object.create(Q.prototype);
    Ib.prototype.constructor = Ib;
    Ib.prototype.isShadowMaterial = !0;
    Ib.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.color.copy(a.color);
        return this;
    };
    mc.prototype = Object.create(ea.prototype);
    mc.prototype.constructor = mc;
    mc.prototype.isRawShaderMaterial = !0;
    Za.prototype = Object.create(Q.prototype);
    Za.prototype.constructor = Za;
    Za.prototype.isMeshStandardMaterial = !0;
    Za.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.defines = {
            STANDARD: ""
        };
        this.color.copy(a.color);
        this.roughness = a.roughness;
        this.metalness = a.metalness;
        this.map = a.map;
        this.lightMap = a.lightMap;
        this.lightMapIntensity = a.lightMapIntensity;
        this.aoMap = a.aoMap;
        this.aoMapIntensity = a.aoMapIntensity;
        this.emissive.copy(a.emissive);
        this.emissiveMap = a.emissiveMap;
        this.emissiveIntensity = a.emissiveIntensity;
        this.bumpMap = a.bumpMap;
        this.bumpScale = a.bumpScale;
        this.normalMap = a.normalMap;
        this.normalMapType = a.normalMapType;
        this.normalScale.copy(a.normalScale);
        this.displacementMap = a.displacementMap;
        this.displacementScale = a.displacementScale;
        this.displacementBias = a.displacementBias;
        this.roughnessMap = a.roughnessMap;
        this.metalnessMap = a.metalnessMap;
        this.alphaMap = a.alphaMap;
        this.envMap = a.envMap;
        this.envMapIntensity = a.envMapIntensity;
        this.refractionRatio = a.refractionRatio;
        this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;
        this.wireframeLinecap = a.wireframeLinecap;
        this.wireframeLinejoin = a.wireframeLinejoin;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.morphNormals = a.morphNormals;
        return this;
    };
    Jb.prototype = Object.create(Za.prototype);
    Jb.prototype.constructor = Jb;
    Jb.prototype.isMeshPhysicalMaterial = !0;
    Jb.prototype.copy = function(a) {
        Za.prototype.copy.call(this, a);
        this.defines = {
            PHYSICAL: ""
        };
        this.reflectivity = a.reflectivity;
        this.clearCoat = a.clearCoat;
        this.clearCoatRoughness = a.clearCoatRoughness;
        return this;
    };
    Ja.prototype = Object.create(Q.prototype);
    Ja.prototype.constructor = Ja;
    Ja.prototype.isMeshPhongMaterial = !0;
    Ja.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.color.copy(a.color);
        this.specular.copy(a.specular);
        this.shininess = a.shininess;
        this.map = a.map;
        this.lightMap = a.lightMap;
        this.lightMapIntensity = a.lightMapIntensity;
        this.aoMap = a.aoMap;
        this.aoMapIntensity = a.aoMapIntensity;
        this.emissive.copy(a.emissive);
        this.emissiveMap = a.emissiveMap;
        this.emissiveIntensity = a.emissiveIntensity;
        this.bumpMap = a.bumpMap;
        this.bumpScale = a.bumpScale;
        this.normalMap = a.normalMap;
        this.normalMapType = a.normalMapType;
        this.normalScale.copy(a.normalScale);
        this.displacementMap = a.displacementMap;
        this.displacementScale = a.displacementScale;
        this.displacementBias = a.displacementBias;
        this.specularMap = a.specularMap;
        this.alphaMap = a.alphaMap;
        this.envMap = a.envMap;
        this.combine = a.combine;
        this.reflectivity = a.reflectivity;
        this.refractionRatio = a.refractionRatio;
        this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;
        this.wireframeLinecap = a.wireframeLinecap;
        this.wireframeLinejoin = a.wireframeLinejoin;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.morphNormals = a.morphNormals;
        return this;
    };
    Kb.prototype = Object.create(Ja.prototype);
    Kb.prototype.constructor = Kb;
    Kb.prototype.isMeshToonMaterial = !0;
    Kb.prototype.copy = function(a) {
        Ja.prototype.copy.call(this, a);
        this.gradientMap = a.gradientMap;
        return this;
    };
    Lb.prototype = Object.create(Q.prototype);
    Lb.prototype.constructor = Lb;
    Lb.prototype.isMeshNormalMaterial = !0;
    Lb.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.bumpMap = a.bumpMap;
        this.bumpScale = a.bumpScale;
        this.normalMap = a.normalMap;
        this.normalMapType = a.normalMapType;
        this.normalScale.copy(a.normalScale);
        this.displacementMap = a.displacementMap;
        this.displacementScale = a.displacementScale;
        this.displacementBias = a.displacementBias;
        this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.morphNormals = a.morphNormals;
        return this;
    };
    Mb.prototype = Object.create(Q.prototype);
    Mb.prototype.constructor = Mb;
    Mb.prototype.isMeshLambertMaterial = !0;
    Mb.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.color.copy(a.color);
        this.map = a.map;
        this.lightMap = a.lightMap;
        this.lightMapIntensity = a.lightMapIntensity;
        this.aoMap = a.aoMap;
        this.aoMapIntensity = a.aoMapIntensity;
        this.emissive.copy(a.emissive);
        this.emissiveMap = a.emissiveMap;
        this.emissiveIntensity = a.emissiveIntensity;
        this.specularMap = a.specularMap;
        this.alphaMap = a.alphaMap;
        this.envMap = a.envMap;
        this.combine = a.combine;
        this.reflectivity = a.reflectivity;
        this.refractionRatio = a.refractionRatio;
        this.wireframe = a.wireframe;
        this.wireframeLinewidth = a.wireframeLinewidth;
        this.wireframeLinecap = a.wireframeLinecap;
        this.wireframeLinejoin = a.wireframeLinejoin;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.morphNormals = a.morphNormals;
        return this;
    };
    Nb.prototype = Object.create(Q.prototype);
    Nb.prototype.constructor = Nb;
    Nb.prototype.isMeshMatcapMaterial = !0;
    Nb.prototype.copy = function(a) {
        Q.prototype.copy.call(this, a);
        this.defines = {
            MATCAP: ""
        };
        this.color.copy(a.color);
        this.matcap = a.matcap;
        this.map = a.map;
        this.bumpMap = a.bumpMap;
        this.bumpScale = a.bumpScale;
        this.normalMap = a.normalMap;
        this.normalMapType = a.normalMapType;
        this.normalScale.copy(a.normalScale);
        this.displacementMap = a.displacementMap;
        this.displacementScale = a.displacementScale;
        this.displacementBias = a.displacementBias;
        this.alphaMap = a.alphaMap;
        this.skinning = a.skinning;
        this.morphTargets = a.morphTargets;
        this.morphNormals = a.morphNormals;
        return this;
    };
    Ob.prototype = Object.create(U.prototype);
    Ob.prototype.constructor = Ob;
    Ob.prototype.isLineDashedMaterial = !0;
    Ob.prototype.copy = function(a) {
        U.prototype.copy.call(this, a);
        this.scale = a.scale;
        this.dashSize = a.dashSize;
        this.gapSize = a.gapSize;
        return this;
    };
    var qh = Object.freeze({
        ShadowMaterial: Ib,
        SpriteMaterial: nb,
        RawShaderMaterial: mc,
        ShaderMaterial: ea,
        PointsMaterial: Ia,
        MeshPhysicalMaterial: Jb,
        MeshStandardMaterial: Za,
        MeshPhongMaterial: Ja,
        MeshToonMaterial: Kb,
        MeshNormalMaterial: Lb,
        MeshLambertMaterial: Mb,
        MeshDepthMaterial: jb,
        MeshDistanceMaterial: kb,
        MeshBasicMaterial: Ca,
        MeshMatcapMaterial: Nb,
        LineDashedMaterial: Ob,
        LineBasicMaterial: U,
        Material: Q
    }), ba = {
        arraySlice: function(a, b, c) {
            return ba.isTypedArray(a) ? new a.constructor(a.subarray(b, void 0 !== c ? c : a.length)) : a.slice(b, c);
        },
        convertArray: function(a, b, c) {
            return !a || !c && a.constructor === b ? a : "number" === typeof b.BYTES_PER_ELEMENT ? new b(a) : Array.prototype.slice.call(a);
        },
        isTypedArray: function(a) {
            return ArrayBuffer.isView(a) && !(a instanceof DataView);
        },
        getKeyframeOrder: function(a) {
            for(var b = a.length, c = Array(b), d = 0; d !== b; ++d)c[d] = d;
            c.sort(function(b, c) {
                return a[b] - a[c];
            });
            return c;
        },
        sortedArray: function(a, b, c) {
            for(var d = a.length, e = new a.constructor(d), f = 0, g = 0; g !== d; ++f)for(var h = c[f] * b, l = 0; l !== b; ++l)e[g++] = a[h + l];
            return e;
        },
        flattenJSON: function(a, b, c, d) {
            for(var e = 1, f = a[0]; void 0 !== f && void 0 === f[d];)f = a[e++];
            if (void 0 !== f) {
                var g = f[d];
                if (void 0 !== g) if (Array.isArray(g)) {
                    do g = f[d], void 0 !== g && (b.push(f.time), c.push.apply(c, g)), f = a[e++];
                    while (void 0 !== f)
                } else if (void 0 !== g.toArray) {
                    do g = f[d], void 0 !== g && (b.push(f.time), g.toArray(c, c.length)), f = a[e++];
                    while (void 0 !== f)
                } else {
                    do g = f[d], void 0 !== g && (b.push(f.time), c.push(g)), f = a[e++];
                    while (void 0 !== f)
                }
            }
        }
    };
    Object.assign(Da.prototype, {
        evaluate: function(a) {
            var b = this.parameterPositions, c = this._cachedIndex, d = b[c], e = b[c - 1];
            a: {
                b: {
                    c: {
                        d: if (!(a < d)) {
                            for(var f = c + 2;;){
                                if (void 0 === d) {
                                    if (a < e) break d;
                                    this._cachedIndex = c = b.length;
                                    return this.afterEnd_(c - 1, a, e);
                                }
                                if (c === f) break;
                                e = d;
                                d = b[++c];
                                if (a < d) break b;
                            }
                            d = b.length;
                            break c;
                        }
                        if (a >= e) break a;
                        else {
                            f = b[1];
                            a < f && (c = 2, e = f);
                            for(f = c - 2;;){
                                if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);
                                if (c === f) break;
                                d = e;
                                e = b[--c - 1];
                                if (a >= e) break b;
                            }
                            d = c;
                            c = 0;
                        }
                    }
                    for(; c < d;)e = c + d >>> 1, a < b[e] ? d = e : c = e + 1;
                    d = b[c];
                    e = b[c - 1];
                    if (void 0 === e) return this._cachedIndex = 0, this.beforeStart_(0, a, d);
                    if (void 0 === d) return this._cachedIndex = c = b.length, this.afterEnd_(c - 1, e, a);
                }
                this._cachedIndex = c;
                this.intervalChanged_(c, e, d);
            }
            return this.interpolate_(c, e, a, d);
        },
        settings: null,
        DefaultSettings_: {},
        getSettings_: function() {
            return this.settings || this.DefaultSettings_;
        },
        copySampleValue_: function(a) {
            var b = this.resultBuffer, c = this.sampleValues, d = this.valueSize;
            a *= d;
            for(var e = 0; e !== d; ++e)b[e] = c[a + e];
            return b;
        },
        interpolate_: function() {
            throw Error("call to abstract method");
        },
        intervalChanged_: function() {}
    });
    Object.assign(Da.prototype, {
        beforeStart_: Da.prototype.copySampleValue_,
        afterEnd_: Da.prototype.copySampleValue_
    });
    Gd.prototype = Object.assign(Object.create(Da.prototype), {
        constructor: Gd,
        DefaultSettings_: {
            endingStart: 2400,
            endingEnd: 2400
        },
        intervalChanged_: function(a, b, c) {
            var d = this.parameterPositions, e = a - 2, f = a + 1, g = d[e], h = d[f];
            if (void 0 === g) switch(this.getSettings_().endingStart){
                case 2401:
                    e = a;
                    g = 2 * b - c;
                    break;
                case 2402:
                    e = d.length - 2;
                    g = b + d[e] - d[e + 1];
                    break;
                default:
                    e = a, g = c;
            }
            if (void 0 === h) switch(this.getSettings_().endingEnd){
                case 2401:
                    f = a;
                    h = 2 * c - b;
                    break;
                case 2402:
                    f = 1;
                    h = c + d[1] - d[0];
                    break;
                default:
                    f = a - 1, h = b;
            }
            a = .5 * (c - b);
            d = this.valueSize;
            this._weightPrev = a / (b - g);
            this._weightNext = a / (h - c);
            this._offsetPrev = e * d;
            this._offsetNext = f * d;
        },
        interpolate_: function(a, b, c, d) {
            var e = this.resultBuffer, f = this.sampleValues, g = this.valueSize;
            a *= g;
            var h = a - g, l = this._offsetPrev, m = this._offsetNext, k = this._weightPrev, p = this._weightNext, n = (c - b) / (d - b);
            c = n * n;
            d = c * n;
            b = -k * d + 2 * k * c - k * n;
            k = (1 + k) * d + (-1.5 - 2 * k) * c + (-.5 + k) * n + 1;
            n = (-1 - p) * d + (1.5 + p) * c + .5 * n;
            p = p * d - p * c;
            for(c = 0; c !== g; ++c)e[c] = b * f[l + c] + k * f[h + c] + n * f[a + c] + p * f[m + c];
            return e;
        }
    });
    jd.prototype = Object.assign(Object.create(Da.prototype), {
        constructor: jd,
        interpolate_: function(a, b, c, d) {
            var e = this.resultBuffer, f = this.sampleValues, g = this.valueSize;
            a *= g;
            var h = a - g;
            b = (c - b) / (d - b);
            c = 1 - b;
            for(d = 0; d !== g; ++d)e[d] = f[h + d] * c + f[a + d] * b;
            return e;
        }
    });
    Hd.prototype = Object.assign(Object.create(Da.prototype), {
        constructor: Hd,
        interpolate_: function(a) {
            return this.copySampleValue_(a - 1);
        }
    });
    Object.assign(da, {
        toJSON: function(a) {
            var b = a.constructor;
            if (void 0 !== b.toJSON) b = b.toJSON(a);
            else {
                b = {
                    name: a.name,
                    times: ba.convertArray(a.times, Array),
                    values: ba.convertArray(a.values, Array)
                };
                var c = a.getInterpolation();
                c !== a.DefaultInterpolation && (b.interpolation = c);
            }
            b.type = a.ValueTypeName;
            return b;
        }
    });
    Object.assign(da.prototype, {
        constructor: da,
        TimeBufferType: Float32Array,
        ValueBufferType: Float32Array,
        DefaultInterpolation: 2301,
        InterpolantFactoryMethodDiscrete: function(a) {
            return new Hd(this.times, this.values, this.getValueSize(), a);
        },
        InterpolantFactoryMethodLinear: function(a) {
            return new jd(this.times, this.values, this.getValueSize(), a);
        },
        InterpolantFactoryMethodSmooth: function(a) {
            return new Gd(this.times, this.values, this.getValueSize(), a);
        },
        setInterpolation: function(a) {
            switch(a){
                case 2300:
                    var b = this.InterpolantFactoryMethodDiscrete;
                    break;
                case 2301:
                    b = this.InterpolantFactoryMethodLinear;
                    break;
                case 2302:
                    b = this.InterpolantFactoryMethodSmooth;
            }
            if (void 0 === b) {
                b = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                if (void 0 === this.createInterpolant) if (a !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                else throw Error(b);
                console.warn("THREE.KeyframeTrack:", b);
                return this;
            }
            this.createInterpolant = b;
            return this;
        },
        getInterpolation: function() {
            switch(this.createInterpolant){
                case this.InterpolantFactoryMethodDiscrete:
                    return 2300;
                case this.InterpolantFactoryMethodLinear:
                    return 2301;
                case this.InterpolantFactoryMethodSmooth:
                    return 2302;
            }
        },
        getValueSize: function() {
            return this.values.length / this.times.length;
        },
        shift: function(a) {
            if (0 !== a) for(var b = this.times, c = 0, d = b.length; c !== d; ++c)b[c] += a;
            return this;
        },
        scale: function(a) {
            if (1 !== a) for(var b = this.times, c = 0, d = b.length; c !== d; ++c)b[c] *= a;
            return this;
        },
        trim: function(a, b) {
            for(var c = this.times, d = c.length, e = 0, f = d - 1; e !== d && c[e] < a;)++e;
            for(; -1 !== f && c[f] > b;)--f;
            ++f;
            if (0 !== e || f !== d) e >= f && (f = Math.max(f, 1), e = f - 1), a = this.getValueSize(), this.times = ba.arraySlice(c, e, f), this.values = ba.arraySlice(this.values, e * a, f * a);
            return this;
        },
        validate: function() {
            var a = !0, b = this.getValueSize();
            0 !== b - Math.floor(b) && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), a = !1);
            var c = this.times;
            b = this.values;
            var d = c.length;
            0 === d && (console.error("THREE.KeyframeTrack: Track is empty.", this), a = !1);
            for(var e = null, f = 0; f !== d; f++){
                var g = c[f];
                if ("number" === typeof g && isNaN(g)) {
                    console.error("THREE.KeyframeTrack: Time is not a valid number.", this, f, g);
                    a = !1;
                    break;
                }
                if (null !== e && e > g) {
                    console.error("THREE.KeyframeTrack: Out of order keys.", this, f, g, e);
                    a = !1;
                    break;
                }
                e = g;
            }
            if (void 0 !== b && ba.isTypedArray(b)) {
                for(f = 0, c = b.length; f !== c; ++f)if (d = b[f], isNaN(d)) {
                    console.error("THREE.KeyframeTrack: Value is not a valid number.", this, f, d);
                    a = !1;
                    break;
                }
            }
            return a;
        },
        optimize: function() {
            for(var a = this.times, b = this.values, c = this.getValueSize(), d = 2302 === this.getInterpolation(), e = 1, f = a.length - 1, g = 1; g < f; ++g){
                var h = !1, l = a[g];
                if (l !== a[g + 1] && (1 !== g || l !== l[0])) if (d) h = !0;
                else {
                    var k = g * c, n = k - c, p = k + c;
                    for(l = 0; l !== c; ++l){
                        var v = b[k + l];
                        if (v !== b[n + l] || v !== b[p + l]) {
                            h = !0;
                            break;
                        }
                    }
                }
                if (h) {
                    if (g !== e) for(a[e] = a[g], h = g * c, k = e * c, l = 0; l !== c; ++l)b[k + l] = b[h + l];
                    ++e;
                }
            }
            if (0 < f) {
                a[e] = a[f];
                h = f * c;
                k = e * c;
                for(l = 0; l !== c; ++l)b[k + l] = b[h + l];
                ++e;
            }
            e !== a.length && (this.times = ba.arraySlice(a, 0, e), this.values = ba.arraySlice(b, 0, e * c));
            return this;
        },
        clone: function() {
            var a = ba.arraySlice(this.times, 0), b = ba.arraySlice(this.values, 0);
            a = new this.constructor(this.name, a, b);
            a.createInterpolant = this.createInterpolant;
            return a;
        }
    });
    Id.prototype = Object.assign(Object.create(da.prototype), {
        constructor: Id,
        ValueTypeName: "bool",
        ValueBufferType: Array,
        DefaultInterpolation: 2300,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    });
    Jd.prototype = Object.assign(Object.create(da.prototype), {
        constructor: Jd,
        ValueTypeName: "color"
    });
    nc.prototype = Object.assign(Object.create(da.prototype), {
        constructor: nc,
        ValueTypeName: "number"
    });
    Kd.prototype = Object.assign(Object.create(Da.prototype), {
        constructor: Kd,
        interpolate_: function(a, b, c, d) {
            var e = this.resultBuffer, f = this.sampleValues, g = this.valueSize;
            a *= g;
            b = (c - b) / (d - b);
            for(c = a + g; a !== c; a += 4)ma.slerpFlat(e, 0, f, a - g, f, a, b);
            return e;
        }
    });
    kd.prototype = Object.assign(Object.create(da.prototype), {
        constructor: kd,
        ValueTypeName: "quaternion",
        DefaultInterpolation: 2301,
        InterpolantFactoryMethodLinear: function(a) {
            return new Kd(this.times, this.values, this.getValueSize(), a);
        },
        InterpolantFactoryMethodSmooth: void 0
    });
    Ld.prototype = Object.assign(Object.create(da.prototype), {
        constructor: Ld,
        ValueTypeName: "string",
        ValueBufferType: Array,
        DefaultInterpolation: 2300,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    });
    oc.prototype = Object.assign(Object.create(da.prototype), {
        constructor: oc,
        ValueTypeName: "vector"
    });
    Object.assign(Fa, {
        parse: function(a) {
            for(var b = [], c = a.tracks, d = 1 / (a.fps || 1), e = 0, f = c.length; e !== f; ++e)b.push(mh(c[e]).scale(d));
            return new Fa(a.name, a.duration, b);
        },
        toJSON: function(a) {
            var b = [], c = a.tracks;
            a = {
                name: a.name,
                duration: a.duration,
                tracks: b,
                uuid: a.uuid
            };
            for(var d = 0, e = c.length; d !== e; ++d)b.push(da.toJSON(c[d]));
            return a;
        },
        CreateFromMorphTargetSequence: function(a, b, c, d) {
            for(var e = b.length, f = [], g = 0; g < e; g++){
                var h = [], l = [];
                h.push((g + e - 1) % e, g, (g + 1) % e);
                l.push(0, 1, 0);
                var k = ba.getKeyframeOrder(h);
                h = ba.sortedArray(h, 1, k);
                l = ba.sortedArray(l, 1, k);
                d || 0 !== h[0] || (h.push(e), l.push(l[0]));
                f.push(new nc(".morphTargetInfluences[" + b[g].name + "]", h, l).scale(1 / c));
            }
            return new Fa(a, -1, f);
        },
        findByName: function(a, b) {
            var c = a;
            Array.isArray(a) || (c = a.geometry && a.geometry.animations || a.animations);
            for(a = 0; a < c.length; a++)if (c[a].name === b) return c[a];
            return null;
        },
        CreateClipsFromMorphTargetSequences: function(a, b, c) {
            for(var d = {}, e = /^([\w-]*?)([\d]+)$/, f = 0, g = a.length; f < g; f++){
                var h = a[f], l = h.name.match(e);
                if (l && 1 < l.length) {
                    var k = l[1];
                    (l = d[k]) || (d[k] = l = []);
                    l.push(h);
                }
            }
            a = [];
            for(k in d)a.push(Fa.CreateFromMorphTargetSequence(k, d[k], b, c));
            return a;
        },
        parseAnimation: function(a, b) {
            if (!a) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
            var c = function(a, b, c, d, e) {
                if (0 !== c.length) {
                    var f = [], g = [];
                    ba.flattenJSON(c, f, g, d);
                    0 !== f.length && e.push(new a(b, f, g));
                }
            }, d = [], e = a.name || "default", f = a.length || -1, g = a.fps || 30;
            a = a.hierarchy || [];
            for(var h = 0; h < a.length; h++){
                var l = a[h].keys;
                if (l && 0 !== l.length) if (l[0].morphTargets) {
                    f = {};
                    for(var k = 0; k < l.length; k++)if (l[k].morphTargets) for(var n = 0; n < l[k].morphTargets.length; n++)f[l[k].morphTargets[n]] = -1;
                    for(var p in f){
                        var v = [], t = [];
                        for(n = 0; n !== l[k].morphTargets.length; ++n){
                            var r = l[k];
                            v.push(r.time);
                            t.push(r.morphTarget === p ? 1 : 0);
                        }
                        d.push(new nc(".morphTargetInfluence[" + p + "]", v, t));
                    }
                    f = f.length * (g || 1);
                } else k = ".bones[" + b[h].name + "]", c(oc, k + ".position", l, "pos", d), c(kd, k + ".quaternion", l, "rot", d), c(oc, k + ".scale", l, "scl", d);
            }
            return 0 === d.length ? null : new Fa(e, f, d);
        }
    });
    Object.assign(Fa.prototype, {
        resetDuration: function() {
            for(var a = 0, b = 0, c = this.tracks.length; b !== c; ++b){
                var d = this.tracks[b];
                a = Math.max(a, d.times[d.times.length - 1]);
            }
            this.duration = a;
            return this;
        },
        trim: function() {
            for(var a = 0; a < this.tracks.length; a++)this.tracks[a].trim(0, this.duration);
            return this;
        },
        validate: function() {
            for(var a = !0, b = 0; b < this.tracks.length; b++)a = a && this.tracks[b].validate();
            return a;
        },
        optimize: function() {
            for(var a = 0; a < this.tracks.length; a++)this.tracks[a].optimize();
            return this;
        },
        clone: function() {
            for(var a = [], b = 0; b < this.tracks.length; b++)a.push(this.tracks[b].clone());
            return new Fa(this.name, this.duration, a);
        }
    });
    var Qb = {
        enabled: !1,
        files: {},
        add: function(a, b) {
            !1 !== this.enabled && (this.files[a] = b);
        },
        get: function(a) {
            if (!1 !== this.enabled) return this.files[a];
        },
        remove: function(a) {
            delete this.files[a];
        },
        clear: function() {
            this.files = {};
        }
    }, za = new oe, Ra = {};
    Object.assign(Ka.prototype, {
        load: function(a, b, c, d) {
            void 0 === a && (a = "");
            void 0 !== this.path && (a = this.path + a);
            a = this.manager.resolveURL(a);
            var e = this, f = Qb.get(a);
            if (void 0 !== f) return e.manager.itemStart(a), setTimeout(function() {
                b && b(f);
                e.manager.itemEnd(a);
            }, 0), f;
            if (void 0 !== Ra[a]) Ra[a].push({
                onLoad: b,
                onProgress: c,
                onError: d
            });
            else {
                var g = a.match(/^data:(.*?)(;base64)?,(.*)$/);
                if (g) {
                    c = g[1];
                    var h = !!g[2];
                    g = g[3];
                    g = decodeURIComponent(g);
                    h && (g = atob(g));
                    try {
                        var l = (this.responseType || "").toLowerCase();
                        switch(l){
                            case "arraybuffer":
                            case "blob":
                                var k = new Uint8Array(g.length);
                                for(h = 0; h < g.length; h++)k[h] = g.charCodeAt(h);
                                var n = "blob" === l ? new Blob([
                                    k.buffer
                                ], {
                                    type: c
                                }) : k.buffer;
                                break;
                            case "document":
                                n = (new DOMParser).parseFromString(g, c);
                                break;
                            case "json":
                                n = JSON.parse(g);
                                break;
                            default:
                                n = g;
                        }
                        setTimeout(function() {
                            b && b(n);
                            e.manager.itemEnd(a);
                        }, 0);
                    } catch (v) {
                        setTimeout(function() {
                            d && d(v);
                            e.manager.itemError(a);
                            e.manager.itemEnd(a);
                        }, 0);
                    }
                } else {
                    Ra[a] = [];
                    Ra[a].push({
                        onLoad: b,
                        onProgress: c,
                        onError: d
                    });
                    var p = new XMLHttpRequest;
                    p.open("GET", a, !0);
                    p.addEventListener("load", function(b) {
                        var c = this.response;
                        Qb.add(a, c);
                        var d = Ra[a];
                        delete Ra[a];
                        if (200 === this.status || 0 === this.status) {
                            0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
                            for(var f = 0, g = d.length; f < g; f++){
                                var h = d[f];
                                if (h.onLoad) h.onLoad(c);
                            }
                        } else {
                            f = 0;
                            for(g = d.length; f < g; f++)if (h = d[f], h.onError) h.onError(b);
                            e.manager.itemError(a);
                        }
                        e.manager.itemEnd(a);
                    }, !1);
                    p.addEventListener("progress", function(b) {
                        for(var c = Ra[a], d = 0, e = c.length; d < e; d++){
                            var f = c[d];
                            if (f.onProgress) f.onProgress(b);
                        }
                    }, !1);
                    p.addEventListener("error", function(b) {
                        var c = Ra[a];
                        delete Ra[a];
                        for(var d = 0, f = c.length; d < f; d++){
                            var g = c[d];
                            if (g.onError) g.onError(b);
                        }
                        e.manager.itemError(a);
                        e.manager.itemEnd(a);
                    }, !1);
                    p.addEventListener("abort", function(b) {
                        var c = Ra[a];
                        delete Ra[a];
                        for(var d = 0, f = c.length; d < f; d++){
                            var g = c[d];
                            if (g.onError) g.onError(b);
                        }
                        e.manager.itemError(a);
                        e.manager.itemEnd(a);
                    }, !1);
                    void 0 !== this.responseType && (p.responseType = this.responseType);
                    void 0 !== this.withCredentials && (p.withCredentials = this.withCredentials);
                    p.overrideMimeType && p.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
                    for(h in this.requestHeader)p.setRequestHeader(h, this.requestHeader[h]);
                    p.send(null);
                }
                e.manager.itemStart(a);
                return p;
            }
        },
        setPath: function(a) {
            this.path = a;
            return this;
        },
        setResponseType: function(a) {
            this.responseType = a;
            return this;
        },
        setWithCredentials: function(a) {
            this.withCredentials = a;
            return this;
        },
        setMimeType: function(a) {
            this.mimeType = a;
            return this;
        },
        setRequestHeader: function(a) {
            this.requestHeader = a;
            return this;
        }
    });
    Object.assign(Hf.prototype, {
        load: function(a, b, c, d) {
            var e = this, f = new Ka(e.manager);
            f.setPath(e.path);
            f.load(a, function(a) {
                b(e.parse(JSON.parse(a)));
            }, c, d);
        },
        parse: function(a) {
            for(var b = [], c = 0; c < a.length; c++){
                var d = Fa.parse(a[c]);
                b.push(d);
            }
            return b;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    Object.assign(If.prototype, {
        load: function(a, b, c, d) {
            function e(e) {
                l.load(a[e], function(a) {
                    a = f._parser(a, !0);
                    g[e] = {
                        width: a.width,
                        height: a.height,
                        format: a.format,
                        mipmaps: a.mipmaps
                    };
                    k += 1;
                    6 === k && (1 === a.mipmapCount && (h.minFilter = 1006), h.format = a.format, h.needsUpdate = !0, b && b(h));
                }, c, d);
            }
            var f = this, g = [], h = new $b;
            h.image = g;
            var l = new Ka(this.manager);
            l.setPath(this.path);
            l.setResponseType("arraybuffer");
            if (Array.isArray(a)) for(var k = 0, n = 0, p = a.length; n < p; ++n)e(n);
            else l.load(a, function(a) {
                a = f._parser(a, !0);
                if (a.isCubemap) for(var c = a.mipmaps.length / a.mipmapCount, d = 0; d < c; d++){
                    g[d] = {
                        mipmaps: []
                    };
                    for(var e = 0; e < a.mipmapCount; e++)g[d].mipmaps.push(a.mipmaps[d * a.mipmapCount + e]), g[d].format = a.format, g[d].width = a.width, g[d].height = a.height;
                }
                else h.image.width = a.width, h.image.height = a.height, h.mipmaps = a.mipmaps;
                1 === a.mipmapCount && (h.minFilter = 1006);
                h.format = a.format;
                h.needsUpdate = !0;
                b && b(h);
            }, c, d);
            return h;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    Object.assign(pe.prototype, {
        load: function(a, b, c, d) {
            var e = this, f = new sb, g = new Ka(this.manager);
            g.setResponseType("arraybuffer");
            g.setPath(this.path);
            g.load(a, function(a) {
                if (a = e._parser(a)) void 0 !== a.image ? f.image = a.image : void 0 !== a.data && (f.image.width = a.width, f.image.height = a.height, f.image.data = a.data), f.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001, f.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001, f.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006, f.minFilter = void 0 !== a.minFilter ? a.minFilter : 1008, f.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1, void 0 !== a.format && (f.format = a.format), void 0 !== a.type && (f.type = a.type), void 0 !== a.mipmaps && (f.mipmaps = a.mipmaps), 1 === a.mipmapCount && (f.minFilter = 1006), f.needsUpdate = !0, b && b(f, a);
            }, c, d);
            return f;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    Object.assign(ld.prototype, {
        crossOrigin: "anonymous",
        load: function(a, b, c, d) {
            function e() {
                l.removeEventListener("load", e, !1);
                l.removeEventListener("error", f, !1);
                Qb.add(a, this);
                b && b(this);
                g.manager.itemEnd(a);
            }
            function f(b) {
                l.removeEventListener("load", e, !1);
                l.removeEventListener("error", f, !1);
                d && d(b);
                g.manager.itemError(a);
                g.manager.itemEnd(a);
            }
            void 0 === a && (a = "");
            void 0 !== this.path && (a = this.path + a);
            a = this.manager.resolveURL(a);
            var g = this, h = Qb.get(a);
            if (void 0 !== h) return g.manager.itemStart(a), setTimeout(function() {
                b && b(h);
                g.manager.itemEnd(a);
            }, 0), h;
            var l = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
            l.addEventListener("load", e, !1);
            l.addEventListener("error", f, !1);
            "data:" !== a.substr(0, 5) && void 0 !== this.crossOrigin && (l.crossOrigin = this.crossOrigin);
            g.manager.itemStart(a);
            l.src = a;
            return l;
        },
        setCrossOrigin: function(a) {
            this.crossOrigin = a;
            return this;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    Object.assign(qe.prototype, {
        crossOrigin: "anonymous",
        load: function(a, b, c, d) {
            function e(c) {
                g.load(a[c], function(a) {
                    f.images[c] = a;
                    h++;
                    6 === h && (f.needsUpdate = !0, b && b(f));
                }, void 0, d);
            }
            var f = new cb, g = new ld(this.manager);
            g.setCrossOrigin(this.crossOrigin);
            g.setPath(this.path);
            var h = 0;
            for(c = 0; c < a.length; ++c)e(c);
            return f;
        },
        setCrossOrigin: function(a) {
            this.crossOrigin = a;
            return this;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    Object.assign(Md.prototype, {
        crossOrigin: "anonymous",
        load: function(a, b, c, d) {
            var e = new Y, f = new ld(this.manager);
            f.setCrossOrigin(this.crossOrigin);
            f.setPath(this.path);
            f.load(a, function(c) {
                e.image = c;
                c = 0 < a.search(/\.jpe?g($|\?)/i) || 0 === a.search(/^data:image\/jpeg/);
                e.format = c ? 1022 : 1023;
                e.needsUpdate = !0;
                void 0 !== b && b(e);
            }, c, d);
            return e;
        },
        setCrossOrigin: function(a) {
            this.crossOrigin = a;
            return this;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    Object.assign(M.prototype, {
        getPoint: function() {
            console.warn("THREE.Curve: .getPoint() not implemented.");
            return null;
        },
        getPointAt: function(a, b) {
            a = this.getUtoTmapping(a);
            return this.getPoint(a, b);
        },
        getPoints: function(a) {
            void 0 === a && (a = 5);
            for(var b = [], c = 0; c <= a; c++)b.push(this.getPoint(c / a));
            return b;
        },
        getSpacedPoints: function(a) {
            void 0 === a && (a = 5);
            for(var b = [], c = 0; c <= a; c++)b.push(this.getPointAt(c / a));
            return b;
        },
        getLength: function() {
            var a = this.getLengths();
            return a[a.length - 1];
        },
        getLengths: function(a) {
            void 0 === a && (a = this.arcLengthDivisions);
            if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1 && !this.needsUpdate) return this.cacheArcLengths;
            this.needsUpdate = !1;
            var b = [], c = this.getPoint(0), d, e = 0;
            b.push(0);
            for(d = 1; d <= a; d++){
                var f = this.getPoint(d / a);
                e += f.distanceTo(c);
                b.push(e);
                c = f;
            }
            return this.cacheArcLengths = b;
        },
        updateArcLengths: function() {
            this.needsUpdate = !0;
            this.getLengths();
        },
        getUtoTmapping: function(a, b) {
            var c = this.getLengths(), d = c.length;
            b = b ? b : a * c[d - 1];
            for(var e = 0, f = d - 1, g; e <= f;)if (a = Math.floor(e + (f - e) / 2), g = c[a] - b, 0 > g) e = a + 1;
            else if (0 < g) f = a - 1;
            else {
                f = a;
                break;
            }
            a = f;
            if (c[a] === b) return a / (d - 1);
            e = c[a];
            return (a + (b - e) / (c[a + 1] - e)) / (d - 1);
        },
        getTangent: function(a) {
            var b = a - 1E-4;
            a += 1E-4;
            0 > b && (b = 0);
            1 < a && (a = 1);
            b = this.getPoint(b);
            return this.getPoint(a).clone().sub(b).normalize();
        },
        getTangentAt: function(a) {
            a = this.getUtoTmapping(a);
            return this.getTangent(a);
        },
        computeFrenetFrames: function(a, b) {
            var c = new n, d = [], e = [], f = [], g = new n, h = new P, l;
            for(l = 0; l <= a; l++){
                var k = l / a;
                d[l] = this.getTangentAt(k);
                d[l].normalize();
            }
            e[0] = new n;
            f[0] = new n;
            l = Number.MAX_VALUE;
            k = Math.abs(d[0].x);
            var q = Math.abs(d[0].y), p = Math.abs(d[0].z);
            k <= l && (l = k, c.set(1, 0, 0));
            q <= l && (l = q, c.set(0, 1, 0));
            p <= l && c.set(0, 0, 1);
            g.crossVectors(d[0], c).normalize();
            e[0].crossVectors(d[0], g);
            f[0].crossVectors(d[0], e[0]);
            for(l = 1; l <= a; l++)e[l] = e[l - 1].clone(), f[l] = f[l - 1].clone(), g.crossVectors(d[l - 1], d[l]), g.length() > Number.EPSILON && (g.normalize(), c = Math.acos(O.clamp(d[l - 1].dot(d[l]), -1, 1)), e[l].applyMatrix4(h.makeRotationAxis(g, c))), f[l].crossVectors(d[l], e[l]);
            if (!0 === b) for(c = Math.acos(O.clamp(e[0].dot(e[a]), -1, 1)), c /= a, 0 < d[0].dot(g.crossVectors(e[0], e[a])) && (c = -c), l = 1; l <= a; l++)e[l].applyMatrix4(h.makeRotationAxis(d[l], c * l)), f[l].crossVectors(d[l], e[l]);
            return {
                tangents: d,
                normals: e,
                binormals: f
            };
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.arcLengthDivisions = a.arcLengthDivisions;
            return this;
        },
        toJSON: function() {
            var a = {
                metadata: {
                    version: 4.5,
                    type: "Curve",
                    generator: "Curve.toJSON"
                }
            };
            a.arcLengthDivisions = this.arcLengthDivisions;
            a.type = this.type;
            return a;
        },
        fromJSON: function(a) {
            this.arcLengthDivisions = a.arcLengthDivisions;
            return this;
        }
    });
    Ea.prototype = Object.create(M.prototype);
    Ea.prototype.constructor = Ea;
    Ea.prototype.isEllipseCurve = !0;
    Ea.prototype.getPoint = function(a, b) {
        b = b || new C;
        for(var c = 2 * Math.PI, d = this.aEndAngle - this.aStartAngle, e = Math.abs(d) < Number.EPSILON; 0 > d;)d += c;
        for(; d > c;)d -= c;
        d < Number.EPSILON && (d = e ? 0 : c);
        !0 !== this.aClockwise || e || (d = d === c ? -c : d - c);
        c = this.aStartAngle + a * d;
        a = this.aX + this.xRadius * Math.cos(c);
        var f = this.aY + this.yRadius * Math.sin(c);
        0 !== this.aRotation && (c = Math.cos(this.aRotation), d = Math.sin(this.aRotation), e = a - this.aX, f -= this.aY, a = e * c - f * d + this.aX, f = e * d + f * c + this.aY);
        return b.set(a, f);
    };
    Ea.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.aX = a.aX;
        this.aY = a.aY;
        this.xRadius = a.xRadius;
        this.yRadius = a.yRadius;
        this.aStartAngle = a.aStartAngle;
        this.aEndAngle = a.aEndAngle;
        this.aClockwise = a.aClockwise;
        this.aRotation = a.aRotation;
        return this;
    };
    Ea.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.aX = this.aX;
        a.aY = this.aY;
        a.xRadius = this.xRadius;
        a.yRadius = this.yRadius;
        a.aStartAngle = this.aStartAngle;
        a.aEndAngle = this.aEndAngle;
        a.aClockwise = this.aClockwise;
        a.aRotation = this.aRotation;
        return a;
    };
    Ea.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.aX = a.aX;
        this.aY = a.aY;
        this.xRadius = a.xRadius;
        this.yRadius = a.yRadius;
        this.aStartAngle = a.aStartAngle;
        this.aEndAngle = a.aEndAngle;
        this.aClockwise = a.aClockwise;
        this.aRotation = a.aRotation;
        return this;
    };
    pc.prototype = Object.create(Ea.prototype);
    pc.prototype.constructor = pc;
    pc.prototype.isArcCurve = !0;
    var ae = new n, Pe = new re, Qe = new re, Re = new re;
    oa.prototype = Object.create(M.prototype);
    oa.prototype.constructor = oa;
    oa.prototype.isCatmullRomCurve3 = !0;
    oa.prototype.getPoint = function(a, b) {
        b = b || new n;
        var c = this.points, d = c.length;
        a *= d - (this.closed ? 0 : 1);
        var e = Math.floor(a);
        a -= e;
        this.closed ? e += 0 < e ? 0 : (Math.floor(Math.abs(e) / d) + 1) * d : 0 === a && e === d - 1 && (e = d - 2, a = 1);
        if (this.closed || 0 < e) var f = c[(e - 1) % d];
        else ae.subVectors(c[0], c[1]).add(c[0]), f = ae;
        var g = c[e % d];
        var h = c[(e + 1) % d];
        this.closed || e + 2 < d ? c = c[(e + 2) % d] : (ae.subVectors(c[d - 1], c[d - 2]).add(c[d - 1]), c = ae);
        if ("centripetal" === this.curveType || "chordal" === this.curveType) {
            var l = "chordal" === this.curveType ? .5 : .25;
            d = Math.pow(f.distanceToSquared(g), l);
            e = Math.pow(g.distanceToSquared(h), l);
            l = Math.pow(h.distanceToSquared(c), l);
            1E-4 > e && (e = 1);
            1E-4 > d && (d = e);
            1E-4 > l && (l = e);
            Pe.initNonuniformCatmullRom(f.x, g.x, h.x, c.x, d, e, l);
            Qe.initNonuniformCatmullRom(f.y, g.y, h.y, c.y, d, e, l);
            Re.initNonuniformCatmullRom(f.z, g.z, h.z, c.z, d, e, l);
        } else "catmullrom" === this.curveType && (Pe.initCatmullRom(f.x, g.x, h.x, c.x, this.tension), Qe.initCatmullRom(f.y, g.y, h.y, c.y, this.tension), Re.initCatmullRom(f.z, g.z, h.z, c.z, this.tension));
        b.set(Pe.calc(a), Qe.calc(a), Re.calc(a));
        return b;
    };
    oa.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.points = [];
        for(var b = 0, c = a.points.length; b < c; b++)this.points.push(a.points[b].clone());
        this.closed = a.closed;
        this.curveType = a.curveType;
        this.tension = a.tension;
        return this;
    };
    oa.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.points = [];
        for(var b = 0, c = this.points.length; b < c; b++)a.points.push(this.points[b].toArray());
        a.closed = this.closed;
        a.curveType = this.curveType;
        a.tension = this.tension;
        return a;
    };
    oa.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.points = [];
        for(var b = 0, c = a.points.length; b < c; b++){
            var d = a.points[b];
            this.points.push((new n).fromArray(d));
        }
        this.closed = a.closed;
        this.curveType = a.curveType;
        this.tension = a.tension;
        return this;
    };
    La.prototype = Object.create(M.prototype);
    La.prototype.constructor = La;
    La.prototype.isCubicBezierCurve = !0;
    La.prototype.getPoint = function(a, b) {
        b = b || new C;
        var c = this.v0, d = this.v1, e = this.v2, f = this.v3;
        b.set(nd(a, c.x, d.x, e.x, f.x), nd(a, c.y, d.y, e.y, f.y));
        return b;
    };
    La.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.v0.copy(a.v0);
        this.v1.copy(a.v1);
        this.v2.copy(a.v2);
        this.v3.copy(a.v3);
        return this;
    };
    La.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.v0 = this.v0.toArray();
        a.v1 = this.v1.toArray();
        a.v2 = this.v2.toArray();
        a.v3 = this.v3.toArray();
        return a;
    };
    La.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.v0.fromArray(a.v0);
        this.v1.fromArray(a.v1);
        this.v2.fromArray(a.v2);
        this.v3.fromArray(a.v3);
        return this;
    };
    $a.prototype = Object.create(M.prototype);
    $a.prototype.constructor = $a;
    $a.prototype.isCubicBezierCurve3 = !0;
    $a.prototype.getPoint = function(a, b) {
        b = b || new n;
        var c = this.v0, d = this.v1, e = this.v2, f = this.v3;
        b.set(nd(a, c.x, d.x, e.x, f.x), nd(a, c.y, d.y, e.y, f.y), nd(a, c.z, d.z, e.z, f.z));
        return b;
    };
    $a.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.v0.copy(a.v0);
        this.v1.copy(a.v1);
        this.v2.copy(a.v2);
        this.v3.copy(a.v3);
        return this;
    };
    $a.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.v0 = this.v0.toArray();
        a.v1 = this.v1.toArray();
        a.v2 = this.v2.toArray();
        a.v3 = this.v3.toArray();
        return a;
    };
    $a.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.v0.fromArray(a.v0);
        this.v1.fromArray(a.v1);
        this.v2.fromArray(a.v2);
        this.v3.fromArray(a.v3);
        return this;
    };
    wa.prototype = Object.create(M.prototype);
    wa.prototype.constructor = wa;
    wa.prototype.isLineCurve = !0;
    wa.prototype.getPoint = function(a, b) {
        b = b || new C;
        1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));
        return b;
    };
    wa.prototype.getPointAt = function(a, b) {
        return this.getPoint(a, b);
    };
    wa.prototype.getTangent = function() {
        return this.v2.clone().sub(this.v1).normalize();
    };
    wa.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.v1.copy(a.v1);
        this.v2.copy(a.v2);
        return this;
    };
    wa.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.v1 = this.v1.toArray();
        a.v2 = this.v2.toArray();
        return a;
    };
    wa.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.v1.fromArray(a.v1);
        this.v2.fromArray(a.v2);
        return this;
    };
    Ma.prototype = Object.create(M.prototype);
    Ma.prototype.constructor = Ma;
    Ma.prototype.isLineCurve3 = !0;
    Ma.prototype.getPoint = function(a, b) {
        b = b || new n;
        1 === a ? b.copy(this.v2) : (b.copy(this.v2).sub(this.v1), b.multiplyScalar(a).add(this.v1));
        return b;
    };
    Ma.prototype.getPointAt = function(a, b) {
        return this.getPoint(a, b);
    };
    Ma.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.v1.copy(a.v1);
        this.v2.copy(a.v2);
        return this;
    };
    Ma.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.v1 = this.v1.toArray();
        a.v2 = this.v2.toArray();
        return a;
    };
    Ma.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.v1.fromArray(a.v1);
        this.v2.fromArray(a.v2);
        return this;
    };
    Na.prototype = Object.create(M.prototype);
    Na.prototype.constructor = Na;
    Na.prototype.isQuadraticBezierCurve = !0;
    Na.prototype.getPoint = function(a, b) {
        b = b || new C;
        var c = this.v0, d = this.v1, e = this.v2;
        b.set(md(a, c.x, d.x, e.x), md(a, c.y, d.y, e.y));
        return b;
    };
    Na.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.v0.copy(a.v0);
        this.v1.copy(a.v1);
        this.v2.copy(a.v2);
        return this;
    };
    Na.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.v0 = this.v0.toArray();
        a.v1 = this.v1.toArray();
        a.v2 = this.v2.toArray();
        return a;
    };
    Na.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.v0.fromArray(a.v0);
        this.v1.fromArray(a.v1);
        this.v2.fromArray(a.v2);
        return this;
    };
    ab.prototype = Object.create(M.prototype);
    ab.prototype.constructor = ab;
    ab.prototype.isQuadraticBezierCurve3 = !0;
    ab.prototype.getPoint = function(a, b) {
        b = b || new n;
        var c = this.v0, d = this.v1, e = this.v2;
        b.set(md(a, c.x, d.x, e.x), md(a, c.y, d.y, e.y), md(a, c.z, d.z, e.z));
        return b;
    };
    ab.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.v0.copy(a.v0);
        this.v1.copy(a.v1);
        this.v2.copy(a.v2);
        return this;
    };
    ab.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.v0 = this.v0.toArray();
        a.v1 = this.v1.toArray();
        a.v2 = this.v2.toArray();
        return a;
    };
    ab.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.v0.fromArray(a.v0);
        this.v1.fromArray(a.v1);
        this.v2.fromArray(a.v2);
        return this;
    };
    Oa.prototype = Object.create(M.prototype);
    Oa.prototype.constructor = Oa;
    Oa.prototype.isSplineCurve = !0;
    Oa.prototype.getPoint = function(a, b) {
        b = b || new C;
        var c = this.points, d = (c.length - 1) * a;
        a = Math.floor(d);
        d -= a;
        var e = c[0 === a ? a : a - 1], f = c[a], g = c[a > c.length - 2 ? c.length - 1 : a + 1];
        c = c[a > c.length - 3 ? c.length - 1 : a + 2];
        b.set(Jf(d, e.x, f.x, g.x, c.x), Jf(d, e.y, f.y, g.y, c.y));
        return b;
    };
    Oa.prototype.copy = function(a) {
        M.prototype.copy.call(this, a);
        this.points = [];
        for(var b = 0, c = a.points.length; b < c; b++)this.points.push(a.points[b].clone());
        return this;
    };
    Oa.prototype.toJSON = function() {
        var a = M.prototype.toJSON.call(this);
        a.points = [];
        for(var b = 0, c = this.points.length; b < c; b++)a.points.push(this.points[b].toArray());
        return a;
    };
    Oa.prototype.fromJSON = function(a) {
        M.prototype.fromJSON.call(this, a);
        this.points = [];
        for(var b = 0, c = a.points.length; b < c; b++){
            var d = a.points[b];
            this.points.push((new C).fromArray(d));
        }
        return this;
    };
    var Se = Object.freeze({
        ArcCurve: pc,
        CatmullRomCurve3: oa,
        CubicBezierCurve: La,
        CubicBezierCurve3: $a,
        EllipseCurve: Ea,
        LineCurve: wa,
        LineCurve3: Ma,
        QuadraticBezierCurve: Na,
        QuadraticBezierCurve3: ab,
        SplineCurve: Oa
    });
    fb.prototype = Object.assign(Object.create(M.prototype), {
        constructor: fb,
        add: function(a) {
            this.curves.push(a);
        },
        closePath: function() {
            var a = this.curves[0].getPoint(0), b = this.curves[this.curves.length - 1].getPoint(1);
            a.equals(b) || this.curves.push(new wa(b, a));
        },
        getPoint: function(a) {
            var b = a * this.getLength(), c = this.getCurveLengths();
            for(a = 0; a < c.length;){
                if (c[a] >= b) return b = c[a] - b, a = this.curves[a], c = a.getLength(), a.getPointAt(0 === c ? 0 : 1 - b / c);
                a++;
            }
            return null;
        },
        getLength: function() {
            var a = this.getCurveLengths();
            return a[a.length - 1];
        },
        updateArcLengths: function() {
            this.needsUpdate = !0;
            this.cacheLengths = null;
            this.getCurveLengths();
        },
        getCurveLengths: function() {
            if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
            for(var a = [], b = 0, c = 0, d = this.curves.length; c < d; c++)b += this.curves[c].getLength(), a.push(b);
            return this.cacheLengths = a;
        },
        getSpacedPoints: function(a) {
            void 0 === a && (a = 40);
            for(var b = [], c = 0; c <= a; c++)b.push(this.getPoint(c / a));
            this.autoClose && b.push(b[0]);
            return b;
        },
        getPoints: function(a) {
            a = a || 12;
            for(var b = [], c, d = 0, e = this.curves; d < e.length; d++){
                var f = e[d];
                f = f.getPoints(f && f.isEllipseCurve ? 2 * a : f && (f.isLineCurve || f.isLineCurve3) ? 1 : f && f.isSplineCurve ? a * f.points.length : a);
                for(var g = 0; g < f.length; g++){
                    var h = f[g];
                    c && c.equals(h) || (b.push(h), c = h);
                }
            }
            this.autoClose && 1 < b.length && !b[b.length - 1].equals(b[0]) && b.push(b[0]);
            return b;
        },
        copy: function(a) {
            M.prototype.copy.call(this, a);
            this.curves = [];
            for(var b = 0, c = a.curves.length; b < c; b++)this.curves.push(a.curves[b].clone());
            this.autoClose = a.autoClose;
            return this;
        },
        toJSON: function() {
            var a = M.prototype.toJSON.call(this);
            a.autoClose = this.autoClose;
            a.curves = [];
            for(var b = 0, c = this.curves.length; b < c; b++)a.curves.push(this.curves[b].toJSON());
            return a;
        },
        fromJSON: function(a) {
            M.prototype.fromJSON.call(this, a);
            this.autoClose = a.autoClose;
            this.curves = [];
            for(var b = 0, c = a.curves.length; b < c; b++){
                var d = a.curves[b];
                this.curves.push((new Se[d.type]).fromJSON(d));
            }
            return this;
        }
    });
    Pa.prototype = Object.assign(Object.create(fb.prototype), {
        constructor: Pa,
        setFromPoints: function(a) {
            this.moveTo(a[0].x, a[0].y);
            for(var b = 1, c = a.length; b < c; b++)this.lineTo(a[b].x, a[b].y);
        },
        moveTo: function(a, b) {
            this.currentPoint.set(a, b);
        },
        lineTo: function(a, b) {
            var c = new wa(this.currentPoint.clone(), new C(a, b));
            this.curves.push(c);
            this.currentPoint.set(a, b);
        },
        quadraticCurveTo: function(a, b, c, d) {
            a = new Na(this.currentPoint.clone(), new C(a, b), new C(c, d));
            this.curves.push(a);
            this.currentPoint.set(c, d);
        },
        bezierCurveTo: function(a, b, c, d, e, f) {
            a = new La(this.currentPoint.clone(), new C(a, b), new C(c, d), new C(e, f));
            this.curves.push(a);
            this.currentPoint.set(e, f);
        },
        splineThru: function(a) {
            var b = [
                this.currentPoint.clone()
            ].concat(a);
            b = new Oa(b);
            this.curves.push(b);
            this.currentPoint.copy(a[a.length - 1]);
        },
        arc: function(a, b, c, d, e, f) {
            this.absarc(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f);
        },
        absarc: function(a, b, c, d, e, f) {
            this.absellipse(a, b, c, c, d, e, f);
        },
        ellipse: function(a, b, c, d, e, f, g, h) {
            this.absellipse(a + this.currentPoint.x, b + this.currentPoint.y, c, d, e, f, g, h);
        },
        absellipse: function(a, b, c, d, e, f, g, h) {
            a = new Ea(a, b, c, d, e, f, g, h);
            0 < this.curves.length && (b = a.getPoint(0), b.equals(this.currentPoint) || this.lineTo(b.x, b.y));
            this.curves.push(a);
            a = a.getPoint(1);
            this.currentPoint.copy(a);
        },
        copy: function(a) {
            fb.prototype.copy.call(this, a);
            this.currentPoint.copy(a.currentPoint);
            return this;
        },
        toJSON: function() {
            var a = fb.prototype.toJSON.call(this);
            a.currentPoint = this.currentPoint.toArray();
            return a;
        },
        fromJSON: function(a) {
            fb.prototype.fromJSON.call(this, a);
            this.currentPoint.fromArray(a.currentPoint);
            return this;
        }
    });
    pb.prototype = Object.assign(Object.create(Pa.prototype), {
        constructor: pb,
        getPointsHoles: function(a) {
            for(var b = [], c = 0, d = this.holes.length; c < d; c++)b[c] = this.holes[c].getPoints(a);
            return b;
        },
        extractPoints: function(a) {
            return {
                shape: this.getPoints(a),
                holes: this.getPointsHoles(a)
            };
        },
        copy: function(a) {
            Pa.prototype.copy.call(this, a);
            this.holes = [];
            for(var b = 0, c = a.holes.length; b < c; b++)this.holes.push(a.holes[b].clone());
            return this;
        },
        toJSON: function() {
            var a = Pa.prototype.toJSON.call(this);
            a.uuid = this.uuid;
            a.holes = [];
            for(var b = 0, c = this.holes.length; b < c; b++)a.holes.push(this.holes[b].toJSON());
            return a;
        },
        fromJSON: function(a) {
            Pa.prototype.fromJSON.call(this, a);
            this.uuid = a.uuid;
            this.holes = [];
            for(var b = 0, c = a.holes.length; b < c; b++){
                var d = a.holes[b];
                this.holes.push((new Pa).fromJSON(d));
            }
            return this;
        }
    });
    T.prototype = Object.assign(Object.create(D.prototype), {
        constructor: T,
        isLight: !0,
        copy: function(a) {
            D.prototype.copy.call(this, a);
            this.color.copy(a.color);
            this.intensity = a.intensity;
            return this;
        },
        toJSON: function(a) {
            a = D.prototype.toJSON.call(this, a);
            a.object.color = this.color.getHex();
            a.object.intensity = this.intensity;
            void 0 !== this.groundColor && (a.object.groundColor = this.groundColor.getHex());
            void 0 !== this.distance && (a.object.distance = this.distance);
            void 0 !== this.angle && (a.object.angle = this.angle);
            void 0 !== this.decay && (a.object.decay = this.decay);
            void 0 !== this.penumbra && (a.object.penumbra = this.penumbra);
            void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON());
            return a;
        }
    });
    Nd.prototype = Object.assign(Object.create(T.prototype), {
        constructor: Nd,
        isHemisphereLight: !0,
        copy: function(a) {
            T.prototype.copy.call(this, a);
            this.groundColor.copy(a.groundColor);
            return this;
        }
    });
    Object.assign(Pb.prototype, {
        copy: function(a) {
            this.camera = a.camera.clone();
            this.bias = a.bias;
            this.radius = a.radius;
            this.mapSize.copy(a.mapSize);
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        toJSON: function() {
            var a = {};
            0 !== this.bias && (a.bias = this.bias);
            1 !== this.radius && (a.radius = this.radius);
            if (512 !== this.mapSize.x || 512 !== this.mapSize.y) a.mapSize = this.mapSize.toArray();
            a.camera = this.camera.toJSON(!1).object;
            delete a.camera.matrix;
            return a;
        }
    });
    Od.prototype = Object.assign(Object.create(Pb.prototype), {
        constructor: Od,
        isSpotLightShadow: !0,
        update: function(a) {
            var b = this.camera, c = 2 * O.RAD2DEG * a.angle, d = this.mapSize.width / this.mapSize.height;
            a = a.distance || b.far;
            if (c !== b.fov || d !== b.aspect || a !== b.far) b.fov = c, b.aspect = d, b.far = a, b.updateProjectionMatrix();
        }
    });
    Pd.prototype = Object.assign(Object.create(T.prototype), {
        constructor: Pd,
        isSpotLight: !0,
        copy: function(a) {
            T.prototype.copy.call(this, a);
            this.distance = a.distance;
            this.angle = a.angle;
            this.penumbra = a.penumbra;
            this.decay = a.decay;
            this.target = a.target.clone();
            this.shadow = a.shadow.clone();
            return this;
        }
    });
    Qd.prototype = Object.assign(Object.create(T.prototype), {
        constructor: Qd,
        isPointLight: !0,
        copy: function(a) {
            T.prototype.copy.call(this, a);
            this.distance = a.distance;
            this.decay = a.decay;
            this.shadow = a.shadow.clone();
            return this;
        }
    });
    od.prototype = Object.assign(Object.create(Xa.prototype), {
        constructor: od,
        isOrthographicCamera: !0,
        copy: function(a, b) {
            Xa.prototype.copy.call(this, a, b);
            this.left = a.left;
            this.right = a.right;
            this.top = a.top;
            this.bottom = a.bottom;
            this.near = a.near;
            this.far = a.far;
            this.zoom = a.zoom;
            this.view = null === a.view ? null : Object.assign({}, a.view);
            return this;
        },
        setViewOffset: function(a, b, c, d, e, f) {
            null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            });
            this.view.enabled = !0;
            this.view.fullWidth = a;
            this.view.fullHeight = b;
            this.view.offsetX = c;
            this.view.offsetY = d;
            this.view.width = e;
            this.view.height = f;
            this.updateProjectionMatrix();
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1);
            this.updateProjectionMatrix();
        },
        updateProjectionMatrix: function() {
            var a = (this.right - this.left) / (2 * this.zoom), b = (this.top - this.bottom) / (2 * this.zoom), c = (this.right + this.left) / 2, d = (this.top + this.bottom) / 2, e = c - a;
            c += a;
            a = d + b;
            b = d - b;
            if (null !== this.view && this.view.enabled) {
                c = this.zoom / (this.view.width / this.view.fullWidth);
                b = this.zoom / (this.view.height / this.view.fullHeight);
                var f = (this.right - this.left) / this.view.width;
                d = (this.top - this.bottom) / this.view.height;
                e += this.view.offsetX / c * f;
                c = e + this.view.width / c * f;
                a -= this.view.offsetY / b * d;
                b = a - this.view.height / b * d;
            }
            this.projectionMatrix.makeOrthographic(e, c, a, b, this.near, this.far);
            this.projectionMatrixInverse.getInverse(this.projectionMatrix);
        },
        toJSON: function(a) {
            a = D.prototype.toJSON.call(this, a);
            a.object.zoom = this.zoom;
            a.object.left = this.left;
            a.object.right = this.right;
            a.object.top = this.top;
            a.object.bottom = this.bottom;
            a.object.near = this.near;
            a.object.far = this.far;
            null !== this.view && (a.object.view = Object.assign({}, this.view));
            return a;
        }
    });
    Rd.prototype = Object.assign(Object.create(Pb.prototype), {
        constructor: Rd
    });
    Sd.prototype = Object.assign(Object.create(T.prototype), {
        constructor: Sd,
        isDirectionalLight: !0,
        copy: function(a) {
            T.prototype.copy.call(this, a);
            this.target = a.target.clone();
            this.shadow = a.shadow.clone();
            return this;
        }
    });
    Td.prototype = Object.assign(Object.create(T.prototype), {
        constructor: Td,
        isAmbientLight: !0
    });
    Ud.prototype = Object.assign(Object.create(T.prototype), {
        constructor: Ud,
        isRectAreaLight: !0,
        copy: function(a) {
            T.prototype.copy.call(this, a);
            this.width = a.width;
            this.height = a.height;
            return this;
        },
        toJSON: function(a) {
            a = T.prototype.toJSON.call(this, a);
            a.object.width = this.width;
            a.object.height = this.height;
            return a;
        }
    });
    Object.assign(Vd.prototype, {
        load: function(a, b, c, d) {
            var e = this, f = new Ka(e.manager);
            f.setPath(e.path);
            f.load(a, function(a) {
                b(e.parse(JSON.parse(a)));
            }, c, d);
        },
        parse: function(a) {
            function b(a) {
                void 0 === c[a] && console.warn("THREE.MaterialLoader: Undefined texture", a);
                return c[a];
            }
            var c = this.textures, d = new qh[a.type];
            void 0 !== a.uuid && (d.uuid = a.uuid);
            void 0 !== a.name && (d.name = a.name);
            void 0 !== a.color && d.color.setHex(a.color);
            void 0 !== a.roughness && (d.roughness = a.roughness);
            void 0 !== a.metalness && (d.metalness = a.metalness);
            void 0 !== a.emissive && d.emissive.setHex(a.emissive);
            void 0 !== a.specular && d.specular.setHex(a.specular);
            void 0 !== a.shininess && (d.shininess = a.shininess);
            void 0 !== a.clearCoat && (d.clearCoat = a.clearCoat);
            void 0 !== a.clearCoatRoughness && (d.clearCoatRoughness = a.clearCoatRoughness);
            void 0 !== a.vertexColors && (d.vertexColors = a.vertexColors);
            void 0 !== a.fog && (d.fog = a.fog);
            void 0 !== a.flatShading && (d.flatShading = a.flatShading);
            void 0 !== a.blending && (d.blending = a.blending);
            void 0 !== a.combine && (d.combine = a.combine);
            void 0 !== a.side && (d.side = a.side);
            void 0 !== a.opacity && (d.opacity = a.opacity);
            void 0 !== a.transparent && (d.transparent = a.transparent);
            void 0 !== a.alphaTest && (d.alphaTest = a.alphaTest);
            void 0 !== a.depthTest && (d.depthTest = a.depthTest);
            void 0 !== a.depthWrite && (d.depthWrite = a.depthWrite);
            void 0 !== a.colorWrite && (d.colorWrite = a.colorWrite);
            void 0 !== a.wireframe && (d.wireframe = a.wireframe);
            void 0 !== a.wireframeLinewidth && (d.wireframeLinewidth = a.wireframeLinewidth);
            void 0 !== a.wireframeLinecap && (d.wireframeLinecap = a.wireframeLinecap);
            void 0 !== a.wireframeLinejoin && (d.wireframeLinejoin = a.wireframeLinejoin);
            void 0 !== a.rotation && (d.rotation = a.rotation);
            1 !== a.linewidth && (d.linewidth = a.linewidth);
            void 0 !== a.dashSize && (d.dashSize = a.dashSize);
            void 0 !== a.gapSize && (d.gapSize = a.gapSize);
            void 0 !== a.scale && (d.scale = a.scale);
            void 0 !== a.polygonOffset && (d.polygonOffset = a.polygonOffset);
            void 0 !== a.polygonOffsetFactor && (d.polygonOffsetFactor = a.polygonOffsetFactor);
            void 0 !== a.polygonOffsetUnits && (d.polygonOffsetUnits = a.polygonOffsetUnits);
            void 0 !== a.skinning && (d.skinning = a.skinning);
            void 0 !== a.morphTargets && (d.morphTargets = a.morphTargets);
            void 0 !== a.dithering && (d.dithering = a.dithering);
            void 0 !== a.visible && (d.visible = a.visible);
            void 0 !== a.userData && (d.userData = a.userData);
            if (void 0 !== a.uniforms) for(var e in a.uniforms){
                var f = a.uniforms[e];
                d.uniforms[e] = {};
                switch(f.type){
                    case "t":
                        d.uniforms[e].value = b(f.value);
                        break;
                    case "c":
                        d.uniforms[e].value = (new A).setHex(f.value);
                        break;
                    case "v2":
                        d.uniforms[e].value = (new C).fromArray(f.value);
                        break;
                    case "v3":
                        d.uniforms[e].value = (new n).fromArray(f.value);
                        break;
                    case "v4":
                        d.uniforms[e].value = (new W).fromArray(f.value);
                        break;
                    case "m3":
                        d.uniforms[e].value = (new na).fromArray(f.value);
                    case "m4":
                        d.uniforms[e].value = (new P).fromArray(f.value);
                        break;
                    default:
                        d.uniforms[e].value = f.value;
                }
            }
            void 0 !== a.defines && (d.defines = a.defines);
            void 0 !== a.vertexShader && (d.vertexShader = a.vertexShader);
            void 0 !== a.fragmentShader && (d.fragmentShader = a.fragmentShader);
            if (void 0 !== a.extensions) for(var g in a.extensions)d.extensions[g] = a.extensions[g];
            void 0 !== a.shading && (d.flatShading = 1 === a.shading);
            void 0 !== a.size && (d.size = a.size);
            void 0 !== a.sizeAttenuation && (d.sizeAttenuation = a.sizeAttenuation);
            void 0 !== a.map && (d.map = b(a.map));
            void 0 !== a.matcap && (d.matcap = b(a.matcap));
            void 0 !== a.alphaMap && (d.alphaMap = b(a.alphaMap), d.transparent = !0);
            void 0 !== a.bumpMap && (d.bumpMap = b(a.bumpMap));
            void 0 !== a.bumpScale && (d.bumpScale = a.bumpScale);
            void 0 !== a.normalMap && (d.normalMap = b(a.normalMap));
            void 0 !== a.normalMapType && (d.normalMapType = a.normalMapType);
            void 0 !== a.normalScale && (e = a.normalScale, !1 === Array.isArray(e) && (e = [
                e,
                e
            ]), d.normalScale = (new C).fromArray(e));
            void 0 !== a.displacementMap && (d.displacementMap = b(a.displacementMap));
            void 0 !== a.displacementScale && (d.displacementScale = a.displacementScale);
            void 0 !== a.displacementBias && (d.displacementBias = a.displacementBias);
            void 0 !== a.roughnessMap && (d.roughnessMap = b(a.roughnessMap));
            void 0 !== a.metalnessMap && (d.metalnessMap = b(a.metalnessMap));
            void 0 !== a.emissiveMap && (d.emissiveMap = b(a.emissiveMap));
            void 0 !== a.emissiveIntensity && (d.emissiveIntensity = a.emissiveIntensity);
            void 0 !== a.specularMap && (d.specularMap = b(a.specularMap));
            void 0 !== a.envMap && (d.envMap = b(a.envMap));
            void 0 !== a.envMapIntensity && (d.envMapIntensity = a.envMapIntensity);
            void 0 !== a.reflectivity && (d.reflectivity = a.reflectivity);
            void 0 !== a.lightMap && (d.lightMap = b(a.lightMap));
            void 0 !== a.lightMapIntensity && (d.lightMapIntensity = a.lightMapIntensity);
            void 0 !== a.aoMap && (d.aoMap = b(a.aoMap));
            void 0 !== a.aoMapIntensity && (d.aoMapIntensity = a.aoMapIntensity);
            void 0 !== a.gradientMap && (d.gradientMap = b(a.gradientMap));
            return d;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        },
        setTextures: function(a) {
            this.textures = a;
            return this;
        }
    });
    var Te = {
        decodeText: function(a) {
            if ("undefined" !== typeof TextDecoder) return (new TextDecoder).decode(a);
            for(var b = "", c = 0, d = a.length; c < d; c++)b += String.fromCharCode(a[c]);
            return decodeURIComponent(escape(b));
        },
        extractUrlBase: function(a) {
            var b = a.lastIndexOf("/");
            return -1 === b ? "./" : a.substr(0, b + 1);
        }
    };
    Object.assign(se.prototype, {
        load: function(a, b, c, d) {
            var e = this, f = new Ka(e.manager);
            f.setPath(e.path);
            f.load(a, function(a) {
                b(e.parse(JSON.parse(a)));
            }, c, d);
        },
        parse: function(a) {
            var b = new B, c = a.data.index;
            if (void 0 !== c) {
                var d = new Ue[c.type](c.array);
                b.setIndex(new H(d, 1));
            }
            c = a.data.attributes;
            for(var e in c){
                var f = c[e];
                d = new Ue[f.type](f.array);
                d = new H(d, f.itemSize, f.normalized);
                void 0 !== f.name && (d.name = f.name);
                b.addAttribute(e, d);
            }
            var g = a.data.morphAttributes;
            if (g) for(e in g){
                var h = g[e], l = [];
                c = 0;
                for(var k = h.length; c < k; c++)f = h[c], d = new Ue[f.type](f.array), d = new H(d, f.itemSize, f.normalized), void 0 !== f.name && (d.name = f.name), l.push(d);
                b.morphAttributes[e] = l;
            }
            e = a.data.groups || a.data.drawcalls || a.data.offsets;
            if (void 0 !== e) for(c = 0, f = e.length; c !== f; ++c)d = e[c], b.addGroup(d.start, d.count, d.materialIndex);
            c = a.data.boundingSphere;
            void 0 !== c && (e = new n, void 0 !== c.center && e.fromArray(c.center), b.boundingSphere = new Ta(e, c.radius));
            a.name && (b.name = a.name);
            a.userData && (b.userData = a.userData);
            return b;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    var Ue = {
        Int8Array: Int8Array,
        Uint8Array: Uint8Array,
        Uint8ClampedArray: "undefined" !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
        Int16Array: Int16Array,
        Uint16Array: Uint16Array,
        Int32Array: Int32Array,
        Uint32Array: Uint32Array,
        Float32Array: Float32Array,
        Float64Array: Float64Array
    };
    Object.assign(te.prototype, {
        crossOrigin: "anonymous",
        load: function(a, b, c, d) {
            var e = this, f = void 0 === this.path ? Te.extractUrlBase(a) : this.path;
            this.resourcePath = this.resourcePath || f;
            f = new Ka(e.manager);
            f.setPath(this.path);
            f.load(a, function(c) {
                var f = null;
                try {
                    f = JSON.parse(c);
                } catch (l) {
                    void 0 !== d && d(l);
                    console.error("THREE:ObjectLoader: Can't parse " + a + ".", l.message);
                    return;
                }
                c = f.metadata;
                void 0 === c || void 0 === c.type || "geometry" === c.type.toLowerCase() ? console.error("THREE.ObjectLoader: Can't load " + a) : e.parse(f, b);
            }, c, d);
        },
        setPath: function(a) {
            this.path = a;
            return this;
        },
        setResourcePath: function(a) {
            this.resourcePath = a;
            return this;
        },
        setCrossOrigin: function(a) {
            this.crossOrigin = a;
            return this;
        },
        parse: function(a, b) {
            var c = this.parseShape(a.shapes);
            c = this.parseGeometries(a.geometries, c);
            var d = this.parseImages(a.images, function() {
                void 0 !== b && b(e);
            });
            d = this.parseTextures(a.textures, d);
            d = this.parseMaterials(a.materials, d);
            var e = this.parseObject(a.object, c, d);
            a.animations && (e.animations = this.parseAnimations(a.animations));
            void 0 !== a.images && 0 !== a.images.length || void 0 === b || b(e);
            return e;
        },
        parseShape: function(a) {
            var b = {};
            if (void 0 !== a) for(var c = 0, d = a.length; c < d; c++){
                var e = (new pb).fromJSON(a[c]);
                b[e.uuid] = e;
            }
            return b;
        },
        parseGeometries: function(a, b) {
            var c = {};
            if (void 0 !== a) for(var d = new se, e = 0, f = a.length; e < f; e++){
                var g = a[e];
                switch(g.type){
                    case "PlaneGeometry":
                    case "PlaneBufferGeometry":
                        var h = new xa[g.type](g.width, g.height, g.widthSegments, g.heightSegments);
                        break;
                    case "BoxGeometry":
                    case "BoxBufferGeometry":
                    case "CubeGeometry":
                        h = new xa[g.type](g.width, g.height, g.depth, g.widthSegments, g.heightSegments, g.depthSegments);
                        break;
                    case "CircleGeometry":
                    case "CircleBufferGeometry":
                        h = new xa[g.type](g.radius, g.segments, g.thetaStart, g.thetaLength);
                        break;
                    case "CylinderGeometry":
                    case "CylinderBufferGeometry":
                        h = new xa[g.type](g.radiusTop, g.radiusBottom, g.height, g.radialSegments, g.heightSegments, g.openEnded, g.thetaStart, g.thetaLength);
                        break;
                    case "ConeGeometry":
                    case "ConeBufferGeometry":
                        h = new xa[g.type](g.radius, g.height, g.radialSegments, g.heightSegments, g.openEnded, g.thetaStart, g.thetaLength);
                        break;
                    case "SphereGeometry":
                    case "SphereBufferGeometry":
                        h = new xa[g.type](g.radius, g.widthSegments, g.heightSegments, g.phiStart, g.phiLength, g.thetaStart, g.thetaLength);
                        break;
                    case "DodecahedronGeometry":
                    case "DodecahedronBufferGeometry":
                    case "IcosahedronGeometry":
                    case "IcosahedronBufferGeometry":
                    case "OctahedronGeometry":
                    case "OctahedronBufferGeometry":
                    case "TetrahedronGeometry":
                    case "TetrahedronBufferGeometry":
                        h = new xa[g.type](g.radius, g.detail);
                        break;
                    case "RingGeometry":
                    case "RingBufferGeometry":
                        h = new xa[g.type](g.innerRadius, g.outerRadius, g.thetaSegments, g.phiSegments, g.thetaStart, g.thetaLength);
                        break;
                    case "TorusGeometry":
                    case "TorusBufferGeometry":
                        h = new xa[g.type](g.radius, g.tube, g.radialSegments, g.tubularSegments, g.arc);
                        break;
                    case "TorusKnotGeometry":
                    case "TorusKnotBufferGeometry":
                        h = new xa[g.type](g.radius, g.tube, g.tubularSegments, g.radialSegments, g.p, g.q);
                        break;
                    case "TubeGeometry":
                    case "TubeBufferGeometry":
                        h = new xa[g.type]((new Se[g.path.type]).fromJSON(g.path), g.tubularSegments, g.radius, g.radialSegments, g.closed);
                        break;
                    case "LatheGeometry":
                    case "LatheBufferGeometry":
                        h = new xa[g.type](g.points, g.segments, g.phiStart, g.phiLength);
                        break;
                    case "PolyhedronGeometry":
                    case "PolyhedronBufferGeometry":
                        h = new xa[g.type](g.vertices, g.indices, g.radius, g.details);
                        break;
                    case "ShapeGeometry":
                    case "ShapeBufferGeometry":
                        h = [];
                        for(var l = 0, k = g.shapes.length; l < k; l++){
                            var n = b[g.shapes[l]];
                            h.push(n);
                        }
                        h = new xa[g.type](h, g.curveSegments);
                        break;
                    case "ExtrudeGeometry":
                    case "ExtrudeBufferGeometry":
                        h = [];
                        l = 0;
                        for(k = g.shapes.length; l < k; l++)n = b[g.shapes[l]], h.push(n);
                        l = g.options.extrudePath;
                        void 0 !== l && (g.options.extrudePath = (new Se[l.type]).fromJSON(l));
                        h = new xa[g.type](h, g.options);
                        break;
                    case "BufferGeometry":
                        h = d.parse(g);
                        break;
                    case "Geometry":
                        "THREE" in window && "LegacyJSONLoader" in THREE ? h = (new THREE.LegacyJSONLoader).parse(g, this.resourcePath).geometry : console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');
                        break;
                    default:
                        console.warn('THREE.ObjectLoader: Unsupported geometry type "' + g.type + '"');
                        continue;
                }
                h.uuid = g.uuid;
                void 0 !== g.name && (h.name = g.name);
                !0 === h.isBufferGeometry && void 0 !== g.userData && (h.userData = g.userData);
                c[g.uuid] = h;
            }
            return c;
        },
        parseMaterials: function(a, b) {
            var c = {}, d = {};
            if (void 0 !== a) {
                var e = new Vd;
                e.setTextures(b);
                b = 0;
                for(var f = a.length; b < f; b++){
                    var g = a[b];
                    if ("MultiMaterial" === g.type) {
                        for(var h = [], l = 0; l < g.materials.length; l++){
                            var k = g.materials[l];
                            void 0 === c[k.uuid] && (c[k.uuid] = e.parse(k));
                            h.push(c[k.uuid]);
                        }
                        d[g.uuid] = h;
                    } else void 0 === c[g.uuid] && (c[g.uuid] = e.parse(g)), d[g.uuid] = c[g.uuid];
                }
            }
            return d;
        },
        parseAnimations: function(a) {
            for(var b = [], c = 0; c < a.length; c++){
                var d = a[c], e = Fa.parse(d);
                void 0 !== d.uuid && (e.uuid = d.uuid);
                b.push(e);
            }
            return b;
        },
        parseImages: function(a, b) {
            function c(a) {
                d.manager.itemStart(a);
                return f.load(a, function() {
                    d.manager.itemEnd(a);
                }, void 0, function() {
                    d.manager.itemError(a);
                    d.manager.itemEnd(a);
                });
            }
            var d = this, e = {};
            if (void 0 !== a && 0 < a.length) {
                b = new oe(b);
                var f = new ld(b);
                f.setCrossOrigin(this.crossOrigin);
                b = 0;
                for(var g = a.length; b < g; b++){
                    var h = a[b], l = h.url;
                    if (Array.isArray(l)) {
                        e[h.uuid] = [];
                        for(var k = 0, n = l.length; k < n; k++){
                            var p = l[k];
                            p = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(p) ? p : d.resourcePath + p;
                            e[h.uuid].push(c(p));
                        }
                    } else p = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url) ? h.url : d.resourcePath + h.url, e[h.uuid] = c(p);
                }
            }
            return e;
        },
        parseTextures: function(a, b) {
            function c(a, b) {
                if ("number" === typeof a) return a;
                console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", a);
                return b[a];
            }
            var d = {};
            if (void 0 !== a) for(var e = 0, f = a.length; e < f; e++){
                var g = a[e];
                void 0 === g.image && console.warn('THREE.ObjectLoader: No "image" specified for', g.uuid);
                void 0 === b[g.image] && console.warn("THREE.ObjectLoader: Undefined image", g.image);
                var h = Array.isArray(b[g.image]) ? new cb(b[g.image]) : new Y(b[g.image]);
                h.needsUpdate = !0;
                h.uuid = g.uuid;
                void 0 !== g.name && (h.name = g.name);
                void 0 !== g.mapping && (h.mapping = c(g.mapping, rh));
                void 0 !== g.offset && h.offset.fromArray(g.offset);
                void 0 !== g.repeat && h.repeat.fromArray(g.repeat);
                void 0 !== g.center && h.center.fromArray(g.center);
                void 0 !== g.rotation && (h.rotation = g.rotation);
                void 0 !== g.wrap && (h.wrapS = c(g.wrap[0], Wf), h.wrapT = c(g.wrap[1], Wf));
                void 0 !== g.format && (h.format = g.format);
                void 0 !== g.type && (h.type = g.type);
                void 0 !== g.encoding && (h.encoding = g.encoding);
                void 0 !== g.minFilter && (h.minFilter = c(g.minFilter, Xf));
                void 0 !== g.magFilter && (h.magFilter = c(g.magFilter, Xf));
                void 0 !== g.anisotropy && (h.anisotropy = g.anisotropy);
                void 0 !== g.flipY && (h.flipY = g.flipY);
                void 0 !== g.premultiplyAlpha && (h.premultiplyAlpha = g.premultiplyAlpha);
                void 0 !== g.unpackAlignment && (h.unpackAlignment = g.unpackAlignment);
                d[g.uuid] = h;
            }
            return d;
        },
        parseObject: function(a, b, c) {
            function d(a) {
                void 0 === b[a] && console.warn("THREE.ObjectLoader: Undefined geometry", a);
                return b[a];
            }
            function e(a) {
                if (void 0 !== a) {
                    if (Array.isArray(a)) {
                        for(var b = [], d = 0, e = a.length; d < e; d++){
                            var f = a[d];
                            void 0 === c[f] && console.warn("THREE.ObjectLoader: Undefined material", f);
                            b.push(c[f]);
                        }
                        return b;
                    }
                    void 0 === c[a] && console.warn("THREE.ObjectLoader: Undefined material", a);
                    return c[a];
                }
            }
            switch(a.type){
                case "Scene":
                    var f = new Cd;
                    void 0 !== a.background && Number.isInteger(a.background) && (f.background = new A(a.background));
                    void 0 !== a.fog && ("Fog" === a.fog.type ? f.fog = new Bd(a.fog.color, a.fog.near, a.fog.far) : "FogExp2" === a.fog.type && (f.fog = new Ad(a.fog.color, a.fog.density)));
                    break;
                case "PerspectiveCamera":
                    f = new ca(a.fov, a.aspect, a.near, a.far);
                    void 0 !== a.focus && (f.focus = a.focus);
                    void 0 !== a.zoom && (f.zoom = a.zoom);
                    void 0 !== a.filmGauge && (f.filmGauge = a.filmGauge);
                    void 0 !== a.filmOffset && (f.filmOffset = a.filmOffset);
                    void 0 !== a.view && (f.view = Object.assign({}, a.view));
                    break;
                case "OrthographicCamera":
                    f = new od(a.left, a.right, a.top, a.bottom, a.near, a.far);
                    void 0 !== a.zoom && (f.zoom = a.zoom);
                    void 0 !== a.view && (f.view = Object.assign({}, a.view));
                    break;
                case "AmbientLight":
                    f = new Td(a.color, a.intensity);
                    break;
                case "DirectionalLight":
                    f = new Sd(a.color, a.intensity);
                    break;
                case "PointLight":
                    f = new Qd(a.color, a.intensity, a.distance, a.decay);
                    break;
                case "RectAreaLight":
                    f = new Ud(a.color, a.intensity, a.width, a.height);
                    break;
                case "SpotLight":
                    f = new Pd(a.color, a.intensity, a.distance, a.angle, a.penumbra, a.decay);
                    break;
                case "HemisphereLight":
                    f = new Nd(a.color, a.groundColor, a.intensity);
                    break;
                case "SkinnedMesh":
                    console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
                case "Mesh":
                    f = d(a.geometry);
                    var g = e(a.material);
                    f = f.bones && 0 < f.bones.length ? new Nc(f, g) : new qa(f, g);
                    void 0 !== a.drawMode && f.setDrawMode(a.drawMode);
                    break;
                case "LOD":
                    f = new Mc;
                    break;
                case "Line":
                    f = new ka(d(a.geometry), e(a.material), a.mode);
                    break;
                case "LineLoop":
                    f = new Ed(d(a.geometry), e(a.material));
                    break;
                case "LineSegments":
                    f = new V(d(a.geometry), e(a.material));
                    break;
                case "PointCloud":
                case "Points":
                    f = new Zb(d(a.geometry), e(a.material));
                    break;
                case "Sprite":
                    f = new Lc(e(a.material));
                    break;
                case "Group":
                    f = new Xb;
                    break;
                default:
                    f = new D;
            }
            f.uuid = a.uuid;
            void 0 !== a.name && (f.name = a.name);
            void 0 !== a.matrix ? (f.matrix.fromArray(a.matrix), void 0 !== a.matrixAutoUpdate && (f.matrixAutoUpdate = a.matrixAutoUpdate), f.matrixAutoUpdate && f.matrix.decompose(f.position, f.quaternion, f.scale)) : (void 0 !== a.position && f.position.fromArray(a.position), void 0 !== a.rotation && f.rotation.fromArray(a.rotation), void 0 !== a.quaternion && f.quaternion.fromArray(a.quaternion), void 0 !== a.scale && f.scale.fromArray(a.scale));
            void 0 !== a.castShadow && (f.castShadow = a.castShadow);
            void 0 !== a.receiveShadow && (f.receiveShadow = a.receiveShadow);
            a.shadow && (void 0 !== a.shadow.bias && (f.shadow.bias = a.shadow.bias), void 0 !== a.shadow.radius && (f.shadow.radius = a.shadow.radius), void 0 !== a.shadow.mapSize && f.shadow.mapSize.fromArray(a.shadow.mapSize), void 0 !== a.shadow.camera && (f.shadow.camera = this.parseObject(a.shadow.camera)));
            void 0 !== a.visible && (f.visible = a.visible);
            void 0 !== a.frustumCulled && (f.frustumCulled = a.frustumCulled);
            void 0 !== a.renderOrder && (f.renderOrder = a.renderOrder);
            void 0 !== a.userData && (f.userData = a.userData);
            void 0 !== a.layers && (f.layers.mask = a.layers);
            if (void 0 !== a.children) {
                g = a.children;
                for(var h = 0; h < g.length; h++)f.add(this.parseObject(g[h], b, c));
            }
            if ("LOD" === a.type) for(a = a.levels, g = 0; g < a.length; g++){
                h = a[g];
                var l = f.getObjectByProperty("uuid", h.object);
                void 0 !== l && f.addLevel(l, h.distance);
            }
            return f;
        }
    });
    var rh = {
        UVMapping: 300,
        CubeReflectionMapping: 301,
        CubeRefractionMapping: 302,
        EquirectangularReflectionMapping: 303,
        EquirectangularRefractionMapping: 304,
        SphericalReflectionMapping: 305,
        CubeUVReflectionMapping: 306,
        CubeUVRefractionMapping: 307
    }, Wf = {
        RepeatWrapping: 1E3,
        ClampToEdgeWrapping: 1001,
        MirroredRepeatWrapping: 1002
    }, Xf = {
        NearestFilter: 1003,
        NearestMipMapNearestFilter: 1004,
        NearestMipMapLinearFilter: 1005,
        LinearFilter: 1006,
        LinearMipMapNearestFilter: 1007,
        LinearMipMapLinearFilter: 1008
    };
    ue.prototype = {
        constructor: ue,
        setOptions: function(a) {
            this.options = a;
            return this;
        },
        load: function(a, b, c, d) {
            void 0 === a && (a = "");
            void 0 !== this.path && (a = this.path + a);
            a = this.manager.resolveURL(a);
            var e = this, f = Qb.get(a);
            if (void 0 !== f) return e.manager.itemStart(a), setTimeout(function() {
                b && b(f);
                e.manager.itemEnd(a);
            }, 0), f;
            fetch(a).then(function(a) {
                return a.blob();
            }).then(function(a) {
                return void 0 === e.options ? createImageBitmap(a) : createImageBitmap(a, e.options);
            }).then(function(c) {
                Qb.add(a, c);
                b && b(c);
                e.manager.itemEnd(a);
            }).catch(function(b) {
                d && d(b);
                e.manager.itemError(a);
                e.manager.itemEnd(a);
            });
            e.manager.itemStart(a);
        },
        setCrossOrigin: function() {
            return this;
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    };
    Object.assign(ve.prototype, {
        moveTo: function(a, b) {
            this.currentPath = new Pa;
            this.subPaths.push(this.currentPath);
            this.currentPath.moveTo(a, b);
        },
        lineTo: function(a, b) {
            this.currentPath.lineTo(a, b);
        },
        quadraticCurveTo: function(a, b, c, d) {
            this.currentPath.quadraticCurveTo(a, b, c, d);
        },
        bezierCurveTo: function(a, b, c, d, e, f) {
            this.currentPath.bezierCurveTo(a, b, c, d, e, f);
        },
        splineThru: function(a) {
            this.currentPath.splineThru(a);
        },
        toShapes: function(a, b) {
            function c(a) {
                for(var b = [], c = 0, d = a.length; c < d; c++){
                    var e = a[c], f = new pb;
                    f.curves = e.curves;
                    b.push(f);
                }
                return b;
            }
            function d(a, b) {
                for(var c = b.length, d = !1, e = c - 1, f = 0; f < c; e = f++){
                    var g = b[e], h = b[f], l = h.x - g.x, k = h.y - g.y;
                    if (Math.abs(k) > Number.EPSILON) {
                        if (0 > k && (g = b[f], l = -l, h = b[e], k = -k), !(a.y < g.y || a.y > h.y)) if (a.y === g.y) {
                            if (a.x === g.x) return !0;
                        } else {
                            e = k * (a.x - g.x) - l * (a.y - g.y);
                            if (0 === e) return !0;
                            0 > e || (d = !d);
                        }
                    } else if (a.y === g.y && (h.x <= a.x && a.x <= g.x || g.x <= a.x && a.x <= h.x)) return !0;
                }
                return d;
            }
            var e = db.isClockWise, f = this.subPaths;
            if (0 === f.length) return [];
            if (!0 === b) return c(f);
            b = [];
            if (1 === f.length) {
                var g = f[0];
                var h = new pb;
                h.curves = g.curves;
                b.push(h);
                return b;
            }
            var l = !e(f[0].getPoints());
            l = a ? !l : l;
            h = [];
            var k = [], n = [], p = 0;
            k[p] = void 0;
            n[p] = [];
            for(var v = 0, t = f.length; v < t; v++){
                g = f[v];
                var r = g.getPoints();
                var u = e(r);
                (u = a ? !u : u) ? (!l && k[p] && p++, k[p] = {
                    s: new pb,
                    p: r
                }, k[p].s.curves = g.curves, l && p++, n[p] = []) : n[p].push({
                    h: g,
                    p: r[0]
                });
            }
            if (!k[0]) return c(f);
            if (1 < k.length) {
                v = !1;
                a = [];
                e = 0;
                for(f = k.length; e < f; e++)h[e] = [];
                e = 0;
                for(f = k.length; e < f; e++)for(g = n[e], u = 0; u < g.length; u++){
                    l = g[u];
                    p = !0;
                    for(r = 0; r < k.length; r++)d(l.p, k[r].p) && (e !== r && a.push({
                        froms: e,
                        tos: r,
                        hole: u
                    }), p ? (p = !1, h[r].push(l)) : v = !0);
                    p && h[e].push(l);
                }
                0 < a.length && (v || (n = h));
            }
            v = 0;
            for(e = k.length; v < e; v++)for(h = k[v].s, b.push(h), a = n[v], f = 0, g = a.length; f < g; f++)h.holes.push(a[f].h);
            return b;
        }
    });
    Object.assign(we.prototype, {
        isFont: !0,
        generateShapes: function(a, b) {
            void 0 === b && (b = 100);
            var c = [], d = b;
            b = this.data;
            var e = Array.from ? Array.from(a) : String(a).split("");
            d /= b.resolution;
            var f = (b.boundingBox.yMax - b.boundingBox.yMin + b.underlineThickness) * d;
            a = [];
            for(var g = 0, h = 0, l = 0; l < e.length; l++){
                var k = e[l];
                if ("\n" === k) g = 0, h -= f;
                else {
                    var n = d;
                    var p = g, v = h;
                    if (k = b.glyphs[k] || b.glyphs["?"]) {
                        var t = new ve;
                        if (k.o) for(var r = k._cachedOutline || (k._cachedOutline = k.o.split(" ")), u = 0, w = r.length; u < w;)switch(r[u++]){
                            case "m":
                                var z = r[u++] * n + p;
                                var x = r[u++] * n + v;
                                t.moveTo(z, x);
                                break;
                            case "l":
                                z = r[u++] * n + p;
                                x = r[u++] * n + v;
                                t.lineTo(z, x);
                                break;
                            case "q":
                                var y = r[u++] * n + p;
                                var A = r[u++] * n + v;
                                var B = r[u++] * n + p;
                                var C = r[u++] * n + v;
                                t.quadraticCurveTo(B, C, y, A);
                                break;
                            case "b":
                                y = r[u++] * n + p, A = r[u++] * n + v, B = r[u++] * n + p, C = r[u++] * n + v, z = r[u++] * n + p, x = r[u++] * n + v, t.bezierCurveTo(B, C, z, x, y, A);
                        }
                        n = {
                            offsetX: k.ha * n,
                            path: t
                        };
                    } else n = void 0;
                    g += n.offsetX;
                    a.push(n.path);
                }
            }
            b = 0;
            for(e = a.length; b < e; b++)Array.prototype.push.apply(c, a[b].toShapes());
            return c;
        }
    });
    Object.assign(Kf.prototype, {
        load: function(a, b, c, d) {
            var e = this, f = new Ka(this.manager);
            f.setPath(this.path);
            f.load(a, function(a) {
                try {
                    var c = JSON.parse(a);
                } catch (l) {
                    console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), c = JSON.parse(a.substring(65, a.length - 2));
                }
                a = e.parse(c);
                b && b(a);
            }, c, d);
        },
        parse: function(a) {
            return new we(a);
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    pd.Handlers = {
        handlers: [],
        add: function(a, b) {
            this.handlers.push(a, b);
        },
        get: function(a) {
            for(var b = this.handlers, c = 0, d = b.length; c < d; c += 2){
                var e = b[c + 1];
                if (b[c].test(a)) return e;
            }
            return null;
        }
    };
    Object.assign(pd.prototype, {
        crossOrigin: "anonymous",
        onLoadStart: function() {},
        onLoadProgress: function() {},
        onLoadComplete: function() {},
        initMaterials: function(a, b, c) {
            for(var d = [], e = 0; e < a.length; ++e)d[e] = this.createMaterial(a[e], b, c);
            return d;
        },
        createMaterial: function() {
            var a = {
                NoBlending: 0,
                NormalBlending: 1,
                AdditiveBlending: 2,
                SubtractiveBlending: 3,
                MultiplyBlending: 4,
                CustomBlending: 5
            }, b = new A, c = new Md, d = new Vd;
            return function(e, f, g) {
                function h(a, b, d, e, h) {
                    a = f + a;
                    var k = pd.Handlers.get(a);
                    null !== k ? a = k.load(a) : (c.setCrossOrigin(g), a = c.load(a));
                    void 0 !== b && (a.repeat.fromArray(b), 1 !== b[0] && (a.wrapS = 1E3), 1 !== b[1] && (a.wrapT = 1E3));
                    void 0 !== d && a.offset.fromArray(d);
                    void 0 !== e && ("repeat" === e[0] && (a.wrapS = 1E3), "mirror" === e[0] && (a.wrapS = 1002), "repeat" === e[1] && (a.wrapT = 1E3), "mirror" === e[1] && (a.wrapT = 1002));
                    void 0 !== h && (a.anisotropy = h);
                    b = O.generateUUID();
                    l[b] = a;
                    return b;
                }
                var l = {}, k = {
                    uuid: O.generateUUID(),
                    type: "MeshLambertMaterial"
                }, n;
                for(n in e){
                    var p = e[n];
                    switch(n){
                        case "DbgColor":
                        case "DbgIndex":
                        case "opticalDensity":
                        case "illumination":
                            break;
                        case "DbgName":
                            k.name = p;
                            break;
                        case "blending":
                            k.blending = a[p];
                            break;
                        case "colorAmbient":
                        case "mapAmbient":
                            console.warn("THREE.Loader.createMaterial:", n, "is no longer supported.");
                            break;
                        case "colorDiffuse":
                            k.color = b.fromArray(p).getHex();
                            break;
                        case "colorSpecular":
                            k.specular = b.fromArray(p).getHex();
                            break;
                        case "colorEmissive":
                            k.emissive = b.fromArray(p).getHex();
                            break;
                        case "specularCoef":
                            k.shininess = p;
                            break;
                        case "shading":
                            "basic" === p.toLowerCase() && (k.type = "MeshBasicMaterial");
                            "phong" === p.toLowerCase() && (k.type = "MeshPhongMaterial");
                            "standard" === p.toLowerCase() && (k.type = "MeshStandardMaterial");
                            break;
                        case "mapDiffuse":
                            k.map = h(p, e.mapDiffuseRepeat, e.mapDiffuseOffset, e.mapDiffuseWrap, e.mapDiffuseAnisotropy);
                            break;
                        case "mapDiffuseRepeat":
                        case "mapDiffuseOffset":
                        case "mapDiffuseWrap":
                        case "mapDiffuseAnisotropy":
                            break;
                        case "mapEmissive":
                            k.emissiveMap = h(p, e.mapEmissiveRepeat, e.mapEmissiveOffset, e.mapEmissiveWrap, e.mapEmissiveAnisotropy);
                            break;
                        case "mapEmissiveRepeat":
                        case "mapEmissiveOffset":
                        case "mapEmissiveWrap":
                        case "mapEmissiveAnisotropy":
                            break;
                        case "mapLight":
                            k.lightMap = h(p, e.mapLightRepeat, e.mapLightOffset, e.mapLightWrap, e.mapLightAnisotropy);
                            break;
                        case "mapLightRepeat":
                        case "mapLightOffset":
                        case "mapLightWrap":
                        case "mapLightAnisotropy":
                            break;
                        case "mapAO":
                            k.aoMap = h(p, e.mapAORepeat, e.mapAOOffset, e.mapAOWrap, e.mapAOAnisotropy);
                            break;
                        case "mapAORepeat":
                        case "mapAOOffset":
                        case "mapAOWrap":
                        case "mapAOAnisotropy":
                            break;
                        case "mapBump":
                            k.bumpMap = h(p, e.mapBumpRepeat, e.mapBumpOffset, e.mapBumpWrap, e.mapBumpAnisotropy);
                            break;
                        case "mapBumpScale":
                            k.bumpScale = p;
                            break;
                        case "mapBumpRepeat":
                        case "mapBumpOffset":
                        case "mapBumpWrap":
                        case "mapBumpAnisotropy":
                            break;
                        case "mapNormal":
                            k.normalMap = h(p, e.mapNormalRepeat, e.mapNormalOffset, e.mapNormalWrap, e.mapNormalAnisotropy);
                            break;
                        case "mapNormalFactor":
                            k.normalScale = p;
                            break;
                        case "mapNormalRepeat":
                        case "mapNormalOffset":
                        case "mapNormalWrap":
                        case "mapNormalAnisotropy":
                            break;
                        case "mapSpecular":
                            k.specularMap = h(p, e.mapSpecularRepeat, e.mapSpecularOffset, e.mapSpecularWrap, e.mapSpecularAnisotropy);
                            break;
                        case "mapSpecularRepeat":
                        case "mapSpecularOffset":
                        case "mapSpecularWrap":
                        case "mapSpecularAnisotropy":
                            break;
                        case "mapMetalness":
                            k.metalnessMap = h(p, e.mapMetalnessRepeat, e.mapMetalnessOffset, e.mapMetalnessWrap, e.mapMetalnessAnisotropy);
                            break;
                        case "mapMetalnessRepeat":
                        case "mapMetalnessOffset":
                        case "mapMetalnessWrap":
                        case "mapMetalnessAnisotropy":
                            break;
                        case "mapRoughness":
                            k.roughnessMap = h(p, e.mapRoughnessRepeat, e.mapRoughnessOffset, e.mapRoughnessWrap, e.mapRoughnessAnisotropy);
                            break;
                        case "mapRoughnessRepeat":
                        case "mapRoughnessOffset":
                        case "mapRoughnessWrap":
                        case "mapRoughnessAnisotropy":
                            break;
                        case "mapAlpha":
                            k.alphaMap = h(p, e.mapAlphaRepeat, e.mapAlphaOffset, e.mapAlphaWrap, e.mapAlphaAnisotropy);
                            break;
                        case "mapAlphaRepeat":
                        case "mapAlphaOffset":
                        case "mapAlphaWrap":
                        case "mapAlphaAnisotropy":
                            break;
                        case "flipSided":
                            k.side = 1;
                            break;
                        case "doubleSided":
                            k.side = 2;
                            break;
                        case "transparency":
                            console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");
                            k.opacity = p;
                            break;
                        case "depthTest":
                        case "depthWrite":
                        case "colorWrite":
                        case "opacity":
                        case "reflectivity":
                        case "transparent":
                        case "visible":
                        case "wireframe":
                            k[n] = p;
                            break;
                        case "vertexColors":
                            !0 === p && (k.vertexColors = 2);
                            "face" === p && (k.vertexColors = 1);
                            break;
                        default:
                            console.error("THREE.Loader.createMaterial: Unsupported", n, p);
                    }
                }
                "MeshBasicMaterial" === k.type && delete k.emissive;
                "MeshPhongMaterial" !== k.type && delete k.specular;
                1 > k.opacity && (k.transparent = !0);
                d.setTextures(l);
                return d.parse(k);
            };
        }()
    });
    var be, Ce = {
        getContext: function() {
            void 0 === be && (be = new (window.AudioContext || window.webkitAudioContext));
            return be;
        },
        setContext: function(a) {
            be = a;
        }
    };
    Object.assign(xe.prototype, {
        load: function(a, b, c, d) {
            var e = new Ka(this.manager);
            e.setResponseType("arraybuffer");
            e.setPath(this.path);
            e.load(a, function(a) {
                a = a.slice(0);
                Ce.getContext().decodeAudioData(a, function(a) {
                    b(a);
                });
            }, c, d);
        },
        setPath: function(a) {
            this.path = a;
            return this;
        }
    });
    Object.assign(Wd.prototype, {
        isSphericalHarmonics3: !0,
        set: function(a) {
            for(var b = 0; 9 > b; b++)this.coefficients[b].copy(a[b]);
            return this;
        },
        zero: function() {
            for(var a = 0; 9 > a; a++)this.coefficients[a].set(0, 0, 0);
            return this;
        },
        getAt: function(a, b) {
            var c = a.x, d = a.y;
            a = a.z;
            var e = this.coefficients;
            b = .282095 * e[0];
            b += .488603 * e[1] * d;
            b += .488603 * e[2] * a;
            b += .488603 * e[3] * c;
            b += 1.092548 * e[4] * c * d;
            b += 1.092548 * e[5] * d * a;
            b += .315392 * e[6] * (3 * a * a - 1);
            b += 1.092548 * e[7] * c * a;
            return b += .546274 * e[8] * (c * c - d * d);
        },
        getIrradianceAt: function(a, b) {
            var c = a.x, d = a.y;
            a = a.z;
            var e = this.coefficients;
            b = .886227 * e[0];
            b += 1.023328 * e[1] * d;
            b += 1.023328 * e[2] * a;
            b += 1.023328 * e[3] * c;
            b += .858086 * e[4] * c * d;
            b += .858086 * e[5] * d * a;
            b += e[6] * (.743125 * a * a - .247708);
            b += .858086 * e[7] * c * a;
            return b += .429043 * e[8] * (c * c - d * d);
        },
        add: function(a) {
            for(var b = 0; 9 > b; b++)this.coefficients[b].add(a.coefficients[b]);
            return this;
        },
        scale: function(a) {
            for(var b = 0; 9 > b; b++)this.coefficients[b].multiplyScalar(a);
            return this;
        },
        lerp: function(a, b) {
            for(var c = 0; 9 > c; c++)this.coefficients[c].lerp(a.coefficients[c], b);
            return this;
        },
        equals: function(a) {
            for(var b = 0; 9 > b; b++)if (!this.coefficients[b].equals(a.coefficients[b])) return !1;
            return !0;
        },
        copy: function(a) {
            return this.set(a.coefficients);
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        fromArray: function(a) {
            for(var b = this.coefficients, c = 0; 9 > c; c++)b[c].fromArray(a, 3 * c);
            return this;
        },
        toArray: function() {
            for(var a = [], b = this.coefficients, c = 0; 9 > c; c++)b[c].toArray(a, 3 * c);
            return a;
        }
    });
    Object.assign(Wd, {
        getBasisAt: function(a, b) {
            var c = a.x, d = a.y;
            a = a.z;
            b[0] = .282095;
            b[1] = .488603 * d;
            b[2] = .488603 * a;
            b[3] = .488603 * c;
            b[4] = 1.092548 * c * d;
            b[5] = 1.092548 * d * a;
            b[6] = .315392 * (3 * a * a - 1);
            b[7] = 1.092548 * c * a;
            b[8] = .546274 * (c * c - d * d);
        }
    });
    Qa.prototype = Object.assign(Object.create(T.prototype), {
        constructor: Qa,
        isLightProbe: !0,
        copy: function(a) {
            T.prototype.copy.call(this, a);
            this.sh.copy(a.sh);
            this.intensity = a.intensity;
            return this;
        },
        toJSON: function(a) {
            return T.prototype.toJSON.call(this, a);
        }
    });
    ye.prototype = Object.assign(Object.create(Qa.prototype), {
        constructor: ye,
        isHemisphereLightProbe: !0,
        copy: function(a) {
            Qa.prototype.copy.call(this, a);
            return this;
        },
        toJSON: function(a) {
            return Qa.prototype.toJSON.call(this, a);
        }
    });
    ze.prototype = Object.assign(Object.create(Qa.prototype), {
        constructor: ze,
        isAmbientLightProbe: !0,
        copy: function(a) {
            Qa.prototype.copy.call(this, a);
            return this;
        },
        toJSON: function(a) {
            return Qa.prototype.toJSON.call(this, a);
        }
    });
    Object.assign(Lf.prototype, {
        update: function() {
            var a, b, c, d, e, f, g, h, l = new P, k = new P;
            return function(m) {
                if (a !== this || b !== m.focus || c !== m.fov || d !== m.aspect * this.aspect || e !== m.near || f !== m.far || g !== m.zoom || h !== this.eyeSep) {
                    a = this;
                    b = m.focus;
                    c = m.fov;
                    d = m.aspect * this.aspect;
                    e = m.near;
                    f = m.far;
                    g = m.zoom;
                    var n = m.projectionMatrix.clone();
                    h = this.eyeSep / 2;
                    var q = h * e / b, t = e * Math.tan(O.DEG2RAD * c * .5) / g;
                    k.elements[12] = -h;
                    l.elements[12] = h;
                    var r = -t * d + q;
                    var u = t * d + q;
                    n.elements[0] = 2 * e / (u - r);
                    n.elements[8] = (u + r) / (u - r);
                    this.cameraL.projectionMatrix.copy(n);
                    r = -t * d - q;
                    u = t * d - q;
                    n.elements[0] = 2 * e / (u - r);
                    n.elements[8] = (u + r) / (u - r);
                    this.cameraR.projectionMatrix.copy(n);
                }
                this.cameraL.matrixWorld.copy(m.matrixWorld).multiply(k);
                this.cameraR.matrixWorld.copy(m.matrixWorld).multiply(l);
            };
        }()
    });
    qd.prototype = Object.create(D.prototype);
    qd.prototype.constructor = qd;
    Object.assign(Ae.prototype, {
        start: function() {
            this.oldTime = this.startTime = ("undefined" === typeof performance ? Date : performance).now();
            this.elapsedTime = 0;
            this.running = !0;
        },
        stop: function() {
            this.getElapsedTime();
            this.autoStart = this.running = !1;
        },
        getElapsedTime: function() {
            this.getDelta();
            return this.elapsedTime;
        },
        getDelta: function() {
            var a = 0;
            if (this.autoStart && !this.running) return this.start(), 0;
            if (this.running) {
                var b = ("undefined" === typeof performance ? Date : performance).now();
                a = (b - this.oldTime) / 1E3;
                this.oldTime = b;
                this.elapsedTime += a;
            }
            return a;
        }
    });
    Be.prototype = Object.assign(Object.create(D.prototype), {
        constructor: Be,
        getInput: function() {
            return this.gain;
        },
        removeFilter: function() {
            null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
            return this;
        },
        getFilter: function() {
            return this.filter;
        },
        setFilter: function(a) {
            null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination);
            this.filter = a;
            this.gain.connect(this.filter);
            this.filter.connect(this.context.destination);
            return this;
        },
        getMasterVolume: function() {
            return this.gain.gain.value;
        },
        setMasterVolume: function(a) {
            this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
            return this;
        },
        updateMatrixWorld: function() {
            var a = new n, b = new ma, c = new n, d = new n, e = new Ae;
            return function(f) {
                D.prototype.updateMatrixWorld.call(this, f);
                f = this.context.listener;
                var g = this.up;
                this.timeDelta = e.getDelta();
                this.matrixWorld.decompose(a, b, c);
                d.set(0, 0, -1).applyQuaternion(b);
                if (f.positionX) {
                    var h = this.context.currentTime + this.timeDelta;
                    f.positionX.linearRampToValueAtTime(a.x, h);
                    f.positionY.linearRampToValueAtTime(a.y, h);
                    f.positionZ.linearRampToValueAtTime(a.z, h);
                    f.forwardX.linearRampToValueAtTime(d.x, h);
                    f.forwardY.linearRampToValueAtTime(d.y, h);
                    f.forwardZ.linearRampToValueAtTime(d.z, h);
                    f.upX.linearRampToValueAtTime(g.x, h);
                    f.upY.linearRampToValueAtTime(g.y, h);
                    f.upZ.linearRampToValueAtTime(g.z, h);
                } else f.setPosition(a.x, a.y, a.z), f.setOrientation(d.x, d.y, d.z, g.x, g.y, g.z);
            };
        }()
    });
    qc.prototype = Object.assign(Object.create(D.prototype), {
        constructor: qc,
        getOutput: function() {
            return this.gain;
        },
        setNodeSource: function(a) {
            this.hasPlaybackControl = !1;
            this.sourceType = "audioNode";
            this.source = a;
            this.connect();
            return this;
        },
        setMediaElementSource: function(a) {
            this.hasPlaybackControl = !1;
            this.sourceType = "mediaNode";
            this.source = this.context.createMediaElementSource(a);
            this.connect();
            return this;
        },
        setBuffer: function(a) {
            this.buffer = a;
            this.sourceType = "buffer";
            this.autoplay && this.play();
            return this;
        },
        play: function() {
            if (!0 === this.isPlaying) console.warn("THREE.Audio: Audio is already playing.");
            else if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");
            else {
                var a = this.context.createBufferSource();
                a.buffer = this.buffer;
                a.loop = this.loop;
                a.onended = this.onEnded.bind(this);
                this.startTime = this.context.currentTime;
                a.start(this.startTime, this.offset);
                this.isPlaying = !0;
                this.source = a;
                this.setDetune(this.detune);
                this.setPlaybackRate(this.playbackRate);
                return this.connect();
            }
        },
        pause: function() {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");
            else return !0 === this.isPlaying && (this.source.stop(), this.source.onended = null, this.offset += (this.context.currentTime - this.startTime) * this.playbackRate, this.isPlaying = !1), this;
        },
        stop: function() {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");
            else return this.source.stop(), this.source.onended = null, this.offset = 0, this.isPlaying = !1, this;
        },
        connect: function() {
            if (0 < this.filters.length) {
                this.source.connect(this.filters[0]);
                for(var a = 1, b = this.filters.length; a < b; a++)this.filters[a - 1].connect(this.filters[a]);
                this.filters[this.filters.length - 1].connect(this.getOutput());
            } else this.source.connect(this.getOutput());
            return this;
        },
        disconnect: function() {
            if (0 < this.filters.length) {
                this.source.disconnect(this.filters[0]);
                for(var a = 1, b = this.filters.length; a < b; a++)this.filters[a - 1].disconnect(this.filters[a]);
                this.filters[this.filters.length - 1].disconnect(this.getOutput());
            } else this.source.disconnect(this.getOutput());
            return this;
        },
        getFilters: function() {
            return this.filters;
        },
        setFilters: function(a) {
            a || (a = []);
            !0 === this.isPlaying ? (this.disconnect(), this.filters = a, this.connect()) : this.filters = a;
            return this;
        },
        setDetune: function(a) {
            this.detune = a;
            if (void 0 !== this.source.detune) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this;
        },
        getDetune: function() {
            return this.detune;
        },
        getFilter: function() {
            return this.getFilters()[0];
        },
        setFilter: function(a) {
            return this.setFilters(a ? [
                a
            ] : []);
        },
        setPlaybackRate: function(a) {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");
            else return this.playbackRate = a, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this;
        },
        getPlaybackRate: function() {
            return this.playbackRate;
        },
        onEnded: function() {
            this.isPlaying = !1;
        },
        getLoop: function() {
            return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
        },
        setLoop: function(a) {
            if (!1 === this.hasPlaybackControl) console.warn("THREE.Audio: this Audio has no playback control.");
            else return this.loop = a, !0 === this.isPlaying && (this.source.loop = this.loop), this;
        },
        getVolume: function() {
            return this.gain.gain.value;
        },
        setVolume: function(a) {
            this.gain.gain.setTargetAtTime(a, this.context.currentTime, .01);
            return this;
        }
    });
    De.prototype = Object.assign(Object.create(qc.prototype), {
        constructor: De,
        getOutput: function() {
            return this.panner;
        },
        getRefDistance: function() {
            return this.panner.refDistance;
        },
        setRefDistance: function(a) {
            this.panner.refDistance = a;
            return this;
        },
        getRolloffFactor: function() {
            return this.panner.rolloffFactor;
        },
        setRolloffFactor: function(a) {
            this.panner.rolloffFactor = a;
            return this;
        },
        getDistanceModel: function() {
            return this.panner.distanceModel;
        },
        setDistanceModel: function(a) {
            this.panner.distanceModel = a;
            return this;
        },
        getMaxDistance: function() {
            return this.panner.maxDistance;
        },
        setMaxDistance: function(a) {
            this.panner.maxDistance = a;
            return this;
        },
        setDirectionalCone: function(a, b, c) {
            this.panner.coneInnerAngle = a;
            this.panner.coneOuterAngle = b;
            this.panner.coneOuterGain = c;
            return this;
        },
        updateMatrixWorld: function() {
            var a = new n, b = new ma, c = new n, d = new n;
            return function(e) {
                D.prototype.updateMatrixWorld.call(this, e);
                if (!0 !== this.hasPlaybackControl || !1 !== this.isPlaying) if (this.matrixWorld.decompose(a, b, c), d.set(0, 0, 1).applyQuaternion(b), e = this.panner, e.positionX) {
                    var f = this.context.currentTime + this.listener.timeDelta;
                    e.positionX.linearRampToValueAtTime(a.x, f);
                    e.positionY.linearRampToValueAtTime(a.y, f);
                    e.positionZ.linearRampToValueAtTime(a.z, f);
                    e.orientationX.linearRampToValueAtTime(d.x, f);
                    e.orientationY.linearRampToValueAtTime(d.y, f);
                    e.orientationZ.linearRampToValueAtTime(d.z, f);
                } else e.setPosition(a.x, a.y, a.z), e.setOrientation(d.x, d.y, d.z);
            };
        }()
    });
    Object.assign(Ee.prototype, {
        getFrequencyData: function() {
            this.analyser.getByteFrequencyData(this.data);
            return this.data;
        },
        getAverageFrequency: function() {
            for(var a = 0, b = this.getFrequencyData(), c = 0; c < b.length; c++)a += b[c];
            return a / b.length;
        }
    });
    Object.assign(Fe.prototype, {
        accumulate: function(a, b) {
            var c = this.buffer, d = this.valueSize;
            a = a * d + d;
            var e = this.cumulativeWeight;
            if (0 === e) {
                for(e = 0; e !== d; ++e)c[a + e] = c[e];
                e = b;
            } else e += b, this._mixBufferRegion(c, a, 0, b / e, d);
            this.cumulativeWeight = e;
        },
        apply: function(a) {
            var b = this.valueSize, c = this.buffer;
            a = a * b + b;
            var d = this.cumulativeWeight, e = this.binding;
            this.cumulativeWeight = 0;
            1 > d && this._mixBufferRegion(c, a, 3 * b, 1 - d, b);
            d = b;
            for(var f = b + b; d !== f; ++d)if (c[d] !== c[d + b]) {
                e.setValue(c, a);
                break;
            }
        },
        saveOriginalState: function() {
            var a = this.buffer, b = this.valueSize, c = 3 * b;
            this.binding.getValue(a, c);
            for(var d = b; d !== c; ++d)a[d] = a[c + d % b];
            this.cumulativeWeight = 0;
        },
        restoreOriginalState: function() {
            this.binding.setValue(this.buffer, 3 * this.valueSize);
        },
        _select: function(a, b, c, d, e) {
            if (.5 <= d) for(d = 0; d !== e; ++d)a[b + d] = a[c + d];
        },
        _slerp: function(a, b, c, d) {
            ma.slerpFlat(a, b, a, b, a, c, d);
        },
        _lerp: function(a, b, c, d, e) {
            for(var f = 1 - d, g = 0; g !== e; ++g){
                var h = b + g;
                a[h] = a[h] * f + a[c + g] * d;
            }
        }
    });
    Object.assign(Mf.prototype, {
        getValue: function(a, b) {
            this.bind();
            var c = this._bindings[this._targetGroup.nCachedObjects_];
            void 0 !== c && c.getValue(a, b);
        },
        setValue: function(a, b) {
            for(var c = this._bindings, d = this._targetGroup.nCachedObjects_, e = c.length; d !== e; ++d)c[d].setValue(a, b);
        },
        bind: function() {
            for(var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b)a[b].bind();
        },
        unbind: function() {
            for(var a = this._bindings, b = this._targetGroup.nCachedObjects_, c = a.length; b !== c; ++b)a[b].unbind();
        }
    });
    Object.assign(ia, {
        Composite: Mf,
        create: function(a, b, c) {
            return a && a.isAnimationObjectGroup ? new ia.Composite(a, b, c) : new ia(a, b, c);
        },
        sanitizeNodeName: function() {
            var a = /[\[\]\.:\/]/g;
            return function(b) {
                return b.replace(/\s/g, "_").replace(a, "");
            };
        }(),
        parseTrackName: function() {
            var a = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]", b = /((?:WC+[\/:])*)/.source.replace("WC", "[^\\[\\]\\.:\\/]");
            a = /(WCOD+)?/.source.replace("WCOD", a);
            var c = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), d = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", "[^\\[\\]\\.:\\/]"), e = new RegExp("^" + b + a + c + d + "$"), f = [
                "material",
                "materials",
                "bones"
            ];
            return function(a) {
                var b = e.exec(a);
                if (!b) throw Error("PropertyBinding: Cannot parse trackName: " + a);
                b = {
                    nodeName: b[2],
                    objectName: b[3],
                    objectIndex: b[4],
                    propertyName: b[5],
                    propertyIndex: b[6]
                };
                var c = b.nodeName && b.nodeName.lastIndexOf(".");
                if (void 0 !== c && -1 !== c) {
                    var d = b.nodeName.substring(c + 1);
                    -1 !== f.indexOf(d) && (b.nodeName = b.nodeName.substring(0, c), b.objectName = d);
                }
                if (null === b.propertyName || 0 === b.propertyName.length) throw Error("PropertyBinding: can not parse propertyName from trackName: " + a);
                return b;
            };
        }(),
        findNode: function(a, b) {
            if (!b || "" === b || "root" === b || "." === b || -1 === b || b === a.name || b === a.uuid) return a;
            if (a.skeleton) {
                var c = a.skeleton.getBoneByName(b);
                if (void 0 !== c) return c;
            }
            if (a.children) {
                var d = function(a) {
                    for(var c = 0; c < a.length; c++){
                        var e = a[c];
                        if (e.name === b || e.uuid === b || (e = d(e.children))) return e;
                    }
                    return null;
                };
                if (a = d(a.children)) return a;
            }
            return null;
        }
    });
    Object.assign(ia.prototype, {
        _getValue_unavailable: function() {},
        _setValue_unavailable: function() {},
        BindingType: {
            Direct: 0,
            EntireArray: 1,
            ArrayElement: 2,
            HasFromToArray: 3
        },
        Versioning: {
            None: 0,
            NeedsUpdate: 1,
            MatrixWorldNeedsUpdate: 2
        },
        GetterByBindingType: [
            function(a, b) {
                a[b] = this.node[this.propertyName];
            },
            function(a, b) {
                for(var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d)a[b++] = c[d];
            },
            function(a, b) {
                a[b] = this.resolvedProperty[this.propertyIndex];
            },
            function(a, b) {
                this.resolvedProperty.toArray(a, b);
            }
        ],
        SetterByBindingTypeAndVersioning: [
            [
                function(a, b) {
                    this.targetObject[this.propertyName] = a[b];
                },
                function(a, b) {
                    this.targetObject[this.propertyName] = a[b];
                    this.targetObject.needsUpdate = !0;
                },
                function(a, b) {
                    this.targetObject[this.propertyName] = a[b];
                    this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ],
            [
                function(a, b) {
                    for(var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d)c[d] = a[b++];
                },
                function(a, b) {
                    for(var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d)c[d] = a[b++];
                    this.targetObject.needsUpdate = !0;
                },
                function(a, b) {
                    for(var c = this.resolvedProperty, d = 0, e = c.length; d !== e; ++d)c[d] = a[b++];
                    this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ],
            [
                function(a, b) {
                    this.resolvedProperty[this.propertyIndex] = a[b];
                },
                function(a, b) {
                    this.resolvedProperty[this.propertyIndex] = a[b];
                    this.targetObject.needsUpdate = !0;
                },
                function(a, b) {
                    this.resolvedProperty[this.propertyIndex] = a[b];
                    this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ],
            [
                function(a, b) {
                    this.resolvedProperty.fromArray(a, b);
                },
                function(a, b) {
                    this.resolvedProperty.fromArray(a, b);
                    this.targetObject.needsUpdate = !0;
                },
                function(a, b) {
                    this.resolvedProperty.fromArray(a, b);
                    this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ]
        ],
        getValue: function(a, b) {
            this.bind();
            this.getValue(a, b);
        },
        setValue: function(a, b) {
            this.bind();
            this.setValue(a, b);
        },
        bind: function() {
            var a = this.node, b = this.parsedPath, c = b.objectName, d = b.propertyName, e = b.propertyIndex;
            a || (this.node = a = ia.findNode(this.rootNode, b.nodeName) || this.rootNode);
            this.getValue = this._getValue_unavailable;
            this.setValue = this._setValue_unavailable;
            if (a) {
                if (c) {
                    var f = b.objectIndex;
                    switch(c){
                        case "materials":
                            if (!a.material) {
                                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                                return;
                            }
                            if (!a.material.materials) {
                                console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                                return;
                            }
                            a = a.material.materials;
                            break;
                        case "bones":
                            if (!a.skeleton) {
                                console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                                return;
                            }
                            a = a.skeleton.bones;
                            for(c = 0; c < a.length; c++)if (a[c].name === f) {
                                f = c;
                                break;
                            }
                            break;
                        default:
                            if (void 0 === a[c]) {
                                console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                                return;
                            }
                            a = a[c];
                    }
                    if (void 0 !== f) {
                        if (void 0 === a[f]) {
                            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, a);
                            return;
                        }
                        a = a[f];
                    }
                }
                f = a[d];
                if (void 0 === f) console.error("THREE.PropertyBinding: Trying to update property for track: " + b.nodeName + "." + d + " but it wasn't found.", a);
                else {
                    b = this.Versioning.None;
                    this.targetObject = a;
                    void 0 !== a.needsUpdate ? b = this.Versioning.NeedsUpdate : void 0 !== a.matrixWorldNeedsUpdate && (b = this.Versioning.MatrixWorldNeedsUpdate);
                    c = this.BindingType.Direct;
                    if (void 0 !== e) {
                        if ("morphTargetInfluences" === d) {
                            if (!a.geometry) {
                                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                                return;
                            }
                            if (a.geometry.isBufferGeometry) {
                                if (!a.geometry.morphAttributes) {
                                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                    return;
                                }
                                for(c = 0; c < this.node.geometry.morphAttributes.position.length; c++)if (a.geometry.morphAttributes.position[c].name === e) {
                                    e = c;
                                    break;
                                }
                            } else {
                                if (!a.geometry.morphTargets) {
                                    console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                                    return;
                                }
                                for(c = 0; c < this.node.geometry.morphTargets.length; c++)if (a.geometry.morphTargets[c].name === e) {
                                    e = c;
                                    break;
                                }
                            }
                        }
                        c = this.BindingType.ArrayElement;
                        this.resolvedProperty = f;
                        this.propertyIndex = e;
                    } else void 0 !== f.fromArray && void 0 !== f.toArray ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = f) : Array.isArray(f) ? (c = this.BindingType.EntireArray, this.resolvedProperty = f) : this.propertyName = d;
                    this.getValue = this.GetterByBindingType[c];
                    this.setValue = this.SetterByBindingTypeAndVersioning[c][b];
                }
            } else console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
        },
        unbind: function() {
            this.node = null;
            this.getValue = this._getValue_unbound;
            this.setValue = this._setValue_unbound;
        }
    });
    Object.assign(ia.prototype, {
        _getValue_unbound: ia.prototype.getValue,
        _setValue_unbound: ia.prototype.setValue
    });
    Object.assign(Nf.prototype, {
        isAnimationObjectGroup: !0,
        add: function() {
            for(var a = this._objects, b = a.length, c = this.nCachedObjects_, d = this._indicesByUUID, e = this._paths, f = this._parsedPaths, g = this._bindings, h = g.length, l = void 0, k = 0, n = arguments.length; k !== n; ++k){
                var p = arguments[k], v = p.uuid, t = d[v];
                if (void 0 === t) {
                    t = b++;
                    d[v] = t;
                    a.push(p);
                    v = 0;
                    for(var r = h; v !== r; ++v)g[v].push(new ia(p, e[v], f[v]));
                } else if (t < c) {
                    l = a[t];
                    var u = --c;
                    r = a[u];
                    d[r.uuid] = t;
                    a[t] = r;
                    d[v] = u;
                    a[u] = p;
                    v = 0;
                    for(r = h; v !== r; ++v){
                        var w = g[v], z = w[t];
                        w[t] = w[u];
                        void 0 === z && (z = new ia(p, e[v], f[v]));
                        w[u] = z;
                    }
                } else a[t] !== l && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
            }
            this.nCachedObjects_ = c;
        },
        remove: function() {
            for(var a = this._objects, b = this.nCachedObjects_, c = this._indicesByUUID, d = this._bindings, e = d.length, f = 0, g = arguments.length; f !== g; ++f){
                var h = arguments[f], l = h.uuid, k = c[l];
                if (void 0 !== k && k >= b) {
                    var n = b++, p = a[n];
                    c[p.uuid] = k;
                    a[k] = p;
                    c[l] = n;
                    a[n] = h;
                    h = 0;
                    for(l = e; h !== l; ++h){
                        p = d[h];
                        var v = p[k];
                        p[k] = p[n];
                        p[n] = v;
                    }
                }
            }
            this.nCachedObjects_ = b;
        },
        uncache: function() {
            for(var a = this._objects, b = a.length, c = this.nCachedObjects_, d = this._indicesByUUID, e = this._bindings, f = e.length, g = 0, h = arguments.length; g !== h; ++g){
                var l = arguments[g].uuid, k = d[l];
                if (void 0 !== k) if (delete d[l], k < c) {
                    l = --c;
                    var n = a[l], p = --b, v = a[p];
                    d[n.uuid] = k;
                    a[k] = n;
                    d[v.uuid] = l;
                    a[l] = v;
                    a.pop();
                    n = 0;
                    for(v = f; n !== v; ++n){
                        var t = e[n], r = t[p];
                        t[k] = t[l];
                        t[l] = r;
                        t.pop();
                    }
                } else for(p = --b, v = a[p], d[v.uuid] = k, a[k] = v, a.pop(), n = 0, v = f; n !== v; ++n)t = e[n], t[k] = t[p], t.pop();
            }
            this.nCachedObjects_ = c;
        },
        subscribe_: function(a, b) {
            var c = this._bindingsIndicesByPath, d = c[a], e = this._bindings;
            if (void 0 !== d) return e[d];
            var f = this._paths, g = this._parsedPaths, h = this._objects, k = this.nCachedObjects_, m = Array(h.length);
            d = e.length;
            c[a] = d;
            f.push(a);
            g.push(b);
            e.push(m);
            c = k;
            for(d = h.length; c !== d; ++c)m[c] = new ia(h[c], a, b);
            return m;
        },
        unsubscribe_: function(a) {
            var b = this._bindingsIndicesByPath, c = b[a];
            if (void 0 !== c) {
                var d = this._paths, e = this._parsedPaths, f = this._bindings, g = f.length - 1, h = f[g];
                b[a[g]] = c;
                f[c] = h;
                f.pop();
                e[c] = e[g];
                e.pop();
                d[c] = d[g];
                d.pop();
            }
        }
    });
    Object.assign(Of.prototype, {
        play: function() {
            this._mixer._activateAction(this);
            return this;
        },
        stop: function() {
            this._mixer._deactivateAction(this);
            return this.reset();
        },
        reset: function() {
            this.paused = !1;
            this.enabled = !0;
            this.time = 0;
            this._loopCount = -1;
            this._startTime = null;
            return this.stopFading().stopWarping();
        },
        isRunning: function() {
            return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
        },
        isScheduled: function() {
            return this._mixer._isActiveAction(this);
        },
        startAt: function(a) {
            this._startTime = a;
            return this;
        },
        setLoop: function(a, b) {
            this.loop = a;
            this.repetitions = b;
            return this;
        },
        setEffectiveWeight: function(a) {
            this.weight = a;
            this._effectiveWeight = this.enabled ? a : 0;
            return this.stopFading();
        },
        getEffectiveWeight: function() {
            return this._effectiveWeight;
        },
        fadeIn: function(a) {
            return this._scheduleFading(a, 0, 1);
        },
        fadeOut: function(a) {
            return this._scheduleFading(a, 1, 0);
        },
        crossFadeFrom: function(a, b, c) {
            a.fadeOut(b);
            this.fadeIn(b);
            if (c) {
                c = this._clip.duration;
                var d = a._clip.duration, e = c / d;
                a.warp(1, d / c, b);
                this.warp(e, 1, b);
            }
            return this;
        },
        crossFadeTo: function(a, b, c) {
            return a.crossFadeFrom(this, b, c);
        },
        stopFading: function() {
            var a = this._weightInterpolant;
            null !== a && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(a));
            return this;
        },
        setEffectiveTimeScale: function(a) {
            this.timeScale = a;
            this._effectiveTimeScale = this.paused ? 0 : a;
            return this.stopWarping();
        },
        getEffectiveTimeScale: function() {
            return this._effectiveTimeScale;
        },
        setDuration: function(a) {
            this.timeScale = this._clip.duration / a;
            return this.stopWarping();
        },
        syncWith: function(a) {
            this.time = a.time;
            this.timeScale = a.timeScale;
            return this.stopWarping();
        },
        halt: function(a) {
            return this.warp(this._effectiveTimeScale, 0, a);
        },
        warp: function(a, b, c) {
            var d = this._mixer, e = d.time, f = this._timeScaleInterpolant, g = this.timeScale;
            null === f && (this._timeScaleInterpolant = f = d._lendControlInterpolant());
            d = f.parameterPositions;
            f = f.sampleValues;
            d[0] = e;
            d[1] = e + c;
            f[0] = a / g;
            f[1] = b / g;
            return this;
        },
        stopWarping: function() {
            var a = this._timeScaleInterpolant;
            null !== a && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(a));
            return this;
        },
        getMixer: function() {
            return this._mixer;
        },
        getClip: function() {
            return this._clip;
        },
        getRoot: function() {
            return this._localRoot || this._mixer._root;
        },
        _update: function(a, b, c, d) {
            if (this.enabled) {
                var e = this._startTime;
                if (null !== e) {
                    b = (a - e) * c;
                    if (0 > b || 0 === c) return;
                    this._startTime = null;
                    b *= c;
                }
                b *= this._updateTimeScale(a);
                c = this._updateTime(b);
                a = this._updateWeight(a);
                if (0 < a) {
                    b = this._interpolants;
                    e = this._propertyBindings;
                    for(var f = 0, g = b.length; f !== g; ++f)b[f].evaluate(c), e[f].accumulate(d, a);
                }
            } else this._updateWeight(a);
        },
        _updateWeight: function(a) {
            var b = 0;
            if (this.enabled) {
                b = this.weight;
                var c = this._weightInterpolant;
                if (null !== c) {
                    var d = c.evaluate(a)[0];
                    b *= d;
                    a > c.parameterPositions[1] && (this.stopFading(), 0 === d && (this.enabled = !1));
                }
            }
            return this._effectiveWeight = b;
        },
        _updateTimeScale: function(a) {
            var b = 0;
            if (!this.paused) {
                b = this.timeScale;
                var c = this._timeScaleInterpolant;
                if (null !== c) {
                    var d = c.evaluate(a)[0];
                    b *= d;
                    a > c.parameterPositions[1] && (this.stopWarping(), 0 === b ? this.paused = !0 : this.timeScale = b);
                }
            }
            return this._effectiveTimeScale = b;
        },
        _updateTime: function(a) {
            var b = this.time + a, c = this._clip.duration, d = this.loop, e = this._loopCount, f = 2202 === d;
            if (0 === a) return -1 === e ? b : f && 1 === (e & 1) ? c - b : b;
            if (2200 === d) a: {
                if (-1 === e && (this._loopCount = 0, this._setEndings(!0, !0, !1)), b >= c) b = c;
                else if (0 > b) b = 0;
                else break a;
                this.clampWhenFinished ? this.paused = !0 : this.enabled = !1;
                this._mixer.dispatchEvent({
                    type: "finished",
                    action: this,
                    direction: 0 > a ? -1 : 1
                });
            }
            else {
                -1 === e && (0 <= a ? (e = 0, this._setEndings(!0, 0 === this.repetitions, f)) : this._setEndings(0 === this.repetitions, !0, f));
                if (b >= c || 0 > b) {
                    d = Math.floor(b / c);
                    b -= c * d;
                    e += Math.abs(d);
                    var g = this.repetitions - e;
                    0 >= g ? (this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, b = 0 < a ? c : 0, this._mixer.dispatchEvent({
                        type: "finished",
                        action: this,
                        direction: 0 < a ? 1 : -1
                    })) : (1 === g ? (a = 0 > a, this._setEndings(a, !a, f)) : this._setEndings(!1, !1, f), this._loopCount = e, this._mixer.dispatchEvent({
                        type: "loop",
                        action: this,
                        loopDelta: d
                    }));
                }
                if (f && 1 === (e & 1)) return this.time = b, c - b;
            }
            return this.time = b;
        },
        _setEndings: function(a, b, c) {
            var d = this._interpolantSettings;
            c ? (d.endingStart = 2401, d.endingEnd = 2401) : (d.endingStart = a ? this.zeroSlopeAtStart ? 2401 : 2400 : 2402, d.endingEnd = b ? this.zeroSlopeAtEnd ? 2401 : 2400 : 2402);
        },
        _scheduleFading: function(a, b, c) {
            var d = this._mixer, e = d.time, f = this._weightInterpolant;
            null === f && (this._weightInterpolant = f = d._lendControlInterpolant());
            d = f.parameterPositions;
            f = f.sampleValues;
            d[0] = e;
            f[0] = b;
            d[1] = e + a;
            f[1] = c;
            return this;
        }
    });
    Ge.prototype = Object.assign(Object.create(ta.prototype), {
        constructor: Ge,
        _bindAction: function(a, b) {
            var c = a._localRoot || this._root, d = a._clip.tracks, e = d.length, f = a._propertyBindings;
            a = a._interpolants;
            var g = c.uuid, h = this._bindingsByRootAndName, k = h[g];
            void 0 === k && (k = {}, h[g] = k);
            for(h = 0; h !== e; ++h){
                var m = d[h], n = m.name, p = k[n];
                if (void 0 === p) {
                    p = f[h];
                    if (void 0 !== p) {
                        null === p._cacheIndex && (++p.referenceCount, this._addInactiveBinding(p, g, n));
                        continue;
                    }
                    p = new Fe(ia.create(c, n, b && b._propertyBindings[h].binding.parsedPath), m.ValueTypeName, m.getValueSize());
                    ++p.referenceCount;
                    this._addInactiveBinding(p, g, n);
                }
                f[h] = p;
                a[h].resultBuffer = p.buffer;
            }
        },
        _activateAction: function(a) {
            if (!this._isActiveAction(a)) {
                if (null === a._cacheIndex) {
                    var b = (a._localRoot || this._root).uuid, c = a._clip.uuid, d = this._actionsByClip[c];
                    this._bindAction(a, d && d.knownActions[0]);
                    this._addInactiveAction(a, c, b);
                }
                b = a._propertyBindings;
                c = 0;
                for(d = b.length; c !== d; ++c){
                    var e = b[c];
                    0 === e.useCount++ && (this._lendBinding(e), e.saveOriginalState());
                }
                this._lendAction(a);
            }
        },
        _deactivateAction: function(a) {
            if (this._isActiveAction(a)) {
                for(var b = a._propertyBindings, c = 0, d = b.length; c !== d; ++c){
                    var e = b[c];
                    0 === --e.useCount && (e.restoreOriginalState(), this._takeBackBinding(e));
                }
                this._takeBackAction(a);
            }
        },
        _initMemoryManager: function() {
            this._actions = [];
            this._nActiveActions = 0;
            this._actionsByClip = {};
            this._bindings = [];
            this._nActiveBindings = 0;
            this._bindingsByRootAndName = {};
            this._controlInterpolants = [];
            this._nActiveControlInterpolants = 0;
            var a = this;
            this.stats = {
                actions: {
                    get total () {
                        return a._actions.length;
                    },
                    get inUse () {
                        return a._nActiveActions;
                    }
                },
                bindings: {
                    get total () {
                        return a._bindings.length;
                    },
                    get inUse () {
                        return a._nActiveBindings;
                    }
                },
                controlInterpolants: {
                    get total () {
                        return a._controlInterpolants.length;
                    },
                    get inUse () {
                        return a._nActiveControlInterpolants;
                    }
                }
            };
        },
        _isActiveAction: function(a) {
            a = a._cacheIndex;
            return null !== a && a < this._nActiveActions;
        },
        _addInactiveAction: function(a, b, c) {
            var d = this._actions, e = this._actionsByClip, f = e[b];
            void 0 === f ? (f = {
                knownActions: [
                    a
                ],
                actionByRoot: {}
            }, a._byClipCacheIndex = 0, e[b] = f) : (b = f.knownActions, a._byClipCacheIndex = b.length, b.push(a));
            a._cacheIndex = d.length;
            d.push(a);
            f.actionByRoot[c] = a;
        },
        _removeInactiveAction: function(a) {
            var b = this._actions, c = b[b.length - 1], d = a._cacheIndex;
            c._cacheIndex = d;
            b[d] = c;
            b.pop();
            a._cacheIndex = null;
            b = a._clip.uuid;
            c = this._actionsByClip;
            d = c[b];
            var e = d.knownActions, f = e[e.length - 1], g = a._byClipCacheIndex;
            f._byClipCacheIndex = g;
            e[g] = f;
            e.pop();
            a._byClipCacheIndex = null;
            delete d.actionByRoot[(a._localRoot || this._root).uuid];
            0 === e.length && delete c[b];
            this._removeInactiveBindingsForAction(a);
        },
        _removeInactiveBindingsForAction: function(a) {
            a = a._propertyBindings;
            for(var b = 0, c = a.length; b !== c; ++b){
                var d = a[b];
                0 === --d.referenceCount && this._removeInactiveBinding(d);
            }
        },
        _lendAction: function(a) {
            var b = this._actions, c = a._cacheIndex, d = this._nActiveActions++, e = b[d];
            a._cacheIndex = d;
            b[d] = a;
            e._cacheIndex = c;
            b[c] = e;
        },
        _takeBackAction: function(a) {
            var b = this._actions, c = a._cacheIndex, d = --this._nActiveActions, e = b[d];
            a._cacheIndex = d;
            b[d] = a;
            e._cacheIndex = c;
            b[c] = e;
        },
        _addInactiveBinding: function(a, b, c) {
            var d = this._bindingsByRootAndName, e = d[b], f = this._bindings;
            void 0 === e && (e = {}, d[b] = e);
            e[c] = a;
            a._cacheIndex = f.length;
            f.push(a);
        },
        _removeInactiveBinding: function(a) {
            var b = this._bindings, c = a.binding, d = c.rootNode.uuid;
            c = c.path;
            var e = this._bindingsByRootAndName, f = e[d], g = b[b.length - 1];
            a = a._cacheIndex;
            g._cacheIndex = a;
            b[a] = g;
            b.pop();
            delete f[c];
            a: {
                for(var h in f)break a;
                delete e[d];
            }
        },
        _lendBinding: function(a) {
            var b = this._bindings, c = a._cacheIndex, d = this._nActiveBindings++, e = b[d];
            a._cacheIndex = d;
            b[d] = a;
            e._cacheIndex = c;
            b[c] = e;
        },
        _takeBackBinding: function(a) {
            var b = this._bindings, c = a._cacheIndex, d = --this._nActiveBindings, e = b[d];
            a._cacheIndex = d;
            b[d] = a;
            e._cacheIndex = c;
            b[c] = e;
        },
        _lendControlInterpolant: function() {
            var a = this._controlInterpolants, b = this._nActiveControlInterpolants++, c = a[b];
            void 0 === c && (c = new jd(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), c.__cacheIndex = b, a[b] = c);
            return c;
        },
        _takeBackControlInterpolant: function(a) {
            var b = this._controlInterpolants, c = a.__cacheIndex, d = --this._nActiveControlInterpolants, e = b[d];
            a.__cacheIndex = d;
            b[d] = a;
            e.__cacheIndex = c;
            b[c] = e;
        },
        _controlInterpolantsResultBuffer: new Float32Array(1),
        clipAction: function(a, b) {
            var c = b || this._root, d = c.uuid;
            c = "string" === typeof a ? Fa.findByName(c, a) : a;
            a = null !== c ? c.uuid : a;
            var e = this._actionsByClip[a], f = null;
            if (void 0 !== e) {
                f = e.actionByRoot[d];
                if (void 0 !== f) return f;
                f = e.knownActions[0];
                null === c && (c = f._clip);
            }
            if (null === c) return null;
            b = new Of(this, c, b);
            this._bindAction(b, f);
            this._addInactiveAction(b, a, d);
            return b;
        },
        existingAction: function(a, b) {
            var c = b || this._root;
            b = c.uuid;
            c = "string" === typeof a ? Fa.findByName(c, a) : a;
            a = this._actionsByClip[c ? c.uuid : a];
            return void 0 !== a ? a.actionByRoot[b] || null : null;
        },
        stopAllAction: function() {
            for(var a = this._actions, b = this._nActiveActions, c = this._bindings, d = this._nActiveBindings, e = this._nActiveBindings = this._nActiveActions = 0; e !== b; ++e)a[e].reset();
            for(e = 0; e !== d; ++e)c[e].useCount = 0;
            return this;
        },
        update: function(a) {
            a *= this.timeScale;
            for(var b = this._actions, c = this._nActiveActions, d = this.time += a, e = Math.sign(a), f = this._accuIndex ^= 1, g = 0; g !== c; ++g)b[g]._update(d, a, e, f);
            a = this._bindings;
            b = this._nActiveBindings;
            for(g = 0; g !== b; ++g)a[g].apply(f);
            return this;
        },
        getRoot: function() {
            return this._root;
        },
        uncacheClip: function(a) {
            var b = this._actions;
            a = a.uuid;
            var c = this._actionsByClip, d = c[a];
            if (void 0 !== d) {
                d = d.knownActions;
                for(var e = 0, f = d.length; e !== f; ++e){
                    var g = d[e];
                    this._deactivateAction(g);
                    var h = g._cacheIndex, k = b[b.length - 1];
                    g._cacheIndex = null;
                    g._byClipCacheIndex = null;
                    k._cacheIndex = h;
                    b[h] = k;
                    b.pop();
                    this._removeInactiveBindingsForAction(g);
                }
                delete c[a];
            }
        },
        uncacheRoot: function(a) {
            a = a.uuid;
            var b = this._actionsByClip;
            for(d in b){
                var c = b[d].actionByRoot[a];
                void 0 !== c && (this._deactivateAction(c), this._removeInactiveAction(c));
            }
            var d = this._bindingsByRootAndName[a];
            if (void 0 !== d) for(var e in d)a = d[e], a.restoreOriginalState(), this._removeInactiveBinding(a);
        },
        uncacheAction: function(a, b) {
            a = this.existingAction(a, b);
            null !== a && (this._deactivateAction(a), this._removeInactiveAction(a));
        }
    });
    Xd.prototype.clone = function() {
        return new Xd(void 0 === this.value.clone ? this.value : this.value.clone());
    };
    He.prototype = Object.assign(Object.create(B.prototype), {
        constructor: He,
        isInstancedBufferGeometry: !0,
        copy: function(a) {
            B.prototype.copy.call(this, a);
            this.maxInstancedCount = a.maxInstancedCount;
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        }
    });
    Ie.prototype = Object.assign(Object.create(Ab.prototype), {
        constructor: Ie,
        isInstancedInterleavedBuffer: !0,
        copy: function(a) {
            Ab.prototype.copy.call(this, a);
            this.meshPerAttribute = a.meshPerAttribute;
            return this;
        }
    });
    Je.prototype = Object.assign(Object.create(H.prototype), {
        constructor: Je,
        isInstancedBufferAttribute: !0,
        copy: function(a) {
            H.prototype.copy.call(this, a);
            this.meshPerAttribute = a.meshPerAttribute;
            return this;
        }
    });
    Object.assign(Pf.prototype, {
        linePrecision: 1,
        set: function(a, b) {
            this.ray.set(a, b);
        },
        setFromCamera: function(a, b) {
            b && b.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(b.matrixWorld), this.ray.direction.set(a.x, a.y, .5).unproject(b).sub(this.ray.origin).normalize()) : b && b.isOrthographicCamera ? (this.ray.origin.set(a.x, a.y, (b.near + b.far) / (b.near - b.far)).unproject(b), this.ray.direction.set(0, 0, -1).transformDirection(b.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
        },
        intersectObject: function(a, b, c) {
            c = c || [];
            Ke(a, this, c, b);
            c.sort(Qf);
            return c;
        },
        intersectObjects: function(a, b, c) {
            c = c || [];
            if (!1 === Array.isArray(a)) return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), c;
            for(var d = 0, e = a.length; d < e; d++)Ke(a[d], this, c, b);
            c.sort(Qf);
            return c;
        }
    });
    Object.assign(Rf.prototype, {
        set: function(a, b, c) {
            this.radius = a;
            this.phi = b;
            this.theta = c;
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.radius = a.radius;
            this.phi = a.phi;
            this.theta = a.theta;
            return this;
        },
        makeSafe: function() {
            this.phi = Math.max(1E-6, Math.min(Math.PI - 1E-6, this.phi));
            return this;
        },
        setFromVector3: function(a) {
            return this.setFromCartesianCoords(a.x, a.y, a.z);
        },
        setFromCartesianCoords: function(a, b, c) {
            this.radius = Math.sqrt(a * a + b * b + c * c);
            0 === this.radius ? this.phi = this.theta = 0 : (this.theta = Math.atan2(a, c), this.phi = Math.acos(O.clamp(b / this.radius, -1, 1)));
            return this;
        }
    });
    Object.assign(Sf.prototype, {
        set: function(a, b, c) {
            this.radius = a;
            this.theta = b;
            this.y = c;
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.radius = a.radius;
            this.theta = a.theta;
            this.y = a.y;
            return this;
        },
        setFromVector3: function(a) {
            return this.setFromCartesianCoords(a.x, a.y, a.z);
        },
        setFromCartesianCoords: function(a, b, c) {
            this.radius = Math.sqrt(a * a + c * c);
            this.theta = Math.atan2(a, c);
            this.y = b;
            return this;
        }
    });
    Object.assign(Le.prototype, {
        set: function(a, b) {
            this.min.copy(a);
            this.max.copy(b);
            return this;
        },
        setFromPoints: function(a) {
            this.makeEmpty();
            for(var b = 0, c = a.length; b < c; b++)this.expandByPoint(a[b]);
            return this;
        },
        setFromCenterAndSize: function() {
            var a = new C;
            return function(b, c) {
                c = a.copy(c).multiplyScalar(.5);
                this.min.copy(b).sub(c);
                this.max.copy(b).add(c);
                return this;
            };
        }(),
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.min.copy(a.min);
            this.max.copy(a.max);
            return this;
        },
        makeEmpty: function() {
            this.min.x = this.min.y = Infinity;
            this.max.x = this.max.y = -Infinity;
            return this;
        },
        isEmpty: function() {
            return this.max.x < this.min.x || this.max.y < this.min.y;
        },
        getCenter: function(a) {
            void 0 === a && (console.warn("THREE.Box2: .getCenter() target is now required"), a = new C);
            return this.isEmpty() ? a.set(0, 0) : a.addVectors(this.min, this.max).multiplyScalar(.5);
        },
        getSize: function(a) {
            void 0 === a && (console.warn("THREE.Box2: .getSize() target is now required"), a = new C);
            return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min);
        },
        expandByPoint: function(a) {
            this.min.min(a);
            this.max.max(a);
            return this;
        },
        expandByVector: function(a) {
            this.min.sub(a);
            this.max.add(a);
            return this;
        },
        expandByScalar: function(a) {
            this.min.addScalar(-a);
            this.max.addScalar(a);
            return this;
        },
        containsPoint: function(a) {
            return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
        },
        containsBox: function(a) {
            return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y;
        },
        getParameter: function(a, b) {
            void 0 === b && (console.warn("THREE.Box2: .getParameter() target is now required"), b = new C);
            return b.set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
        },
        intersectsBox: function(a) {
            return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
        },
        clampPoint: function(a, b) {
            void 0 === b && (console.warn("THREE.Box2: .clampPoint() target is now required"), b = new C);
            return b.copy(a).clamp(this.min, this.max);
        },
        distanceToPoint: function() {
            var a = new C;
            return function(b) {
                return a.copy(b).clamp(this.min, this.max).sub(b).length();
            };
        }(),
        intersect: function(a) {
            this.min.max(a.min);
            this.max.min(a.max);
            return this;
        },
        union: function(a) {
            this.min.min(a.min);
            this.max.max(a.max);
            return this;
        },
        translate: function(a) {
            this.min.add(a);
            this.max.add(a);
            return this;
        },
        equals: function(a) {
            return a.min.equals(this.min) && a.max.equals(this.max);
        }
    });
    Object.assign(Me.prototype, {
        set: function(a, b) {
            this.start.copy(a);
            this.end.copy(b);
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        },
        copy: function(a) {
            this.start.copy(a.start);
            this.end.copy(a.end);
            return this;
        },
        getCenter: function(a) {
            void 0 === a && (console.warn("THREE.Line3: .getCenter() target is now required"), a = new n);
            return a.addVectors(this.start, this.end).multiplyScalar(.5);
        },
        delta: function(a) {
            void 0 === a && (console.warn("THREE.Line3: .delta() target is now required"), a = new n);
            return a.subVectors(this.end, this.start);
        },
        distanceSq: function() {
            return this.start.distanceToSquared(this.end);
        },
        distance: function() {
            return this.start.distanceTo(this.end);
        },
        at: function(a, b) {
            void 0 === b && (console.warn("THREE.Line3: .at() target is now required"), b = new n);
            return this.delta(b).multiplyScalar(a).add(this.start);
        },
        closestPointToPointParameter: function() {
            var a = new n, b = new n;
            return function(c, d) {
                a.subVectors(c, this.start);
                b.subVectors(this.end, this.start);
                c = b.dot(b);
                c = b.dot(a) / c;
                d && (c = O.clamp(c, 0, 1));
                return c;
            };
        }(),
        closestPointToPoint: function(a, b, c) {
            a = this.closestPointToPointParameter(a, b);
            void 0 === c && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), c = new n);
            return this.delta(c).multiplyScalar(a).add(this.start);
        },
        applyMatrix4: function(a) {
            this.start.applyMatrix4(a);
            this.end.applyMatrix4(a);
            return this;
        },
        equals: function(a) {
            return a.start.equals(this.start) && a.end.equals(this.end);
        }
    });
    rd.prototype = Object.create(D.prototype);
    rd.prototype.constructor = rd;
    rd.prototype.isImmediateRenderObject = !0;
    sd.prototype = Object.create(V.prototype);
    sd.prototype.constructor = sd;
    sd.prototype.update = function() {
        var a = new n, b = new n, c = new na;
        return function() {
            var d = [
                "a",
                "b",
                "c"
            ];
            this.object.updateMatrixWorld(!0);
            c.getNormalMatrix(this.object.matrixWorld);
            var e = this.object.matrixWorld, f = this.geometry.attributes.position, g = this.object.geometry;
            if (g && g.isGeometry) for(var h = g.vertices, k = g.faces, m = g = 0, n = k.length; m < n; m++)for(var p = k[m], v = 0, t = p.vertexNormals.length; v < t; v++){
                var r = p.vertexNormals[v];
                a.copy(h[p[d[v]]]).applyMatrix4(e);
                b.copy(r).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
                f.setXYZ(g, a.x, a.y, a.z);
                g += 1;
                f.setXYZ(g, b.x, b.y, b.z);
                g += 1;
            }
            else if (g && g.isBufferGeometry) for(d = g.attributes.position, h = g.attributes.normal, v = g = 0, t = d.count; v < t; v++)a.set(d.getX(v), d.getY(v), d.getZ(v)).applyMatrix4(e), b.set(h.getX(v), h.getY(v), h.getZ(v)), b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a), f.setXYZ(g, a.x, a.y, a.z), g += 1, f.setXYZ(g, b.x, b.y, b.z), g += 1;
            f.needsUpdate = !0;
        };
    }();
    rc.prototype = Object.create(D.prototype);
    rc.prototype.constructor = rc;
    rc.prototype.dispose = function() {
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    };
    rc.prototype.update = function() {
        var a = new n;
        return function() {
            this.light.updateMatrixWorld();
            var b = this.light.distance ? this.light.distance : 1E3, c = b * Math.tan(this.light.angle);
            this.cone.scale.set(c, c, b);
            a.setFromMatrixPosition(this.light.target.matrixWorld);
            this.cone.lookAt(a);
            void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
        };
    }();
    sc.prototype = Object.create(V.prototype);
    sc.prototype.constructor = sc;
    sc.prototype.updateMatrixWorld = function() {
        var a = new n, b = new P, c = new P;
        return function(d) {
            var e = this.bones, f = this.geometry, g = f.getAttribute("position");
            c.getInverse(this.root.matrixWorld);
            for(var h = 0, k = 0; h < e.length; h++){
                var m = e[h];
                m.parent && m.parent.isBone && (b.multiplyMatrices(c, m.matrixWorld), a.setFromMatrixPosition(b), g.setXYZ(k, a.x, a.y, a.z), b.multiplyMatrices(c, m.parent.matrixWorld), a.setFromMatrixPosition(b), g.setXYZ(k + 1, a.x, a.y, a.z), k += 2);
            }
            f.getAttribute("position").needsUpdate = !0;
            D.prototype.updateMatrixWorld.call(this, d);
        };
    }();
    tc.prototype = Object.create(qa.prototype);
    tc.prototype.constructor = tc;
    tc.prototype.dispose = function() {
        this.geometry.dispose();
        this.material.dispose();
    };
    tc.prototype.update = function() {
        void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
    };
    uc.prototype = Object.create(ka.prototype);
    uc.prototype.constructor = uc;
    uc.prototype.update = function() {
        this.scale.set(.5 * this.light.width, .5 * this.light.height, 1);
        if (void 0 !== this.color) this.material.color.set(this.color), this.children[0].material.color.set(this.color);
        else {
            this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
            var a = this.material.color, b = Math.max(a.r, a.g, a.b);
            1 < b && a.multiplyScalar(1 / b);
            this.children[0].material.color.copy(this.material.color);
        }
    };
    uc.prototype.dispose = function() {
        this.geometry.dispose();
        this.material.dispose();
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    };
    vc.prototype = Object.create(D.prototype);
    vc.prototype.constructor = vc;
    vc.prototype.dispose = function() {
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    };
    vc.prototype.update = function() {
        var a = new n, b = new A, c = new A;
        return function() {
            var d = this.children[0];
            if (void 0 !== this.color) this.material.color.set(this.color);
            else {
                var e = d.geometry.getAttribute("color");
                b.copy(this.light.color);
                c.copy(this.light.groundColor);
                for(var f = 0, g = e.count; f < g; f++){
                    var h = f < g / 2 ? b : c;
                    e.setXYZ(f, h.r, h.g, h.b);
                }
                e.needsUpdate = !0;
            }
            d.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());
        };
    }();
    wc.prototype = Object.create(qa.prototype);
    wc.prototype.constructor = wc;
    wc.prototype.dispose = function() {
        this.geometry.dispose();
        this.material.dispose();
    };
    wc.prototype.onBeforeRender = function() {
        return function() {
            this.position.copy(this.lightProbe.position);
            this.scale.set(1, 1, 1).multiplyScalar(this.size);
            this.material.uniforms.intensity.value = this.lightProbe.intensity;
        };
    }();
    Yd.prototype = Object.assign(Object.create(V.prototype), {
        constructor: Yd,
        copy: function(a) {
            V.prototype.copy.call(this, a);
            this.geometry.copy(a.geometry);
            this.material.copy(a.material);
            return this;
        },
        clone: function() {
            return (new this.constructor).copy(this);
        }
    });
    Zd.prototype = Object.create(V.prototype);
    Zd.prototype.constructor = Zd;
    xc.prototype = Object.create(ka.prototype);
    xc.prototype.constructor = xc;
    xc.prototype.update = function() {
        function a(a, b, d, e) {
            d = (b - a) / d;
            t.setXYZ(k, 0, 0, 0);
            m++;
            for(n = a; n < b; n += d)p = k + m, t.setXYZ(p, Math.sin(n) * c, 0, Math.cos(n) * c), t.setXYZ(p + 1, Math.sin(Math.min(n + d, b)) * c, 0, Math.cos(Math.min(n + d, b)) * c), t.setXYZ(p + 2, 0, 0, 0), m += 3;
            v.addGroup(k, m, e);
            k += m;
            m = 0;
        }
        var b = this.audio, c = this.range, d = this.divisionsInnerAngle, e = this.divisionsOuterAngle, f = O.degToRad(b.panner.coneInnerAngle);
        b = O.degToRad(b.panner.coneOuterAngle);
        var g = f / 2, h = b / 2, k = 0, m = 0, n, p, v = this.geometry, t = v.attributes.position;
        v.clearGroups();
        a(-h, -g, e, 0);
        a(-g, g, d, 1);
        a(g, h, e, 0);
        t.needsUpdate = !0;
        f === b && (this.material[0].visible = !1);
    };
    xc.prototype.dispose = function() {
        this.geometry.dispose();
        this.material[0].dispose();
        this.material[1].dispose();
    };
    td.prototype = Object.create(V.prototype);
    td.prototype.constructor = td;
    td.prototype.update = function() {
        var a = new n, b = new n, c = new na;
        return function() {
            this.object.updateMatrixWorld(!0);
            c.getNormalMatrix(this.object.matrixWorld);
            var d = this.object.matrixWorld, e = this.geometry.attributes.position, f = this.object.geometry, g = f.vertices;
            f = f.faces;
            for(var h = 0, k = 0, m = f.length; k < m; k++){
                var n = f[k], p = n.normal;
                a.copy(g[n.a]).add(g[n.b]).add(g[n.c]).divideScalar(3).applyMatrix4(d);
                b.copy(p).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);
                e.setXYZ(h, a.x, a.y, a.z);
                h += 1;
                e.setXYZ(h, b.x, b.y, b.z);
                h += 1;
            }
            e.needsUpdate = !0;
        };
    }();
    yc.prototype = Object.create(D.prototype);
    yc.prototype.constructor = yc;
    yc.prototype.dispose = function() {
        this.lightPlane.geometry.dispose();
        this.lightPlane.material.dispose();
        this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
    };
    yc.prototype.update = function() {
        var a = new n, b = new n, c = new n;
        return function() {
            a.setFromMatrixPosition(this.light.matrixWorld);
            b.setFromMatrixPosition(this.light.target.matrixWorld);
            c.subVectors(b, a);
            this.lightPlane.lookAt(b);
            void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color));
            this.targetLine.lookAt(b);
            this.targetLine.scale.z = c.length();
        };
    }();
    ud.prototype = Object.create(V.prototype);
    ud.prototype.constructor = ud;
    ud.prototype.update = function() {
        function a(a, g, h, k) {
            d.set(g, h, k).unproject(e);
            a = c[a];
            if (void 0 !== a) for(g = b.getAttribute("position"), h = 0, k = a.length; h < k; h++)g.setXYZ(a[h], d.x, d.y, d.z);
        }
        var b, c, d = new n, e = new Xa;
        return function() {
            b = this.geometry;
            c = this.pointMap;
            e.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
            a("c", 0, 0, -1);
            a("t", 0, 0, 1);
            a("n1", -1, -1, -1);
            a("n2", 1, -1, -1);
            a("n3", -1, 1, -1);
            a("n4", 1, 1, -1);
            a("f1", -1, -1, 1);
            a("f2", 1, -1, 1);
            a("f3", -1, 1, 1);
            a("f4", 1, 1, 1);
            a("u1", .7, 1.1, -1);
            a("u2", -.7, 1.1, -1);
            a("u3", 0, 2, -1);
            a("cf1", -1, 0, 1);
            a("cf2", 1, 0, 1);
            a("cf3", 0, -1, 1);
            a("cf4", 0, 1, 1);
            a("cn1", -1, 0, -1);
            a("cn2", 1, 0, -1);
            a("cn3", 0, -1, -1);
            a("cn4", 0, 1, -1);
            b.getAttribute("position").needsUpdate = !0;
        };
    }();
    gb.prototype = Object.create(V.prototype);
    gb.prototype.constructor = gb;
    gb.prototype.update = function() {
        var a = new Ga;
        return function(b) {
            void 0 !== b && console.warn("THREE.BoxHelper: .update() has no longer arguments.");
            void 0 !== this.object && a.setFromObject(this.object);
            if (!a.isEmpty()) {
                b = a.min;
                var c = a.max, d = this.geometry.attributes.position, e = d.array;
                e[0] = c.x;
                e[1] = c.y;
                e[2] = c.z;
                e[3] = b.x;
                e[4] = c.y;
                e[5] = c.z;
                e[6] = b.x;
                e[7] = b.y;
                e[8] = c.z;
                e[9] = c.x;
                e[10] = b.y;
                e[11] = c.z;
                e[12] = c.x;
                e[13] = c.y;
                e[14] = b.z;
                e[15] = b.x;
                e[16] = c.y;
                e[17] = b.z;
                e[18] = b.x;
                e[19] = b.y;
                e[20] = b.z;
                e[21] = c.x;
                e[22] = b.y;
                e[23] = b.z;
                d.needsUpdate = !0;
                this.geometry.computeBoundingSphere();
            }
        };
    }();
    gb.prototype.setFromObject = function(a) {
        this.object = a;
        this.update();
        return this;
    };
    gb.prototype.copy = function(a) {
        V.prototype.copy.call(this, a);
        this.object = a.object;
        return this;
    };
    gb.prototype.clone = function() {
        return (new this.constructor).copy(this);
    };
    vd.prototype = Object.create(V.prototype);
    vd.prototype.constructor = vd;
    vd.prototype.updateMatrixWorld = function(a) {
        var b = this.box;
        b.isEmpty() || (b.getCenter(this.position), b.getSize(this.scale), this.scale.multiplyScalar(.5), D.prototype.updateMatrixWorld.call(this, a));
    };
    wd.prototype = Object.create(ka.prototype);
    wd.prototype.constructor = wd;
    wd.prototype.updateMatrixWorld = function(a) {
        var b = -this.plane.constant;
        1E-8 > Math.abs(b) && (b = 1E-8);
        this.scale.set(.5 * this.size, .5 * this.size, b);
        this.children[0].material.side = 0 > b ? 1 : 0;
        this.lookAt(this.plane.normal);
        D.prototype.updateMatrixWorld.call(this, a);
    };
    var $d, Ne;
    hb.prototype = Object.create(D.prototype);
    hb.prototype.constructor = hb;
    hb.prototype.setDirection = function() {
        var a = new n, b;
        return function(c) {
            .99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), b = Math.acos(c.y), this.quaternion.setFromAxisAngle(a, b));
        };
    }();
    hb.prototype.setLength = function(a, b, c) {
        void 0 === b && (b = .2 * a);
        void 0 === c && (c = .2 * b);
        this.line.scale.set(1, Math.max(0, a - b), 1);
        this.line.updateMatrix();
        this.cone.scale.set(c, b, c);
        this.cone.position.y = a;
        this.cone.updateMatrix();
    };
    hb.prototype.setColor = function(a) {
        this.line.material.color.copy(a);
        this.cone.material.color.copy(a);
    };
    hb.prototype.copy = function(a) {
        D.prototype.copy.call(this, a, !1);
        this.line.copy(a.line);
        this.cone.copy(a.cone);
        return this;
    };
    hb.prototype.clone = function() {
        return (new this.constructor).copy(this);
    };
    xd.prototype = Object.create(V.prototype);
    xd.prototype.constructor = xd;
    M.create = function(a, b) {
        console.log("THREE.Curve.create() has been deprecated");
        a.prototype = Object.create(M.prototype);
        a.prototype.constructor = a;
        a.prototype.getPoint = b;
        return a;
    };
    Object.assign(fb.prototype, {
        createPointsGeometry: function(a) {
            console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            a = this.getPoints(a);
            return this.createGeometry(a);
        },
        createSpacedPointsGeometry: function(a) {
            console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            a = this.getSpacedPoints(a);
            return this.createGeometry(a);
        },
        createGeometry: function(a) {
            console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            for(var b = new K, c = 0, d = a.length; c < d; c++){
                var e = a[c];
                b.vertices.push(new n(e.x, e.y, e.z || 0));
            }
            return b;
        }
    });
    Object.assign(Pa.prototype, {
        fromPoints: function(a) {
            console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
            this.setFromPoints(a);
        }
    });
    Uf.prototype = Object.create(oa.prototype);
    Vf.prototype = Object.create(oa.prototype);
    Oe.prototype = Object.create(oa.prototype);
    Object.assign(Oe.prototype, {
        initFromArray: function() {
            console.error("THREE.Spline: .initFromArray() has been removed.");
        },
        getControlPointsArray: function() {
            console.error("THREE.Spline: .getControlPointsArray() has been removed.");
        },
        reparametrizeByArcLength: function() {
            console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
        }
    });
    Yd.prototype.setColors = function() {
        console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
    };
    sc.prototype.update = function() {
        console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
    };
    Object.assign(pd.prototype, {
        extractUrlBase: function(a) {
            console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
            return Te.extractUrlBase(a);
        }
    });
    Object.assign(te.prototype, {
        setTexturePath: function(a) {
            console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
            return this.setResourcePath(a);
        }
    });
    Object.assign(Le.prototype, {
        center: function(a) {
            console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
            return this.getCenter(a);
        },
        empty: function() {
            console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
            return this.isEmpty();
        },
        isIntersectionBox: function(a) {
            console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
            return this.intersectsBox(a);
        },
        size: function(a) {
            console.warn("THREE.Box2: .size() has been renamed to .getSize().");
            return this.getSize(a);
        }
    });
    Object.assign(Ga.prototype, {
        center: function(a) {
            console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
            return this.getCenter(a);
        },
        empty: function() {
            console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
            return this.isEmpty();
        },
        isIntersectionBox: function(a) {
            console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
            return this.intersectsBox(a);
        },
        isIntersectionSphere: function(a) {
            console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
            return this.intersectsSphere(a);
        },
        size: function(a) {
            console.warn("THREE.Box3: .size() has been renamed to .getSize().");
            return this.getSize(a);
        }
    });
    Me.prototype.center = function(a) {
        console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
        return this.getCenter(a);
    };
    Object.assign(O, {
        random16: function() {
            console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
            return Math.random();
        },
        nearestPowerOfTwo: function(a) {
            console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
            return O.floorPowerOfTwo(a);
        },
        nextPowerOfTwo: function(a) {
            console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
            return O.ceilPowerOfTwo(a);
        }
    });
    Object.assign(na.prototype, {
        flattenToArrayOffset: function(a, b) {
            console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
            return this.toArray(a, b);
        },
        multiplyVector3: function(a) {
            console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
            return a.applyMatrix3(this);
        },
        multiplyVector3Array: function() {
            console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
        },
        applyToBuffer: function(a) {
            console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
            return this.applyToBufferAttribute(a);
        },
        applyToVector3Array: function() {
            console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
        }
    });
    Object.assign(P.prototype, {
        extractPosition: function(a) {
            console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
            return this.copyPosition(a);
        },
        flattenToArrayOffset: function(a, b) {
            console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
            return this.toArray(a, b);
        },
        getPosition: function() {
            var a;
            return function() {
                void 0 === a && (a = new n);
                console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
                return a.setFromMatrixColumn(this, 3);
            };
        }(),
        setRotationFromQuaternion: function(a) {
            console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
            return this.makeRotationFromQuaternion(a);
        },
        multiplyToArray: function() {
            console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
        },
        multiplyVector3: function(a) {
            console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
            return a.applyMatrix4(this);
        },
        multiplyVector4: function(a) {
            console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
            return a.applyMatrix4(this);
        },
        multiplyVector3Array: function() {
            console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
        },
        rotateAxis: function(a) {
            console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
            a.transformDirection(this);
        },
        crossVector: function(a) {
            console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
            return a.applyMatrix4(this);
        },
        translate: function() {
            console.error("THREE.Matrix4: .translate() has been removed.");
        },
        rotateX: function() {
            console.error("THREE.Matrix4: .rotateX() has been removed.");
        },
        rotateY: function() {
            console.error("THREE.Matrix4: .rotateY() has been removed.");
        },
        rotateZ: function() {
            console.error("THREE.Matrix4: .rotateZ() has been removed.");
        },
        rotateByAxis: function() {
            console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
        },
        applyToBuffer: function(a) {
            console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");
            return this.applyToBufferAttribute(a);
        },
        applyToVector3Array: function() {
            console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
        },
        makeFrustum: function(a, b, c, d, e, f) {
            console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
            return this.makePerspective(a, b, d, c, e, f);
        }
    });
    Ua.prototype.isIntersectionLine = function(a) {
        console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
        return this.intersectsLine(a);
    };
    ma.prototype.multiplyVector3 = function(a) {
        console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
        return a.applyQuaternion(this);
    };
    Object.assign(zb.prototype, {
        isIntersectionBox: function(a) {
            console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
            return this.intersectsBox(a);
        },
        isIntersectionPlane: function(a) {
            console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
            return this.intersectsPlane(a);
        },
        isIntersectionSphere: function(a) {
            console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
            return this.intersectsSphere(a);
        }
    });
    Object.assign(ra.prototype, {
        area: function() {
            console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
            return this.getArea();
        },
        barycoordFromPoint: function(a, b) {
            console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
            return this.getBarycoord(a, b);
        },
        midpoint: function(a) {
            console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
            return this.getMidpoint(a);
        },
        normal: function(a) {
            console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
            return this.getNormal(a);
        },
        plane: function(a) {
            console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
            return this.getPlane(a);
        }
    });
    Object.assign(ra, {
        barycoordFromPoint: function(a, b, c, d, e) {
            console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
            return ra.getBarycoord(a, b, c, d, e);
        },
        normal: function(a, b, c, d) {
            console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
            return ra.getNormal(a, b, c, d);
        }
    });
    Object.assign(pb.prototype, {
        extractAllPoints: function(a) {
            console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
            return this.extractPoints(a);
        },
        extrude: function(a) {
            console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
            return new Eb(this, a);
        },
        makeGeometry: function(a) {
            console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
            return new Fb(this, a);
        }
    });
    Object.assign(C.prototype, {
        fromAttribute: function(a, b, c) {
            console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
            return this.fromBufferAttribute(a, b, c);
        },
        distanceToManhattan: function(a) {
            console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
            return this.manhattanDistanceTo(a);
        },
        lengthManhattan: function() {
            console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
            return this.manhattanLength();
        }
    });
    Object.assign(n.prototype, {
        setEulerFromRotationMatrix: function() {
            console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
        },
        setEulerFromQuaternion: function() {
            console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
        },
        getPositionFromMatrix: function(a) {
            console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
            return this.setFromMatrixPosition(a);
        },
        getScaleFromMatrix: function(a) {
            console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
            return this.setFromMatrixScale(a);
        },
        getColumnFromMatrix: function(a, b) {
            console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
            return this.setFromMatrixColumn(b, a);
        },
        applyProjection: function(a) {
            console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
            return this.applyMatrix4(a);
        },
        fromAttribute: function(a, b, c) {
            console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
            return this.fromBufferAttribute(a, b, c);
        },
        distanceToManhattan: function(a) {
            console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
            return this.manhattanDistanceTo(a);
        },
        lengthManhattan: function() {
            console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
            return this.manhattanLength();
        }
    });
    Object.assign(W.prototype, {
        fromAttribute: function(a, b, c) {
            console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
            return this.fromBufferAttribute(a, b, c);
        },
        lengthManhattan: function() {
            console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
            return this.manhattanLength();
        }
    });
    Object.assign(K.prototype, {
        computeTangents: function() {
            console.error("THREE.Geometry: .computeTangents() has been removed.");
        },
        computeLineDistances: function() {
            console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
        }
    });
    Object.assign(D.prototype, {
        getChildByName: function(a) {
            console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
            return this.getObjectByName(a);
        },
        renderDepth: function() {
            console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
        },
        translate: function(a, b) {
            console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
            return this.translateOnAxis(b, a);
        },
        getWorldRotation: function() {
            console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
        }
    });
    Object.defineProperties(D.prototype, {
        eulerOrder: {
            get: function() {
                console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
                return this.rotation.order;
            },
            set: function(a) {
                console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
                this.rotation.order = a;
            }
        },
        useQuaternion: {
            get: function() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
            },
            set: function() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
            }
        }
    });
    Object.defineProperties(Mc.prototype, {
        objects: {
            get: function() {
                console.warn("THREE.LOD: .objects has been renamed to .levels.");
                return this.levels;
            }
        }
    });
    Object.defineProperty(Dd.prototype, "useVertexTexture", {
        get: function() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        },
        set: function() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        }
    });
    Nc.prototype.initBones = function() {
        console.error("THREE.SkinnedMesh: initBones() has been removed.");
    };
    Object.defineProperty(M.prototype, "__arcLengthDivisions", {
        get: function() {
            console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
            return this.arcLengthDivisions;
        },
        set: function(a) {
            console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
            this.arcLengthDivisions = a;
        }
    });
    ca.prototype.setLens = function(a, b) {
        console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
        void 0 !== b && (this.filmGauge = b);
        this.setFocalLength(a);
    };
    Object.defineProperties(T.prototype, {
        onlyShadow: {
            set: function() {
                console.warn("THREE.Light: .onlyShadow has been removed.");
            }
        },
        shadowCameraFov: {
            set: function(a) {
                console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
                this.shadow.camera.fov = a;
            }
        },
        shadowCameraLeft: {
            set: function(a) {
                console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
                this.shadow.camera.left = a;
            }
        },
        shadowCameraRight: {
            set: function(a) {
                console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
                this.shadow.camera.right = a;
            }
        },
        shadowCameraTop: {
            set: function(a) {
                console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
                this.shadow.camera.top = a;
            }
        },
        shadowCameraBottom: {
            set: function(a) {
                console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
                this.shadow.camera.bottom = a;
            }
        },
        shadowCameraNear: {
            set: function(a) {
                console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
                this.shadow.camera.near = a;
            }
        },
        shadowCameraFar: {
            set: function(a) {
                console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
                this.shadow.camera.far = a;
            }
        },
        shadowCameraVisible: {
            set: function() {
                console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
            }
        },
        shadowBias: {
            set: function(a) {
                console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
                this.shadow.bias = a;
            }
        },
        shadowDarkness: {
            set: function() {
                console.warn("THREE.Light: .shadowDarkness has been removed.");
            }
        },
        shadowMapWidth: {
            set: function(a) {
                console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
                this.shadow.mapSize.width = a;
            }
        },
        shadowMapHeight: {
            set: function(a) {
                console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
                this.shadow.mapSize.height = a;
            }
        }
    });
    Object.defineProperties(H.prototype, {
        length: {
            get: function() {
                console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
                return this.array.length;
            }
        },
        copyIndicesArray: function() {
            console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
        }
    });
    Object.assign(B.prototype, {
        addIndex: function(a) {
            console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
            this.setIndex(a);
        },
        addDrawCall: function(a, b, c) {
            void 0 !== c && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
            console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
            this.addGroup(a, b);
        },
        clearDrawCalls: function() {
            console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
            this.clearGroups();
        },
        computeTangents: function() {
            console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
        },
        computeOffsets: function() {
            console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
        }
    });
    Object.defineProperties(B.prototype, {
        drawcalls: {
            get: function() {
                console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
                return this.groups;
            }
        },
        offsets: {
            get: function() {
                console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
                return this.groups;
            }
        }
    });
    Object.assign(Ya.prototype, {
        getArrays: function() {
            console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
        },
        addShapeList: function() {
            console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
        },
        addShape: function() {
            console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
        }
    });
    Object.defineProperties(Xd.prototype, {
        dynamic: {
            set: function() {
                console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
            }
        },
        onUpdate: {
            value: function() {
                console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
                return this;
            }
        }
    });
    Object.defineProperties(Q.prototype, {
        wrapAround: {
            get: function() {
                console.warn("THREE.Material: .wrapAround has been removed.");
            },
            set: function() {
                console.warn("THREE.Material: .wrapAround has been removed.");
            }
        },
        overdraw: {
            get: function() {
                console.warn("THREE.Material: .overdraw has been removed.");
            },
            set: function() {
                console.warn("THREE.Material: .overdraw has been removed.");
            }
        },
        wrapRGB: {
            get: function() {
                console.warn("THREE.Material: .wrapRGB has been removed.");
                return new A;
            }
        },
        shading: {
            get: function() {
                console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
            },
            set: function(a) {
                console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                this.flatShading = 1 === a;
            }
        }
    });
    Object.defineProperties(Ja.prototype, {
        metal: {
            get: function() {
                console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
                return !1;
            },
            set: function() {
                console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
            }
        }
    });
    Object.defineProperties(ea.prototype, {
        derivatives: {
            get: function() {
                console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
                return this.extensions.derivatives;
            },
            set: function(a) {
                console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
                this.extensions.derivatives = a;
            }
        }
    });
    Object.assign(je.prototype, {
        clearTarget: function(a, b, c, d) {
            console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
            this.setRenderTarget(a);
            this.clear(b, c, d);
        },
        animate: function(a) {
            console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
            this.setAnimationLoop(a);
        },
        getCurrentRenderTarget: function() {
            console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
            return this.getRenderTarget();
        },
        getMaxAnisotropy: function() {
            console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
            return this.capabilities.getMaxAnisotropy();
        },
        getPrecision: function() {
            console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
            return this.capabilities.precision;
        },
        resetGLState: function() {
            console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
            return this.state.reset();
        },
        supportsFloatTextures: function() {
            console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
            return this.extensions.get("OES_texture_float");
        },
        supportsHalfFloatTextures: function() {
            console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
            return this.extensions.get("OES_texture_half_float");
        },
        supportsStandardDerivatives: function() {
            console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
            return this.extensions.get("OES_standard_derivatives");
        },
        supportsCompressedTextureS3TC: function() {
            console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
            return this.extensions.get("WEBGL_compressed_texture_s3tc");
        },
        supportsCompressedTexturePVRTC: function() {
            console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
            return this.extensions.get("WEBGL_compressed_texture_pvrtc");
        },
        supportsBlendMinMax: function() {
            console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
            return this.extensions.get("EXT_blend_minmax");
        },
        supportsVertexTextures: function() {
            console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
            return this.capabilities.vertexTextures;
        },
        supportsInstancedArrays: function() {
            console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
            return this.extensions.get("ANGLE_instanced_arrays");
        },
        enableScissorTest: function(a) {
            console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
            this.setScissorTest(a);
        },
        initMaterial: function() {
            console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
        },
        addPrePlugin: function() {
            console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
        },
        addPostPlugin: function() {
            console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
        },
        updateShadowMap: function() {
            console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
        },
        setFaceCulling: function() {
            console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
        },
        allocTextureUnit: function() {
            console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
        },
        setTexture: function() {
            console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
        },
        setTexture2D: function() {
            console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
        },
        setTextureCube: function() {
            console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
        }
    });
    Object.defineProperties(je.prototype, {
        shadowMapEnabled: {
            get: function() {
                return this.shadowMap.enabled;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
                this.shadowMap.enabled = a;
            }
        },
        shadowMapType: {
            get: function() {
                return this.shadowMap.type;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
                this.shadowMap.type = a;
            }
        },
        shadowMapCullFace: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
            }
        }
    });
    Object.defineProperties(rf.prototype, {
        cullFace: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
            }
        },
        renderReverseSided: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
            }
        },
        renderSingleSided: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
            }
        }
    });
    Object.defineProperties(rb.prototype, {
        activeCubeFace: {
            set: function() {
                console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().");
            }
        },
        activeMipMapLevel: {
            set: function() {
                console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().");
            }
        }
    });
    Object.defineProperties(Sa.prototype, {
        wrapS: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
                return this.texture.wrapS;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
                this.texture.wrapS = a;
            }
        },
        wrapT: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
                return this.texture.wrapT;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
                this.texture.wrapT = a;
            }
        },
        magFilter: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
                return this.texture.magFilter;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
                this.texture.magFilter = a;
            }
        },
        minFilter: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
                return this.texture.minFilter;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
                this.texture.minFilter = a;
            }
        },
        anisotropy: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
                return this.texture.anisotropy;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
                this.texture.anisotropy = a;
            }
        },
        offset: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
                return this.texture.offset;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
                this.texture.offset = a;
            }
        },
        repeat: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
                return this.texture.repeat;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
                this.texture.repeat = a;
            }
        },
        format: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
                return this.texture.format;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
                this.texture.format = a;
            }
        },
        type: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
                return this.texture.type;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
                this.texture.type = a;
            }
        },
        generateMipmaps: {
            get: function() {
                console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
                return this.texture.generateMipmaps;
            },
            set: function(a) {
                console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
                this.texture.generateMipmaps = a;
            }
        }
    });
    Object.defineProperties(xf.prototype, {
        standing: {
            set: function() {
                console.warn("THREE.WebVRManager: .standing has been removed.");
            }
        },
        userHeight: {
            set: function() {
                console.warn("THREE.WebVRManager: .userHeight has been removed.");
            }
        }
    });
    qc.prototype.load = function(a) {
        console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
        var b = this;
        (new xe).load(a, function(a) {
            b.setBuffer(a);
        });
        return this;
    };
    Ee.prototype.getData = function() {
        console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
        return this.getFrequencyData();
    };
    qd.prototype.updateCubeMap = function(a, b) {
        console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
        return this.update(a, b);
    };
    qb.crossOrigin = void 0;
    qb.loadTexture = function(a, b, c, d) {
        console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
        var e = new Md;
        e.setCrossOrigin(this.crossOrigin);
        a = e.load(a, c, void 0, d);
        b && (a.mapping = b);
        return a;
    };
    qb.loadTextureCube = function(a, b, c, d) {
        console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
        var e = new qe;
        e.setCrossOrigin(this.crossOrigin);
        a = e.load(a, c, void 0, d);
        b && (a.mapping = b);
        return a;
    };
    qb.loadCompressedTexture = function() {
        console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
    };
    qb.loadCompressedTextureCube = function() {
        console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
    };
    k.WebGLMultisampleRenderTarget = ce;
    k.WebGLRenderTargetCube = rb;
    k.WebGLRenderTarget = Sa;
    k.WebGLRenderer = je;
    k.ShaderLib = Va;
    k.UniformsLib = J;
    k.UniformsUtils = nh;
    k.ShaderChunk = R;
    k.FogExp2 = Ad;
    k.Fog = Bd;
    k.Scene = Cd;
    k.Sprite = Lc;
    k.LOD = Mc;
    k.SkinnedMesh = Nc;
    k.Skeleton = Dd;
    k.Bone = ke;
    k.Mesh = qa;
    k.LineSegments = V;
    k.LineLoop = Ed;
    k.Line = ka;
    k.Points = Zb;
    k.Group = Xb;
    k.VideoTexture = le;
    k.DataTexture = sb;
    k.DataTexture2DArray = Ub;
    k.DataTexture3D = Vb;
    k.CompressedTexture = $b;
    k.CubeTexture = cb;
    k.CanvasTexture = Oc;
    k.DepthTexture = Pc;
    k.Texture = Y;
    k.AnimationLoader = Hf;
    k.CompressedTextureLoader = If;
    k.DataTextureLoader = pe;
    k.CubeTextureLoader = qe;
    k.TextureLoader = Md;
    k.ObjectLoader = te;
    k.MaterialLoader = Vd;
    k.BufferGeometryLoader = se;
    k.DefaultLoadingManager = za;
    k.LoadingManager = oe;
    k.ImageLoader = ld;
    k.ImageBitmapLoader = ue;
    k.FontLoader = Kf;
    k.FileLoader = Ka;
    k.Loader = pd;
    k.LoaderUtils = Te;
    k.Cache = Qb;
    k.AudioLoader = xe;
    k.SpotLightShadow = Od;
    k.SpotLight = Pd;
    k.PointLight = Qd;
    k.RectAreaLight = Ud;
    k.HemisphereLight = Nd;
    k.HemisphereLightProbe = ye;
    k.DirectionalLightShadow = Rd;
    k.DirectionalLight = Sd;
    k.AmbientLight = Td;
    k.AmbientLightProbe = ze;
    k.LightShadow = Pb;
    k.Light = T;
    k.LightProbe = Qa;
    k.StereoCamera = Lf;
    k.PerspectiveCamera = ca;
    k.OrthographicCamera = od;
    k.CubeCamera = qd;
    k.ArrayCamera = Jc;
    k.Camera = Xa;
    k.AudioListener = Be;
    k.PositionalAudio = De;
    k.AudioContext = Ce;
    k.AudioAnalyser = Ee;
    k.Audio = qc;
    k.VectorKeyframeTrack = oc;
    k.StringKeyframeTrack = Ld;
    k.QuaternionKeyframeTrack = kd;
    k.NumberKeyframeTrack = nc;
    k.ColorKeyframeTrack = Jd;
    k.BooleanKeyframeTrack = Id;
    k.PropertyMixer = Fe;
    k.PropertyBinding = ia;
    k.KeyframeTrack = da;
    k.AnimationUtils = ba;
    k.AnimationObjectGroup = Nf;
    k.AnimationMixer = Ge;
    k.AnimationClip = Fa;
    k.Uniform = Xd;
    k.InstancedBufferGeometry = He;
    k.BufferGeometry = B;
    k.Geometry = K;
    k.InterleavedBufferAttribute = Kc;
    k.InstancedInterleavedBuffer = Ie;
    k.InterleavedBuffer = Ab;
    k.InstancedBufferAttribute = Je;
    k.Face3 = Sb;
    k.Object3D = D;
    k.Raycaster = Pf;
    k.Layers = ee;
    k.EventDispatcher = ta;
    k.Clock = Ae;
    k.QuaternionLinearInterpolant = Kd;
    k.LinearInterpolant = jd;
    k.DiscreteInterpolant = Hd;
    k.CubicInterpolant = Gd;
    k.Interpolant = Da;
    k.Triangle = ra;
    k.Math = O;
    k.Spherical = Rf;
    k.Cylindrical = Sf;
    k.Plane = Ua;
    k.Frustum = yd;
    k.Sphere = Ta;
    k.Ray = zb;
    k.Matrix4 = P;
    k.Matrix3 = na;
    k.Box3 = Ga;
    k.Box2 = Le;
    k.Line3 = Me;
    k.Euler = tb;
    k.Vector4 = W;
    k.Vector3 = n;
    k.Vector2 = C;
    k.Quaternion = ma;
    k.Color = A;
    k.SphericalHarmonics3 = Wd;
    k.ImmediateRenderObject = rd;
    k.VertexNormalsHelper = sd;
    k.SpotLightHelper = rc;
    k.SkeletonHelper = sc;
    k.PointLightHelper = tc;
    k.RectAreaLightHelper = uc;
    k.HemisphereLightHelper = vc;
    k.LightProbeHelper = wc;
    k.GridHelper = Yd;
    k.PolarGridHelper = Zd;
    k.PositionalAudioHelper = xc;
    k.FaceNormalsHelper = td;
    k.DirectionalLightHelper = yc;
    k.CameraHelper = ud;
    k.BoxHelper = gb;
    k.Box3Helper = vd;
    k.PlaneHelper = wd;
    k.ArrowHelper = hb;
    k.AxesHelper = xd;
    k.Shape = pb;
    k.Path = Pa;
    k.ShapePath = ve;
    k.Font = we;
    k.CurvePath = fb;
    k.Curve = M;
    k.ImageUtils = qb;
    k.ShapeUtils = db;
    k.WebGLUtils = tf;
    k.WireframeGeometry = ac;
    k.ParametricGeometry = Qc;
    k.ParametricBufferGeometry = bc;
    k.TetrahedronGeometry = Sc;
    k.TetrahedronBufferGeometry = cc;
    k.OctahedronGeometry = Tc;
    k.OctahedronBufferGeometry = Bb;
    k.IcosahedronGeometry = Uc;
    k.IcosahedronBufferGeometry = dc;
    k.DodecahedronGeometry = Vc;
    k.DodecahedronBufferGeometry = ec;
    k.PolyhedronGeometry = Rc;
    k.PolyhedronBufferGeometry = la;
    k.TubeGeometry = Wc;
    k.TubeBufferGeometry = Cb;
    k.TorusKnotGeometry = Xc;
    k.TorusKnotBufferGeometry = fc;
    k.TorusGeometry = Yc;
    k.TorusBufferGeometry = gc;
    k.TextGeometry = cd;
    k.TextBufferGeometry = hc;
    k.SphereGeometry = dd;
    k.SphereBufferGeometry = ob;
    k.RingGeometry = ed;
    k.RingBufferGeometry = ic;
    k.PlaneGeometry = Gc;
    k.PlaneBufferGeometry = yb;
    k.LatheGeometry = fd;
    k.LatheBufferGeometry = jc;
    k.ShapeGeometry = Fb;
    k.ShapeBufferGeometry = Gb;
    k.ExtrudeGeometry = Eb;
    k.ExtrudeBufferGeometry = Ya;
    k.EdgesGeometry = kc;
    k.ConeGeometry = gd;
    k.ConeBufferGeometry = hd;
    k.CylinderGeometry = Hb;
    k.CylinderBufferGeometry = eb;
    k.CircleGeometry = id;
    k.CircleBufferGeometry = lc;
    k.BoxGeometry = Tb;
    k.CubeGeometry = Tb;
    k.BoxBufferGeometry = wb;
    k.ShadowMaterial = Ib;
    k.SpriteMaterial = nb;
    k.RawShaderMaterial = mc;
    k.ShaderMaterial = ea;
    k.PointsMaterial = Ia;
    k.MeshPhysicalMaterial = Jb;
    k.MeshStandardMaterial = Za;
    k.MeshPhongMaterial = Ja;
    k.MeshToonMaterial = Kb;
    k.MeshNormalMaterial = Lb;
    k.MeshLambertMaterial = Mb;
    k.MeshDepthMaterial = jb;
    k.MeshDistanceMaterial = kb;
    k.MeshBasicMaterial = Ca;
    k.MeshMatcapMaterial = Nb;
    k.LineDashedMaterial = Ob;
    k.LineBasicMaterial = U;
    k.Material = Q;
    k.Float64BufferAttribute = Fc;
    k.Float32BufferAttribute = E;
    k.Uint32BufferAttribute = vb;
    k.Int32BufferAttribute = Ec;
    k.Uint16BufferAttribute = ub;
    k.Int16BufferAttribute = Dc;
    k.Uint8ClampedBufferAttribute = Cc;
    k.Uint8BufferAttribute = Bc;
    k.Int8BufferAttribute = Ac;
    k.BufferAttribute = H;
    k.ArcCurve = pc;
    k.CatmullRomCurve3 = oa;
    k.CubicBezierCurve = La;
    k.CubicBezierCurve3 = $a;
    k.EllipseCurve = Ea;
    k.LineCurve = wa;
    k.LineCurve3 = Ma;
    k.QuadraticBezierCurve = Na;
    k.QuadraticBezierCurve3 = ab;
    k.SplineCurve = Oa;
    k.REVISION = "104";
    k.MOUSE = {
        LEFT: 0,
        MIDDLE: 1,
        RIGHT: 2
    };
    k.CullFaceNone = 0;
    k.CullFaceBack = 1;
    k.CullFaceFront = 2;
    k.CullFaceFrontBack = 3;
    k.FrontFaceDirectionCW = 0;
    k.FrontFaceDirectionCCW = 1;
    k.BasicShadowMap = 0;
    k.PCFShadowMap = 1;
    k.PCFSoftShadowMap = 2;
    k.FrontSide = 0;
    k.BackSide = 1;
    k.DoubleSide = 2;
    k.FlatShading = 1;
    k.SmoothShading = 2;
    k.NoColors = 0;
    k.FaceColors = 1;
    k.VertexColors = 2;
    k.NoBlending = 0;
    k.NormalBlending = 1;
    k.AdditiveBlending = 2;
    k.SubtractiveBlending = 3;
    k.MultiplyBlending = 4;
    k.CustomBlending = 5;
    k.AddEquation = 100;
    k.SubtractEquation = 101;
    k.ReverseSubtractEquation = 102;
    k.MinEquation = 103;
    k.MaxEquation = 104;
    k.ZeroFactor = 200;
    k.OneFactor = 201;
    k.SrcColorFactor = 202;
    k.OneMinusSrcColorFactor = 203;
    k.SrcAlphaFactor = 204;
    k.OneMinusSrcAlphaFactor = 205;
    k.DstAlphaFactor = 206;
    k.OneMinusDstAlphaFactor = 207;
    k.DstColorFactor = 208;
    k.OneMinusDstColorFactor = 209;
    k.SrcAlphaSaturateFactor = 210;
    k.NeverDepth = 0;
    k.AlwaysDepth = 1;
    k.LessDepth = 2;
    k.LessEqualDepth = 3;
    k.EqualDepth = 4;
    k.GreaterEqualDepth = 5;
    k.GreaterDepth = 6;
    k.NotEqualDepth = 7;
    k.MultiplyOperation = 0;
    k.MixOperation = 1;
    k.AddOperation = 2;
    k.NoToneMapping = 0;
    k.LinearToneMapping = 1;
    k.ReinhardToneMapping = 2;
    k.Uncharted2ToneMapping = 3;
    k.CineonToneMapping = 4;
    k.ACESFilmicToneMapping = 5;
    k.UVMapping = 300;
    k.CubeReflectionMapping = 301;
    k.CubeRefractionMapping = 302;
    k.EquirectangularReflectionMapping = 303;
    k.EquirectangularRefractionMapping = 304;
    k.SphericalReflectionMapping = 305;
    k.CubeUVReflectionMapping = 306;
    k.CubeUVRefractionMapping = 307;
    k.RepeatWrapping = 1E3;
    k.ClampToEdgeWrapping = 1001;
    k.MirroredRepeatWrapping = 1002;
    k.NearestFilter = 1003;
    k.NearestMipMapNearestFilter = 1004;
    k.NearestMipMapLinearFilter = 1005;
    k.LinearFilter = 1006;
    k.LinearMipMapNearestFilter = 1007;
    k.LinearMipMapLinearFilter = 1008;
    k.UnsignedByteType = 1009;
    k.ByteType = 1010;
    k.ShortType = 1011;
    k.UnsignedShortType = 1012;
    k.IntType = 1013;
    k.UnsignedIntType = 1014;
    k.FloatType = 1015;
    k.HalfFloatType = 1016;
    k.UnsignedShort4444Type = 1017;
    k.UnsignedShort5551Type = 1018;
    k.UnsignedShort565Type = 1019;
    k.UnsignedInt248Type = 1020;
    k.AlphaFormat = 1021;
    k.RGBFormat = 1022;
    k.RGBAFormat = 1023;
    k.LuminanceFormat = 1024;
    k.LuminanceAlphaFormat = 1025;
    k.RGBEFormat = 1023;
    k.DepthFormat = 1026;
    k.DepthStencilFormat = 1027;
    k.RedFormat = 1028;
    k.RGB_S3TC_DXT1_Format = 33776;
    k.RGBA_S3TC_DXT1_Format = 33777;
    k.RGBA_S3TC_DXT3_Format = 33778;
    k.RGBA_S3TC_DXT5_Format = 33779;
    k.RGB_PVRTC_4BPPV1_Format = 35840;
    k.RGB_PVRTC_2BPPV1_Format = 35841;
    k.RGBA_PVRTC_4BPPV1_Format = 35842;
    k.RGBA_PVRTC_2BPPV1_Format = 35843;
    k.RGB_ETC1_Format = 36196;
    k.RGBA_ASTC_4x4_Format = 37808;
    k.RGBA_ASTC_5x4_Format = 37809;
    k.RGBA_ASTC_5x5_Format = 37810;
    k.RGBA_ASTC_6x5_Format = 37811;
    k.RGBA_ASTC_6x6_Format = 37812;
    k.RGBA_ASTC_8x5_Format = 37813;
    k.RGBA_ASTC_8x6_Format = 37814;
    k.RGBA_ASTC_8x8_Format = 37815;
    k.RGBA_ASTC_10x5_Format = 37816;
    k.RGBA_ASTC_10x6_Format = 37817;
    k.RGBA_ASTC_10x8_Format = 37818;
    k.RGBA_ASTC_10x10_Format = 37819;
    k.RGBA_ASTC_12x10_Format = 37820;
    k.RGBA_ASTC_12x12_Format = 37821;
    k.LoopOnce = 2200;
    k.LoopRepeat = 2201;
    k.LoopPingPong = 2202;
    k.InterpolateDiscrete = 2300;
    k.InterpolateLinear = 2301;
    k.InterpolateSmooth = 2302;
    k.ZeroCurvatureEnding = 2400;
    k.ZeroSlopeEnding = 2401;
    k.WrapAroundEnding = 2402;
    k.TrianglesDrawMode = 0;
    k.TriangleStripDrawMode = 1;
    k.TriangleFanDrawMode = 2;
    k.LinearEncoding = 3E3;
    k.sRGBEncoding = 3001;
    k.GammaEncoding = 3007;
    k.RGBEEncoding = 3002;
    k.LogLuvEncoding = 3003;
    k.RGBM7Encoding = 3004;
    k.RGBM16Encoding = 3005;
    k.RGBDEncoding = 3006;
    k.BasicDepthPacking = 3200;
    k.RGBADepthPacking = 3201;
    k.TangentSpaceNormalMap = 0;
    k.ObjectSpaceNormalMap = 1;
    k.Face4 = function(a, b, c, d, e, f, g) {
        console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
        return new Sb(a, b, c, e, f, g);
    };
    k.LineStrip = 0;
    k.LinePieces = 1;
    k.MeshFaceMaterial = function(a) {
        console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
        return a;
    };
    k.MultiMaterial = function(a) {
        void 0 === a && (a = []);
        console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
        a.isMultiMaterial = !0;
        a.materials = a;
        a.clone = function() {
            return a.slice();
        };
        return a;
    };
    k.PointCloud = function(a, b) {
        console.warn("THREE.PointCloud has been renamed to THREE.Points.");
        return new Zb(a, b);
    };
    k.Particle = function(a) {
        console.warn("THREE.Particle has been renamed to THREE.Sprite.");
        return new Lc(a);
    };
    k.ParticleSystem = function(a, b) {
        console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
        return new Zb(a, b);
    };
    k.PointCloudMaterial = function(a) {
        console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
        return new Ia(a);
    };
    k.ParticleBasicMaterial = function(a) {
        console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
        return new Ia(a);
    };
    k.ParticleSystemMaterial = function(a) {
        console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
        return new Ia(a);
    };
    k.Vertex = function(a, b, c) {
        console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
        return new n(a, b, c);
    };
    k.DynamicBufferAttribute = function(a, b) {
        console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");
        return new H(a, b).setDynamic(!0);
    };
    k.Int8Attribute = function(a, b) {
        console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
        return new Ac(a, b);
    };
    k.Uint8Attribute = function(a, b) {
        console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
        return new Bc(a, b);
    };
    k.Uint8ClampedAttribute = function(a, b) {
        console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
        return new Cc(a, b);
    };
    k.Int16Attribute = function(a, b) {
        console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
        return new Dc(a, b);
    };
    k.Uint16Attribute = function(a, b) {
        console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
        return new ub(a, b);
    };
    k.Int32Attribute = function(a, b) {
        console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
        return new Ec(a, b);
    };
    k.Uint32Attribute = function(a, b) {
        console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
        return new vb(a, b);
    };
    k.Float32Attribute = function(a, b) {
        console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
        return new E(a, b);
    };
    k.Float64Attribute = function(a, b) {
        console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
        return new Fc(a, b);
    };
    k.ClosedSplineCurve3 = Uf;
    k.SplineCurve3 = Vf;
    k.Spline = Oe;
    k.AxisHelper = function(a) {
        console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
        return new xd(a);
    };
    k.BoundingBoxHelper = function(a, b) {
        console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
        return new gb(a, b);
    };
    k.EdgesHelper = function(a, b) {
        console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
        return new V(new kc(a.geometry), new U({
            color: void 0 !== b ? b : 16777215
        }));
    };
    k.WireframeHelper = function(a, b) {
        console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
        return new V(new ac(a.geometry), new U({
            color: void 0 !== b ? b : 16777215
        }));
    };
    k.XHRLoader = function(a) {
        console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
        return new Ka(a);
    };
    k.BinaryTextureLoader = function(a) {
        console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
        return new pe(a);
    };
    k.GeometryUtils = {
        merge: function(a, b, c) {
            console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
            if (b.isMesh) {
                b.matrixAutoUpdate && b.updateMatrix();
                var d = b.matrix;
                b = b.geometry;
            }
            a.merge(b, d, c);
        },
        center: function(a) {
            console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
            return a.center();
        }
    };
    k.Projector = function() {
        console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");
        this.projectVector = function(a, b) {
            console.warn("THREE.Projector: .projectVector() is now vector.project().");
            a.project(b);
        };
        this.unprojectVector = function(a, b) {
            console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
            a.unproject(b);
        };
        this.pickingRay = function() {
            console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
        };
    };
    k.CanvasRenderer = function() {
        console.error("THREE.CanvasRenderer has been removed");
    };
    k.JSONLoader = function() {
        console.error("THREE.JSONLoader has been removed.");
    };
    k.SceneUtils = {
        createMultiMaterialObject: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        },
        detach: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        },
        attach: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js");
        }
    };
    k.LensFlare = function() {
        console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js");
    };
    Object.defineProperty(k, "__esModule", {
        value: !0
    });
});

//# sourceMappingURL=data:application/json;base64,