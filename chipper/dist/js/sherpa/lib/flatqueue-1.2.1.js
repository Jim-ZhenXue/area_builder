let FlatQueue = class FlatQueue {
    clear() {
        this.length = 0;
    }
    push(id, value) {
        let pos = this.length++;
        this.ids[pos] = id;
        this.values[pos] = value;
        while(pos > 0){
            const parent = pos - 1 >> 1;
            const parentValue = this.values[parent];
            if (value >= parentValue) break;
            this.ids[pos] = this.ids[parent];
            this.values[pos] = parentValue;
            pos = parent;
        }
        this.ids[pos] = id;
        this.values[pos] = value;
    }
    pop() {
        if (this.length === 0) return undefined;
        const top = this.ids[0];
        this.length--;
        if (this.length > 0) {
            const id = this.ids[0] = this.ids[this.length];
            const value = this.values[0] = this.values[this.length];
            const halfLength = this.length >> 1;
            let pos = 0;
            while(pos < halfLength){
                let left = (pos << 1) + 1;
                const right = left + 1;
                let bestIndex = this.ids[left];
                let bestValue = this.values[left];
                const rightValue = this.values[right];
                if (right < this.length && rightValue < bestValue) {
                    left = right;
                    bestIndex = this.ids[right];
                    bestValue = rightValue;
                }
                if (bestValue >= value) break;
                this.ids[pos] = bestIndex;
                this.values[pos] = bestValue;
                pos = left;
            }
            this.ids[pos] = id;
            this.values[pos] = value;
        }
        return top;
    }
    peek() {
        if (this.length === 0) return undefined;
        return this.ids[0];
    }
    peekValue() {
        if (this.length === 0) return undefined;
        return this.values[0];
    }
    constructor(){
        this.ids = [];
        this.values = [];
        this.length = 0;
    }
};
window.FlatQueue = FlatQueue;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NoZXJwYS9saWIvZmxhdHF1ZXVlLTEuMi4xLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgRmxhdFF1ZXVlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlkcyA9IFtdO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBwdXNoKGlkLCB2YWx1ZSkge1xuICAgICAgICBsZXQgcG9zID0gdGhpcy5sZW5ndGgrKztcbiAgICAgICAgdGhpcy5pZHNbcG9zXSA9IGlkO1xuICAgICAgICB0aGlzLnZhbHVlc1twb3NdID0gdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKHBvcyA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IChwb3MgLSAxKSA+PiAxO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50VmFsdWUgPSB0aGlzLnZhbHVlc1twYXJlbnRdO1xuICAgICAgICAgICAgaWYgKHZhbHVlID49IHBhcmVudFZhbHVlKSBicmVhaztcbiAgICAgICAgICAgIHRoaXMuaWRzW3Bvc10gPSB0aGlzLmlkc1twYXJlbnRdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbcG9zXSA9IHBhcmVudFZhbHVlO1xuICAgICAgICAgICAgcG9zID0gcGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZHNbcG9zXSA9IGlkO1xuICAgICAgICB0aGlzLnZhbHVlc1twb3NdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcG9wKCkge1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29uc3QgdG9wID0gdGhpcy5pZHNbMF07XG4gICAgICAgIHRoaXMubGVuZ3RoLS07XG5cbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaWQgPSB0aGlzLmlkc1swXSA9IHRoaXMuaWRzW3RoaXMubGVuZ3RoXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZXNbMF0gPSB0aGlzLnZhbHVlc1t0aGlzLmxlbmd0aF07XG4gICAgICAgICAgICBjb25zdCBoYWxmTGVuZ3RoID0gdGhpcy5sZW5ndGggPj4gMTtcbiAgICAgICAgICAgIGxldCBwb3MgPSAwO1xuXG4gICAgICAgICAgICB3aGlsZSAocG9zIDwgaGFsZkxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gKHBvcyA8PCAxKSArIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBsZWZ0ICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgYmVzdEluZGV4ID0gdGhpcy5pZHNbbGVmdF07XG4gICAgICAgICAgICAgICAgbGV0IGJlc3RWYWx1ZSA9IHRoaXMudmFsdWVzW2xlZnRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0VmFsdWUgPSB0aGlzLnZhbHVlc1tyaWdodF07XG5cbiAgICAgICAgICAgICAgICBpZiAocmlnaHQgPCB0aGlzLmxlbmd0aCAmJiByaWdodFZhbHVlIDwgYmVzdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSByaWdodDtcbiAgICAgICAgICAgICAgICAgICAgYmVzdEluZGV4ID0gdGhpcy5pZHNbcmlnaHRdO1xuICAgICAgICAgICAgICAgICAgICBiZXN0VmFsdWUgPSByaWdodFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYmVzdFZhbHVlID49IHZhbHVlKSBicmVhaztcblxuICAgICAgICAgICAgICAgIHRoaXMuaWRzW3Bvc10gPSBiZXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNbcG9zXSA9IGJlc3RWYWx1ZTtcbiAgICAgICAgICAgICAgICBwb3MgPSBsZWZ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlkc1twb3NdID0gaWQ7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1twb3NdID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9wO1xuICAgIH1cblxuICAgIHBlZWsoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRzWzBdO1xuICAgIH1cblxuICAgIHBlZWtWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbMF07XG4gICAgfVxufVxud2luZG93LkZsYXRRdWV1ZSA9IEZsYXRRdWV1ZTtcbiJdLCJuYW1lcyI6WyJGbGF0UXVldWUiLCJjbGVhciIsImxlbmd0aCIsInB1c2giLCJpZCIsInZhbHVlIiwicG9zIiwiaWRzIiwidmFsdWVzIiwicGFyZW50IiwicGFyZW50VmFsdWUiLCJwb3AiLCJ1bmRlZmluZWQiLCJ0b3AiLCJoYWxmTGVuZ3RoIiwibGVmdCIsInJpZ2h0IiwiYmVzdEluZGV4IiwiYmVzdFZhbHVlIiwicmlnaHRWYWx1ZSIsInBlZWsiLCJwZWVrVmFsdWUiLCJjb25zdHJ1Y3RvciIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQSxBQUFNQSxZQUFOLE1BQU1BO0lBUUZDLFFBQVE7UUFDSixJQUFJLENBQUNDLE1BQU0sR0FBRztJQUNsQjtJQUVBQyxLQUFLQyxFQUFFLEVBQUVDLEtBQUssRUFBRTtRQUNaLElBQUlDLE1BQU0sSUFBSSxDQUFDSixNQUFNO1FBQ3JCLElBQUksQ0FBQ0ssR0FBRyxDQUFDRCxJQUFJLEdBQUdGO1FBQ2hCLElBQUksQ0FBQ0ksTUFBTSxDQUFDRixJQUFJLEdBQUdEO1FBRW5CLE1BQU9DLE1BQU0sRUFBRztZQUNaLE1BQU1HLFNBQVMsQUFBQ0gsTUFBTSxLQUFN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