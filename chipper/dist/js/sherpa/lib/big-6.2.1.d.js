// The export is the same as type/value combo symbol 'Big'.
module.exports = Big;

//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["../../../../../sherpa/lib/big-6.2.1.d.ts"],"sourcesContent":["declare namespace Big {\n    type BigSource = number | string | Big;\n\n    /**\n     * GT = 1, EQ = 0, LT = -1\n     */\n    type Comparison = -1 | 0 | 1;\n\n    /**\n     * RoundDown = 0, RoundHalfUp = 1, RoundHalfEven = 2, RoundUp = 3\n     */\n    type RoundingMode = 0 | 1 | 2 | 3;\n\n    interface BigConstructor {\n        /**\n         * Returns a new instance of a Big number object\n         *\n         * String values may be in exponential, as well as normal (non-exponential) notation.\n         * There is no limit to the number of digits of a string value (other than that of Javascript's maximum array size), but the largest recommended exponent magnitude is 1e+6.\n         * Infinity, NaN and hexadecimal literal strings, e.g. '0xff', are not valid.\n         * String values in octal literal form will be interpreted as decimals, e.g. '011' is 11, not 9.\n         *\n         * @throws `NaN` on an invalid value.\n         */\n        new(value: BigSource): Big;\n\n        /**\n         * Returns a new instance of a Big number object\n         *\n         * String values may be in exponential, as well as normal (non-exponential) notation.\n         * There is no limit to the number of digits of a string value (other than that of Javascript's maximum array size), but the largest recommended exponent magnitude is 1e+6.\n         * Infinity, NaN and hexadecimal literal strings, e.g. '0xff', are not valid.\n         * String values in octal literal form will be interpreted as decimals, e.g. '011' is 11, not 9.\n         *\n         * @throws `NaN` on an invalid value.\n         */\n        (value: BigSource): Big;\n\n        /**\n         * Create an additional Big number constructor\n         *\n         * Values created with the returned constructor will have a separate set of configuration values.\n         * This can be used to create Big objects with different DP and RM values.\n         * Big numbers created by different constructors can be used together in operations, and it is the DP and RM setting of the Big number that an operation is called upon that will apply.\n         * In the interest of memory efficiency, all Big number constructors share the same prototype object,\n         * so while the DP and RM (and any other own properties) of a constructor are isolated and untouchable by another, its prototype methods are not.\n         */\n        (): BigConstructor;\n\n        /**\n         * The maximum number of decimal places of the results of operations involving division.\n         * It is relevant only to the div and sqrt methods, and the pow method when the exponent is negative.\n         *\n         * 0 to 1e+6 inclusive\n         * Default value: 20\n         */\n        DP: number;\n        /**\n         * The rounding mode used in the above operations and by round, toExponential, toFixed and toPrecision.\n         * Default value: 1\n         */\n        RM: number;\n        /**\n         * The negative exponent value at and below which toString returns exponential notation.\n         *\n         * -1e+6 to 0 inclusive\n         * Default value: -7\n         */\n        NE: number;\n        /**\n         * The positive exponent value at and above which toString returns exponential notation.\n         *\n         * 0 to 1e+6 inclusive\n         * Default value: 21\n         */\n        PE: number;\n        /**\n         * When set to true, an error will be thrown if a primitive number is passed to the Big constructor,\n         * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a primitive number without a loss of precision.\n         *\n         * true|false\n         * Default value: false\n         */\n        strict: boolean;\n\n        /** Readonly rounding modes */\n\n        /**\n         * Rounds towards zero.\n         * I.e. truncate, no rounding.\n         */\n        readonly roundDown: 0;\n        /**\n         * Rounds towards nearest neighbour.\n         * If equidistant, rounds away from zero.\n         */\n        readonly roundHalfUp: 1;\n        /**\n         * Rounds towards nearest neighbour.\n         * If equidistant, rounds towards even neighbour.\n         */\n        readonly roundHalfEven: 2;\n        /**\n         * Rounds away from zero.\n         */\n        readonly roundUp: 3;\n\n        readonly Big: BigConstructor;\n    }\n\n    interface Big {\n        /** Returns a Big number whose value is the absolute value, i.e. the magnitude, of this Big number. */\n        abs(): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number plus n - alias for .plus().\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        add(n: BigSource): Big;\n        /**\n         * Compare the values.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        cmp(n: BigSource): Comparison;\n        /**\n         * Returns a Big number whose value is the value of this Big number divided by n.\n         *\n         * If the result has more fraction digits than is specified by Big.DP, it will be rounded to Big.DP decimal places using rounding mode Big.RM.\n         *\n         * @throws `NaN` if n is invalid.\n         * @throws `±Infinity` on division by zero.\n         * @throws `NaN` on division of zero by zero.\n         */\n        div(n: BigSource): Big;\n        /**\n         * Returns true if the value of this Big equals the value of n, otherwise returns false.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        eq(n: BigSource): boolean;\n        /**\n         * Returns true if the value of this Big is greater than the value of n, otherwise returns false.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        gt(n: BigSource): boolean;\n        /**\n         * Returns true if the value of this Big is greater than or equal to the value of n, otherwise returns false.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        gte(n: BigSource): boolean;\n        /**\n         * Returns true if the value of this Big is less than the value of n, otherwise returns false.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        lt(n: BigSource): boolean;\n        /**\n         * Returns true if the value of this Big is less than or equal to the value of n, otherwise returns false.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        lte(n: BigSource): boolean;\n        /**\n         * Returns a Big number whose value is the value of this Big number minus n.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        minus(n: BigSource): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number modulo n, i.e. the integer remainder of dividing this Big number by n.\n         *\n         * The result will have the same sign as this Big number, and it will match that of Javascript's % operator (within the limits of its precision) and BigDecimal's remainder method.\n         *\n         * @throws `NaN` if n is negative or otherwise invalid.\n         */\n        mod(n: BigSource): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number times n - alias for .times().\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        mul(n: BigSource): Big;\n        /**\n         * Return a new Big whose value is the value of this Big negated.\n         */\n        neg(): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number plus n.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        plus(n: BigSource): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number raised to the power exp.\n         *\n         * If exp is negative and the result has more fraction digits than is specified by Big.DP, it will be rounded to Big.DP decimal places using rounding mode Big.RM.\n         *\n         * @param exp The power to raise the number to, -1e+6 to 1e+6 inclusive\n         * @throws `!pow!` if exp is invalid.\n         *\n         * Note: High value exponents may cause this method to be slow to return.\n         */\n        pow(exp: number): Big;\n        /**\n         * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n         * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n         *\n         * @param sd Significant digits: integer, 1 to MAX_DP inclusive.\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n         * @throws `!prec!` if sd is invalid.\n         * @throws `!Big.RM!` if rm is invalid.\n         */\n        prec(sd: number, rm?: RoundingMode): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number rounded using rounding mode rm to a maximum of dp decimal places.\n         *\n         * @param dp Decimal places, 0 to 1e+6 inclusive\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n         * @throws `!round!` if dp is invalid.\n         * @throws `!Big.RM!` if rm is invalid.\n         */\n        round(dp?: number, rm?: RoundingMode): Big;\n        /**\n         * Returns a Big number whose value is the square root of this Big number.\n         *\n         * If the result has more fraction digits than is specified by Big.DP, it will be rounded to Big.DP decimal places using rounding mode Big.RM.\n         *\n         * @throws `NaN` if this Big number is negative.\n         */\n        sqrt(): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number minus n - alias for .minus().\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        sub(n: BigSource): Big;\n        /**\n         * Returns a Big number whose value is the value of this Big number times n.\n         *\n         * @throws `NaN` if n is invalid.\n         */\n        times(n: BigSource): Big;\n        /**\n         * Returns a string representing the value of this Big number in exponential notation to a fixed number of decimal places dp.\n         *\n         * If the value of this Big number in exponential notation has more digits to the right of the decimal point than is specified by dp,\n         * the return value will be rounded to dp decimal places using rounding mode Big.RM.\n         *\n         * If the value of this Big number in exponential notation has fewer digits to the right of the decimal point than is specified by dp, the return value will be appended with zeros accordingly.\n         *\n         * If dp is omitted, or is null or undefined, the number of digits after the decimal point defaults to the minimum number of digits necessary to represent the value exactly.\n         *\n         * @param dp Decimal places, 0 to 1e+6 inclusive\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n         * @throws `!toFix!` if dp is invalid.\n         */\n        toExponential(dp?: number, rm?: RoundingMode): string;\n        /**\n         * Returns a string representing the value of this Big number in normal notation to a fixed number of decimal places dp.\n         *\n         * If the value of this Big number in normal notation has more digits to the right of the decimal point than is specified by dp,\n         * the return value will be rounded to dp decimal places using rounding mode Big.RM.\n         *\n         * If the value of this Big number in normal notation has fewer fraction digits then is specified by dp, the return value will be appended with zeros accordingly.\n         *\n         * Unlike Number.prototype.toFixed, which returns exponential notation if a number is greater or equal to 1021, this method will always return normal notation.\n         *\n         * If dp is omitted, or is null or undefined, then the return value is simply the value in normal notation.\n         * This is also unlike Number.prototype.toFixed, which returns the value to zero decimal places.\n         *\n         * @param dp Decimal places, 0 to 1e+6 inclusive\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n         * @throws `!toFix!` if dp is invalid.\n         */\n        toFixed(dp?: number, rm?: RoundingMode): string;\n        /**\n         * Returns a string representing the value of this Big number to the specified number of significant digits sd.\n         *\n         * If the value of this Big number has more digits than is specified by sd, the return value will be rounded to sd significant digits using rounding mode Big.RM.\n         *\n         * If the value of this Big number has fewer digits than is specified by sd, the return value will be appended with zeros accordingly.\n         *\n         * If sd is less than the number of digits necessary to represent the integer part of the value in normal notation, then exponential notation is used.\n         *\n         * If sd is omitted, or is null or undefined, then the return value is the same as .toString().\n         *\n         * @param sd Significant digits, 1 to 1e+6 inclusive\n         * @param rm Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n         * @throws `!toPre!` if sd is invalid.\n         */\n        toPrecision(sd?: number, rm?: RoundingMode): string;\n        /**\n         * Returns a string representing the value of this Big number.\n         *\n         * If this Big number has a positive exponent that is equal to or greater than 21, or a negative exponent equal to or less than -7, then exponential notation is returned.\n         *\n         * The point at which toString returns exponential rather than normal notation can be adjusted by changing\n         * the value of Big.E_POS and Big.E_NEG. By default, Big numbers correspond to Javascript's number type in this regard.\n         */\n        toString(): string;\n        /**\n         * Returns a primitive number representing the value of this Big number.\n         *\n         * If Big.strict is true an error will be thrown if toNumber is called on a Big number which cannot be converted to a primitive number without a loss of precision.\n         *\n         * @since 6.0\n         */\n        toNumber(): number;\n        /**\n         * Returns a string representing the value of this Big number.\n         *\n         * If this Big number has a positive exponent that is equal to or greater than 21, or a negative exponent equal to or less than -7, then exponential notation is returned.\n         *\n         * The point at which toString returns exponential rather than normal notation can be adjusted by changing\n         * the value of Big.E_POS and Big.E_NEG. By default, Big numbers correspond to Javascript's number type in this regard.\n         */\n        valueOf(): string;\n        /**\n         * Returns a string representing the value of this Big number.\n         *\n         * If this Big number has a positive exponent that is equal to or greater than 21, or a negative exponent equal to or less than -7, then exponential notation is returned.\n         *\n         * The point at which toString returns exponential rather than normal notation can be adjusted by changing\n         * the value of Big.E_POS and Big.E_NEG. By default, Big numbers correspond to Javascript's number type in this regard.\n         */\n        toJSON(): string;\n        /**\n         * Returns an array of single digits\n         */\n        c: number[];\n        /**\n         * Returns the exponent, Integer, -1e+6 to 1e+6 inclusive\n         */\n        e: number;\n        /**\n         * Returns the sign, -1 or 1\n         */\n        s: number;\n    }\n}\n\n// We want the exported symbol 'Big' to represent two things:\n// - The Big interface, when used in a type context.\n// - The BigConstructor instance, when used in a value context.\ndeclare const Big: Big.BigConstructor;\ntype Big = Big.Big;\n\n// The export is the same as type/value combo symbol 'Big'.\nexport = Big;\nexport as namespace Big;\n"],"names":["Big"],"mappings":"AA8VA,2DAA2D;iBAClDA"}