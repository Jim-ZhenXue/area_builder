/*! poly2tri v1.3.5 | (c) 2009-2014 Poly2Tri Contributors */ !function(t) {
    if ("object" == typeof exports) module.exports = t();
    else if ("function" == typeof define && define.amd) define(t);
    else {
        var n;
        "undefined" != typeof window ? n = window : "undefined" != typeof global ? n = global : "undefined" != typeof self && (n = self), n.poly2tri = t();
    }
}(function() {
    return (function t(n, e, i) {
        function o(s, p) {
            if (!e[s]) {
                if (!n[s]) {
                    var a = "function" == typeof require && require;
                    if (!p && a) return a(s, !0);
                    if (r) return r(s, !0);
                    throw new Error("Cannot find module '" + s + "'");
                }
                var h = e[s] = {
                    exports: {}
                };
                n[s][0].call(h.exports, function(t) {
                    var e = n[s][1][t];
                    return o(e ? e : t);
                }, h, h.exports, t, n, e, i);
            }
            return e[s].exports;
        }
        for(var r = "function" == typeof require && require, s = 0; s < i.length; s++)o(i[s]);
        return o;
    })({
        1: [
            function(t, n) {
                n.exports = {
                    version: "1.3.5"
                };
            },
            {}
        ],
        2: [
            function(t, n) {
                "use strict";
                var e = function(t, n) {
                    this.point = t, this.triangle = n || null, this.next = null, this.prev = null, this.value = t.x;
                }, i = function(t, n) {
                    this.head_ = t, this.tail_ = n, this.search_node_ = t;
                };
                i.prototype.head = function() {
                    return this.head_;
                }, i.prototype.setHead = function(t) {
                    this.head_ = t;
                }, i.prototype.tail = function() {
                    return this.tail_;
                }, i.prototype.setTail = function(t) {
                    this.tail_ = t;
                }, i.prototype.search = function() {
                    return this.search_node_;
                }, i.prototype.setSearch = function(t) {
                    this.search_node_ = t;
                }, i.prototype.findSearchNode = function() {
                    return this.search_node_;
                }, i.prototype.locateNode = function(t) {
                    var n = this.search_node_;
                    if (t < n.value) {
                        for(; n = n.prev;)if (t >= n.value) return this.search_node_ = n, n;
                    } else for(; n = n.next;)if (t < n.value) return this.search_node_ = n.prev, n.prev;
                    return null;
                }, i.prototype.locatePoint = function(t) {
                    var n = t.x, e = this.findSearchNode(n), i = e.point.x;
                    if (n === i) {
                        if (t !== e.point) if (t === e.prev.point) e = e.prev;
                        else {
                            if (t !== e.next.point) throw new Error("poly2tri Invalid AdvancingFront.locatePoint() call");
                            e = e.next;
                        }
                    } else if (i > n) for(; (e = e.prev) && t !== e.point;);
                    else for(; (e = e.next) && t !== e.point;);
                    return e && (this.search_node_ = e), e;
                }, n.exports = i, n.exports.Node = e;
            },
            {}
        ],
        3: [
            function(t, n) {
                "use strict";
                function e(t, n) {
                    if (!t) throw new Error(n || "Assert Failed");
                }
                n.exports = e;
            },
            {}
        ],
        4: [
            function(t, n) {
                "use strict";
                var e = t("./xy"), i = function(t, n) {
                    this.x = +t || 0, this.y = +n || 0, this._p2t_edge_list = null;
                };
                i.prototype.toString = function() {
                    return e.toStringBase(this);
                }, i.prototype.toJSON = function() {
                    return {
                        x: this.x,
                        y: this.y
                    };
                }, i.prototype.clone = function() {
                    return new i(this.x, this.y);
                }, i.prototype.set_zero = function() {
                    return this.x = 0, this.y = 0, this;
                }, i.prototype.set = function(t, n) {
                    return this.x = +t || 0, this.y = +n || 0, this;
                }, i.prototype.negate = function() {
                    return this.x = -this.x, this.y = -this.y, this;
                }, i.prototype.add = function(t) {
                    return this.x += t.x, this.y += t.y, this;
                }, i.prototype.sub = function(t) {
                    return this.x -= t.x, this.y -= t.y, this;
                }, i.prototype.mul = function(t) {
                    return this.x *= t, this.y *= t, this;
                }, i.prototype.length = function() {
                    return Math.sqrt(this.x * this.x + this.y * this.y);
                }, i.prototype.normalize = function() {
                    var t = this.length();
                    return this.x /= t, this.y /= t, t;
                }, i.prototype.equals = function(t) {
                    return this.x === t.x && this.y === t.y;
                }, i.negate = function(t) {
                    return new i(-t.x, -t.y);
                }, i.add = function(t, n) {
                    return new i(t.x + n.x, t.y + n.y);
                }, i.sub = function(t, n) {
                    return new i(t.x - n.x, t.y - n.y);
                }, i.mul = function(t, n) {
                    return new i(t * n.x, t * n.y);
                }, i.cross = function(t, n) {
                    return "number" == typeof t ? "number" == typeof n ? t * n : new i(-t * n.y, t * n.x) : "number" == typeof n ? new i(n * t.y, -n * t.x) : t.x * n.y - t.y * n.x;
                }, i.toString = e.toString, i.compare = e.compare, i.cmp = e.compare, i.equals = e.equals, i.dot = function(t, n) {
                    return t.x * n.x + t.y * n.y;
                }, n.exports = i;
            },
            {
                "./xy": 11
            }
        ],
        5: [
            function(t, n) {
                "use strict";
                var e = t("./xy"), i = function(t, n) {
                    this.name = "PointError", this.points = n = n || [], this.message = t || "Invalid Points!";
                    for(var i = 0; i < n.length; i++)this.message += " " + e.toString(n[i]);
                };
                i.prototype = new Error, i.prototype.constructor = i, n.exports = i;
            },
            {
                "./xy": 11
            }
        ],
        6: [
            function(t, n, e) {
                (function(n) {
                    "use strict";
                    var i = n.poly2tri;
                    e.noConflict = function() {
                        return n.poly2tri = i, e;
                    }, e.VERSION = t("../dist/version.json").version, e.PointError = t("./pointerror"), e.Point = t("./point"), e.Triangle = t("./triangle"), e.SweepContext = t("./sweepcontext");
                    var o = t("./sweep");
                    e.triangulate = o.triangulate, e.sweep = {
                        Triangulate: o.triangulate
                    };
                }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {
                "../dist/version.json": 1,
                "./point": 4,
                "./pointerror": 5,
                "./sweep": 7,
                "./sweepcontext": 8,
                "./triangle": 9
            }
        ],
        7: [
            function(t, n, e) {
                "use strict";
                function i(t) {
                    t.initTriangulation(), t.createAdvancingFront(), o(t), r(t);
                }
                function o(t) {
                    var n, e = t.pointCount();
                    for(n = 1; e > n; ++n)for(var i = t.getPoint(n), o = s(t, i), r = i._p2t_edge_list, a = 0; r && a < r.length; ++a)p(t, r[a], o);
                }
                function r(t) {
                    for(var n = t.front().head().next.triangle, e = t.front().head().next.point; !n.getConstrainedEdgeCW(e);)n = n.neighborCCW(e);
                    t.meshClean(n);
                }
                function s(t, n) {
                    var e = t.locateNode(n), i = u(t, n, e);
                    return n.x <= e.point.x + F && d(t, e), g(t, i), i;
                }
                function p(t, n, e) {
                    t.edge_event.constrained_edge = n, t.edge_event.right = n.p.x > n.q.x, h(e.triangle, n.p, n.q) || (C(t, n, e), a(t, n.p, n.q, e.triangle, n.q));
                }
                function a(t, n, e, i, o) {
                    if (!h(i, n, e)) {
                        var r = i.pointCCW(o), s = z(e, r, n);
                        if (s === M.COLLINEAR) throw new D("poly2tri EdgeEvent: Collinear not supported!", [
                            e,
                            r,
                            n
                        ]);
                        var p = i.pointCW(o), u = z(e, p, n);
                        if (u === M.COLLINEAR) throw new D("poly2tri EdgeEvent: Collinear not supported!", [
                            e,
                            p,
                            n
                        ]);
                        s === u ? (i = s === M.CW ? i.neighborCCW(o) : i.neighborCW(o), a(t, n, e, i, o)) : q(t, n, e, i, o);
                    }
                }
                function h(t, n, e) {
                    var i = t.edgeIndex(n, e);
                    if (-1 !== i) {
                        t.markConstrainedEdgeByIndex(i);
                        var o = t.getNeighbor(i);
                        return o && o.markConstrainedEdgeByPoints(n, e), !0;
                    }
                    return !1;
                }
                function u(t, n, e) {
                    var i = new O(n, e.point, e.next.point);
                    i.markNeighbor(e.triangle), t.addToMap(i);
                    var o = new B(n);
                    return o.next = e.next, o.prev = e, e.next.prev = o, e.next = o, l(t, i) || t.mapTriangleToNodes(i), o;
                }
                function d(t, n) {
                    var e = new O(n.prev.point, n.point, n.next.point);
                    e.markNeighbor(n.prev.triangle), e.markNeighbor(n.triangle), t.addToMap(e), n.prev.next = n.next, n.next.prev = n.prev, l(t, e) || t.mapTriangleToNodes(e);
                }
                function g(t, n) {
                    for(var e = n.next; e.next && !j(e.point, e.next.point, e.prev.point);)d(t, e), e = e.next;
                    for(e = n.prev; e.prev && !j(e.point, e.next.point, e.prev.point);)d(t, e), e = e.prev;
                    n.next && n.next.next && f(n) && y(t, n);
                }
                function f(t) {
                    var n = t.point.x - t.next.next.point.x, e = t.point.y - t.next.next.point.y;
                    return S(e >= 0, "unordered y"), n >= 0 || Math.abs(n) < e;
                }
                function l(t, n) {
                    for(var e = 0; 3 > e; ++e)if (!n.delaunay_edge[e]) {
                        var i = n.getNeighbor(e);
                        if (i) {
                            var o = n.getPoint(e), r = i.oppositePoint(n, o), s = i.index(r);
                            if (i.constrained_edge[s] || i.delaunay_edge[s]) {
                                n.constrained_edge[e] = i.constrained_edge[s];
                                continue;
                            }
                            var p = c(o, n.pointCCW(o), n.pointCW(o), r);
                            if (p) {
                                n.delaunay_edge[e] = !0, i.delaunay_edge[s] = !0, _(n, o, i, r);
                                var a = !l(t, n);
                                return a && t.mapTriangleToNodes(n), a = !l(t, i), a && t.mapTriangleToNodes(i), n.delaunay_edge[e] = !1, i.delaunay_edge[s] = !1, !0;
                            }
                        }
                    }
                    return !1;
                }
                function c(t, n, e, i) {
                    var o = t.x - i.x, r = t.y - i.y, s = n.x - i.x, p = n.y - i.y, a = o * p, h = s * r, u = a - h;
                    if (0 >= u) return !1;
                    var d = e.x - i.x, g = e.y - i.y, f = d * r, l = o * g, c = f - l;
                    if (0 >= c) return !1;
                    var _ = s * g, y = d * p, x = o * o + r * r, v = s * s + p * p, C = d * d + g * g, b = x * (_ - y) + v * c + C * u;
                    return b > 0;
                }
                function _(t, n, e, i) {
                    var o, r, s, p;
                    o = t.neighborCCW(n), r = t.neighborCW(n), s = e.neighborCCW(i), p = e.neighborCW(i);
                    var a, h, u, d;
                    a = t.getConstrainedEdgeCCW(n), h = t.getConstrainedEdgeCW(n), u = e.getConstrainedEdgeCCW(i), d = e.getConstrainedEdgeCW(i);
                    var g, f, l, c;
                    g = t.getDelaunayEdgeCCW(n), f = t.getDelaunayEdgeCW(n), l = e.getDelaunayEdgeCCW(i), c = e.getDelaunayEdgeCW(i), t.legalize(n, i), e.legalize(i, n), e.setDelaunayEdgeCCW(n, g), t.setDelaunayEdgeCW(n, f), t.setDelaunayEdgeCCW(i, l), e.setDelaunayEdgeCW(i, c), e.setConstrainedEdgeCCW(n, a), t.setConstrainedEdgeCW(n, h), t.setConstrainedEdgeCCW(i, u), e.setConstrainedEdgeCW(i, d), t.clearNeighbors(), e.clearNeighbors(), o && e.markNeighbor(o), r && t.markNeighbor(r), s && t.markNeighbor(s), p && e.markNeighbor(p), t.markNeighbor(e);
                }
                function y(t, n) {
                    for(t.basin.left_node = z(n.point, n.next.point, n.next.next.point) === M.CCW ? n.next.next : n.next, t.basin.bottom_node = t.basin.left_node; t.basin.bottom_node.next && t.basin.bottom_node.point.y >= t.basin.bottom_node.next.point.y;)t.basin.bottom_node = t.basin.bottom_node.next;
                    if (t.basin.bottom_node !== t.basin.left_node) {
                        for(t.basin.right_node = t.basin.bottom_node; t.basin.right_node.next && t.basin.right_node.point.y < t.basin.right_node.next.point.y;)t.basin.right_node = t.basin.right_node.next;
                        t.basin.right_node !== t.basin.bottom_node && (t.basin.width = t.basin.right_node.point.x - t.basin.left_node.point.x, t.basin.left_highest = t.basin.left_node.point.y > t.basin.right_node.point.y, x(t, t.basin.bottom_node));
                    }
                }
                function x(t, n) {
                    if (!v(t, n)) {
                        d(t, n);
                        var e;
                        if (n.prev !== t.basin.left_node || n.next !== t.basin.right_node) {
                            if (n.prev === t.basin.left_node) {
                                if (e = z(n.point, n.next.point, n.next.next.point), e === M.CW) return;
                                n = n.next;
                            } else if (n.next === t.basin.right_node) {
                                if (e = z(n.point, n.prev.point, n.prev.prev.point), e === M.CCW) return;
                                n = n.prev;
                            } else n = n.prev.point.y < n.next.point.y ? n.prev : n.next;
                            x(t, n);
                        }
                    }
                }
                function v(t, n) {
                    var e;
                    return e = t.basin.left_highest ? t.basin.left_node.point.y - n.point.y : t.basin.right_node.point.y - n.point.y, t.basin.width > e ? !0 : !1;
                }
                function C(t, n, e) {
                    t.edge_event.right ? b(t, n, e) : E(t, n, e);
                }
                function b(t, n, e) {
                    for(; e.next.point.x < n.p.x;)z(n.q, e.next.point, n.p) === M.CCW ? m(t, n, e) : e = e.next;
                }
                function m(t, n, e) {
                    e.point.x < n.p.x && (z(e.point, e.next.point, e.next.next.point) === M.CCW ? W(t, n, e) : (w(t, n, e), m(t, n, e)));
                }
                function W(t, n, e) {
                    d(t, e.next), e.next.point !== n.p && z(n.q, e.next.point, n.p) === M.CCW && z(e.point, e.next.point, e.next.next.point) === M.CCW && W(t, n, e);
                }
                function w(t, n, e) {
                    z(e.next.point, e.next.next.point, e.next.next.next.point) === M.CCW ? W(t, n, e.next) : z(n.q, e.next.next.point, n.p) === M.CCW && w(t, n, e.next);
                }
                function E(t, n, e) {
                    for(; e.prev.point.x > n.p.x;)z(n.q, e.prev.point, n.p) === M.CW ? P(t, n, e) : e = e.prev;
                }
                function P(t, n, e) {
                    e.point.x > n.p.x && (z(e.point, e.prev.point, e.prev.prev.point) === M.CW ? T(t, n, e) : (N(t, n, e), P(t, n, e)));
                }
                function N(t, n, e) {
                    z(e.prev.point, e.prev.prev.point, e.prev.prev.prev.point) === M.CW ? T(t, n, e.prev) : z(n.q, e.prev.prev.point, n.p) === M.CW && N(t, n, e.prev);
                }
                function T(t, n, e) {
                    d(t, e.prev), e.prev.point !== n.p && z(n.q, e.prev.point, n.p) === M.CW && z(e.point, e.prev.point, e.prev.prev.point) === M.CW && T(t, n, e);
                }
                function q(t, n, e, i, o) {
                    var r = i.neighborAcross(o);
                    S(r, "FLIP failed due to missing triangle!");
                    var s = r.oppositePoint(i, o);
                    if (i.getConstrainedEdgeAcross(o)) {
                        var p = i.index(o);
                        throw new D("poly2tri Intersecting Constraints", [
                            o,
                            s,
                            i.getPoint((p + 1) % 3),
                            i.getPoint((p + 2) % 3)
                        ]);
                    }
                    if (H(o, i.pointCCW(o), i.pointCW(o), s)) if (_(i, o, r, s), t.mapTriangleToNodes(i), t.mapTriangleToNodes(r), o === e && s === n) e === t.edge_event.constrained_edge.q && n === t.edge_event.constrained_edge.p && (i.markConstrainedEdgeByPoints(n, e), r.markConstrainedEdgeByPoints(n, e), l(t, i), l(t, r));
                    else {
                        var h = z(e, s, n);
                        i = I(t, h, i, r, o, s), q(t, n, e, i, o);
                    }
                    else {
                        var u = k(n, e, r, s);
                        A(t, n, e, i, r, u), a(t, n, e, i, o);
                    }
                }
                function I(t, n, e, i, o, r) {
                    var s;
                    return n === M.CCW ? (s = i.edgeIndex(o, r), i.delaunay_edge[s] = !0, l(t, i), i.clearDelaunayEdges(), e) : (s = e.edgeIndex(o, r), e.delaunay_edge[s] = !0, l(t, e), e.clearDelaunayEdges(), i);
                }
                function k(t, n, e, i) {
                    var o = z(n, i, t);
                    if (o === M.CW) return e.pointCCW(i);
                    if (o === M.CCW) return e.pointCW(i);
                    throw new D("poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!", [
                        n,
                        i,
                        t
                    ]);
                }
                function A(t, n, e, i, o, r) {
                    var s = o.neighborAcross(r);
                    S(s, "FLIP failed due to missing triangle");
                    var p = s.oppositePoint(o, r);
                    if (H(e, i.pointCCW(e), i.pointCW(e), p)) q(t, e, p, s, p);
                    else {
                        var a = k(n, e, s, p);
                        A(t, n, e, i, s, a);
                    }
                }
                var S = t("./assert"), D = t("./pointerror"), O = t("./triangle"), B = t("./advancingfront").Node, L = t("./utils"), F = L.EPSILON, M = L.Orientation, z = L.orient2d, H = L.inScanArea, j = L.isAngleObtuse;
                e.triangulate = i;
            },
            {
                "./advancingfront": 2,
                "./assert": 3,
                "./pointerror": 5,
                "./triangle": 9,
                "./utils": 10
            }
        ],
        8: [
            function(t, n) {
                "use strict";
                var e = t("./pointerror"), i = t("./point"), o = t("./triangle"), r = t("./sweep"), s = t("./advancingfront"), p = s.Node, a = .3, h = function(t, n) {
                    if (this.p = t, this.q = n, t.y > n.y) this.q = t, this.p = n;
                    else if (t.y === n.y) {
                        if (t.x > n.x) this.q = t, this.p = n;
                        else if (t.x === n.x) throw new e("poly2tri Invalid Edge constructor: repeated points!", [
                            t
                        ]);
                    }
                    this.q._p2t_edge_list || (this.q._p2t_edge_list = []), this.q._p2t_edge_list.push(this);
                }, u = function() {
                    this.left_node = null, this.bottom_node = null, this.right_node = null, this.width = 0, this.left_highest = !1;
                };
                u.prototype.clear = function() {
                    this.left_node = null, this.bottom_node = null, this.right_node = null, this.width = 0, this.left_highest = !1;
                };
                var d = function() {
                    this.constrained_edge = null, this.right = !1;
                }, g = function(t, n) {
                    n = n || {}, this.triangles_ = [], this.map_ = [], this.points_ = n.cloneArrays ? t.slice(0) : t, this.edge_list = [], this.pmin_ = this.pmax_ = null, this.front_ = null, this.head_ = null, this.tail_ = null, this.af_head_ = null, this.af_middle_ = null, this.af_tail_ = null, this.basin = new u, this.edge_event = new d, this.initEdges(this.points_);
                };
                g.prototype.addHole = function(t) {
                    this.initEdges(t);
                    var n, e = t.length;
                    for(n = 0; e > n; n++)this.points_.push(t[n]);
                    return this;
                }, g.prototype.AddHole = g.prototype.addHole, g.prototype.addHoles = function(t) {
                    var n, e = t.length;
                    for(n = 0; e > n; n++)this.initEdges(t[n]);
                    return this.points_ = this.points_.concat.apply(this.points_, t), this;
                }, g.prototype.addPoint = function(t) {
                    return this.points_.push(t), this;
                }, g.prototype.AddPoint = g.prototype.addPoint, g.prototype.addPoints = function(t) {
                    return this.points_ = this.points_.concat(t), this;
                }, g.prototype.triangulate = function() {
                    return r.triangulate(this), this;
                }, g.prototype.getBoundingBox = function() {
                    return {
                        min: this.pmin_,
                        max: this.pmax_
                    };
                }, g.prototype.getTriangles = function() {
                    return this.triangles_;
                }, g.prototype.GetTriangles = g.prototype.getTriangles, g.prototype.front = function() {
                    return this.front_;
                }, g.prototype.pointCount = function() {
                    return this.points_.length;
                }, g.prototype.head = function() {
                    return this.head_;
                }, g.prototype.setHead = function(t) {
                    this.head_ = t;
                }, g.prototype.tail = function() {
                    return this.tail_;
                }, g.prototype.setTail = function(t) {
                    this.tail_ = t;
                }, g.prototype.getMap = function() {
                    return this.map_;
                }, g.prototype.initTriangulation = function() {
                    var t, n = this.points_[0].x, e = this.points_[0].x, o = this.points_[0].y, r = this.points_[0].y, s = this.points_.length;
                    for(t = 1; s > t; t++){
                        var p = this.points_[t];
                        p.x > n && (n = p.x), p.x < e && (e = p.x), p.y > o && (o = p.y), p.y < r && (r = p.y);
                    }
                    this.pmin_ = new i(e, r), this.pmax_ = new i(n, o);
                    var h = a * (n - e), u = a * (o - r);
                    this.head_ = new i(n + h, r - u), this.tail_ = new i(e - h, r - u), this.points_.sort(i.compare);
                }, g.prototype.initEdges = function(t) {
                    var n, e = t.length;
                    for(n = 0; e > n; ++n)this.edge_list.push(new h(t[n], t[(n + 1) % e]));
                }, g.prototype.getPoint = function(t) {
                    return this.points_[t];
                }, g.prototype.addToMap = function(t) {
                    this.map_.push(t);
                }, g.prototype.locateNode = function(t) {
                    return this.front_.locateNode(t.x);
                }, g.prototype.createAdvancingFront = function() {
                    var t, n, e, i = new o(this.points_[0], this.tail_, this.head_);
                    this.map_.push(i), t = new p(i.getPoint(1), i), n = new p(i.getPoint(0), i), e = new p(i.getPoint(2)), this.front_ = new s(t, e), t.next = n, n.next = e, n.prev = t, e.prev = n;
                }, g.prototype.removeNode = function() {}, g.prototype.mapTriangleToNodes = function(t) {
                    for(var n = 0; 3 > n; ++n)if (!t.getNeighbor(n)) {
                        var e = this.front_.locatePoint(t.pointCW(t.getPoint(n)));
                        e && (e.triangle = t);
                    }
                }, g.prototype.removeFromMap = function(t) {
                    var n, e = this.map_, i = e.length;
                    for(n = 0; i > n; n++)if (e[n] === t) {
                        e.splice(n, 1);
                        break;
                    }
                }, g.prototype.meshClean = function(t) {
                    for(var n, e, i = [
                        t
                    ]; n = i.pop();)if (!n.isInterior()) for(n.setInterior(!0), this.triangles_.push(n), e = 0; 3 > e; e++)n.constrained_edge[e] || i.push(n.getNeighbor(e));
                }, n.exports = g;
            },
            {
                "./advancingfront": 2,
                "./point": 4,
                "./pointerror": 5,
                "./sweep": 7,
                "./triangle": 9
            }
        ],
        9: [
            function(t, n) {
                "use strict";
                var e = t("./xy"), i = function(t, n, e) {
                    this.points_ = [
                        t,
                        n,
                        e
                    ], this.neighbors_ = [
                        null,
                        null,
                        null
                    ], this.interior_ = !1, this.constrained_edge = [
                        !1,
                        !1,
                        !1
                    ], this.delaunay_edge = [
                        !1,
                        !1,
                        !1
                    ];
                }, o = e.toString;
                i.prototype.toString = function() {
                    return "[" + o(this.points_[0]) + o(this.points_[1]) + o(this.points_[2]) + "]";
                }, i.prototype.getPoint = function(t) {
                    return this.points_[t];
                }, i.prototype.GetPoint = i.prototype.getPoint, i.prototype.getPoints = function() {
                    return this.points_;
                }, i.prototype.getNeighbor = function(t) {
                    return this.neighbors_[t];
                }, i.prototype.containsPoint = function(t) {
                    var n = this.points_;
                    return t === n[0] || t === n[1] || t === n[2];
                }, i.prototype.containsEdge = function(t) {
                    return this.containsPoint(t.p) && this.containsPoint(t.q);
                }, i.prototype.containsPoints = function(t, n) {
                    return this.containsPoint(t) && this.containsPoint(n);
                }, i.prototype.isInterior = function() {
                    return this.interior_;
                }, i.prototype.setInterior = function(t) {
                    return this.interior_ = t, this;
                }, i.prototype.markNeighborPointers = function(t, n, e) {
                    var i = this.points_;
                    if (t === i[2] && n === i[1] || t === i[1] && n === i[2]) this.neighbors_[0] = e;
                    else if (t === i[0] && n === i[2] || t === i[2] && n === i[0]) this.neighbors_[1] = e;
                    else {
                        if (!(t === i[0] && n === i[1] || t === i[1] && n === i[0])) throw new Error("poly2tri Invalid Triangle.markNeighborPointers() call");
                        this.neighbors_[2] = e;
                    }
                }, i.prototype.markNeighbor = function(t) {
                    var n = this.points_;
                    t.containsPoints(n[1], n[2]) ? (this.neighbors_[0] = t, t.markNeighborPointers(n[1], n[2], this)) : t.containsPoints(n[0], n[2]) ? (this.neighbors_[1] = t, t.markNeighborPointers(n[0], n[2], this)) : t.containsPoints(n[0], n[1]) && (this.neighbors_[2] = t, t.markNeighborPointers(n[0], n[1], this));
                }, i.prototype.clearNeighbors = function() {
                    this.neighbors_[0] = null, this.neighbors_[1] = null, this.neighbors_[2] = null;
                }, i.prototype.clearDelaunayEdges = function() {
                    this.delaunay_edge[0] = !1, this.delaunay_edge[1] = !1, this.delaunay_edge[2] = !1;
                }, i.prototype.pointCW = function(t) {
                    var n = this.points_;
                    return t === n[0] ? n[2] : t === n[1] ? n[0] : t === n[2] ? n[1] : null;
                }, i.prototype.pointCCW = function(t) {
                    var n = this.points_;
                    return t === n[0] ? n[1] : t === n[1] ? n[2] : t === n[2] ? n[0] : null;
                }, i.prototype.neighborCW = function(t) {
                    return t === this.points_[0] ? this.neighbors_[1] : t === this.points_[1] ? this.neighbors_[2] : this.neighbors_[0];
                }, i.prototype.neighborCCW = function(t) {
                    return t === this.points_[0] ? this.neighbors_[2] : t === this.points_[1] ? this.neighbors_[0] : this.neighbors_[1];
                }, i.prototype.getConstrainedEdgeCW = function(t) {
                    return t === this.points_[0] ? this.constrained_edge[1] : t === this.points_[1] ? this.constrained_edge[2] : this.constrained_edge[0];
                }, i.prototype.getConstrainedEdgeCCW = function(t) {
                    return t === this.points_[0] ? this.constrained_edge[2] : t === this.points_[1] ? this.constrained_edge[0] : this.constrained_edge[1];
                }, i.prototype.getConstrainedEdgeAcross = function(t) {
                    return t === this.points_[0] ? this.constrained_edge[0] : t === this.points_[1] ? this.constrained_edge[1] : this.constrained_edge[2];
                }, i.prototype.setConstrainedEdgeCW = function(t, n) {
                    t === this.points_[0] ? this.constrained_edge[1] = n : t === this.points_[1] ? this.constrained_edge[2] = n : this.constrained_edge[0] = n;
                }, i.prototype.setConstrainedEdgeCCW = function(t, n) {
                    t === this.points_[0] ? this.constrained_edge[2] = n : t === this.points_[1] ? this.constrained_edge[0] = n : this.constrained_edge[1] = n;
                }, i.prototype.getDelaunayEdgeCW = function(t) {
                    return t === this.points_[0] ? this.delaunay_edge[1] : t === this.points_[1] ? this.delaunay_edge[2] : this.delaunay_edge[0];
                }, i.prototype.getDelaunayEdgeCCW = function(t) {
                    return t === this.points_[0] ? this.delaunay_edge[2] : t === this.points_[1] ? this.delaunay_edge[0] : this.delaunay_edge[1];
                }, i.prototype.setDelaunayEdgeCW = function(t, n) {
                    t === this.points_[0] ? this.delaunay_edge[1] = n : t === this.points_[1] ? this.delaunay_edge[2] = n : this.delaunay_edge[0] = n;
                }, i.prototype.setDelaunayEdgeCCW = function(t, n) {
                    t === this.points_[0] ? this.delaunay_edge[2] = n : t === this.points_[1] ? this.delaunay_edge[0] = n : this.delaunay_edge[1] = n;
                }, i.prototype.neighborAcross = function(t) {
                    return t === this.points_[0] ? this.neighbors_[0] : t === this.points_[1] ? this.neighbors_[1] : this.neighbors_[2];
                }, i.prototype.oppositePoint = function(t, n) {
                    var e = t.pointCW(n);
                    return this.pointCW(e);
                }, i.prototype.legalize = function(t, n) {
                    var e = this.points_;
                    if (t === e[0]) e[1] = e[0], e[0] = e[2], e[2] = n;
                    else if (t === e[1]) e[2] = e[1], e[1] = e[0], e[0] = n;
                    else {
                        if (t !== e[2]) throw new Error("poly2tri Invalid Triangle.legalize() call");
                        e[0] = e[2], e[2] = e[1], e[1] = n;
                    }
                }, i.prototype.index = function(t) {
                    var n = this.points_;
                    if (t === n[0]) return 0;
                    if (t === n[1]) return 1;
                    if (t === n[2]) return 2;
                    throw new Error("poly2tri Invalid Triangle.index() call");
                }, i.prototype.edgeIndex = function(t, n) {
                    var e = this.points_;
                    if (t === e[0]) {
                        if (n === e[1]) return 2;
                        if (n === e[2]) return 1;
                    } else if (t === e[1]) {
                        if (n === e[2]) return 0;
                        if (n === e[0]) return 2;
                    } else if (t === e[2]) {
                        if (n === e[0]) return 1;
                        if (n === e[1]) return 0;
                    }
                    return -1;
                }, i.prototype.markConstrainedEdgeByIndex = function(t) {
                    this.constrained_edge[t] = !0;
                }, i.prototype.markConstrainedEdgeByEdge = function(t) {
                    this.markConstrainedEdgeByPoints(t.p, t.q);
                }, i.prototype.markConstrainedEdgeByPoints = function(t, n) {
                    var e = this.points_;
                    n === e[0] && t === e[1] || n === e[1] && t === e[0] ? this.constrained_edge[2] = !0 : n === e[0] && t === e[2] || n === e[2] && t === e[0] ? this.constrained_edge[1] = !0 : (n === e[1] && t === e[2] || n === e[2] && t === e[1]) && (this.constrained_edge[0] = !0);
                }, n.exports = i;
            },
            {
                "./xy": 11
            }
        ],
        10: [
            function(t, n, e) {
                "use strict";
                function i(t, n, e) {
                    var i = (t.x - e.x) * (n.y - e.y), o = (t.y - e.y) * (n.x - e.x), r = i - o;
                    return r > -s && s > r ? p.COLLINEAR : r > 0 ? p.CCW : p.CW;
                }
                function o(t, n, e, i) {
                    var o = (t.x - n.x) * (i.y - n.y) - (i.x - n.x) * (t.y - n.y);
                    if (o >= -s) return !1;
                    var r = (t.x - e.x) * (i.y - e.y) - (i.x - e.x) * (t.y - e.y);
                    return s >= r ? !1 : !0;
                }
                function r(t, n, e) {
                    var i = n.x - t.x, o = n.y - t.y, r = e.x - t.x, s = e.y - t.y;
                    return 0 > i * r + o * s;
                }
                var s = 1e-12;
                e.EPSILON = s;
                var p = {
                    CW: 1,
                    CCW: -1,
                    COLLINEAR: 0
                };
                e.Orientation = p, e.orient2d = i, e.inScanArea = o, e.isAngleObtuse = r;
            },
            {}
        ],
        11: [
            function(t, n) {
                "use strict";
                function e(t) {
                    return "(" + t.x + ";" + t.y + ")";
                }
                function i(t) {
                    var n = t.toString();
                    return "[object Object]" === n ? e(t) : n;
                }
                function o(t, n) {
                    return t.y === n.y ? t.x - n.x : t.y - n.y;
                }
                function r(t, n) {
                    return t.x === n.x && t.y === n.y;
                }
                n.exports = {
                    toString: i,
                    toStringBase: e,
                    compare: o,
                    equals: r
                };
            },
            {}
        ]
    }, {}, [
        6
    ])(6);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NoZXJwYS9saWIvcG9seTJ0cmktMS4zLjUubWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBwb2x5MnRyaSB2MS4zLjUgfCAoYykgMjAwOS0yMDE0IFBvbHkyVHJpIENvbnRyaWJ1dG9ycyAqL1xuIWZ1bmN0aW9uKHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzKW1vZHVsZS5leHBvcnRzPXQoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUodCk7ZWxzZXt2YXIgbjtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P249d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/bj1nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJihuPXNlbGYpLG4ucG9seTJ0cmk9dCgpfX0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gdChuLGUsaSl7ZnVuY3Rpb24gbyhzLHApe2lmKCFlW3NdKXtpZighbltzXSl7dmFyIGE9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighcCYmYSlyZXR1cm4gYShzLCEwKTtpZihyKXJldHVybiByKHMsITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrcytcIidcIil9dmFyIGg9ZVtzXT17ZXhwb3J0czp7fX07bltzXVswXS5jYWxsKGguZXhwb3J0cyxmdW5jdGlvbih0KXt2YXIgZT1uW3NdWzFdW3RdO3JldHVybiBvKGU/ZTp0KX0saCxoLmV4cG9ydHMsdCxuLGUsaSl9cmV0dXJuIGVbc10uZXhwb3J0c31mb3IodmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxzPTA7czxpLmxlbmd0aDtzKyspbyhpW3NdKTtyZXR1cm4gb30oezE6W2Z1bmN0aW9uKHQsbil7bi5leHBvcnRzPXt2ZXJzaW9uOlwiMS4zLjVcIn19LHt9XSwyOltmdW5jdGlvbih0LG4pe1widXNlIHN0cmljdFwiO3ZhciBlPWZ1bmN0aW9uKHQsbil7dGhpcy5wb2ludD10LHRoaXMudHJpYW5nbGU9bnx8bnVsbCx0aGlzLm5leHQ9bnVsbCx0aGlzLnByZXY9bnVsbCx0aGlzLnZhbHVlPXQueH0saT1mdW5jdGlvbih0LG4pe3RoaXMuaGVhZF89dCx0aGlzLnRhaWxfPW4sdGhpcy5zZWFyY2hfbm9kZV89dH07aS5wcm90b3R5cGUuaGVhZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhlYWRffSxpLnByb3RvdHlwZS5zZXRIZWFkPWZ1bmN0aW9uKHQpe3RoaXMuaGVhZF89dH0saS5wcm90b3R5cGUudGFpbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRhaWxffSxpLnByb3RvdHlwZS5zZXRUYWlsPWZ1bmN0aW9uKHQpe3RoaXMudGFpbF89dH0saS5wcm90b3R5cGUuc2VhcmNoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VhcmNoX25vZGVffSxpLnByb3RvdHlwZS5zZXRTZWFyY2g9ZnVuY3Rpb24odCl7dGhpcy5zZWFyY2hfbm9kZV89dH0saS5wcm90b3R5cGUuZmluZFNlYXJjaE5vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWFyY2hfbm9kZV99LGkucHJvdG90eXBlLmxvY2F0ZU5vZGU9ZnVuY3Rpb24odCl7dmFyIG49dGhpcy5zZWFyY2hfbm9kZV87aWYodDxuLnZhbHVlKXtmb3IoO249bi5wcmV2OylpZih0Pj1uLnZhbHVlKXJldHVybiB0aGlzLnNlYXJjaF9ub2RlXz1uLG59ZWxzZSBmb3IoO249bi5uZXh0OylpZih0PG4udmFsdWUpcmV0dXJuIHRoaXMuc2VhcmNoX25vZGVfPW4ucHJldixuLnByZXY7cmV0dXJuIG51bGx9LGkucHJvdG90eXBlLmxvY2F0ZVBvaW50PWZ1bmN0aW9uKHQpe3ZhciBuPXQueCxlPXRoaXMuZmluZFNlYXJjaE5vZGUobiksaT1lLnBvaW50Lng7aWYobj09PWkpe2lmKHQhPT1lLnBvaW50KWlmKHQ9PT1lLnByZXYucG9pbnQpZT1lLnByZXY7ZWxzZXtpZih0IT09ZS5uZXh0LnBvaW50KXRocm93IG5ldyBFcnJvcihcInBvbHkydHJpIEludmFsaWQgQWR2YW5jaW5nRnJvbnQubG9jYXRlUG9pbnQoKSBjYWxsXCIpO2U9ZS5uZXh0fX1lbHNlIGlmKGk+bilmb3IoOyhlPWUucHJldikmJnQhPT1lLnBvaW50Oyk7ZWxzZSBmb3IoOyhlPWUubmV4dCkmJnQhPT1lLnBvaW50Oyk7cmV0dXJuIGUmJih0aGlzLnNlYXJjaF9ub2RlXz1lKSxlfSxuLmV4cG9ydHM9aSxuLmV4cG9ydHMuTm9kZT1lfSx7fV0sMzpbZnVuY3Rpb24odCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHQsbil7aWYoIXQpdGhyb3cgbmV3IEVycm9yKG58fFwiQXNzZXJ0IEZhaWxlZFwiKX1uLmV4cG9ydHM9ZX0se31dLDQ6W2Z1bmN0aW9uKHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9dChcIi4veHlcIiksaT1mdW5jdGlvbih0LG4pe3RoaXMueD0rdHx8MCx0aGlzLnk9K258fDAsdGhpcy5fcDJ0X2VkZ2VfbGlzdD1udWxsfTtpLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBlLnRvU3RyaW5nQmFzZSh0aGlzKX0saS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3g6dGhpcy54LHk6dGhpcy55fX0saS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGkodGhpcy54LHRoaXMueSl9LGkucHJvdG90eXBlLnNldF96ZXJvPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueD0wLHRoaXMueT0wLHRoaXN9LGkucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LG4pe3JldHVybiB0aGlzLng9K3R8fDAsdGhpcy55PStufHwwLHRoaXN9LGkucHJvdG90eXBlLm5lZ2F0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLng9LXRoaXMueCx0aGlzLnk9LXRoaXMueSx0aGlzfSxpLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMueCs9dC54LHRoaXMueSs9dC55LHRoaXN9LGkucHJvdG90eXBlLnN1Yj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy54LT10LngsdGhpcy55LT10LnksdGhpc30saS5wcm90b3R5cGUubXVsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLngqPXQsdGhpcy55Kj10LHRoaXN9LGkucHJvdG90eXBlLmxlbmd0aD1mdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55KX0saS5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5sZW5ndGgoKTtyZXR1cm4gdGhpcy54Lz10LHRoaXMueS89dCx0fSxpLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMueD09PXQueCYmdGhpcy55PT09dC55fSxpLm5lZ2F0ZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGkoLXQueCwtdC55KX0saS5hZGQ9ZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGkodC54K24ueCx0Lnkrbi55KX0saS5zdWI9ZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGkodC54LW4ueCx0Lnktbi55KX0saS5tdWw9ZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGkodCpuLngsdCpuLnkpfSxpLmNyb3NzPWZ1bmN0aW9uKHQsbil7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQ/XCJudW1iZXJcIj09dHlwZW9mIG4/dCpuOm5ldyBpKC10Km4ueSx0Km4ueCk6XCJudW1iZXJcIj09dHlwZW9mIG4/bmV3IGkobip0LnksLW4qdC54KTp0Lngqbi55LXQueSpuLnh9LGkudG9TdHJpbmc9ZS50b1N0cmluZyxpLmNvbXBhcmU9ZS5jb21wYXJlLGkuY21wPWUuY29tcGFyZSxpLmVxdWFscz1lLmVxdWFscyxpLmRvdD1mdW5jdGlvbih0LG4pe3JldHVybiB0Lngqbi54K3QueSpuLnl9LG4uZXhwb3J0cz1pfSx7XCIuL3h5XCI6MTF9XSw1OltmdW5jdGlvbih0LG4pe1widXNlIHN0cmljdFwiO3ZhciBlPXQoXCIuL3h5XCIpLGk9ZnVuY3Rpb24odCxuKXt0aGlzLm5hbWU9XCJQb2ludEVycm9yXCIsdGhpcy5wb2ludHM9bj1ufHxbXSx0aGlzLm1lc3NhZ2U9dHx8XCJJbnZhbGlkIFBvaW50cyFcIjtmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKyl0aGlzLm1lc3NhZ2UrPVwiIFwiK2UudG9TdHJpbmcobltpXSl9O2kucHJvdG90eXBlPW5ldyBFcnJvcixpLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1pLG4uZXhwb3J0cz1pfSx7XCIuL3h5XCI6MTF9XSw2OltmdW5jdGlvbih0LG4sZSl7KGZ1bmN0aW9uKG4pe1widXNlIHN0cmljdFwiO3ZhciBpPW4ucG9seTJ0cmk7ZS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIG4ucG9seTJ0cmk9aSxlfSxlLlZFUlNJT049dChcIi4uL2Rpc3QvdmVyc2lvbi5qc29uXCIpLnZlcnNpb24sZS5Qb2ludEVycm9yPXQoXCIuL3BvaW50ZXJyb3JcIiksZS5Qb2ludD10KFwiLi9wb2ludFwiKSxlLlRyaWFuZ2xlPXQoXCIuL3RyaWFuZ2xlXCIpLGUuU3dlZXBDb250ZXh0PXQoXCIuL3N3ZWVwY29udGV4dFwiKTt2YXIgbz10KFwiLi9zd2VlcFwiKTtlLnRyaWFuZ3VsYXRlPW8udHJpYW5ndWxhdGUsZS5zd2VlcD17VHJpYW5ndWxhdGU6by50cmlhbmd1bGF0ZX19KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4uL2Rpc3QvdmVyc2lvbi5qc29uXCI6MSxcIi4vcG9pbnRcIjo0LFwiLi9wb2ludGVycm9yXCI6NSxcIi4vc3dlZXBcIjo3LFwiLi9zd2VlcGNvbnRleHRcIjo4LFwiLi90cmlhbmdsZVwiOjl9XSw3OltmdW5jdGlvbih0LG4sZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXt0LmluaXRUcmlhbmd1bGF0aW9uKCksdC5jcmVhdGVBZHZhbmNpbmdGcm9udCgpLG8odCkscih0KX1mdW5jdGlvbiBvKHQpe3ZhciBuLGU9dC5wb2ludENvdW50KCk7Zm9yKG49MTtlPm47KytuKWZvcih2YXIgaT10LmdldFBvaW50KG4pLG89cyh0LGkpLHI9aS5fcDJ0X2VkZ2VfbGlzdCxhPTA7ciYmYTxyLmxlbmd0aDsrK2EpcCh0LHJbYV0sbyl9ZnVuY3Rpb24gcih0KXtmb3IodmFyIG49dC5mcm9udCgpLmhlYWQoKS5uZXh0LnRyaWFuZ2xlLGU9dC5mcm9udCgpLmhlYWQoKS5uZXh0LnBvaW50OyFuLmdldENvbnN0cmFpbmVkRWRnZUNXKGUpOyluPW4ubmVpZ2hib3JDQ1coZSk7dC5tZXNoQ2xlYW4obil9ZnVuY3Rpb24gcyh0LG4pe3ZhciBlPXQubG9jYXRlTm9kZShuKSxpPXUodCxuLGUpO3JldHVybiBuLng8PWUucG9pbnQueCtGJiZkKHQsZSksZyh0LGkpLGl9ZnVuY3Rpb24gcCh0LG4sZSl7dC5lZGdlX2V2ZW50LmNvbnN0cmFpbmVkX2VkZ2U9bix0LmVkZ2VfZXZlbnQucmlnaHQ9bi5wLng+bi5xLngsaChlLnRyaWFuZ2xlLG4ucCxuLnEpfHwoQyh0LG4sZSksYSh0LG4ucCxuLnEsZS50cmlhbmdsZSxuLnEpKX1mdW5jdGlvbiBhKHQsbixlLGksbyl7aWYoIWgoaSxuLGUpKXt2YXIgcj1pLnBvaW50Q0NXKG8pLHM9eihlLHIsbik7aWYocz09PU0uQ09MTElORUFSKXRocm93IG5ldyBEKFwicG9seTJ0cmkgRWRnZUV2ZW50OiBDb2xsaW5lYXIgbm90IHN1cHBvcnRlZCFcIixbZSxyLG5dKTt2YXIgcD1pLnBvaW50Q1cobyksdT16KGUscCxuKTtpZih1PT09TS5DT0xMSU5FQVIpdGhyb3cgbmV3IEQoXCJwb2x5MnRyaSBFZGdlRXZlbnQ6IENvbGxpbmVhciBub3Qgc3VwcG9ydGVkIVwiLFtlLHAsbl0pO3M9PT11PyhpPXM9PT1NLkNXP2kubmVpZ2hib3JDQ1cobyk6aS5uZWlnaGJvckNXKG8pLGEodCxuLGUsaSxvKSk6cSh0LG4sZSxpLG8pfX1mdW5jdGlvbiBoKHQsbixlKXt2YXIgaT10LmVkZ2VJbmRleChuLGUpO2lmKC0xIT09aSl7dC5tYXJrQ29uc3RyYWluZWRFZGdlQnlJbmRleChpKTt2YXIgbz10LmdldE5laWdoYm9yKGkpO3JldHVybiBvJiZvLm1hcmtDb25zdHJhaW5lZEVkZ2VCeVBvaW50cyhuLGUpLCEwfXJldHVybiExfWZ1bmN0aW9uIHUodCxuLGUpe3ZhciBpPW5ldyBPKG4sZS5wb2ludCxlLm5leHQucG9pbnQpO2kubWFya05laWdoYm9yKGUudHJpYW5nbGUpLHQuYWRkVG9NYXAoaSk7dmFyIG89bmV3IEIobik7cmV0dXJuIG8ubmV4dD1lLm5leHQsby5wcmV2PWUsZS5uZXh0LnByZXY9byxlLm5leHQ9byxsKHQsaSl8fHQubWFwVHJpYW5nbGVUb05vZGVzKGkpLG99ZnVuY3Rpb24gZCh0LG4pe3ZhciBlPW5ldyBPKG4ucHJldi5wb2ludCxuLnBvaW50LG4ubmV4dC5wb2ludCk7ZS5tYXJrTmVpZ2hib3Iobi5wcmV2LnRyaWFuZ2xlKSxlLm1hcmtOZWlnaGJvcihuLnRyaWFuZ2xlKSx0LmFkZFRvTWFwKGUpLG4ucHJldi5uZXh0PW4ubmV4dCxuLm5leHQucHJldj1uLnByZXYsbCh0LGUpfHx0Lm1hcFRyaWFuZ2xlVG9Ob2RlcyhlKX1mdW5jdGlvbiBnKHQsbil7Zm9yKHZhciBlPW4ubmV4dDtlLm5leHQmJiFqKGUucG9pbnQsZS5uZXh0LnBvaW50LGUucHJldi5wb2ludCk7KWQodCxlKSxlPWUubmV4dDtmb3IoZT1uLnByZXY7ZS5wcmV2JiYhaihlLnBvaW50LGUubmV4dC5wb2ludCxlLnByZXYucG9pbnQpOylkKHQsZSksZT1lLnByZXY7bi5uZXh0JiZuLm5leHQubmV4dCYmZihuKSYmeSh0LG4pfWZ1bmN0aW9uIGYodCl7dmFyIG49dC5wb2ludC54LXQubmV4dC5uZXh0LnBvaW50LngsZT10LnBvaW50LnktdC5uZXh0Lm5leHQucG9pbnQueTtyZXR1cm4gUyhlPj0wLFwidW5vcmRlcmVkIHlcIiksbj49MHx8TWF0aC5hYnMobik8ZX1mdW5jdGlvbiBsKHQsbil7Zm9yKHZhciBlPTA7Mz5lOysrZSlpZighbi5kZWxhdW5heV9lZGdlW2VdKXt2YXIgaT1uLmdldE5laWdoYm9yKGUpO2lmKGkpe3ZhciBvPW4uZ2V0UG9pbnQoZSkscj1pLm9wcG9zaXRlUG9pbnQobixvKSxzPWkuaW5kZXgocik7aWYoaS5jb25zdHJhaW5lZF9lZGdlW3NdfHxpLmRlbGF1bmF5X2VkZ2Vbc10pe24uY29uc3RyYWluZWRfZWRnZVtlXT1pLmNvbnN0cmFpbmVkX2VkZ2Vbc107Y29udGludWV9dmFyIHA9YyhvLG4ucG9pbnRDQ1cobyksbi5wb2ludENXKG8pLHIpO2lmKHApe24uZGVsYXVuYXlfZWRnZVtlXT0hMCxpLmRlbGF1bmF5X2VkZ2Vbc109ITAsXyhuLG8saSxyKTt2YXIgYT0hbCh0LG4pO3JldHVybiBhJiZ0Lm1hcFRyaWFuZ2xlVG9Ob2RlcyhuKSxhPSFsKHQsaSksYSYmdC5tYXBUcmlhbmdsZVRvTm9kZXMoaSksbi5kZWxhdW5heV9lZGdlW2VdPSExLGkuZGVsYXVuYXlfZWRnZVtzXT0hMSwhMH19fXJldHVybiExfWZ1bmN0aW9uIGModCxuLGUsaSl7dmFyIG89dC54LWkueCxyPXQueS1pLnkscz1uLngtaS54LHA9bi55LWkueSxhPW8qcCxoPXMqcix1PWEtaDtpZigwPj11KXJldHVybiExO3ZhciBkPWUueC1pLngsZz1lLnktaS55LGY9ZCpyLGw9bypnLGM9Zi1sO2lmKDA+PWMpcmV0dXJuITE7dmFyIF89cypnLHk9ZCpwLHg9bypvK3Iqcix2PXMqcytwKnAsQz1kKmQrZypnLGI9eCooXy15KSt2KmMrQyp1O3JldHVybiBiPjB9ZnVuY3Rpb24gXyh0LG4sZSxpKXt2YXIgbyxyLHMscDtvPXQubmVpZ2hib3JDQ1cobikscj10Lm5laWdoYm9yQ1cobikscz1lLm5laWdoYm9yQ0NXKGkpLHA9ZS5uZWlnaGJvckNXKGkpO3ZhciBhLGgsdSxkO2E9dC5nZXRDb25zdHJhaW5lZEVkZ2VDQ1cobiksaD10LmdldENvbnN0cmFpbmVkRWRnZUNXKG4pLHU9ZS5nZXRDb25zdHJhaW5lZEVkZ2VDQ1coaSksZD1lLmdldENvbnN0cmFpbmVkRWRnZUNXKGkpO3ZhciBnLGYsbCxjO2c9dC5nZXREZWxhdW5heUVkZ2VDQ1cobiksZj10LmdldERlbGF1bmF5RWRnZUNXKG4pLGw9ZS5nZXREZWxhdW5heUVkZ2VDQ1coaSksYz1lLmdldERlbGF1bmF5RWRnZUNXKGkpLHQubGVnYWxpemUobixpKSxlLmxlZ2FsaXplKGksbiksZS5zZXREZWxhdW5heUVkZ2VDQ1cobixnKSx0LnNldERlbGF1bmF5RWRnZUNXKG4sZiksdC5zZXREZWxhdW5heUVkZ2VDQ1coaSxsKSxlLnNldERlbGF1bmF5RWRnZUNXKGksYyksZS5zZXRDb25zdHJhaW5lZEVkZ2VDQ1cobixhKSx0LnNldENvbnN0cmFpbmVkRWRnZUNXKG4saCksdC5zZXRDb25zdHJhaW5lZEVkZ2VDQ1coaSx1KSxlLnNldENvbnN0cmFpbmVkRWRnZUNXKGksZCksdC5jbGVhck5laWdoYm9ycygpLGUuY2xlYXJOZWlnaGJvcnMoKSxvJiZlLm1hcmtOZWlnaGJvcihvKSxyJiZ0Lm1hcmtOZWlnaGJvcihyKSxzJiZ0Lm1hcmtOZWlnaGJvcihzKSxwJiZlLm1hcmtOZWlnaGJvcihwKSx0Lm1hcmtOZWlnaGJvcihlKX1mdW5jdGlvbiB5KHQsbil7Zm9yKHQuYmFzaW4ubGVmdF9ub2RlPXoobi5wb2ludCxuLm5leHQucG9pbnQsbi5uZXh0Lm5leHQucG9pbnQpPT09TS5DQ1c/bi5uZXh0Lm5leHQ6bi5uZXh0LHQuYmFzaW4uYm90dG9tX25vZGU9dC5iYXNpbi5sZWZ0X25vZGU7dC5iYXNpbi5ib3R0b21fbm9kZS5uZXh0JiZ0LmJhc2luLmJvdHRvbV9ub2RlLnBvaW50Lnk+PXQuYmFzaW4uYm90dG9tX25vZGUubmV4dC5wb2ludC55Oyl0LmJhc2luLmJvdHRvbV9ub2RlPXQuYmFzaW4uYm90dG9tX25vZGUubmV4dDtpZih0LmJhc2luLmJvdHRvbV9ub2RlIT09dC5iYXNpbi5sZWZ0X25vZGUpe2Zvcih0LmJhc2luLnJpZ2h0X25vZGU9dC5iYXNpbi5ib3R0b21fbm9kZTt0LmJhc2luLnJpZ2h0X25vZGUubmV4dCYmdC5iYXNpbi5yaWdodF9ub2RlLnBvaW50Lnk8dC5iYXNpbi5yaWdodF9ub2RlLm5leHQucG9pbnQueTspdC5iYXNpbi5yaWdodF9ub2RlPXQuYmFzaW4ucmlnaHRfbm9kZS5uZXh0O3QuYmFzaW4ucmlnaHRfbm9kZSE9PXQuYmFzaW4uYm90dG9tX25vZGUmJih0LmJhc2luLndpZHRoPXQuYmFzaW4ucmlnaHRfbm9kZS5wb2ludC54LXQuYmFzaW4ubGVmdF9ub2RlLnBvaW50LngsdC5iYXNpbi5sZWZ0X2hpZ2hlc3Q9dC5iYXNpbi5sZWZ0X25vZGUucG9pbnQueT50LmJhc2luLnJpZ2h0X25vZGUucG9pbnQueSx4KHQsdC5iYXNpbi5ib3R0b21fbm9kZSkpfX1mdW5jdGlvbiB4KHQsbil7aWYoIXYodCxuKSl7ZCh0LG4pO3ZhciBlO2lmKG4ucHJldiE9PXQuYmFzaW4ubGVmdF9ub2RlfHxuLm5leHQhPT10LmJhc2luLnJpZ2h0X25vZGUpe2lmKG4ucHJldj09PXQuYmFzaW4ubGVmdF9ub2RlKXtpZihlPXoobi5wb2ludCxuLm5leHQucG9pbnQsbi5uZXh0Lm5leHQucG9pbnQpLGU9PT1NLkNXKXJldHVybjtuPW4ubmV4dH1lbHNlIGlmKG4ubmV4dD09PXQuYmFzaW4ucmlnaHRfbm9kZSl7aWYoZT16KG4ucG9pbnQsbi5wcmV2LnBvaW50LG4ucHJldi5wcmV2LnBvaW50KSxlPT09TS5DQ1cpcmV0dXJuO249bi5wcmV2fWVsc2Ugbj1uLnByZXYucG9pbnQueTxuLm5leHQucG9pbnQueT9uLnByZXY6bi5uZXh0O3godCxuKX19fWZ1bmN0aW9uIHYodCxuKXt2YXIgZTtyZXR1cm4gZT10LmJhc2luLmxlZnRfaGlnaGVzdD90LmJhc2luLmxlZnRfbm9kZS5wb2ludC55LW4ucG9pbnQueTp0LmJhc2luLnJpZ2h0X25vZGUucG9pbnQueS1uLnBvaW50LnksdC5iYXNpbi53aWR0aD5lPyEwOiExfWZ1bmN0aW9uIEModCxuLGUpe3QuZWRnZV9ldmVudC5yaWdodD9iKHQsbixlKTpFKHQsbixlKX1mdW5jdGlvbiBiKHQsbixlKXtmb3IoO2UubmV4dC5wb2ludC54PG4ucC54Oyl6KG4ucSxlLm5leHQucG9pbnQsbi5wKT09PU0uQ0NXP20odCxuLGUpOmU9ZS5uZXh0fWZ1bmN0aW9uIG0odCxuLGUpe2UucG9pbnQueDxuLnAueCYmKHooZS5wb2ludCxlLm5leHQucG9pbnQsZS5uZXh0Lm5leHQucG9pbnQpPT09TS5DQ1c/Vyh0LG4sZSk6KHcodCxuLGUpLG0odCxuLGUpKSl9ZnVuY3Rpb24gVyh0LG4sZSl7ZCh0LGUubmV4dCksZS5uZXh0LnBvaW50IT09bi5wJiZ6KG4ucSxlLm5leHQucG9pbnQsbi5wKT09PU0uQ0NXJiZ6KGUucG9pbnQsZS5uZXh0LnBvaW50LGUubmV4dC5uZXh0LnBvaW50KT09PU0uQ0NXJiZXKHQsbixlKX1mdW5jdGlvbiB3KHQsbixlKXt6KGUubmV4dC5wb2ludCxlLm5leHQubmV4dC5wb2ludCxlLm5leHQubmV4dC5uZXh0LnBvaW50KT09PU0uQ0NXP1codCxuLGUubmV4dCk6eihuLnEsZS5uZXh0Lm5leHQucG9pbnQsbi5wKT09PU0uQ0NXJiZ3KHQsbixlLm5leHQpfWZ1bmN0aW9uIEUodCxuLGUpe2Zvcig7ZS5wcmV2LnBvaW50Lng+bi5wLng7KXoobi5xLGUucHJldi5wb2ludCxuLnApPT09TS5DVz9QKHQsbixlKTplPWUucHJldn1mdW5jdGlvbiBQKHQsbixlKXtlLnBvaW50Lng+bi5wLngmJih6KGUucG9pbnQsZS5wcmV2LnBvaW50LGUucHJldi5wcmV2LnBvaW50KT09PU0uQ1c/VCh0LG4sZSk6KE4odCxuLGUpLFAodCxuLGUpKSl9ZnVuY3Rpb24gTih0LG4sZSl7eihlLnByZXYucG9pbnQsZS5wcmV2LnByZXYucG9pbnQsZS5wcmV2LnByZXYucHJldi5wb2ludCk9PT1NLkNXP1QodCxuLGUucHJldik6eihuLnEsZS5wcmV2LnByZXYucG9pbnQsbi5wKT09PU0uQ1cmJk4odCxuLGUucHJldil9ZnVuY3Rpb24gVCh0LG4sZSl7ZCh0LGUucHJldiksZS5wcmV2LnBvaW50IT09bi5wJiZ6KG4ucSxlLnByZXYucG9pbnQsbi5wKT09PU0uQ1cmJnooZS5wb2ludCxlLnByZXYucG9pbnQsZS5wcmV2LnByZXYucG9pbnQpPT09TS5DVyYmVCh0LG4sZSl9ZnVuY3Rpb24gcSh0LG4sZSxpLG8pe3ZhciByPWkubmVpZ2hib3JBY3Jvc3Mobyk7UyhyLFwiRkxJUCBmYWlsZWQgZHVlIHRvIG1pc3NpbmcgdHJpYW5nbGUhXCIpO3ZhciBzPXIub3Bwb3NpdGVQb2ludChpLG8pO2lmKGkuZ2V0Q29uc3RyYWluZWRFZGdlQWNyb3NzKG8pKXt2YXIgcD1pLmluZGV4KG8pO3Rocm93IG5ldyBEKFwicG9seTJ0cmkgSW50ZXJzZWN0aW5nIENvbnN0cmFpbnRzXCIsW28scyxpLmdldFBvaW50KChwKzEpJTMpLGkuZ2V0UG9pbnQoKHArMiklMyldKX1pZihIKG8saS5wb2ludENDVyhvKSxpLnBvaW50Q1cobykscykpaWYoXyhpLG8scixzKSx0Lm1hcFRyaWFuZ2xlVG9Ob2RlcyhpKSx0Lm1hcFRyaWFuZ2xlVG9Ob2RlcyhyKSxvPT09ZSYmcz09PW4pZT09PXQuZWRnZV9ldmVudC5jb25zdHJhaW5lZF9lZGdlLnEmJm49PT10LmVkZ2VfZXZlbnQuY29uc3RyYWluZWRfZWRnZS5wJiYoaS5tYXJrQ29uc3RyYWluZWRFZGdlQnlQb2ludHMobixlKSxyLm1hcmtDb25zdHJhaW5lZEVkZ2VCeVBvaW50cyhuLGUpLGwodCxpKSxsKHQscikpO2Vsc2V7dmFyIGg9eihlLHMsbik7aT1JKHQsaCxpLHIsbyxzKSxxKHQsbixlLGksbyl9ZWxzZXt2YXIgdT1rKG4sZSxyLHMpO0EodCxuLGUsaSxyLHUpLGEodCxuLGUsaSxvKX19ZnVuY3Rpb24gSSh0LG4sZSxpLG8scil7dmFyIHM7cmV0dXJuIG49PT1NLkNDVz8ocz1pLmVkZ2VJbmRleChvLHIpLGkuZGVsYXVuYXlfZWRnZVtzXT0hMCxsKHQsaSksaS5jbGVhckRlbGF1bmF5RWRnZXMoKSxlKToocz1lLmVkZ2VJbmRleChvLHIpLGUuZGVsYXVuYXlfZWRnZVtzXT0hMCxsKHQsZSksZS5jbGVhckRlbGF1bmF5RWRnZXMoKSxpKX1mdW5jdGlvbiBrKHQsbixlLGkpe3ZhciBvPXoobixpLHQpO2lmKG89PT1NLkNXKXJldHVybiBlLnBvaW50Q0NXKGkpO2lmKG89PT1NLkNDVylyZXR1cm4gZS5wb2ludENXKGkpO3Rocm93IG5ldyBEKFwicG9seTJ0cmkgW1Vuc3VwcG9ydGVkXSBuZXh0RmxpcFBvaW50OiBvcHBvc2luZyBwb2ludCBvbiBjb25zdHJhaW5lZCBlZGdlIVwiLFtuLGksdF0pfWZ1bmN0aW9uIEEodCxuLGUsaSxvLHIpe3ZhciBzPW8ubmVpZ2hib3JBY3Jvc3Mocik7UyhzLFwiRkxJUCBmYWlsZWQgZHVlIHRvIG1pc3NpbmcgdHJpYW5nbGVcIik7dmFyIHA9cy5vcHBvc2l0ZVBvaW50KG8scik7aWYoSChlLGkucG9pbnRDQ1coZSksaS5wb2ludENXKGUpLHApKXEodCxlLHAscyxwKTtlbHNle3ZhciBhPWsobixlLHMscCk7QSh0LG4sZSxpLHMsYSl9fXZhciBTPXQoXCIuL2Fzc2VydFwiKSxEPXQoXCIuL3BvaW50ZXJyb3JcIiksTz10KFwiLi90cmlhbmdsZVwiKSxCPXQoXCIuL2FkdmFuY2luZ2Zyb250XCIpLk5vZGUsTD10KFwiLi91dGlsc1wiKSxGPUwuRVBTSUxPTixNPUwuT3JpZW50YXRpb24sej1MLm9yaWVudDJkLEg9TC5pblNjYW5BcmVhLGo9TC5pc0FuZ2xlT2J0dXNlO2UudHJpYW5ndWxhdGU9aX0se1wiLi9hZHZhbmNpbmdmcm9udFwiOjIsXCIuL2Fzc2VydFwiOjMsXCIuL3BvaW50ZXJyb3JcIjo1LFwiLi90cmlhbmdsZVwiOjksXCIuL3V0aWxzXCI6MTB9XSw4OltmdW5jdGlvbih0LG4pe1widXNlIHN0cmljdFwiO3ZhciBlPXQoXCIuL3BvaW50ZXJyb3JcIiksaT10KFwiLi9wb2ludFwiKSxvPXQoXCIuL3RyaWFuZ2xlXCIpLHI9dChcIi4vc3dlZXBcIikscz10KFwiLi9hZHZhbmNpbmdmcm9udFwiKSxwPXMuTm9kZSxhPS4zLGg9ZnVuY3Rpb24odCxuKXtpZih0aGlzLnA9dCx0aGlzLnE9bix0Lnk+bi55KXRoaXMucT10LHRoaXMucD1uO2Vsc2UgaWYodC55PT09bi55KWlmKHQueD5uLngpdGhpcy5xPXQsdGhpcy5wPW47ZWxzZSBpZih0Lng9PT1uLngpdGhyb3cgbmV3IGUoXCJwb2x5MnRyaSBJbnZhbGlkIEVkZ2UgY29uc3RydWN0b3I6IHJlcGVhdGVkIHBvaW50cyFcIixbdF0pO3RoaXMucS5fcDJ0X2VkZ2VfbGlzdHx8KHRoaXMucS5fcDJ0X2VkZ2VfbGlzdD1bXSksdGhpcy5xLl9wMnRfZWRnZV9saXN0LnB1c2godGhpcyl9LHU9ZnVuY3Rpb24oKXt0aGlzLmxlZnRfbm9kZT1udWxsLHRoaXMuYm90dG9tX25vZGU9bnVsbCx0aGlzLnJpZ2h0X25vZGU9bnVsbCx0aGlzLndpZHRoPTAsdGhpcy5sZWZ0X2hpZ2hlc3Q9ITF9O3UucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5sZWZ0X25vZGU9bnVsbCx0aGlzLmJvdHRvbV9ub2RlPW51bGwsdGhpcy5yaWdodF9ub2RlPW51bGwsdGhpcy53aWR0aD0wLHRoaXMubGVmdF9oaWdoZXN0PSExfTt2YXIgZD1mdW5jdGlvbigpe3RoaXMuY29uc3RyYWluZWRfZWRnZT1udWxsLHRoaXMucmlnaHQ9ITF9LGc9ZnVuY3Rpb24odCxuKXtuPW58fHt9LHRoaXMudHJpYW5nbGVzXz1bXSx0aGlzLm1hcF89W10sdGhpcy5wb2ludHNfPW4uY2xvbmVBcnJheXM/dC5zbGljZSgwKTp0LHRoaXMuZWRnZV9saXN0PVtdLHRoaXMucG1pbl89dGhpcy5wbWF4Xz1udWxsLHRoaXMuZnJvbnRfPW51bGwsdGhpcy5oZWFkXz1udWxsLHRoaXMudGFpbF89bnVsbCx0aGlzLmFmX2hlYWRfPW51bGwsdGhpcy5hZl9taWRkbGVfPW51bGwsdGhpcy5hZl90YWlsXz1udWxsLHRoaXMuYmFzaW49bmV3IHUsdGhpcy5lZGdlX2V2ZW50PW5ldyBkLHRoaXMuaW5pdEVkZ2VzKHRoaXMucG9pbnRzXyl9O2cucHJvdG90eXBlLmFkZEhvbGU9ZnVuY3Rpb24odCl7dGhpcy5pbml0RWRnZXModCk7dmFyIG4sZT10Lmxlbmd0aDtmb3Iobj0wO2U+bjtuKyspdGhpcy5wb2ludHNfLnB1c2godFtuXSk7cmV0dXJuIHRoaXN9LGcucHJvdG90eXBlLkFkZEhvbGU9Zy5wcm90b3R5cGUuYWRkSG9sZSxnLnByb3RvdHlwZS5hZGRIb2xlcz1mdW5jdGlvbih0KXt2YXIgbixlPXQubGVuZ3RoO2ZvcihuPTA7ZT5uO24rKyl0aGlzLmluaXRFZGdlcyh0W25dKTtyZXR1cm4gdGhpcy5wb2ludHNfPXRoaXMucG9pbnRzXy5jb25jYXQuYXBwbHkodGhpcy5wb2ludHNfLHQpLHRoaXN9LGcucHJvdG90eXBlLmFkZFBvaW50PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBvaW50c18ucHVzaCh0KSx0aGlzfSxnLnByb3RvdHlwZS5BZGRQb2ludD1nLnByb3RvdHlwZS5hZGRQb2ludCxnLnByb3RvdHlwZS5hZGRQb2ludHM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucG9pbnRzXz10aGlzLnBvaW50c18uY29uY2F0KHQpLHRoaXN9LGcucHJvdG90eXBlLnRyaWFuZ3VsYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHIudHJpYW5ndWxhdGUodGhpcyksdGhpc30sZy5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3g9ZnVuY3Rpb24oKXtyZXR1cm57bWluOnRoaXMucG1pbl8sbWF4OnRoaXMucG1heF99fSxnLnByb3RvdHlwZS5nZXRUcmlhbmdsZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmlhbmdsZXNffSxnLnByb3RvdHlwZS5HZXRUcmlhbmdsZXM9Zy5wcm90b3R5cGUuZ2V0VHJpYW5nbGVzLGcucHJvdG90eXBlLmZyb250PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZnJvbnRffSxnLnByb3RvdHlwZS5wb2ludENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9pbnRzXy5sZW5ndGh9LGcucHJvdG90eXBlLmhlYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZWFkX30sZy5wcm90b3R5cGUuc2V0SGVhZD1mdW5jdGlvbih0KXt0aGlzLmhlYWRfPXR9LGcucHJvdG90eXBlLnRhaWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWlsX30sZy5wcm90b3R5cGUuc2V0VGFpbD1mdW5jdGlvbih0KXt0aGlzLnRhaWxfPXR9LGcucHJvdG90eXBlLmdldE1hcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcF99LGcucHJvdG90eXBlLmluaXRUcmlhbmd1bGF0aW9uPWZ1bmN0aW9uKCl7dmFyIHQsbj10aGlzLnBvaW50c19bMF0ueCxlPXRoaXMucG9pbnRzX1swXS54LG89dGhpcy5wb2ludHNfWzBdLnkscj10aGlzLnBvaW50c19bMF0ueSxzPXRoaXMucG9pbnRzXy5sZW5ndGg7Zm9yKHQ9MTtzPnQ7dCsrKXt2YXIgcD10aGlzLnBvaW50c19bdF07cC54Pm4mJihuPXAueCkscC54PGUmJihlPXAueCkscC55Pm8mJihvPXAueSkscC55PHImJihyPXAueSl9dGhpcy5wbWluXz1uZXcgaShlLHIpLHRoaXMucG1heF89bmV3IGkobixvKTt2YXIgaD1hKihuLWUpLHU9YSooby1yKTt0aGlzLmhlYWRfPW5ldyBpKG4raCxyLXUpLHRoaXMudGFpbF89bmV3IGkoZS1oLHItdSksdGhpcy5wb2ludHNfLnNvcnQoaS5jb21wYXJlKX0sZy5wcm90b3R5cGUuaW5pdEVkZ2VzPWZ1bmN0aW9uKHQpe3ZhciBuLGU9dC5sZW5ndGg7Zm9yKG49MDtlPm47KytuKXRoaXMuZWRnZV9saXN0LnB1c2gobmV3IGgodFtuXSx0WyhuKzEpJWVdKSl9LGcucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBvaW50c19bdF19LGcucHJvdG90eXBlLmFkZFRvTWFwPWZ1bmN0aW9uKHQpe3RoaXMubWFwXy5wdXNoKHQpfSxnLnByb3RvdHlwZS5sb2NhdGVOb2RlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZyb250Xy5sb2NhdGVOb2RlKHQueCl9LGcucHJvdG90eXBlLmNyZWF0ZUFkdmFuY2luZ0Zyb250PWZ1bmN0aW9uKCl7dmFyIHQsbixlLGk9bmV3IG8odGhpcy5wb2ludHNfWzBdLHRoaXMudGFpbF8sdGhpcy5oZWFkXyk7dGhpcy5tYXBfLnB1c2goaSksdD1uZXcgcChpLmdldFBvaW50KDEpLGkpLG49bmV3IHAoaS5nZXRQb2ludCgwKSxpKSxlPW5ldyBwKGkuZ2V0UG9pbnQoMikpLHRoaXMuZnJvbnRfPW5ldyBzKHQsZSksdC5uZXh0PW4sbi5uZXh0PWUsbi5wcmV2PXQsZS5wcmV2PW59LGcucHJvdG90eXBlLnJlbW92ZU5vZGU9ZnVuY3Rpb24oKXt9LGcucHJvdG90eXBlLm1hcFRyaWFuZ2xlVG9Ob2Rlcz1mdW5jdGlvbih0KXtmb3IodmFyIG49MDszPm47KytuKWlmKCF0LmdldE5laWdoYm9yKG4pKXt2YXIgZT10aGlzLmZyb250Xy5sb2NhdGVQb2ludCh0LnBvaW50Q1codC5nZXRQb2ludChuKSkpO2UmJihlLnRyaWFuZ2xlPXQpfX0sZy5wcm90b3R5cGUucmVtb3ZlRnJvbU1hcD1mdW5jdGlvbih0KXt2YXIgbixlPXRoaXMubWFwXyxpPWUubGVuZ3RoO2ZvcihuPTA7aT5uO24rKylpZihlW25dPT09dCl7ZS5zcGxpY2UobiwxKTticmVha319LGcucHJvdG90eXBlLm1lc2hDbGVhbj1mdW5jdGlvbih0KXtmb3IodmFyIG4sZSxpPVt0XTtuPWkucG9wKCk7KWlmKCFuLmlzSW50ZXJpb3IoKSlmb3Iobi5zZXRJbnRlcmlvcighMCksdGhpcy50cmlhbmdsZXNfLnB1c2gobiksZT0wOzM+ZTtlKyspbi5jb25zdHJhaW5lZF9lZGdlW2VdfHxpLnB1c2gobi5nZXROZWlnaGJvcihlKSl9LG4uZXhwb3J0cz1nfSx7XCIuL2FkdmFuY2luZ2Zyb250XCI6MixcIi4vcG9pbnRcIjo0LFwiLi9wb2ludGVycm9yXCI6NSxcIi4vc3dlZXBcIjo3LFwiLi90cmlhbmdsZVwiOjl9XSw5OltmdW5jdGlvbih0LG4pe1widXNlIHN0cmljdFwiO3ZhciBlPXQoXCIuL3h5XCIpLGk9ZnVuY3Rpb24odCxuLGUpe3RoaXMucG9pbnRzXz1bdCxuLGVdLHRoaXMubmVpZ2hib3JzXz1bbnVsbCxudWxsLG51bGxdLHRoaXMuaW50ZXJpb3JfPSExLHRoaXMuY29uc3RyYWluZWRfZWRnZT1bITEsITEsITFdLHRoaXMuZGVsYXVuYXlfZWRnZT1bITEsITEsITFdfSxvPWUudG9TdHJpbmc7aS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltcIitvKHRoaXMucG9pbnRzX1swXSkrbyh0aGlzLnBvaW50c19bMV0pK28odGhpcy5wb2ludHNfWzJdKStcIl1cIn0saS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucG9pbnRzX1t0XX0saS5wcm90b3R5cGUuR2V0UG9pbnQ9aS5wcm90b3R5cGUuZ2V0UG9pbnQsaS5wcm90b3R5cGUuZ2V0UG9pbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucG9pbnRzX30saS5wcm90b3R5cGUuZ2V0TmVpZ2hib3I9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubmVpZ2hib3JzX1t0XX0saS5wcm90b3R5cGUuY29udGFpbnNQb2ludD1mdW5jdGlvbih0KXt2YXIgbj10aGlzLnBvaW50c187cmV0dXJuIHQ9PT1uWzBdfHx0PT09blsxXXx8dD09PW5bMl19LGkucHJvdG90eXBlLmNvbnRhaW5zRWRnZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jb250YWluc1BvaW50KHQucCkmJnRoaXMuY29udGFpbnNQb2ludCh0LnEpfSxpLnByb3RvdHlwZS5jb250YWluc1BvaW50cz1mdW5jdGlvbih0LG4pe3JldHVybiB0aGlzLmNvbnRhaW5zUG9pbnQodCkmJnRoaXMuY29udGFpbnNQb2ludChuKX0saS5wcm90b3R5cGUuaXNJbnRlcmlvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmludGVyaW9yX30saS5wcm90b3R5cGUuc2V0SW50ZXJpb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuaW50ZXJpb3JfPXQsdGhpc30saS5wcm90b3R5cGUubWFya05laWdoYm9yUG9pbnRlcnM9ZnVuY3Rpb24odCxuLGUpe3ZhciBpPXRoaXMucG9pbnRzXztpZih0PT09aVsyXSYmbj09PWlbMV18fHQ9PT1pWzFdJiZuPT09aVsyXSl0aGlzLm5laWdoYm9yc19bMF09ZTtlbHNlIGlmKHQ9PT1pWzBdJiZuPT09aVsyXXx8dD09PWlbMl0mJm49PT1pWzBdKXRoaXMubmVpZ2hib3JzX1sxXT1lO2Vsc2V7aWYoISh0PT09aVswXSYmbj09PWlbMV18fHQ9PT1pWzFdJiZuPT09aVswXSkpdGhyb3cgbmV3IEVycm9yKFwicG9seTJ0cmkgSW52YWxpZCBUcmlhbmdsZS5tYXJrTmVpZ2hib3JQb2ludGVycygpIGNhbGxcIik7dGhpcy5uZWlnaGJvcnNfWzJdPWV9fSxpLnByb3RvdHlwZS5tYXJrTmVpZ2hib3I9ZnVuY3Rpb24odCl7dmFyIG49dGhpcy5wb2ludHNfO3QuY29udGFpbnNQb2ludHMoblsxXSxuWzJdKT8odGhpcy5uZWlnaGJvcnNfWzBdPXQsdC5tYXJrTmVpZ2hib3JQb2ludGVycyhuWzFdLG5bMl0sdGhpcykpOnQuY29udGFpbnNQb2ludHMoblswXSxuWzJdKT8odGhpcy5uZWlnaGJvcnNfWzFdPXQsdC5tYXJrTmVpZ2hib3JQb2ludGVycyhuWzBdLG5bMl0sdGhpcykpOnQuY29udGFpbnNQb2ludHMoblswXSxuWzFdKSYmKHRoaXMubmVpZ2hib3JzX1syXT10LHQubWFya05laWdoYm9yUG9pbnRlcnMoblswXSxuWzFdLHRoaXMpKX0saS5wcm90b3R5cGUuY2xlYXJOZWlnaGJvcnM9ZnVuY3Rpb24oKXt0aGlzLm5laWdoYm9yc19bMF09bnVsbCx0aGlzLm5laWdoYm9yc19bMV09bnVsbCx0aGlzLm5laWdoYm9yc19bMl09bnVsbH0saS5wcm90b3R5cGUuY2xlYXJEZWxhdW5heUVkZ2VzPWZ1bmN0aW9uKCl7dGhpcy5kZWxhdW5heV9lZGdlWzBdPSExLHRoaXMuZGVsYXVuYXlfZWRnZVsxXT0hMSx0aGlzLmRlbGF1bmF5X2VkZ2VbMl09ITF9LGkucHJvdG90eXBlLnBvaW50Q1c9ZnVuY3Rpb24odCl7dmFyIG49dGhpcy5wb2ludHNfO3JldHVybiB0PT09blswXT9uWzJdOnQ9PT1uWzFdP25bMF06dD09PW5bMl0/blsxXTpudWxsfSxpLnByb3RvdHlwZS5wb2ludENDVz1mdW5jdGlvbih0KXt2YXIgbj10aGlzLnBvaW50c187cmV0dXJuIHQ9PT1uWzBdP25bMV06dD09PW5bMV0/blsyXTp0PT09blsyXT9uWzBdOm51bGx9LGkucHJvdG90eXBlLm5laWdoYm9yQ1c9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT10aGlzLnBvaW50c19bMF0/dGhpcy5uZWlnaGJvcnNfWzFdOnQ9PT10aGlzLnBvaW50c19bMV0/dGhpcy5uZWlnaGJvcnNfWzJdOnRoaXMubmVpZ2hib3JzX1swXX0saS5wcm90b3R5cGUubmVpZ2hib3JDQ1c9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT10aGlzLnBvaW50c19bMF0/dGhpcy5uZWlnaGJvcnNfWzJdOnQ9PT10aGlzLnBvaW50c19bMV0/dGhpcy5uZWlnaGJvcnNfWzBdOnRoaXMubmVpZ2hib3JzX1sxXX0saS5wcm90b3R5cGUuZ2V0Q29uc3RyYWluZWRFZGdlQ1c9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT10aGlzLnBvaW50c19bMF0/dGhpcy5jb25zdHJhaW5lZF9lZGdlWzFdOnQ9PT10aGlzLnBvaW50c19bMV0/dGhpcy5jb25zdHJhaW5lZF9lZGdlWzJdOnRoaXMuY29uc3RyYWluZWRfZWRnZVswXX0saS5wcm90b3R5cGUuZ2V0Q29uc3RyYWluZWRFZGdlQ0NXPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09dGhpcy5wb2ludHNfWzBdP3RoaXMuY29uc3RyYWluZWRfZWRnZVsyXTp0PT09dGhpcy5wb2ludHNfWzFdP3RoaXMuY29uc3RyYWluZWRfZWRnZVswXTp0aGlzLmNvbnN0cmFpbmVkX2VkZ2VbMV19LGkucHJvdG90eXBlLmdldENvbnN0cmFpbmVkRWRnZUFjcm9zcz1mdW5jdGlvbih0KXtyZXR1cm4gdD09PXRoaXMucG9pbnRzX1swXT90aGlzLmNvbnN0cmFpbmVkX2VkZ2VbMF06dD09PXRoaXMucG9pbnRzX1sxXT90aGlzLmNvbnN0cmFpbmVkX2VkZ2VbMV06dGhpcy5jb25zdHJhaW5lZF9lZGdlWzJdfSxpLnByb3RvdHlwZS5zZXRDb25zdHJhaW5lZEVkZ2VDVz1mdW5jdGlvbih0LG4pe3Q9PT10aGlzLnBvaW50c19bMF0/dGhpcy5jb25zdHJhaW5lZF9lZGdlWzFdPW46dD09PXRoaXMucG9pbnRzX1sxXT90aGlzLmNvbnN0cmFpbmVkX2VkZ2VbMl09bjp0aGlzLmNvbnN0cmFpbmVkX2VkZ2VbMF09bn0saS5wcm90b3R5cGUuc2V0Q29uc3RyYWluZWRFZGdlQ0NXPWZ1bmN0aW9uKHQsbil7dD09PXRoaXMucG9pbnRzX1swXT90aGlzLmNvbnN0cmFpbmVkX2VkZ2VbMl09bjp0PT09dGhpcy5wb2ludHNfWzFdP3RoaXMuY29uc3RyYWluZWRfZWRnZVswXT1uOnRoaXMuY29uc3RyYWluZWRfZWRnZVsxXT1ufSxpLnByb3RvdHlwZS5nZXREZWxhdW5heUVkZ2VDVz1mdW5jdGlvbih0KXtyZXR1cm4gdD09PXRoaXMucG9pbnRzX1swXT90aGlzLmRlbGF1bmF5X2VkZ2VbMV06dD09PXRoaXMucG9pbnRzX1sxXT90aGlzLmRlbGF1bmF5X2VkZ2VbMl06dGhpcy5kZWxhdW5heV9lZGdlWzBdfSxpLnByb3RvdHlwZS5nZXREZWxhdW5heUVkZ2VDQ1c9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT10aGlzLnBvaW50c19bMF0/dGhpcy5kZWxhdW5heV9lZGdlWzJdOnQ9PT10aGlzLnBvaW50c19bMV0/dGhpcy5kZWxhdW5heV9lZGdlWzBdOnRoaXMuZGVsYXVuYXlfZWRnZVsxXX0saS5wcm90b3R5cGUuc2V0RGVsYXVuYXlFZGdlQ1c9ZnVuY3Rpb24odCxuKXt0PT09dGhpcy5wb2ludHNfWzBdP3RoaXMuZGVsYXVuYXlfZWRnZVsxXT1uOnQ9PT10aGlzLnBvaW50c19bMV0/dGhpcy5kZWxhdW5heV9lZGdlWzJdPW46dGhpcy5kZWxhdW5heV9lZGdlWzBdPW59LGkucHJvdG90eXBlLnNldERlbGF1bmF5RWRnZUNDVz1mdW5jdGlvbih0LG4pe3Q9PT10aGlzLnBvaW50c19bMF0/dGhpcy5kZWxhdW5heV9lZGdlWzJdPW46dD09PXRoaXMucG9pbnRzX1sxXT90aGlzLmRlbGF1bmF5X2VkZ2VbMF09bjp0aGlzLmRlbGF1bmF5X2VkZ2VbMV09bn0saS5wcm90b3R5cGUubmVpZ2hib3JBY3Jvc3M9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT10aGlzLnBvaW50c19bMF0/dGhpcy5uZWlnaGJvcnNfWzBdOnQ9PT10aGlzLnBvaW50c19bMV0/dGhpcy5uZWlnaGJvcnNfWzFdOnRoaXMubmVpZ2hib3JzX1syXX0saS5wcm90b3R5cGUub3Bwb3NpdGVQb2ludD1mdW5jdGlvbih0LG4pe3ZhciBlPXQucG9pbnRDVyhuKTtyZXR1cm4gdGhpcy5wb2ludENXKGUpfSxpLnByb3RvdHlwZS5sZWdhbGl6ZT1mdW5jdGlvbih0LG4pe3ZhciBlPXRoaXMucG9pbnRzXztpZih0PT09ZVswXSllWzFdPWVbMF0sZVswXT1lWzJdLGVbMl09bjtlbHNlIGlmKHQ9PT1lWzFdKWVbMl09ZVsxXSxlWzFdPWVbMF0sZVswXT1uO2Vsc2V7aWYodCE9PWVbMl0pdGhyb3cgbmV3IEVycm9yKFwicG9seTJ0cmkgSW52YWxpZCBUcmlhbmdsZS5sZWdhbGl6ZSgpIGNhbGxcIik7ZVswXT1lWzJdLGVbMl09ZVsxXSxlWzFdPW59fSxpLnByb3RvdHlwZS5pbmRleD1mdW5jdGlvbih0KXt2YXIgbj10aGlzLnBvaW50c187aWYodD09PW5bMF0pcmV0dXJuIDA7aWYodD09PW5bMV0pcmV0dXJuIDE7aWYodD09PW5bMl0pcmV0dXJuIDI7dGhyb3cgbmV3IEVycm9yKFwicG9seTJ0cmkgSW52YWxpZCBUcmlhbmdsZS5pbmRleCgpIGNhbGxcIil9LGkucHJvdG90eXBlLmVkZ2VJbmRleD1mdW5jdGlvbih0LG4pe3ZhciBlPXRoaXMucG9pbnRzXztpZih0PT09ZVswXSl7aWYobj09PWVbMV0pcmV0dXJuIDI7aWYobj09PWVbMl0pcmV0dXJuIDF9ZWxzZSBpZih0PT09ZVsxXSl7aWYobj09PWVbMl0pcmV0dXJuIDA7aWYobj09PWVbMF0pcmV0dXJuIDJ9ZWxzZSBpZih0PT09ZVsyXSl7aWYobj09PWVbMF0pcmV0dXJuIDE7aWYobj09PWVbMV0pcmV0dXJuIDB9cmV0dXJuLTF9LGkucHJvdG90eXBlLm1hcmtDb25zdHJhaW5lZEVkZ2VCeUluZGV4PWZ1bmN0aW9uKHQpe3RoaXMuY29uc3RyYWluZWRfZWRnZVt0XT0hMH0saS5wcm90b3R5cGUubWFya0NvbnN0cmFpbmVkRWRnZUJ5RWRnZT1mdW5jdGlvbih0KXt0aGlzLm1hcmtDb25zdHJhaW5lZEVkZ2VCeVBvaW50cyh0LnAsdC5xKX0saS5wcm90b3R5cGUubWFya0NvbnN0cmFpbmVkRWRnZUJ5UG9pbnRzPWZ1bmN0aW9uKHQsbil7dmFyIGU9dGhpcy5wb2ludHNfO249PT1lWzBdJiZ0PT09ZVsxXXx8bj09PWVbMV0mJnQ9PT1lWzBdP3RoaXMuY29uc3RyYWluZWRfZWRnZVsyXT0hMDpuPT09ZVswXSYmdD09PWVbMl18fG49PT1lWzJdJiZ0PT09ZVswXT90aGlzLmNvbnN0cmFpbmVkX2VkZ2VbMV09ITA6KG49PT1lWzFdJiZ0PT09ZVsyXXx8bj09PWVbMl0mJnQ9PT1lWzFdKSYmKHRoaXMuY29uc3RyYWluZWRfZWRnZVswXT0hMCl9LG4uZXhwb3J0cz1pfSx7XCIuL3h5XCI6MTF9XSwxMDpbZnVuY3Rpb24odCxuLGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCxuLGUpe3ZhciBpPSh0LngtZS54KSoobi55LWUueSksbz0odC55LWUueSkqKG4ueC1lLngpLHI9aS1vO3JldHVybiByPi1zJiZzPnI/cC5DT0xMSU5FQVI6cj4wP3AuQ0NXOnAuQ1d9ZnVuY3Rpb24gbyh0LG4sZSxpKXt2YXIgbz0odC54LW4ueCkqKGkueS1uLnkpLShpLngtbi54KSoodC55LW4ueSk7aWYobz49LXMpcmV0dXJuITE7dmFyIHI9KHQueC1lLngpKihpLnktZS55KS0oaS54LWUueCkqKHQueS1lLnkpO3JldHVybiBzPj1yPyExOiEwfWZ1bmN0aW9uIHIodCxuLGUpe3ZhciBpPW4ueC10Lngsbz1uLnktdC55LHI9ZS54LXQueCxzPWUueS10Lnk7cmV0dXJuIDA+aSpyK28qc312YXIgcz0xZS0xMjtlLkVQU0lMT049czt2YXIgcD17Q1c6MSxDQ1c6LTEsQ09MTElORUFSOjB9O2UuT3JpZW50YXRpb249cCxlLm9yaWVudDJkPWksZS5pblNjYW5BcmVhPW8sZS5pc0FuZ2xlT2J0dXNlPXJ9LHt9XSwxMTpbZnVuY3Rpb24odCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHQpe3JldHVyblwiKFwiK3QueCtcIjtcIit0LnkrXCIpXCJ9ZnVuY3Rpb24gaSh0KXt2YXIgbj10LnRvU3RyaW5nKCk7cmV0dXJuXCJbb2JqZWN0IE9iamVjdF1cIj09PW4/ZSh0KTpufWZ1bmN0aW9uIG8odCxuKXtyZXR1cm4gdC55PT09bi55P3QueC1uLng6dC55LW4ueX1mdW5jdGlvbiByKHQsbil7cmV0dXJuIHQueD09PW4ueCYmdC55PT09bi55fW4uZXhwb3J0cz17dG9TdHJpbmc6aSx0b1N0cmluZ0Jhc2U6ZSxjb21wYXJlOm8sZXF1YWxzOnJ9fSx7fV19LHt9LFs2XSkoNil9KTsiXSwibmFtZXMiOlsidCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJuIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsInBvbHkydHJpIiwiZSIsImkiLCJvIiwicyIsInAiLCJhIiwicmVxdWlyZSIsInIiLCJFcnJvciIsImgiLCJjYWxsIiwibGVuZ3RoIiwidmVyc2lvbiIsInBvaW50IiwidHJpYW5nbGUiLCJuZXh0IiwicHJldiIsInZhbHVlIiwieCIsImhlYWRfIiwidGFpbF8iLCJzZWFyY2hfbm9kZV8iLCJwcm90b3R5cGUiLCJoZWFkIiwic2V0SGVhZCIsInRhaWwiLCJzZXRUYWlsIiwic2VhcmNoIiwic2V0U2VhcmNoIiwiZmluZFNlYXJjaE5vZGUiLCJsb2NhdGVOb2RlIiwibG9jYXRlUG9pbnQiLCJOb2RlIiwieSIsIl9wMnRfZWRnZV9saXN0IiwidG9TdHJpbmciLCJ0b1N0cmluZ0Jhc2UiLCJ0b0pTT04iLCJjbG9uZSIsInNldF96ZXJvIiwic2V0IiwibmVnYXRlIiwiYWRkIiwic3ViIiwibXVsIiwiTWF0aCIsInNxcnQiLCJub3JtYWxpemUiLCJlcXVhbHMiLCJjcm9zcyIsImNvbXBhcmUiLCJjbXAiLCJkb3QiLCJuYW1lIiwicG9pbnRzIiwibWVzc2FnZSIsImNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsIlZFUlNJT04iLCJQb2ludEVycm9yIiwiUG9pbnQiLCJUcmlhbmdsZSIsIlN3ZWVwQ29udGV4dCIsInRyaWFuZ3VsYXRlIiwic3dlZXAiLCJUcmlhbmd1bGF0ZSIsImluaXRUcmlhbmd1bGF0aW9uIiwiY3JlYXRlQWR2YW5jaW5nRnJvbnQiLCJwb2ludENvdW50IiwiZ2V0UG9pbnQiLCJmcm9udCIsImdldENvbnN0cmFpbmVkRWRnZUNXIiwibmVpZ2hib3JDQ1ciLCJtZXNoQ2xlYW4iLCJ1IiwiRiIsImQiLCJnIiwiZWRnZV9ldmVudCIsImNvbnN0cmFpbmVkX2VkZ2UiLCJyaWdodCIsInEiLCJDIiwicG9pbnRDQ1ciLCJ6IiwiTSIsIkNPTExJTkVBUiIsIkQiLCJwb2ludENXIiwiQ1ciLCJuZWlnaGJvckNXIiwiZWRnZUluZGV4IiwibWFya0NvbnN0cmFpbmVkRWRnZUJ5SW5kZXgiLCJnZXROZWlnaGJvciIsIm1hcmtDb25zdHJhaW5lZEVkZ2VCeVBvaW50cyIsIk8iLCJtYXJrTmVpZ2hib3IiLCJhZGRUb01hcCIsIkIiLCJsIiwibWFwVHJpYW5nbGVUb05vZGVzIiwiaiIsImYiLCJTIiwiYWJzIiwiZGVsYXVuYXlfZWRnZSIsIm9wcG9zaXRlUG9pbnQiLCJpbmRleCIsImMiLCJfIiwidiIsImIiLCJnZXRDb25zdHJhaW5lZEVkZ2VDQ1ciLCJnZXREZWxhdW5heUVkZ2VDQ1ciLCJnZXREZWxhdW5heUVkZ2VDVyIsImxlZ2FsaXplIiwic2V0RGVsYXVuYXlFZGdlQ0NXIiwic2V0RGVsYXVuYXlFZGdlQ1ciLCJzZXRDb25zdHJhaW5lZEVkZ2VDQ1ciLCJzZXRDb25zdHJhaW5lZEVkZ2VDVyIsImNsZWFyTmVpZ2hib3JzIiwiYmFzaW4iLCJsZWZ0X25vZGUiLCJDQ1ciLCJib3R0b21fbm9kZSIsInJpZ2h0X25vZGUiLCJ3aWR0aCIsImxlZnRfaGlnaGVzdCIsIkUiLCJtIiwiVyIsInciLCJQIiwiVCIsIk4iLCJuZWlnaGJvckFjcm9zcyIsImdldENvbnN0cmFpbmVkRWRnZUFjcm9zcyIsIkgiLCJJIiwiayIsIkEiLCJjbGVhckRlbGF1bmF5RWRnZXMiLCJMIiwiRVBTSUxPTiIsIk9yaWVudGF0aW9uIiwib3JpZW50MmQiLCJpblNjYW5BcmVhIiwiaXNBbmdsZU9idHVzZSIsInB1c2giLCJjbGVhciIsInRyaWFuZ2xlc18iLCJtYXBfIiwicG9pbnRzXyIsImNsb25lQXJyYXlzIiwic2xpY2UiLCJlZGdlX2xpc3QiLCJwbWluXyIsInBtYXhfIiwiZnJvbnRfIiwiYWZfaGVhZF8iLCJhZl9taWRkbGVfIiwiYWZfdGFpbF8iLCJpbml0RWRnZXMiLCJhZGRIb2xlIiwiQWRkSG9sZSIsImFkZEhvbGVzIiwiY29uY2F0IiwiYXBwbHkiLCJhZGRQb2ludCIsIkFkZFBvaW50IiwiYWRkUG9pbnRzIiwiZ2V0Qm91bmRpbmdCb3giLCJtaW4iLCJtYXgiLCJnZXRUcmlhbmdsZXMiLCJHZXRUcmlhbmdsZXMiLCJnZXRNYXAiLCJzb3J0IiwicmVtb3ZlTm9kZSIsInJlbW92ZUZyb21NYXAiLCJzcGxpY2UiLCJwb3AiLCJpc0ludGVyaW9yIiwic2V0SW50ZXJpb3IiLCJuZWlnaGJvcnNfIiwiaW50ZXJpb3JfIiwiR2V0UG9pbnQiLCJnZXRQb2ludHMiLCJjb250YWluc1BvaW50IiwiY29udGFpbnNFZGdlIiwiY29udGFpbnNQb2ludHMiLCJtYXJrTmVpZ2hib3JQb2ludGVycyIsIm1hcmtD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