// Copyright 2013-2024, University of Colorado Boulder
/**
 * Slider that shows a spectrum of colors for selecting a wavelength.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */ import Utils from '../../dot/js/Utils.js';
import optionize from '../../phet-core/js/optionize.js';
import StringUtils from '../../phetcommon/js/util/StringUtils.js';
import sceneryPhet from './sceneryPhet.js';
import SceneryPhetStrings from './SceneryPhetStrings.js';
import SpectrumSlider from './SpectrumSlider.js';
import VisibleColor from './VisibleColor.js';
let WavelengthSlider = class WavelengthSlider extends SpectrumSlider {
    /**
   * @param wavelengthProperty - wavelength, in nm
   * @param providedOptions
   */ constructor(wavelengthProperty, providedOptions){
        // options that are specific to this type
        const options = optionize()({
            // SelfOptions
            minWavelength: VisibleColor.MIN_WAVELENGTH,
            maxWavelength: VisibleColor.MAX_WAVELENGTH,
            // SpectrumSliderOptions
            valueToString: function(value) {
                // NOTE: Because this class is deprecated, the API was not reworked to support dynamic strings here.
                return StringUtils.format(SceneryPhetStrings.WavelengthSlider.pattern_0wavelength_1unitsStringProperty.value, Utils.toFixed(value, 0), SceneryPhetStrings.units_nmStringProperty.value);
            },
            valueToColor: function(value) {
                return VisibleColor.wavelengthToColor(value);
            }
        }, providedOptions);
        options.minValue = options.minWavelength;
        options.maxValue = options.maxWavelength;
        super(wavelengthProperty, options);
    }
};
/**
 * @deprecated use WavelengthNumberControl, or Slider.js with SpectrumSliderTrack and SpectrumSliderTrack,
 *   see https://github.com/phetsims/scenery-phet/issues/729
 */ export { WavelengthSlider as default };
sceneryPhet.register('WavelengthSlider', WavelengthSlider);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9XYXZlbGVuZ3RoU2xpZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFNsaWRlciB0aGF0IHNob3dzIGEgc3BlY3RydW0gb2YgY29sb3JzIGZvciBzZWxlY3RpbmcgYSB3YXZlbGVuZ3RoLlxuICpcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL2RvdC9qcy9VdGlscy5qcyc7XG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XG5pbXBvcnQgU2NlbmVyeVBoZXRTdHJpbmdzIGZyb20gJy4vU2NlbmVyeVBoZXRTdHJpbmdzLmpzJztcbmltcG9ydCBTcGVjdHJ1bVNsaWRlciwgeyBTcGVjdHJ1bVNsaWRlck9wdGlvbnMgfSBmcm9tICcuL1NwZWN0cnVtU2xpZGVyLmpzJztcbmltcG9ydCBWaXNpYmxlQ29sb3IgZnJvbSAnLi9WaXNpYmxlQ29sb3IuanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuICBtaW5XYXZlbGVuZ3RoPzogbnVtYmVyO1xuICBtYXhXYXZlbGVuZ3RoPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgV2F2ZWxlbmd0aFNsaWRlck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8U3BlY3RydW1TbGlkZXJPcHRpb25zLCAnbWluVmFsdWUnIHwgJ21heFZhbHVlJz47XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIFdhdmVsZW5ndGhOdW1iZXJDb250cm9sLCBvciBTbGlkZXIuanMgd2l0aCBTcGVjdHJ1bVNsaWRlclRyYWNrIGFuZCBTcGVjdHJ1bVNsaWRlclRyYWNrLFxuICogICBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnktcGhldC9pc3N1ZXMvNzI5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhdmVsZW5ndGhTbGlkZXIgZXh0ZW5kcyBTcGVjdHJ1bVNsaWRlciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB3YXZlbGVuZ3RoUHJvcGVydHkgLSB3YXZlbGVuZ3RoLCBpbiBubVxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoIHdhdmVsZW5ndGhQcm9wZXJ0eTogVFByb3BlcnR5PG51bWJlcj4sIHByb3ZpZGVkT3B0aW9ucz86IFdhdmVsZW5ndGhTbGlkZXJPcHRpb25zICkge1xuXG4gICAgLy8gb3B0aW9ucyB0aGF0IGFyZSBzcGVjaWZpYyB0byB0aGlzIHR5cGVcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFdhdmVsZW5ndGhTbGlkZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgU3BlY3RydW1TbGlkZXJPcHRpb25zPigpKCB7XG5cbiAgICAgIC8vIFNlbGZPcHRpb25zXG4gICAgICBtaW5XYXZlbGVuZ3RoOiBWaXNpYmxlQ29sb3IuTUlOX1dBVkVMRU5HVEgsXG4gICAgICBtYXhXYXZlbGVuZ3RoOiBWaXNpYmxlQ29sb3IuTUFYX1dBVkVMRU5HVEgsXG5cbiAgICAgIC8vIFNwZWN0cnVtU2xpZGVyT3B0aW9uc1xuICAgICAgdmFsdWVUb1N0cmluZzogZnVuY3Rpb24oIHZhbHVlOiBudW1iZXIgKSB7XG5cbiAgICAgICAgLy8gTk9URTogQmVjYXVzZSB0aGlzIGNsYXNzIGlzIGRlcHJlY2F0ZWQsIHRoZSBBUEkgd2FzIG5vdCByZXdvcmtlZCB0byBzdXBwb3J0IGR5bmFtaWMgc3RyaW5ncyBoZXJlLlxuICAgICAgICByZXR1cm4gU3RyaW5nVXRpbHMuZm9ybWF0KCBTY2VuZXJ5UGhldFN0cmluZ3MuV2F2ZWxlbmd0aFNsaWRlci5wYXR0ZXJuXzB3YXZlbGVuZ3RoXzF1bml0c1N0cmluZ1Byb3BlcnR5LnZhbHVlLFxuICAgICAgICAgIFV0aWxzLnRvRml4ZWQoIHZhbHVlLCAwICksIFNjZW5lcnlQaGV0U3RyaW5ncy51bml0c19ubVN0cmluZ1Byb3BlcnR5LnZhbHVlICk7XG4gICAgICB9LFxuICAgICAgdmFsdWVUb0NvbG9yOiBmdW5jdGlvbiggdmFsdWU6IG51bWJlciApIHtcbiAgICAgICAgcmV0dXJuIFZpc2libGVDb2xvci53YXZlbGVuZ3RoVG9Db2xvciggdmFsdWUgKTtcbiAgICAgIH1cbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIG9wdGlvbnMubWluVmFsdWUgPSBvcHRpb25zLm1pbldhdmVsZW5ndGg7XG4gICAgb3B0aW9ucy5tYXhWYWx1ZSA9IG9wdGlvbnMubWF4V2F2ZWxlbmd0aDtcblxuICAgIHN1cGVyKCB3YXZlbGVuZ3RoUHJvcGVydHksIG9wdGlvbnMgKTtcbiAgfVxufVxuXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1dhdmVsZW5ndGhTbGlkZXInLCBXYXZlbGVuZ3RoU2xpZGVyICk7Il0sIm5hbWVzIjpbIlV0aWxzIiwib3B0aW9uaXplIiwiU3RyaW5nVXRpbHMiLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIlNwZWN0cnVtU2xpZGVyIiwiVmlzaWJsZUNvbG9yIiwiV2F2ZWxlbmd0aFNsaWRlciIsIndhdmVsZW5ndGhQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJtaW5XYXZlbGVuZ3RoIiwiTUlOX1dBVkVMRU5HVEgiLCJtYXhXYXZlbGVuZ3RoIiwiTUFYX1dBVkVMRU5HVEgiLCJ2YWx1ZVRvU3RyaW5nIiwidmFsdWUiLCJmb3JtYXQiLCJwYXR0ZXJuXzB3YXZlbGVuZ3RoXzF1bml0c1N0cmluZ1Byb3BlcnR5IiwidG9GaXhlZCIsInVuaXRzX25tU3RyaW5nUHJvcGVydHkiLCJ2YWx1ZVRvQ29sb3IiLCJ3YXZlbGVuZ3RoVG9Db2xvciIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7OztDQUtDLEdBR0QsT0FBT0EsV0FBVyx3QkFBd0I7QUFDMUMsT0FBT0MsZUFBZSxrQ0FBa0M7QUFFeEQsT0FBT0MsaUJBQWlCLDBDQUEwQztBQUNsRSxPQUFPQyxpQkFBaUIsbUJBQW1CO0FBQzNDLE9BQU9DLHdCQUF3QiwwQkFBMEI7QUFDekQsT0FBT0Msb0JBQStDLHNCQUFzQjtBQUM1RSxPQUFPQyxrQkFBa0Isb0JBQW9CO0FBYTlCLElBQUEsQUFBTUMsbUJBQU4sTUFBTUEseUJBQXlCRjtJQUU1Qzs7O0dBR0MsR0FDRCxZQUFvQkcsa0JBQXFDLEVBQUVDLGVBQXlDLENBQUc7UUFFckcseUNBQXlDO1FBQ3pDLE1BQU1DLFVBQVVULFlBQTBFO1lBRXhGLGNBQWM7WUFDZFUsZUFBZUwsYUFBYU0sY0FBYztZQUMxQ0MsZUFBZVAsYUFBYVEsY0FBYztZQUUxQyx3QkFBd0I7WUFDeEJDLGVBQWUsU0FBVUMsS0FBYTtnQkFFcEMsb0dBQW9HO2dCQUNwRyxPQUFPZCxZQUFZZSxNQUFNLENBQUViLG1CQUFtQkcsZ0JBQWdCLENBQUNXLHdDQUF3QyxDQUFDRixLQUFLLEVBQzNHaEIsTUFBTW1CLE9BQU8sQ0FBRUgsT0FBTyxJQUFLWixtQkFBbUJnQixzQkFBc0IsQ0FBQ0osS0FBSztZQUM5RTtZQUNBSyxjQUFjLFNBQVVMLEtBQWE7Z0JBQ25DLE9BQU9WLGFBQWFnQixpQkFBaUIsQ0FBRU47WUFDekM7UUFDRixHQUFHUDtRQUVIQyxRQUFRYSxRQUFRLEdBQUdiLFFBQVFDLGFBQWE7UUFDeENELFFBQVFjLFFBQVEsR0FBR2QsUUFBUUcsYUFBYTtRQUV4QyxLQUFLLENBQUVMLG9CQUFvQkU7SUFDN0I7QUFDRjtBQXBDQTs7O0NBR0MsR0FDRCxTQUFxQkgsOEJBZ0NwQjtBQUVESixZQUFZc0IsUUFBUSxDQUFFLG9CQUFvQmxCIn0=