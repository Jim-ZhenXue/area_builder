// Copyright 2018-2024, University of Colorado Boulder
/**
 * View that typically connects a sensor (like a ProbeNode) to its body (where the readout value or chart appears).
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */ import Multilink from '../../axon/js/Multilink.js';
import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { Path } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
let WireNode = class WireNode extends Path {
    dispose() {
        this.multilink.dispose();
        super.dispose();
    }
    /**
   * @param position1Property - connects to one object, often this is a DerivedProperty
   * @param normal1Property - defines the control point of the cubic curve, relative to the position1
   * @param position2Property - connects to another object, often this is a DerivedProperty
   * @param normal2Property - defines the control point of the cubic curve, relative to the position2
   * @param [options]
   */ constructor(position1Property, normal1Property, position2Property, normal2Property, options){
        options = optionize()({
            stroke: 'black'
        }, options);
        super(null, options);
        this.multilink = Multilink.multilink([
            position1Property,
            normal1Property,
            position2Property,
            normal2Property
        ], (position1, normal1, position2, normal2)=>{
            this.shape = new Shape().moveToPoint(position1).cubicCurveToPoint(position1.plus(normal1), position2.plus(normal2), position2);
        });
    }
};
export { WireNode as default };
sceneryPhet.register('WireNode', WireNode);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9XaXJlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBWaWV3IHRoYXQgdHlwaWNhbGx5IGNvbm5lY3RzIGEgc2Vuc29yIChsaWtlIGEgUHJvYmVOb2RlKSB0byBpdHMgYm9keSAod2hlcmUgdGhlIHJlYWRvdXQgdmFsdWUgb3IgY2hhcnQgYXBwZWFycykuXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgTXVsdGlsaW5rLCB7IFVua25vd25NdWx0aWxpbmsgfSBmcm9tICcuLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCB7IFBhdGgsIFBhdGhPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcblxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XG5cbmV4cG9ydCB0eXBlIFdpcmVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGF0aE9wdGlvbnM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdpcmVOb2RlIGV4dGVuZHMgUGF0aCB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBtdWx0aWxpbms6IFVua25vd25NdWx0aWxpbms7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBwb3NpdGlvbjFQcm9wZXJ0eSAtIGNvbm5lY3RzIHRvIG9uZSBvYmplY3QsIG9mdGVuIHRoaXMgaXMgYSBEZXJpdmVkUHJvcGVydHlcbiAgICogQHBhcmFtIG5vcm1hbDFQcm9wZXJ0eSAtIGRlZmluZXMgdGhlIGNvbnRyb2wgcG9pbnQgb2YgdGhlIGN1YmljIGN1cnZlLCByZWxhdGl2ZSB0byB0aGUgcG9zaXRpb24xXG4gICAqIEBwYXJhbSBwb3NpdGlvbjJQcm9wZXJ0eSAtIGNvbm5lY3RzIHRvIGFub3RoZXIgb2JqZWN0LCBvZnRlbiB0aGlzIGlzIGEgRGVyaXZlZFByb3BlcnR5XG4gICAqIEBwYXJhbSBub3JtYWwyUHJvcGVydHkgLSBkZWZpbmVzIHRoZSBjb250cm9sIHBvaW50IG9mIHRoZSBjdWJpYyBjdXJ2ZSwgcmVsYXRpdmUgdG8gdGhlIHBvc2l0aW9uMlxuICAgKiBAcGFyYW0gW29wdGlvbnNdXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoIHBvc2l0aW9uMVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxWZWN0b3IyPiwgbm9ybWFsMVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxWZWN0b3IyPixcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjJQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sIG5vcm1hbDJQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8VmVjdG9yMj4sXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz86IFdpcmVOb2RlT3B0aW9ucyApIHtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25pemU8V2lyZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGF0aE9wdGlvbnM+KCkoIHtcbiAgICAgIHN0cm9rZTogJ2JsYWNrJ1xuICAgIH0sIG9wdGlvbnMgKTtcblxuICAgIHN1cGVyKCBudWxsLCBvcHRpb25zICk7XG5cbiAgICB0aGlzLm11bHRpbGluayA9IE11bHRpbGluay5tdWx0aWxpbmsoIFtcbiAgICAgIHBvc2l0aW9uMVByb3BlcnR5LCBub3JtYWwxUHJvcGVydHksIHBvc2l0aW9uMlByb3BlcnR5LCBub3JtYWwyUHJvcGVydHlcbiAgICBdLCAoIHBvc2l0aW9uMSwgbm9ybWFsMSwgcG9zaXRpb24yLCBub3JtYWwyICkgPT4ge1xuICAgICAgdGhpcy5zaGFwZSA9IG5ldyBTaGFwZSgpXG4gICAgICAgIC5tb3ZlVG9Qb2ludCggcG9zaXRpb24xIClcbiAgICAgICAgLmN1YmljQ3VydmVUb1BvaW50KFxuICAgICAgICAgIHBvc2l0aW9uMS5wbHVzKCBub3JtYWwxICksXG4gICAgICAgICAgcG9zaXRpb24yLnBsdXMoIG5vcm1hbDIgKSxcbiAgICAgICAgICBwb3NpdGlvbjJcbiAgICAgICAgKTtcbiAgICB9ICk7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLm11bHRpbGluay5kaXNwb3NlKCk7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG59XG5cbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnV2lyZU5vZGUnLCBXaXJlTm9kZSApOyJdLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJTaGFwZSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJzY2VuZXJ5UGhldCIsIldpcmVOb2RlIiwiZGlzcG9zZSIsIm11bHRpbGluayIsInBvc2l0aW9uMVByb3BlcnR5Iiwibm9ybWFsMVByb3BlcnR5IiwicG9zaXRpb24yUHJvcGVydHkiLCJub3JtYWwyUHJvcGVydHkiLCJvcHRpb25zIiwic3Ryb2tlIiwicG9zaXRpb24xIiwibm9ybWFsMSIsInBvc2l0aW9uMiIsIm5vcm1hbDIiLCJzaGFwZSIsIm1vdmVUb1BvaW50IiwiY3ViaWNDdXJ2ZVRvUG9pbnQiLCJwbHVzIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBRUQsT0FBT0EsZUFBcUMsNkJBQTZCO0FBR3pFLFNBQVNDLEtBQUssUUFBUSwyQkFBMkI7QUFDakQsT0FBT0MsZUFBcUMsa0NBQWtDO0FBQzlFLFNBQVNDLElBQUksUUFBcUIsOEJBQThCO0FBQ2hFLE9BQU9DLGlCQUFpQixtQkFBbUI7QUFNNUIsSUFBQSxBQUFNQyxXQUFOLE1BQU1BLGlCQUFpQkY7SUFrQ3BCRyxVQUFnQjtRQUM5QixJQUFJLENBQUNDLFNBQVMsQ0FBQ0QsT0FBTztRQUN0QixLQUFLLENBQUNBO0lBQ1I7SUFqQ0E7Ozs7OztHQU1DLEdBQ0QsWUFBb0JFLGlCQUE2QyxFQUFFQyxlQUEyQyxFQUMxRkMsaUJBQTZDLEVBQUVDLGVBQTJDLEVBQzFGQyxPQUF5QixDQUFHO1FBRTlDQSxVQUFVVixZQUF3RDtZQUNoRVcsUUFBUTtRQUNWLEdBQUdEO1FBRUgsS0FBSyxDQUFFLE1BQU1BO1FBRWIsSUFBSSxDQUFDTCxTQUFTLEdBQUdQLFVBQVVPLFNBQVMsQ0FBRTtZQUNwQ0M7WUFBbUJDO1lBQWlCQztZQUFtQkM7U0FDeEQsRUFBRSxDQUFFRyxXQUFXQyxTQUFTQyxXQUFXQztZQUNsQyxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJakIsUUFDZGtCLFdBQVcsQ0FBRUwsV0FDYk0saUJBQWlCLENBQ2hCTixVQUFVTyxJQUFJLENBQUVOLFVBQ2hCQyxVQUFVSyxJQUFJLENBQUVKLFVBQ2hCRDtRQUVOO0lBQ0Y7QUFNRjtBQXRDQSxTQUFxQlgsc0JBc0NwQjtBQUVERCxZQUFZa0IsUUFBUSxDQUFFLFlBQVlqQiJ9