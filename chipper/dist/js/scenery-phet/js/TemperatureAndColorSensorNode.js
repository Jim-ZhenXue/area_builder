// Copyright 2019-2024, University of Colorado Boulder
/**
 * A Scenery Node that portrays a thermometer and a triangular indicator of the precise position where the temperature
 * is being sensed. The triangular indicator can be filled with a color to make it more clear what exactly is being
 * measured.
 *
 * @author Arnab Purkayastha
 * @author John Blanco
 */ import { Shape } from '../../kite/js/imports.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import { Color, Node, Path } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
import ThermometerNode from './ThermometerNode.js';
let TemperatureAndColorSensorNode = class TemperatureAndColorSensorNode extends Node {
    getThermometerBounds() {
        return this.thermometerNode.bounds;
    }
    get thermometerBounds() {
        return this.getThermometerBounds();
    }
    getColorIndicatorBounds() {
        return this.colorIndicatorNode.bounds;
    }
    get colorIndicatorBounds() {
        return this.getColorIndicatorBounds();
    }
    constructor(temperatureProperty, temperatureRange, colorProperty, providedOptions){
        super();
        const options = optionize()({
            // SelfOptions
            horizontalSpace: 3,
            bottomOffset: 5,
            thermometerNodeOptions: {
                bulbDiameter: 30,
                tubeWidth: 18,
                lineWidth: 2,
                tickSpacingTemperature: 25,
                majorTickLength: 10,
                minorTickLength: 5,
                backgroundFill: new Color(256, 256, 256, 0.67)
            },
            colorIndicatorOptions: {
                fill: new Color(0, 0, 0, 0),
                lineWidth: 2,
                stroke: 'black',
                lineJoin: 'round',
                sideLength: 18
            }
        }, providedOptions);
        // Add the triangle that will display the sensed color.
        // The leftmost point of this triangle will correspond to the position of the sensor in the model.
        const s = options.colorIndicatorOptions.sideLength;
        const triangleShape = new Shape().moveTo(0, 0).lineTo(Math.cos(Math.PI / 6) * s, -Math.sin(Math.PI / 6) * s).lineTo(Math.cos(Math.PI / 6) * s, Math.sin(Math.PI / 6) * s).close();
        this.colorIndicatorNode = new Path(triangleShape, options.colorIndicatorOptions);
        colorProperty.link((color)=>{
            this.colorIndicatorNode.fill = color;
        });
        this.addChild(this.colorIndicatorNode);
        this.thermometerNode = new ThermometerNode(temperatureProperty, temperatureRange.min, temperatureRange.max, combineOptions({
            left: this.colorIndicatorNode.right + options.horizontalSpace,
            bottom: this.colorIndicatorNode.bottom + options.bottomOffset
        }, options.thermometerNodeOptions));
        this.addChild(this.thermometerNode);
        this.mutate(options);
    }
};
export { TemperatureAndColorSensorNode as default };
sceneryPhet.register('TemperatureAndColorSensorNode', TemperatureAndColorSensorNode);

//# sourceMappingURL=data:application/json;base64,