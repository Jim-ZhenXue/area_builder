// Copyright 2024, University of Colorado Boulder
/**
 * A RichDragListener that supports sounds for grab and release.
 *
 * @author Jesse Greenberg
 */ import { combineOptions, optionize3 } from '../../phet-core/js/optionize.js';
import { RichDragListener } from '../../scenery/js/imports.js';
import sharedSoundPlayers from '../../tambo/js/sharedSoundPlayers.js';
import sceneryPhet from './sceneryPhet.js';
// Default values for sounds used by both drag listeners.
const DEFAULT_SOUND_OPTIONS = {
    grabSoundPlayer: sharedSoundPlayers.get('grab'),
    releaseSoundPlayer: sharedSoundPlayers.get('release')
};
// Factored out of optionize for readability.
const SOUND_RICH_DRAG_LISTENER_DEFAULTS = _.assignIn({
    keyboardDragListenerSoundOptions: {},
    dragListenerSoundOptions: {}
}, DEFAULT_SOUND_OPTIONS);
let SoundRichDragListener = class SoundRichDragListener extends RichDragListener {
    /**
   * Plays the sounds when the drag listener is pressed or released.
   */ static linkToDragEvents(dragListener, grabSound, releaseSound) {
        const isPressedListener = (isPressed)=>{
            if (isPressed) {
                grabSound && grabSound.play();
            } else if (!dragListener.interrupted) {
                releaseSound && releaseSound.play();
            }
        };
        dragListener.isPressedProperty.link(isPressedListener);
    }
    constructor(providedOptions){
        const options = optionize3()({}, SOUND_RICH_DRAG_LISTENER_DEFAULTS, providedOptions);
        // Create options for each listener, combining the listener type specific options into the shared options.
        const dragListenerSoundOptions = combineOptions({}, options, options.dragListenerSoundOptions);
        const keyboardDragListenerSoundOptions = combineOptions({}, options, options.keyboardDragListenerSoundOptions);
        const dragListenerPressedSoundPlayer = dragListenerSoundOptions.grabSoundPlayer;
        const dragListenerReleasedSoundPlayer = dragListenerSoundOptions.releaseSoundPlayer;
        const keyboardDragListenerPressedSoundPlayer = keyboardDragListenerSoundOptions.grabSoundPlayer;
        const keyboardDragListenerReleasedSoundPlayer = keyboardDragListenerSoundOptions.releaseSoundPlayer;
        super(options);
        // Unlinks are not necessary because they are removed when the drag listeners are disposed.
        SoundRichDragListener.linkToDragEvents(this.dragListener, dragListenerPressedSoundPlayer, dragListenerReleasedSoundPlayer);
        SoundRichDragListener.linkToDragEvents(this.keyboardDragListener, keyboardDragListenerPressedSoundPlayer, keyboardDragListenerReleasedSoundPlayer);
    }
};
SoundRichDragListener.DEFAULT_SOUND_OPTIONS = DEFAULT_SOUND_OPTIONS;
export { SoundRichDragListener as default };
sceneryPhet.register('SoundRichDragListener', SoundRichDragListener);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9Tb3VuZFJpY2hEcmFnTGlzdGVuZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgUmljaERyYWdMaXN0ZW5lciB0aGF0IHN1cHBvcnRzIHNvdW5kcyBmb3IgZ3JhYiBhbmQgcmVsZWFzZS5cbiAqXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xuICovXG5cbmltcG9ydCB7IGNvbWJpbmVPcHRpb25zLCBvcHRpb25pemUzIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIsIEtleWJvYXJkRHJhZ0xpc3RlbmVyLCBSaWNoRHJhZ0xpc3RlbmVyLCBSaWNoRHJhZ0xpc3RlbmVyT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XG5pbXBvcnQgc2hhcmVkU291bmRQbGF5ZXJzIGZyb20gJy4uLy4uL3RhbWJvL2pzL3NoYXJlZFNvdW5kUGxheWVycy5qcyc7XG5pbXBvcnQgVFNvdW5kUGxheWVyIGZyb20gJy4uLy4uL3RhbWJvL2pzL1RTb3VuZFBsYXllci5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XG5cbi8vIE9wdGlvbnMgZm9yIGRyYWcgbGlzdGVuZXJzIHRoYXQgYXJlIHNwZWNpZmljIHRvIHNvdW5kLlxuZXhwb3J0IHR5cGUgUmljaERyYWdMaXN0ZW5lclNvdW5kT3B0aW9ucyA9IHtcblxuICAvLyBHcmFiIGFuZCByZWxlYXNlIHNvdW5kcy4gYG51bGxgIG1lYW5zIG5vIHNvdW5kLlxuICBncmFiU291bmRQbGF5ZXI/OiBUU291bmRQbGF5ZXIgfCBudWxsO1xuICByZWxlYXNlU291bmRQbGF5ZXI/OiBUU291bmRQbGF5ZXIgfCBudWxsO1xufTtcblxudHlwZSBTZWxmT3B0aW9ucyA9IHtcblxuICAvLyBTb3VuZCBwbGF5ZXJzIHRoYXQgb25seSBhcHBseSB0byB0aGUga2V5Ym9hcmQgZHJhZyBsaXN0ZW5lci5cbiAga2V5Ym9hcmREcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnM/OiBSaWNoRHJhZ0xpc3RlbmVyU291bmRPcHRpb25zO1xuXG4gIC8vIFNvdW5kIHBsYXllcnMgdGhhdCBvbmx5IGFwcGx5IHRvIHRoZSBkcmFnIGxpc3RlbmVyLlxuICBkcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnM/OiBSaWNoRHJhZ0xpc3RlbmVyU291bmRPcHRpb25zO1xufSAmIFJpY2hEcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnM7IC8vIFNvdW5kIHBsYXllcnMgdGhhdCBhcHBseSB0byBib3RoIGxpc3RlbmVycy5cblxuZXhwb3J0IHR5cGUgU291bmRSaWNoRHJhZ0xpc3RlbmVyT3B0aW9ucyA9IFJpY2hEcmFnTGlzdGVuZXJPcHRpb25zICYgU2VsZk9wdGlvbnM7XG5cbi8vIERlZmF1bHQgdmFsdWVzIGZvciBzb3VuZHMgdXNlZCBieSBib3RoIGRyYWcgbGlzdGVuZXJzLlxuY29uc3QgREVGQVVMVF9TT1VORF9PUFRJT05TID0ge1xuICBncmFiU291bmRQbGF5ZXI6IHNoYXJlZFNvdW5kUGxheWVycy5nZXQoICdncmFiJyApLFxuICByZWxlYXNlU291bmRQbGF5ZXI6IHNoYXJlZFNvdW5kUGxheWVycy5nZXQoICdyZWxlYXNlJyApXG59IGFzIGNvbnN0O1xuXG4vLyBGYWN0b3JlZCBvdXQgb2Ygb3B0aW9uaXplIGZvciByZWFkYWJpbGl0eS5cbmNvbnN0IFNPVU5EX1JJQ0hfRFJBR19MSVNURU5FUl9ERUZBVUxUUyA9IF8uYXNzaWduSW4oIHtcbiAga2V5Ym9hcmREcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnM6IHt9LFxuICBkcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnM6IHt9XG59LCBERUZBVUxUX1NPVU5EX09QVElPTlMgKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU291bmRSaWNoRHJhZ0xpc3RlbmVyIGV4dGVuZHMgUmljaERyYWdMaXN0ZW5lciB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogU291bmRSaWNoRHJhZ0xpc3RlbmVyT3B0aW9ucyApIHtcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplMzxTb3VuZFJpY2hEcmFnTGlzdGVuZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgUmljaERyYWdMaXN0ZW5lck9wdGlvbnM+KCkoXG4gICAgICB7fSwgU09VTkRfUklDSF9EUkFHX0xJU1RFTkVSX0RFRkFVTFRTLCBwcm92aWRlZE9wdGlvbnNcbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIG9wdGlvbnMgZm9yIGVhY2ggbGlzdGVuZXIsIGNvbWJpbmluZyB0aGUgbGlzdGVuZXIgdHlwZSBzcGVjaWZpYyBvcHRpb25zIGludG8gdGhlIHNoYXJlZCBvcHRpb25zLlxuICAgIGNvbnN0IGRyYWdMaXN0ZW5lclNvdW5kT3B0aW9ucyA9IGNvbWJpbmVPcHRpb25zPFJpY2hEcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnM+KCB7fSwgb3B0aW9ucywgb3B0aW9ucy5kcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnMgKTtcbiAgICBjb25zdCBrZXlib2FyZERyYWdMaXN0ZW5lclNvdW5kT3B0aW9ucyA9IGNvbWJpbmVPcHRpb25zPFJpY2hEcmFnTGlzdGVuZXJTb3VuZE9wdGlvbnM+KCB7fSwgb3B0aW9ucywgb3B0aW9ucy5rZXlib2FyZERyYWdMaXN0ZW5lclNvdW5kT3B0aW9ucyApO1xuXG4gICAgY29uc3QgZHJhZ0xpc3RlbmVyUHJlc3NlZFNvdW5kUGxheWVyID0gZHJhZ0xpc3RlbmVyU291bmRPcHRpb25zLmdyYWJTb3VuZFBsYXllcjtcbiAgICBjb25zdCBkcmFnTGlzdGVuZXJSZWxlYXNlZFNvdW5kUGxheWVyID0gZHJhZ0xpc3RlbmVyU291bmRPcHRpb25zLnJlbGVhc2VTb3VuZFBsYXllcjtcbiAgICBjb25zdCBrZXlib2FyZERyYWdMaXN0ZW5lclByZXNzZWRTb3VuZFBsYXllciA9IGtleWJvYXJkRHJhZ0xpc3RlbmVyU291bmRPcHRpb25zLmdyYWJTb3VuZFBsYXllcjtcbiAgICBjb25zdCBrZXlib2FyZERyYWdMaXN0ZW5lclJlbGVhc2VkU291bmRQbGF5ZXIgPSBrZXlib2FyZERyYWdMaXN0ZW5lclNvdW5kT3B0aW9ucy5yZWxlYXNlU291bmRQbGF5ZXI7XG5cbiAgICBzdXBlciggb3B0aW9ucyApO1xuXG4gICAgLy8gVW5saW5rcyBhcmUgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIHRoZXkgYXJlIHJlbW92ZWQgd2hlbiB0aGUgZHJhZyBsaXN0ZW5lcnMgYXJlIGRpc3Bvc2VkLlxuICAgIFNvdW5kUmljaERyYWdMaXN0ZW5lci5saW5rVG9EcmFnRXZlbnRzKCB0aGlzLmRyYWdMaXN0ZW5lciwgZHJhZ0xpc3RlbmVyUHJlc3NlZFNvdW5kUGxheWVyLCBkcmFnTGlzdGVuZXJSZWxlYXNlZFNvdW5kUGxheWVyICk7XG4gICAgU291bmRSaWNoRHJhZ0xpc3RlbmVyLmxpbmtUb0RyYWdFdmVudHMoIHRoaXMua2V5Ym9hcmREcmFnTGlzdGVuZXIsIGtleWJvYXJkRHJhZ0xpc3RlbmVyUHJlc3NlZFNvdW5kUGxheWVyLCBrZXlib2FyZERyYWdMaXN0ZW5lclJlbGVhc2VkU291bmRQbGF5ZXIgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQbGF5cyB0aGUgc291bmRzIHdoZW4gdGhlIGRyYWcgbGlzdGVuZXIgaXMgcHJlc3NlZCBvciByZWxlYXNlZC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbGlua1RvRHJhZ0V2ZW50cyggZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIgfCBLZXlib2FyZERyYWdMaXN0ZW5lciwgZ3JhYlNvdW5kOiBUU291bmRQbGF5ZXIgfCBudWxsIHwgdW5kZWZpbmVkLCByZWxlYXNlU291bmQ6IFRTb3VuZFBsYXllciB8IG51bGwgfCB1bmRlZmluZWQgKTogdm9pZCB7XG4gICAgY29uc3QgaXNQcmVzc2VkTGlzdGVuZXIgPSAoIGlzUHJlc3NlZDogYm9vbGVhbiApID0+IHtcbiAgICAgIGlmICggaXNQcmVzc2VkICkge1xuICAgICAgICBncmFiU291bmQgJiYgZ3JhYlNvdW5kLnBsYXkoKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCAhZHJhZ0xpc3RlbmVyLmludGVycnVwdGVkICkge1xuICAgICAgICByZWxlYXNlU291bmQgJiYgcmVsZWFzZVNvdW5kLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGRyYWdMaXN0ZW5lci5pc1ByZXNzZWRQcm9wZXJ0eS5saW5rKCBpc1ByZXNzZWRMaXN0ZW5lciApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBERUZBVUxUX1NPVU5EX09QVElPTlMgPSBERUZBVUxUX1NPVU5EX09QVElPTlM7XG59XG5cbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnU291bmRSaWNoRHJhZ0xpc3RlbmVyJywgU291bmRSaWNoRHJhZ0xpc3RlbmVyICk7Il0sIm5hbWVzIjpbImNvbWJpbmVPcHRpb25zIiwib3B0aW9uaXplMyIsIlJpY2hEcmFnTGlzdGVuZXIiLCJzaGFyZWRTb3VuZFBsYXllcnMiLCJzY2VuZXJ5UGhldCIsIkRFRkFVTFRfU09VTkRfT1BUSU9OUyIsImdyYWJTb3VuZFBsYXllciIsImdldCIsInJlbGVhc2VTb3VuZFBsYXllciIsIlNPVU5EX1JJQ0hfRFJBR19MSVNURU5FUl9ERUZBVUxUUyIsIl8iLCJhc3NpZ25JbiIsImtleWJvYXJkRHJhZ0xpc3RlbmVyU291bmRPcHRpb25zIiwiZHJhZ0xpc3RlbmVyU291bmRPcHRpb25zIiwiU291bmRSaWNoRHJhZ0xpc3RlbmVyIiwibGlua1RvRHJhZ0V2ZW50cyIsImRyYWdMaXN0ZW5lciIsImdyYWJTb3VuZCIsInJlbGVhc2VTb3VuZCIsImlzUHJlc3NlZExpc3RlbmVyIiwiaXNQcmVzc2VkIiwicGxheSIsImludGVycnVwdGVkIiwiaXNQcmVzc2VkUHJvcGVydHkiLCJsaW5rIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImRyYWdMaXN0ZW5lclByZXNzZWRTb3VuZFBsYXllciIsImRyYWdMaXN0ZW5lclJlbGVhc2VkU291bmRQbGF5ZXIiLCJrZXlib2FyZERyYWdMaXN0ZW5lclByZXNzZWRTb3VuZFBsYXllciIsImtleWJvYXJkRHJhZ0xpc3RlbmVyUmVsZWFzZWRTb3VuZFBsYXllciIsImtleWJvYXJkRHJhZ0xpc3RlbmVyIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUVqRDs7OztDQUlDLEdBRUQsU0FBU0EsY0FBYyxFQUFFQyxVQUFVLFFBQVEsa0NBQWtDO0FBQzdFLFNBQTZDQyxnQkFBZ0IsUUFBaUMsOEJBQThCO0FBQzVILE9BQU9DLHdCQUF3Qix1Q0FBdUM7QUFFdEUsT0FBT0MsaUJBQWlCLG1CQUFtQjtBQXFCM0MseURBQXlEO0FBQ3pELE1BQU1DLHdCQUF3QjtJQUM1QkMsaUJBQWlCSCxtQkFBbUJJLEdBQUcsQ0FBRTtJQUN6Q0Msb0JBQW9CTCxtQkFBbUJJLEdBQUcsQ0FBRTtBQUM5QztBQUVBLDZDQUE2QztBQUM3QyxNQUFNRSxvQ0FBb0NDLEVBQUVDLFFBQVEsQ0FBRTtJQUNwREMsa0NBQWtDLENBQUM7SUFDbkNDLDBCQUEwQixDQUFDO0FBQzdCLEdBQUdSO0FBRVksSUFBQSxBQUFNUyx3QkFBTixNQUFNQSw4QkFBOEJaO0lBc0JqRDs7R0FFQyxHQUNELE9BQWNhLGlCQUFrQkMsWUFBaUQsRUFBRUMsU0FBMEMsRUFBRUMsWUFBNkMsRUFBUztRQUNuTCxNQUFNQyxvQkFBb0IsQ0FBRUM7WUFDMUIsSUFBS0EsV0FBWTtnQkFDZkgsYUFBYUEsVUFBVUksSUFBSTtZQUM3QixPQUNLLElBQUssQ0FBQ0wsYUFBYU0sV0FBVyxFQUFHO2dCQUNwQ0osZ0JBQWdCQSxhQUFhRyxJQUFJO1lBQ25DO1FBQ0Y7UUFDQUwsYUFBYU8saUJBQWlCLENBQUNDLElBQUksQ0FBRUw7SUFDdkM7SUFsQ0EsWUFBb0JNLGVBQThDLENBQUc7UUFDbkUsTUFBTUMsVUFBVXpCLGFBQ2QsQ0FBQyxHQUFHUSxtQ0FBbUNnQjtRQUd6QywwR0FBMEc7UUFDMUcsTUFBTVosMkJBQTJCYixlQUE4QyxDQUFDLEdBQUcwQixTQUFTQSxRQUFRYix3QkFBd0I7UUFDNUgsTUFBTUQsbUNBQW1DWixlQUE4QyxDQUFDLEdBQUcwQixTQUFTQSxRQUFRZCxnQ0FBZ0M7UUFFNUksTUFBTWUsaUNBQWlDZCx5QkFBeUJQLGVBQWU7UUFDL0UsTUFBTXNCLGtDQUFrQ2YseUJBQXlCTCxrQkFBa0I7UUFDbkYsTUFBTXFCLHlDQUF5Q2pCLGlDQUFpQ04sZUFBZTtRQUMvRixNQUFNd0IsMENBQTBDbEIsaUNBQWlDSixrQkFBa0I7UUFFbkcsS0FBSyxDQUFFa0I7UUFFUCwyRkFBMkY7UUFDM0ZaLHNCQUFzQkMsZ0JBQWdCLENBQUUsSUFBSSxDQUFDQyxZQUFZLEVBQUVXLGdDQUFnQ0M7UUFDM0ZkLHNCQUFzQkMsZ0JBQWdCLENBQUUsSUFBSSxDQUFDZ0Isb0JBQW9CLEVBQUVGLHdDQUF3Q0M7SUFDN0c7QUFrQkY7QUF0Q3FCaEIsc0JBcUNJVCx3QkFBd0JBO0FBckNqRCxTQUFxQlMsbUNBc0NwQjtBQUVEVixZQUFZNEIsUUFBUSxDQUFFLHlCQUF5QmxCIn0=