// Copyright 2016-2022, University of Colorado Boulder
/**
 * base type for an object that accumulates key presses, works in conjunction with the common-code keypad
 *
 * @author John Blanco
 * @author Aadish Gupta
 */ import Property from '../../../axon/js/Property.js';
import sceneryPhet from '../sceneryPhet.js';
import KeyID from './KeyID.js';
let AbstractKeyAccumulator = class AbstractKeyAccumulator {
    get clearOnNextKeyPress() {
        return this.getClearOnNextKeyPress();
    }
    set clearOnNextKeyPress(value) {
        this.setClearOnNextKeyPress(value);
    }
    /**
   * Clears the accumulated keys.
   */ clear() {
        this.accumulatedKeysProperty.reset();
    }
    /**
   * Sets/clears the flag that determines whether pressing a key (except for backspace) will clear the accumulated keys.
   */ setClearOnNextKeyPress(clearOnNextKeyPress) {
        this._clearOnNextKeyPress = clearOnNextKeyPress;
    }
    /**
   * Gets the value of the flag determines whether pressing a key (except for backspace) will clear the accumulated keys.
   */ getClearOnNextKeyPress() {
        return this._clearOnNextKeyPress;
    }
    /**
   * validates a proposed set of keys and (if valid) update the property that represents the accumulated keys
   * @param proposedKeys - the proposed set of keys, to be validated
   *
   * @returns boolean
   */ validateKeys(proposedKeys) {
        // Ensures that proposedKeys exist before validation
        let valid = !!proposedKeys;
        // If any validator returns false then the proposedKey is not valid
        this.validators.forEach((validator)=>{
            valid = valid && validator(proposedKeys);
        });
        return valid;
    }
    /**
   * update the property that represents the accumulated keys
   * @param proposedKeys - the proposed set of keys
   */ updateKeys(proposedKeys) {
        this.accumulatedKeysProperty.set(proposedKeys);
    }
    /**
   * creates an empty array if clearOnNextKeyPress is true, the behavior differs if Backspace key is pressed
   */ handleClearOnNextKeyPress(keyIdentifier) {
        let proposedArray;
        if (!this.getClearOnNextKeyPress() || keyIdentifier === KeyID.BACKSPACE) {
            proposedArray = _.clone(this.accumulatedKeysProperty.get());
        } else {
            proposedArray = [];
        }
        this.setClearOnNextKeyPress(false);
        return proposedArray;
    }
    dispose() {
        this.accumulatedKeysProperty.dispose();
    }
    constructor(validators){
        this.validators = validators;
        this.accumulatedKeysProperty = new Property([]);
        this._clearOnNextKeyPress = false;
    }
};
sceneryPhet.register('AbstractKeyAccumulator', AbstractKeyAccumulator);
export default AbstractKeyAccumulator;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9rZXlwYWQvQWJzdHJhY3RLZXlBY2N1bXVsYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBiYXNlIHR5cGUgZm9yIGFuIG9iamVjdCB0aGF0IGFjY3VtdWxhdGVzIGtleSBwcmVzc2VzLCB3b3JrcyBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBjb21tb24tY29kZSBrZXlwYWRcbiAqXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXG4gKiBAYXV0aG9yIEFhZGlzaCBHdXB0YVxuICovXG5cbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcbmltcG9ydCBSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xuaW1wb3J0IEtleUlELCB7IEtleUlEVmFsdWUgfSBmcm9tICcuL0tleUlELmpzJztcblxuYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RLZXlBY2N1bXVsYXRvciB7XG5cbiAgLy8gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBrZXlzIGVudGVyZWQgYnkgdGhlIHVzZXJcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHN0cmluZ1Byb3BlcnR5OiBSZWFkT25seVByb3BlcnR5PHN0cmluZz47XG5cbiAgLy8gbnVtZXJpY2FsIHZhbHVlIG9mIHRoZSBrZXlzIGVudGVyZWQgYnkgdGhlIHVzZXJcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHZhbHVlUHJvcGVydHk6IFJlYWRPbmx5UHJvcGVydHk8bnVtYmVyIHwgbnVsbD47XG5cbiAgLy8gUHJvcGVydHkgdGhhdCB0cmFja3MgdGhlIGFjY3VtdWxhdGVkIGtleSBwcmVzc2VzIGFzIGFuIGFycmF5XG4gIHB1YmxpYyByZWFkb25seSBhY2N1bXVsYXRlZEtleXNQcm9wZXJ0eTogUHJvcGVydHk8S2V5SURWYWx1ZVtdPiA9IG5ldyBQcm9wZXJ0eTxLZXlJRFZhbHVlW10+KCBbXSApO1xuXG4gIC8vIFdoZW4gdHJ1ZSwgdGhlIG5leHQga2V5IHByZXNzIChleHBlY3QgYmFja3NwYWNlKSB3aWxsIGNsZWFyIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZVxuICBwdWJsaWMgX2NsZWFyT25OZXh0S2V5UHJlc3MgPSBmYWxzZTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3RlY3RlZCByZWFkb25seSB2YWxpZGF0b3JzOiAoICgga2V5czogS2V5SURWYWx1ZVtdICkgPT4gYm9vbGVhbiApW10gKSB7XG5cbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2xlYXJPbk5leHRLZXlQcmVzcygpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuZ2V0Q2xlYXJPbk5leHRLZXlQcmVzcygpOyB9XG5cbiAgcHVibGljIHNldCBjbGVhck9uTmV4dEtleVByZXNzKCB2YWx1ZTogYm9vbGVhbiApIHsgdGhpcy5zZXRDbGVhck9uTmV4dEtleVByZXNzKCB2YWx1ZSApOyB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgYWNjdW11bGF0ZWQga2V5cy5cbiAgICovXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmFjY3VtdWxhdGVkS2V5c1Byb3BlcnR5LnJlc2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cy9jbGVhcnMgdGhlIGZsYWcgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgcHJlc3NpbmcgYSBrZXkgKGV4Y2VwdCBmb3IgYmFja3NwYWNlKSB3aWxsIGNsZWFyIHRoZSBhY2N1bXVsYXRlZCBrZXlzLlxuICAgKi9cbiAgcHVibGljIHNldENsZWFyT25OZXh0S2V5UHJlc3MoIGNsZWFyT25OZXh0S2V5UHJlc3M6IGJvb2xlYW4gKTogdm9pZCB7XG4gICAgdGhpcy5fY2xlYXJPbk5leHRLZXlQcmVzcyA9IGNsZWFyT25OZXh0S2V5UHJlc3M7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgb2YgdGhlIGZsYWcgZGV0ZXJtaW5lcyB3aGV0aGVyIHByZXNzaW5nIGEga2V5IChleGNlcHQgZm9yIGJhY2tzcGFjZSkgd2lsbCBjbGVhciB0aGUgYWNjdW11bGF0ZWQga2V5cy5cbiAgICovXG4gIHB1YmxpYyBnZXRDbGVhck9uTmV4dEtleVByZXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9jbGVhck9uTmV4dEtleVByZXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIHZhbGlkYXRlcyBhIHByb3Bvc2VkIHNldCBvZiBrZXlzIGFuZCAoaWYgdmFsaWQpIHVwZGF0ZSB0aGUgcHJvcGVydHkgdGhhdCByZXByZXNlbnRzIHRoZSBhY2N1bXVsYXRlZCBrZXlzXG4gICAqIEBwYXJhbSBwcm9wb3NlZEtleXMgLSB0aGUgcHJvcG9zZWQgc2V0IG9mIGtleXMsIHRvIGJlIHZhbGlkYXRlZFxuICAgKlxuICAgKiBAcmV0dXJucyBib29sZWFuXG4gICAqL1xuICBwcm90ZWN0ZWQgdmFsaWRhdGVLZXlzKCBwcm9wb3NlZEtleXM6IEtleUlEVmFsdWVbXSApOiBib29sZWFuIHtcblxuICAgIC8vIEVuc3VyZXMgdGhhdCBwcm9wb3NlZEtleXMgZXhpc3QgYmVmb3JlIHZhbGlkYXRpb25cbiAgICBsZXQgdmFsaWQgPSAhIXByb3Bvc2VkS2V5cztcblxuICAgIC8vIElmIGFueSB2YWxpZGF0b3IgcmV0dXJucyBmYWxzZSB0aGVuIHRoZSBwcm9wb3NlZEtleSBpcyBub3QgdmFsaWRcbiAgICB0aGlzLnZhbGlkYXRvcnMuZm9yRWFjaCggdmFsaWRhdG9yID0+IHtcbiAgICAgIHZhbGlkID0gdmFsaWQgJiYgdmFsaWRhdG9yKCBwcm9wb3NlZEtleXMgKTtcbiAgICB9ICk7XG4gICAgcmV0dXJuIHZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZSB0aGUgcHJvcGVydHkgdGhhdCByZXByZXNlbnRzIHRoZSBhY2N1bXVsYXRlZCBrZXlzXG4gICAqIEBwYXJhbSBwcm9wb3NlZEtleXMgLSB0aGUgcHJvcG9zZWQgc2V0IG9mIGtleXNcbiAgICovXG4gIHByb3RlY3RlZCB1cGRhdGVLZXlzKCBwcm9wb3NlZEtleXM6IEtleUlEVmFsdWVbXSApOiB2b2lkIHtcbiAgICB0aGlzLmFjY3VtdWxhdGVkS2V5c1Byb3BlcnR5LnNldCggcHJvcG9zZWRLZXlzICk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGJ5IHRoZSBrZXkgYWNjdW11bGF0b3Igd2hlbiB0aGlzIGtleSBpcyBwcmVzc2VkLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGhhbmRsZUtleVByZXNzZWQoIGtleUlkZW50aWZpZXI6IEtleUlEVmFsdWUgKTogdm9pZDtcblxuICAvKipcbiAgICogY3JlYXRlcyBhbiBlbXB0eSBhcnJheSBpZiBjbGVhck9uTmV4dEtleVByZXNzIGlzIHRydWUsIHRoZSBiZWhhdmlvciBkaWZmZXJzIGlmIEJhY2tzcGFjZSBrZXkgaXMgcHJlc3NlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGhhbmRsZUNsZWFyT25OZXh0S2V5UHJlc3MoIGtleUlkZW50aWZpZXI6IEtleUlEVmFsdWUgKTogS2V5SURWYWx1ZVtdIHtcbiAgICBsZXQgcHJvcG9zZWRBcnJheTogS2V5SURWYWx1ZVtdO1xuICAgIGlmICggIXRoaXMuZ2V0Q2xlYXJPbk5leHRLZXlQcmVzcygpIHx8IGtleUlkZW50aWZpZXIgPT09IEtleUlELkJBQ0tTUEFDRSApIHtcbiAgICAgIHByb3Bvc2VkQXJyYXkgPSBfLmNsb25lKCB0aGlzLmFjY3VtdWxhdGVkS2V5c1Byb3BlcnR5LmdldCgpICk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHJvcG9zZWRBcnJheSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLnNldENsZWFyT25OZXh0S2V5UHJlc3MoIGZhbHNlICk7XG4gICAgcmV0dXJuIHByb3Bvc2VkQXJyYXk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLmFjY3VtdWxhdGVkS2V5c1Byb3BlcnR5LmRpc3Bvc2UoKTtcbiAgfVxufVxuXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ0Fic3RyYWN0S2V5QWNjdW11bGF0b3InLCBBYnN0cmFjdEtleUFjY3VtdWxhdG9yICk7XG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdEtleUFjY3VtdWxhdG9yOyJdLCJuYW1lcyI6WyJQcm9wZXJ0eSIsInNjZW5lcnlQaGV0IiwiS2V5SUQiLCJBYnN0cmFjdEtleUFjY3VtdWxhdG9yIiwiY2xlYXJPbk5leHRLZXlQcmVzcyIsImdldENsZWFyT25OZXh0S2V5UHJlc3MiLCJ2YWx1ZSIsInNldENsZWFyT25OZXh0S2V5UHJlc3MiLCJjbGVhciIsImFjY3VtdWxhdGVkS2V5c1Byb3BlcnR5IiwicmVzZXQiLCJfY2xlYXJPbk5leHRLZXlQcmVzcyIsInZhbGlkYXRlS2V5cyIsInByb3Bvc2VkS2V5cyIsInZhbGlkIiwidmFsaWRhdG9ycyIsImZvckVhY2giLCJ2YWxpZGF0b3IiLCJ1cGRhdGVLZXlzIiwic2V0IiwiaGFuZGxlQ2xlYXJPbk5leHRLZXlQcmVzcyIsImtleUlkZW50aWZpZXIiLCJwcm9wb3NlZEFycmF5IiwiQkFDS1NQQUNFIiwiXyIsImNsb25lIiwiZ2V0IiwiZGlzcG9zZSIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7O0NBS0MsR0FFRCxPQUFPQSxjQUFjLCtCQUErQjtBQUVwRCxPQUFPQyxpQkFBaUIsb0JBQW9CO0FBQzVDLE9BQU9DLFdBQTJCLGFBQWE7QUFFL0MsSUFBQSxBQUFlQyx5QkFBZixNQUFlQTtJQWtCYixJQUFXQyxzQkFBK0I7UUFBRSxPQUFPLElBQUksQ0FBQ0Msc0JBQXNCO0lBQUk7SUFFbEYsSUFBV0Qsb0JBQXFCRSxLQUFjLEVBQUc7UUFBRSxJQUFJLENBQUNDLHNCQUFzQixDQUFFRDtJQUFTO0lBRXpGOztHQUVDLEdBQ0QsQUFBT0UsUUFBYztRQUNuQixJQUFJLENBQUNDLHVCQUF1QixDQUFDQyxLQUFLO0lBQ3BDO0lBRUE7O0dBRUMsR0FDRCxBQUFPSCx1QkFBd0JILG1CQUE0QixFQUFTO1FBQ2xFLElBQUksQ0FBQ08sb0JBQW9CLEdBQUdQO0lBQzlCO0lBRUE7O0dBRUMsR0FDRCxBQUFPQyx5QkFBa0M7UUFDdkMsT0FBTyxJQUFJLENBQUNNLG9CQUFvQjtJQUNsQztJQUVBOzs7OztHQUtDLEdBQ0QsQUFBVUMsYUFBY0MsWUFBMEIsRUFBWTtRQUU1RCxvREFBb0Q7UUFDcEQsSUFBSUMsUUFBUSxDQUFDLENBQUNEO1FBRWQsbUVBQW1FO1FBQ25FLElBQUksQ0FBQ0UsVUFBVSxDQUFDQyxPQUFPLENBQUVDLENBQUFBO1lBQ3ZCSCxRQUFRQSxTQUFTRyxVQUFXSjtRQUM5QjtRQUNBLE9BQU9DO0lBQ1Q7SUFFQTs7O0dBR0MsR0FDRCxBQUFVSSxXQUFZTCxZQUEwQixFQUFTO1FBQ3ZELElBQUksQ0FBQ0osdUJBQXVCLENBQUNVLEdBQUcsQ0FBRU47SUFDcEM7SUFPQTs7R0FFQyxHQUNELEFBQVVPLDBCQUEyQkMsYUFBeUIsRUFBaUI7UUFDN0UsSUFBSUM7UUFDSixJQUFLLENBQUMsSUFBSSxDQUFDakIsc0JBQXNCLE1BQU1nQixrQkFBa0JuQixNQUFNcUIsU0FBUyxFQUFHO1lBQ3pFRCxnQkFBZ0JFLEVBQUVDLEtBQUssQ0FBRSxJQUFJLENBQUNoQix1QkFBdUIsQ0FBQ2lCLEdBQUc7UUFDM0QsT0FDSztZQUNISixnQkFBZ0IsRUFBRTtRQUNwQjtRQUNBLElBQUksQ0FBQ2Ysc0JBQXNCLENBQUU7UUFDN0IsT0FBT2U7SUFDVDtJQUVPSyxVQUFnQjtRQUNyQixJQUFJLENBQUNsQix1QkFBdUIsQ0FBQ2tCLE9BQU87SUFDdEM7SUE3RUEsWUFBb0IsQUFBbUJaLFVBQW1ELENBQUc7YUFBdERBLGFBQUFBO2FBTHZCTiwwQkFBa0QsSUFBSVQsU0FBd0IsRUFBRTthQUd6RlcsdUJBQXVCO0lBSTlCO0FBNEVGO0FBRUFWLFlBQVkyQixRQUFRLENBQUUsMEJBQTBCekI7QUFDaEQsZUFBZUEsdUJBQXVCIn0=