// Copyright 2018-2024, University of Colorado Boulder
/**
 * Standard PhET button for 'refresh'.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */ import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import syncAltSolidShape from '../../../sherpa/js/fontawesome-5/syncAltSolidShape.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import PhetColorScheme from '../PhetColorScheme.js';
import sceneryPhet from '../sceneryPhet.js';
let RefreshButton = class RefreshButton extends RectangularPushButton {
    constructor(providedOptions){
        var _window_phet_chipper_queryParameters, _window_phet_chipper, _window_phet;
        const options = optionize()({
            // RefreshButtonOptions
            iconHeight: 35,
            // RectangularPushButtonOptions
            baseColor: PhetColorScheme.BUTTON_YELLOW,
            tandemNameSuffix: 'RefreshButton'
        }, providedOptions);
        options.content = new Path(syncAltSolidShape, {
            fill: 'black'
        });
        options.content.setScaleMagnitude(options.iconHeight / options.content.height);
        super(options);
        // support for binder documentation, stripped out in builds and only runs when ?binder is specified
        assert && ((_window_phet = window.phet) == null ? void 0 : (_window_phet_chipper = _window_phet.chipper) == null ? void 0 : (_window_phet_chipper_queryParameters = _window_phet_chipper.queryParameters) == null ? void 0 : _window_phet_chipper_queryParameters.binder) && InstanceRegistry.registerDataURL('scenery-phet', 'RefreshButton', this);
    }
};
export { RefreshButton as default };
sceneryPhet.register('RefreshButton', RefreshButton);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL1JlZnJlc2hCdXR0b24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogU3RhbmRhcmQgUGhFVCBidXR0b24gZm9yICdyZWZyZXNoJy5cbiAqXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxuICovXG5cbmltcG9ydCBJbnN0YW5jZVJlZ2lzdHJ5IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9kb2N1bWVudGF0aW9uL0luc3RhbmNlUmVnaXN0cnkuanMnO1xuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xuaW1wb3J0IHN5bmNBbHRTb2xpZFNoYXBlIGZyb20gJy4uLy4uLy4uL3NoZXJwYS9qcy9mb250YXdlc29tZS01L3N5bmNBbHRTb2xpZFNoYXBlLmpzJztcbmltcG9ydCBSZWN0YW5ndWxhclB1c2hCdXR0b24sIHsgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUHVzaEJ1dHRvbi5qcyc7XG5pbXBvcnQgUGhldENvbG9yU2NoZW1lIGZyb20gJy4uL1BoZXRDb2xvclNjaGVtZS5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuICBpY29uSGVpZ2h0PzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUmVmcmVzaEJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8UmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmcmVzaEJ1dHRvbiBleHRlbmRzIFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBSZWZyZXNoQnV0dG9uT3B0aW9ucyApIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UmVmcmVzaEJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zPigpKCB7XG5cbiAgICAgIC8vIFJlZnJlc2hCdXR0b25PcHRpb25zXG4gICAgICBpY29uSGVpZ2h0OiAzNSxcblxuICAgICAgLy8gUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9uc1xuICAgICAgYmFzZUNvbG9yOiBQaGV0Q29sb3JTY2hlbWUuQlVUVE9OX1lFTExPVyxcblxuICAgICAgdGFuZGVtTmFtZVN1ZmZpeDogJ1JlZnJlc2hCdXR0b24nXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICBvcHRpb25zLmNvbnRlbnQgPSBuZXcgUGF0aCggc3luY0FsdFNvbGlkU2hhcGUsIHtcbiAgICAgIGZpbGw6ICdibGFjaydcbiAgICB9ICk7XG4gICAgb3B0aW9ucy5jb250ZW50LnNldFNjYWxlTWFnbml0dWRlKCBvcHRpb25zLmljb25IZWlnaHQgLyBvcHRpb25zLmNvbnRlbnQuaGVpZ2h0ICk7XG5cbiAgICBzdXBlciggb3B0aW9ucyApO1xuXG4gICAgLy8gc3VwcG9ydCBmb3IgYmluZGVyIGRvY3VtZW50YXRpb24sIHN0cmlwcGVkIG91dCBpbiBidWlsZHMgYW5kIG9ubHkgcnVucyB3aGVuID9iaW5kZXIgaXMgc3BlY2lmaWVkXG4gICAgYXNzZXJ0ICYmIHdpbmRvdy5waGV0Py5jaGlwcGVyPy5xdWVyeVBhcmFtZXRlcnM/LmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3NjZW5lcnktcGhldCcsICdSZWZyZXNoQnV0dG9uJywgdGhpcyApO1xuICB9XG59XG5cbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnUmVmcmVzaEJ1dHRvbicsIFJlZnJlc2hCdXR0b24gKTsiXSwibmFtZXMiOlsiSW5zdGFuY2VSZWdpc3RyeSIsIm9wdGlvbml6ZSIsIlBhdGgiLCJzeW5jQWx0U29saWRTaGFwZSIsIlJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiIsIlBoZXRDb2xvclNjaGVtZSIsInNjZW5lcnlQaGV0IiwiUmVmcmVzaEJ1dHRvbiIsInByb3ZpZGVkT3B0aW9ucyIsIndpbmRvdyIsIm9wdGlvbnMiLCJpY29uSGVpZ2h0IiwiYmFzZUNvbG9yIiwiQlVUVE9OX1lFTExPVyIsInRhbmRlbU5hbWVTdWZmaXgiLCJjb250ZW50IiwiZmlsbCIsInNldFNjYWxlTWFnbml0dWRlIiwiaGVpZ2h0IiwiYXNzZXJ0IiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJiaW5kZXIiLCJyZWdpc3RlckRhdGFVUkwiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7O0NBSUMsR0FFRCxPQUFPQSxzQkFBc0IsMERBQTBEO0FBQ3ZGLE9BQU9DLGVBQWUscUNBQXFDO0FBRTNELFNBQVNDLElBQUksUUFBUSxpQ0FBaUM7QUFDdEQsT0FBT0MsdUJBQXVCLHdEQUF3RDtBQUN0RixPQUFPQywyQkFBNkQsbURBQW1EO0FBQ3ZILE9BQU9DLHFCQUFxQix3QkFBd0I7QUFDcEQsT0FBT0MsaUJBQWlCLG9CQUFvQjtBQVE3QixJQUFBLEFBQU1DLGdCQUFOLE1BQU1BLHNCQUFzQkg7SUFFekMsWUFBb0JJLGVBQXNDLENBQUc7WUFxQmpEQyxzQ0FBQUEsc0JBQUFBO1FBbkJWLE1BQU1DLFVBQVVULFlBQThFO1lBRTVGLHVCQUF1QjtZQUN2QlUsWUFBWTtZQUVaLCtCQUErQjtZQUMvQkMsV0FBV1AsZ0JBQWdCUSxhQUFhO1lBRXhDQyxrQkFBa0I7UUFDcEIsR0FBR047UUFFSEUsUUFBUUssT0FBTyxHQUFHLElBQUliLEtBQU1DLG1CQUFtQjtZQUM3Q2EsTUFBTTtRQUNSO1FBQ0FOLFFBQVFLLE9BQU8sQ0FBQ0UsaUJBQWlCLENBQUVQLFFBQVFDLFVBQVUsR0FBR0QsUUFBUUssT0FBTyxDQUFDRyxNQUFNO1FBRTlFLEtBQUssQ0FBRVI7UUFFUCxtR0FBbUc7UUFDbkdTLFlBQVVWLGVBQUFBLE9BQU9XLElBQUksc0JBQVhYLHVCQUFBQSxhQUFhWSxPQUFPLHNCQUFwQlosdUNBQUFBLHFCQUFzQmEsZUFBZSxxQkFBckNiLHFDQUF1Q2MsTUFBTSxLQUFJdkIsaUJBQWlCd0IsZUFBZSxDQUFFLGdCQUFnQixpQkFBaUIsSUFBSTtJQUNwSTtBQUNGO0FBekJBLFNBQXFCakIsMkJBeUJwQjtBQUVERCxZQUFZbUIsUUFBUSxDQUFFLGlCQUFpQmxCIn0=