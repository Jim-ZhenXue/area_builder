// Copyright 2014-2024, University of Colorado Boulder
/**
 * Button with an eraser icon.
 *
 * @author John Blanco
 */ import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Image } from '../../../scenery/js/imports.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import SoundClipPlayer from '../../../tambo/js/sound-generators/SoundClipPlayer.js';
import eraser_png from '../../images/eraser_png.js';
import erase_mp3 from '../../sounds/erase_mp3.js';
import PhetColorScheme from '../PhetColorScheme.js';
import sceneryPhet from '../sceneryPhet.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
let EraserButton = class EraserButton extends RectangularPushButton {
    constructor(providedOptions){
        var _window_phet_chipper_queryParameters, _window_phet_chipper, _window_phet;
        const options = optionize()({
            // SelfOptions
            iconWidth: 20,
            // RectangularPushButtonOptions
            baseColor: PhetColorScheme.BUTTON_YELLOW,
            // pdom
            accessibleName: SceneryPhetStrings.a11y.eraserButton.accessibleNameStringProperty,
            soundPlayer: new SoundClipPlayer(erase_mp3, {
                soundClipOptions: {
                    initialOutputLevel: 0.22
                }
            })
        }, providedOptions);
        // eraser icon
        options.content = new Image(eraser_png);
        options.content.scale(options.iconWidth / options.content.width);
        super(options);
        // support for binder documentation, stripped out in builds and only runs when ?binder is specified
        assert && ((_window_phet = window.phet) == null ? void 0 : (_window_phet_chipper = _window_phet.chipper) == null ? void 0 : (_window_phet_chipper_queryParameters = _window_phet_chipper.queryParameters) == null ? void 0 : _window_phet_chipper_queryParameters.binder) && InstanceRegistry.registerDataURL('scenery-phet', 'EraserButton', this);
    }
};
export { EraserButton as default };
sceneryPhet.register('EraserButton', EraserButton);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL0VyYXNlckJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBCdXR0b24gd2l0aCBhbiBlcmFzZXIgaWNvbi5cbiAqXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvXG4gKi9cblxuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xuaW1wb3J0IHsgSW1hZ2UsIFRyaW1QYXJhbGxlbERPTU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xuaW1wb3J0IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiwgeyBSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcbmltcG9ydCBTb3VuZENsaXBQbGF5ZXIgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvc291bmQtZ2VuZXJhdG9ycy9Tb3VuZENsaXBQbGF5ZXIuanMnO1xuaW1wb3J0IGVyYXNlcl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2VyYXNlcl9wbmcuanMnO1xuaW1wb3J0IGVyYXNlX21wMyBmcm9tICcuLi8uLi9zb3VuZHMvZXJhc2VfbXAzLmpzJztcbmltcG9ydCBQaGV0Q29sb3JTY2hlbWUgZnJvbSAnLi4vUGhldENvbG9yU2NoZW1lLmpzJztcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XG5pbXBvcnQgU2NlbmVyeVBoZXRTdHJpbmdzIGZyb20gJy4uL1NjZW5lcnlQaGV0U3RyaW5ncy5qcyc7XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSB7XG4gIGljb25XaWR0aD86IG51bWJlcjsgLy8gd2lkdGggb2YgZXJhc2VyIGljb24sIHVzZWQgZm9yIHNjYWxpbmcsIHRoZSBhc3BlY3QgcmF0aW8gd2lsbCBkZXRlcm1pbmUgaGVpZ2h0XG59O1xuXG50eXBlIFRyaW1tZWRQYXJlbnRPcHRpb25zID0gVHJpbVBhcmFsbGVsRE9NT3B0aW9uczxSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zPjtcbmV4cG9ydCB0eXBlIEVyYXNlckJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8VHJpbW1lZFBhcmVudE9wdGlvbnMsICdjb250ZW50Jz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVyYXNlckJ1dHRvbiBleHRlbmRzIFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBFcmFzZXJCdXR0b25PcHRpb25zICkge1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxFcmFzZXJCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucz4oKSgge1xuXG4gICAgICAvLyBTZWxmT3B0aW9uc1xuICAgICAgaWNvbldpZHRoOiAyMCxcblxuICAgICAgLy8gUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9uc1xuICAgICAgYmFzZUNvbG9yOiBQaGV0Q29sb3JTY2hlbWUuQlVUVE9OX1lFTExPVyxcblxuICAgICAgLy8gcGRvbVxuICAgICAgYWNjZXNzaWJsZU5hbWU6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LmVyYXNlckJ1dHRvbi5hY2Nlc3NpYmxlTmFtZVN0cmluZ1Byb3BlcnR5LFxuXG4gICAgICBzb3VuZFBsYXllcjogbmV3IFNvdW5kQ2xpcFBsYXllciggZXJhc2VfbXAzLCB7XG4gICAgICAgIHNvdW5kQ2xpcE9wdGlvbnM6IHsgaW5pdGlhbE91dHB1dExldmVsOiAwLjIyIH1cbiAgICAgIH0gKVxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgLy8gZXJhc2VyIGljb25cbiAgICBvcHRpb25zLmNvbnRlbnQgPSBuZXcgSW1hZ2UoIGVyYXNlcl9wbmcgKTtcbiAgICBvcHRpb25zLmNvbnRlbnQuc2NhbGUoIG9wdGlvbnMuaWNvbldpZHRoIC8gb3B0aW9ucy5jb250ZW50LndpZHRoICk7XG5cbiAgICBzdXBlciggb3B0aW9ucyApO1xuXG4gICAgLy8gc3VwcG9ydCBmb3IgYmluZGVyIGRvY3VtZW50YXRpb24sIHN0cmlwcGVkIG91dCBpbiBidWlsZHMgYW5kIG9ubHkgcnVucyB3aGVuID9iaW5kZXIgaXMgc3BlY2lmaWVkXG4gICAgYXNzZXJ0ICYmIHdpbmRvdy5waGV0Py5jaGlwcGVyPy5xdWVyeVBhcmFtZXRlcnM/LmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3NjZW5lcnktcGhldCcsICdFcmFzZXJCdXR0b24nLCB0aGlzICk7XG4gIH1cbn1cblxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdFcmFzZXJCdXR0b24nLCBFcmFzZXJCdXR0b24gKTsiXSwibmFtZXMiOlsiSW5zdGFuY2VSZWdpc3RyeSIsIm9wdGlvbml6ZSIsIkltYWdlIiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiU291bmRDbGlwUGxheWVyIiwiZXJhc2VyX3BuZyIsImVyYXNlX21wMyIsIlBoZXRDb2xvclNjaGVtZSIsInNjZW5lcnlQaGV0IiwiU2NlbmVyeVBoZXRTdHJpbmdzIiwiRXJhc2VyQnV0dG9uIiwicHJvdmlkZWRPcHRpb25zIiwid2luZG93Iiwib3B0aW9ucyIsImljb25XaWR0aCIsImJhc2VDb2xvciIsIkJVVFRPTl9ZRUxMT1ciLCJhY2Nlc3NpYmxlTmFtZSIsImExMXkiLCJlcmFzZXJCdXR0b24iLCJhY2Nlc3NpYmxlTmFtZVN0cmluZ1Byb3BlcnR5Iiwic291bmRQbGF5ZXIiLCJzb3VuZENsaXBPcHRpb25zIiwiaW5pdGlhbE91dHB1dExldmVsIiwiY29udGVudCIsInNjYWxlIiwid2lkdGgiLCJhc3NlcnQiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Q0FJQyxHQUVELE9BQU9BLHNCQUFzQiwwREFBMEQ7QUFDdkYsT0FBT0MsZUFBZSxxQ0FBcUM7QUFFM0QsU0FBU0MsS0FBSyxRQUFnQyxpQ0FBaUM7QUFDL0UsT0FBT0MsMkJBQTZELG1EQUFtRDtBQUN2SCxPQUFPQyxxQkFBcUIsd0RBQXdEO0FBQ3BGLE9BQU9DLGdCQUFnQiw2QkFBNkI7QUFDcEQsT0FBT0MsZUFBZSw0QkFBNEI7QUFDbEQsT0FBT0MscUJBQXFCLHdCQUF3QjtBQUNwRCxPQUFPQyxpQkFBaUIsb0JBQW9CO0FBQzVDLE9BQU9DLHdCQUF3QiwyQkFBMkI7QUFTM0MsSUFBQSxBQUFNQyxlQUFOLE1BQU1BLHFCQUFxQlA7SUFFeEMsWUFBb0JRLGVBQXFDLENBQUc7WUF5QmhEQyxzQ0FBQUEsc0JBQUFBO1FBdkJWLE1BQU1DLFVBQVVaLFlBQTZFO1lBRTNGLGNBQWM7WUFDZGEsV0FBVztZQUVYLCtCQUErQjtZQUMvQkMsV0FBV1IsZ0JBQWdCUyxhQUFhO1lBRXhDLE9BQU87WUFDUEMsZ0JBQWdCUixtQkFBbUJTLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyw0QkFBNEI7WUFFakZDLGFBQWEsSUFBSWpCLGdCQUFpQkUsV0FBVztnQkFDM0NnQixrQkFBa0I7b0JBQUVDLG9CQUFvQjtnQkFBSztZQUMvQztRQUNGLEdBQUdaO1FBRUgsY0FBYztRQUNkRSxRQUFRVyxPQUFPLEdBQUcsSUFBSXRCLE1BQU9HO1FBQzdCUSxRQUFRVyxPQUFPLENBQUNDLEtBQUssQ0FBRVosUUFBUUMsU0FBUyxHQUFHRCxRQUFRVyxPQUFPLENBQUNFLEtBQUs7UUFFaEUsS0FBSyxDQUFFYjtRQUVQLG1HQUFtRztRQUNuR2MsWUFBVWYsZUFBQUEsT0FBT2dCLElBQUksc0JBQVhoQix1QkFBQUEsYUFBYWlCLE9BQU8sc0JBQXBCakIsdUNBQUFBLHFCQUFzQmtCLGVBQWUscUJBQXJDbEIscUNBQXVDbUIsTUFBTSxLQUFJL0IsaUJBQWlCZ0MsZUFBZSxDQUFFLGdCQUFnQixnQkFBZ0IsSUFBSTtJQUNuSTtBQUNGO0FBN0JBLFNBQXFCdEIsMEJBNkJwQjtBQUVERixZQUFZeUIsUUFBUSxDQUFFLGdCQUFnQnZCIn0=