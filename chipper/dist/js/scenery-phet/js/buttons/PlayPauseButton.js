// Copyright 2014-2024, University of Colorado Boulder
/**
 * Play pause button for starting/stopping the sim.  Often appears at the bottom center of the screen.
 * Generated programmatically using RoundPushButton (as opposed to using raster images).
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */ import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import { Path } from '../../../scenery/js/imports.js';
import PauseIconShape from '../PauseIconShape.js';
import sceneryPhet from '../sceneryPhet.js';
import SceneryPhetConstants from '../SceneryPhetConstants.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
import PlayControlButton from './PlayControlButton.js';
let PlayPauseButton = class PlayPauseButton extends PlayControlButton {
    constructor(isPlayingProperty, providedOptions){
        var _window_phet_chipper_queryParameters, _window_phet_chipper, _window_phet;
        const options = optionize()({
            // PlayPauseButtonOptions
            radius: SceneryPhetConstants.PLAY_CONTROL_BUTTON_RADIUS,
            // PlayControlButtonOptions
            includeGlobalHotkey: true,
            endPlayingLabel: SceneryPhetStrings.a11y.playControlButton.pauseStringProperty
        }, providedOptions);
        // icon sized relative to the radius
        const pauseHeight = options.radius;
        const pauseWidth = options.radius * 0.6;
        const pausePath = new Path(new PauseIconShape(pauseWidth, pauseHeight), {
            fill: 'black'
        });
        super(isPlayingProperty, pausePath, options);
        // support for binder documentation, stripped out in builds and only runs when ?binder is specified
        assert && ((_window_phet = window.phet) == null ? void 0 : (_window_phet_chipper = _window_phet.chipper) == null ? void 0 : (_window_phet_chipper_queryParameters = _window_phet_chipper.queryParameters) == null ? void 0 : _window_phet_chipper_queryParameters.binder) && InstanceRegistry.registerDataURL('scenery-phet', 'PlayPauseButton', this);
    }
};
export { PlayPauseButton as default };
sceneryPhet.register('PlayPauseButton', PlayPauseButton);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL1BsYXlQYXVzZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBQbGF5IHBhdXNlIGJ1dHRvbiBmb3Igc3RhcnRpbmcvc3RvcHBpbmcgdGhlIHNpbS4gIE9mdGVuIGFwcGVhcnMgYXQgdGhlIGJvdHRvbSBjZW50ZXIgb2YgdGhlIHNjcmVlbi5cbiAqIEdlbmVyYXRlZCBwcm9ncmFtbWF0aWNhbGx5IHVzaW5nIFJvdW5kUHVzaEJ1dHRvbiAoYXMgb3Bwb3NlZCB0byB1c2luZyByYXN0ZXIgaW1hZ2VzKS5cbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCB7IFBhdGggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xuaW1wb3J0IFBhdXNlSWNvblNoYXBlIGZyb20gJy4uL1BhdXNlSWNvblNoYXBlLmpzJztcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XG5pbXBvcnQgU2NlbmVyeVBoZXRDb25zdGFudHMgZnJvbSAnLi4vU2NlbmVyeVBoZXRDb25zdGFudHMuanMnO1xuaW1wb3J0IFNjZW5lcnlQaGV0U3RyaW5ncyBmcm9tICcuLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xuaW1wb3J0IFBsYXlDb250cm9sQnV0dG9uLCB7IFBsYXlDb250cm9sQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4vUGxheUNvbnRyb2xCdXR0b24uanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcblxuZXhwb3J0IHR5cGUgUGxheVBhdXNlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGxheUNvbnRyb2xCdXR0b25PcHRpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5UGF1c2VCdXR0b24gZXh0ZW5kcyBQbGF5Q29udHJvbEJ1dHRvbiB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpc1BsYXlpbmdQcm9wZXJ0eTogUHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9ucz86IFBsYXlQYXVzZUJ1dHRvbk9wdGlvbnMgKSB7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFBsYXlQYXVzZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBQbGF5Q29udHJvbEJ1dHRvbk9wdGlvbnM+KCkoIHtcblxuICAgICAgLy8gUGxheVBhdXNlQnV0dG9uT3B0aW9uc1xuICAgICAgcmFkaXVzOiBTY2VuZXJ5UGhldENvbnN0YW50cy5QTEFZX0NPTlRST0xfQlVUVE9OX1JBRElVUyxcblxuICAgICAgLy8gUGxheUNvbnRyb2xCdXR0b25PcHRpb25zXG4gICAgICBpbmNsdWRlR2xvYmFsSG90a2V5OiB0cnVlLFxuICAgICAgZW5kUGxheWluZ0xhYmVsOiBTY2VuZXJ5UGhldFN0cmluZ3MuYTExeS5wbGF5Q29udHJvbEJ1dHRvbi5wYXVzZVN0cmluZ1Byb3BlcnR5XG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICAvLyBpY29uIHNpemVkIHJlbGF0aXZlIHRvIHRoZSByYWRpdXNcbiAgICBjb25zdCBwYXVzZUhlaWdodCA9IG9wdGlvbnMucmFkaXVzO1xuICAgIGNvbnN0IHBhdXNlV2lkdGggPSBvcHRpb25zLnJhZGl1cyAqIDAuNjtcbiAgICBjb25zdCBwYXVzZVBhdGggPSBuZXcgUGF0aCggbmV3IFBhdXNlSWNvblNoYXBlKCBwYXVzZVdpZHRoLCBwYXVzZUhlaWdodCApLCB7IGZpbGw6ICdibGFjaycgfSApO1xuXG4gICAgc3VwZXIoIGlzUGxheWluZ1Byb3BlcnR5LCBwYXVzZVBhdGgsIG9wdGlvbnMgKTtcblxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxuICAgIGFzc2VydCAmJiB3aW5kb3cucGhldD8uY2hpcHBlcj8ucXVlcnlQYXJhbWV0ZXJzPy5iaW5kZXIgJiYgSW5zdGFuY2VSZWdpc3RyeS5yZWdpc3RlckRhdGFVUkwoICdzY2VuZXJ5LXBoZXQnLCAnUGxheVBhdXNlQnV0dG9uJywgdGhpcyApO1xuICB9XG59XG5cbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnUGxheVBhdXNlQnV0dG9uJywgUGxheVBhdXNlQnV0dG9uICk7Il0sIm5hbWVzIjpbIkluc3RhbmNlUmVnaXN0cnkiLCJvcHRpb25pemUiLCJQYXRoIiwiUGF1c2VJY29uU2hhcGUiLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0Q29uc3RhbnRzIiwiU2NlbmVyeVBoZXRTdHJpbmdzIiwiUGxheUNvbnRyb2xCdXR0b24iLCJQbGF5UGF1c2VCdXR0b24iLCJpc1BsYXlpbmdQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIndpbmRvdyIsIm9wdGlvbnMiLCJyYWRpdXMiLCJQTEFZX0NPTlRST0xfQlVUVE9OX1JBRElVUyIsImluY2x1ZGVHbG9iYWxIb3RrZXkiLCJlbmRQbGF5aW5nTGFiZWwiLCJhMTF5IiwicGxheUNvbnRyb2xCdXR0b24iLCJwYXVzZVN0cmluZ1Byb3BlcnR5IiwicGF1c2VIZWlnaHQiLCJwYXVzZVdpZHRoIiwicGF1c2VQYXRoIiwiZmlsbCIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiYmluZGVyIiwicmVnaXN0ZXJEYXRhVVJMIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7O0NBTUMsR0FHRCxPQUFPQSxzQkFBc0IsMERBQTBEO0FBQ3ZGLE9BQU9DLGVBQXFDLHFDQUFxQztBQUNqRixTQUFTQyxJQUFJLFFBQVEsaUNBQWlDO0FBQ3RELE9BQU9DLG9CQUFvQix1QkFBdUI7QUFDbEQsT0FBT0MsaUJBQWlCLG9CQUFvQjtBQUM1QyxPQUFPQywwQkFBMEIsNkJBQTZCO0FBQzlELE9BQU9DLHdCQUF3QiwyQkFBMkI7QUFDMUQsT0FBT0MsdUJBQXFELHlCQUF5QjtBQU10RSxJQUFBLEFBQU1DLGtCQUFOLE1BQU1BLHdCQUF3QkQ7SUFFM0MsWUFBb0JFLGlCQUFvQyxFQUFFQyxlQUF3QyxDQUFHO1lBb0J6RkMsc0NBQUFBLHNCQUFBQTtRQWxCVixNQUFNQyxVQUFVWCxZQUE0RTtZQUUxRix5QkFBeUI7WUFDekJZLFFBQVFSLHFCQUFxQlMsMEJBQTBCO1lBRXZELDJCQUEyQjtZQUMzQkMscUJBQXFCO1lBQ3JCQyxpQkFBaUJWLG1CQUFtQlcsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0MsbUJBQW1CO1FBQ2hGLEdBQUdUO1FBRUgsb0NBQW9DO1FBQ3BDLE1BQU1VLGNBQWNSLFFBQVFDLE1BQU07UUFDbEMsTUFBTVEsYUFBYVQsUUFBUUMsTUFBTSxHQUFHO1FBQ3BDLE1BQU1TLFlBQVksSUFBSXBCLEtBQU0sSUFBSUMsZUFBZ0JrQixZQUFZRCxjQUFlO1lBQUVHLE1BQU07UUFBUTtRQUUzRixLQUFLLENBQUVkLG1CQUFtQmEsV0FBV1Y7UUFFckMsbUdBQW1HO1FBQ25HWSxZQUFVYixlQUFBQSxPQUFPYyxJQUFJLHNCQUFYZCx1QkFBQUEsYUFBYWUsT0FBTyxzQkFBcEJmLHVDQUFBQSxxQkFBc0JnQixlQUFlLHFCQUFyQ2hCLHFDQUF1Q2lCLE1BQU0sS0FBSTVCLGlCQUFpQjZCLGVBQWUsQ0FBRSxnQkFBZ0IsbUJBQW1CLElBQUk7SUFDdEk7QUFDRjtBQXhCQSxTQUFxQnJCLDZCQXdCcEI7QUFFREosWUFBWTBCLFFBQVEsQ0FBRSxtQkFBbUJ0QiJ9