// Copyright 2022-2024, University of Colorado Boulder
/**
 * PlayPauseStepButtonGroup has a play & pause button, optional step-forward button, and optional step-back button.
 * It's typically a subcomponent of TimeControlNode, and was originally an inner class of TimeControlNode.
 *
 * @author Denzell Barnett (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */ import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import optionize, { combineOptions } from '../../../phet-core/js/optionize.js';
import { HBox } from '../../../scenery/js/imports.js';
import Tandem from '../../../tandem/js/Tandem.js';
import BooleanIO from '../../../tandem/js/types/BooleanIO.js';
import sceneryPhet from '../sceneryPhet.js';
import SceneryPhetConstants from '../SceneryPhetConstants.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
import PlayPauseButton from './PlayPauseButton.js';
import StepBackwardButton from './StepBackwardButton.js';
import StepForwardButton from './StepForwardButton.js';
const DEFAULT_STEP_BUTTON_RADIUS = 15;
const DEFAULT_STEP_BUTTON_TOUCH_AREA_DILATION = 5;
let PlayPauseStepButtonGroup = class PlayPauseStepButtonGroup extends HBox {
    /**
   * Get the center of the PlayPauseButton, in the local coordinate frame of the PlayPauseStepButtonGroup.
   */ getPlayPauseButtonCenter() {
        return this.playPauseButton.center;
    }
    dispose() {
        this.disposePlayPauseStepButtonGroup();
        super.dispose();
    }
    constructor(isPlayingProperty, providedOptions){
        const options = optionize()({
            // {boolean} - if true, a StepForwardButton is included in the button group
            includeStepForwardButton: true,
            // {boolean} - if true, a StepBackwardButton is included in the button group
            includeStepBackwardButton: false,
            // {number} horizontal space between Play/Pause and Step buttons
            playPauseStepXSpacing: 10,
            // Options for the PlayPauseButton
            playPauseButtonOptions: {
                radius: SceneryPhetConstants.DEFAULT_BUTTON_RADIUS,
                touchAreaDilation: 5
            },
            // Options for the StepBackwardButton
            stepBackwardButtonOptions: {
                radius: DEFAULT_STEP_BUTTON_RADIUS,
                touchAreaDilation: DEFAULT_STEP_BUTTON_TOUCH_AREA_DILATION
            },
            // Options for the StepForwardButton
            stepForwardButtonOptions: {
                radius: DEFAULT_STEP_BUTTON_RADIUS,
                touchAreaDilation: DEFAULT_STEP_BUTTON_TOUCH_AREA_DILATION
            },
            // HBoxOptions
            resize: false,
            // phet-io
            tandem: Tandem.REQUIRED,
            tandemNameSuffix: 'ButtonGroup',
            // pdom
            tagName: 'div',
            appendDescription: true,
            playingHelpText: null,
            pausedHelpText: null
        }, providedOptions);
        // by default, the step buttons are enabled when isPlayingProperty is false, but only create a PhET-iO instrumented
        // Property if it is going to be used
        if (!options.stepForwardButtonOptions.enabledProperty || !options.stepBackwardButtonOptions.enabledProperty) {
            // This is clearer than having the variable names match exactly. Opt out below
            // eslint-disable-next-line phet/tandem-name-should-match
            const defaultEnabledProperty = DerivedProperty.not(isPlayingProperty, {
                tandem: options.tandem.createTandem('enabledProperty'),
                phetioValueType: BooleanIO
            });
            if (!options.stepForwardButtonOptions.enabledProperty) {
                options.stepForwardButtonOptions.enabledProperty = defaultEnabledProperty;
            }
            if (!options.stepBackwardButtonOptions.enabledProperty) {
                options.stepBackwardButtonOptions.enabledProperty = defaultEnabledProperty;
            }
        }
        const children = [];
        const playPauseButton = new PlayPauseButton(isPlayingProperty, combineOptions({
            tandem: options.tandem.createTandem('playPauseButton'),
            phetioDocumentation: 'Button to control the animation in the simulation. This will also stop the model from stepping.'
        }, options.playPauseButtonOptions));
        children.push(playPauseButton);
        let stepForwardButton = null;
        if (options.includeStepForwardButton) {
            stepForwardButton = new StepForwardButton(combineOptions({
                tandem: options.tandem.createTandem('stepForwardButton'),
                phetioDocumentation: 'Progress the simulation a single model step forwards.'
            }, options.stepForwardButtonOptions));
            children.push(stepForwardButton);
        }
        let stepBackwardButton = null;
        if (options.includeStepBackwardButton) {
            stepBackwardButton = new StepBackwardButton(combineOptions({
                phetioDocumentation: 'Progress the simulation a single model step backwards.',
                tandem: options.tandem.createTandem('stepBackwardButton')
            }, options.stepBackwardButtonOptions));
            children.unshift(stepBackwardButton);
        }
        options.spacing = options.playPauseStepXSpacing;
        options.children = children;
        super(options);
        this.playPauseButton = playPauseButton;
        // pdom - Always use the provided help text. If not provided, a default string describes how to step forward and backward
        // when paused. The default helpText will only be used if a step button is visible.
        const eitherStepButtonVisible = options.includeStepForwardButton || options.includeStepBackwardButton;
        const playingHelpText = options.playingHelpText || (eitherStepButtonVisible ? SceneryPhetStrings.a11y.playPauseStepButtonGroup.playingHelpTextStringProperty : null);
        const pausedHelpText = options.pausedHelpText || (eitherStepButtonVisible ? SceneryPhetStrings.a11y.playPauseStepButtonGroup.pausedHelpTextStringProperty : null);
        const playingListener = (playing)=>{
            this.helpText = playing ? playingHelpText : pausedHelpText;
        };
        isPlayingProperty.link(playingListener);
        this.disposePlayPauseStepButtonGroup = ()=>{
            isPlayingProperty.unlink(playingListener);
            playPauseButton.dispose();
            stepForwardButton && stepForwardButton.dispose();
            stepBackwardButton && stepBackwardButton.dispose();
        };
    }
};
export { PlayPauseStepButtonGroup as default };
sceneryPhet.register('PlayPauseStepButtonGroup', PlayPauseStepButtonGroup);

//# sourceMappingURL=data:application/json;base64,