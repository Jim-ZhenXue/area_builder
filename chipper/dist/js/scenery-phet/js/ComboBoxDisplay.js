// Copyright 2019-2024, University of Colorado Boulder
/**
 * ComboBoxDisplay is the lovechild of a ComboBox and a NumberDisplay. It allows the user to choose one of N dynamic
 * numeric values. ComboBox was designed to display static choices, so this component ensures that none of its items
 * grow wider/taller than their initial size.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */ import PatternStringProperty from '../../axon/js/PatternStringProperty.js';
import StringProperty from '../../axon/js/StringProperty.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import ComboBox from '../../sun/js/ComboBox.js';
import Tandem from '../../tandem/js/Tandem.js';
import NumberDisplay from './NumberDisplay.js';
import PhetFont from './PhetFont.js';
import sceneryPhet from './sceneryPhet.js';
import SceneryPhetStrings from './SceneryPhetStrings.js';
// constants
const DEFAULT_FONT = new PhetFont(14);
let ComboBoxDisplay = class ComboBoxDisplay extends ComboBox {
    dispose() {
        this.disposeComboBoxDisplay();
        super.dispose();
    }
    /**
   * @param choiceProperty - determines which item is currently selected
   * @param items - describes the items that appear in the ComboBox
   * @param listParent - parent for the ComboBox list
   * @param providedOptions?
   */ constructor(choiceProperty, items, listParent, providedOptions){
        const options = optionize()({
            // SelfOptions
            numberDisplayOptions: {
                backgroundFill: null,
                backgroundStroke: null,
                textOptions: {
                    font: DEFAULT_FONT
                },
                align: 'right',
                xMargin: 0,
                yMargin: 0
            },
            // ComboBoxOptions
            align: 'right' // we typically want numbers to be right aligned
        }, providedOptions);
        // Convert ComboBoxDisplayItems to ComboBoxItems
        const comboBoxItems = [];
        const valuePatternStringProperties = [];
        items.forEach((item)=>{
            const unitsProperty = typeof item.units === 'string' ? new StringProperty(item.units) : item.units;
            const valuePatternStringProperty = new PatternStringProperty(SceneryPhetStrings.comboBoxDisplay.valueUnitsStringProperty, {
                units: unitsProperty
            }, {
                tandem: Tandem.OPT_OUT
            });
            valuePatternStringProperties.push(valuePatternStringProperty);
            const itemNode = new NumberDisplay(item.numberProperty, item.range, combineOptions({
                valuePattern: valuePatternStringProperty
            }, options.numberDisplayOptions, item.numberDisplayOptions));
            // Don't allow the NumberDisplay to grow, since it's in a ComboBox
            itemNode.maxWidth = itemNode.width;
            itemNode.maxHeight = itemNode.height;
            comboBoxItems.push({
                value: item.choice,
                createNode: ()=>itemNode,
                tandemName: item.tandemName
            });
        });
        super(choiceProperty, comboBoxItems, listParent, options);
        this.disposeComboBoxDisplay = ()=>{
            valuePatternStringProperties.forEach((property)=>property.dispose());
        };
    }
};
export { ComboBoxDisplay as default };
sceneryPhet.register('ComboBoxDisplay', ComboBoxDisplay);

//# sourceMappingURL=data:application/json;base64,