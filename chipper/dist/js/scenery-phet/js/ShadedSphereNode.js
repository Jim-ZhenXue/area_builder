// Copyright 2013-2024, University of Colorado Boulder
/**
 * A 3D-looking sphere with a specular highlight.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */ import optionize from '../../phet-core/js/optionize.js';
import { Circle, RadialGradient } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
let ShadedSphereNode = class ShadedSphereNode extends Circle {
    invalidatePath() {
        super.invalidatePath();
        // Called during the super() call, so we may not be defined yet. We'll call this during the constructor
        // manually.
        this.updateShadedSphereFill && this.updateShadedSphereFill();
    }
    constructor(diameter, providedOptions){
        const options = optionize()({
            // SelfOptions
            mainColor: 'gray',
            highlightColor: 'white',
            shadowColor: 'black',
            highlightDiameterRatio: 0.5,
            highlightXOffset: -0.4,
            highlightYOffset: -0.4
        }, providedOptions);
        // validate option values
        assert && assert(options.highlightDiameterRatio < 1, `highlightDiameterRatio must be < diameter: ${options.highlightDiameterRatio}`);
        assert && assert(options.highlightXOffset >= -1 && options.highlightXOffset <= 1, `highlightXOffset out of range: ${options.highlightXOffset}`);
        assert && assert(options.highlightYOffset >= -1 && options.highlightYOffset <= 1, `highlightYOffset out of range: ${options.highlightYOffset}`);
        super(diameter / 2, options);
        this.updateShadedSphereFill = ()=>{
            const radius = this.radius;
            const highlightX = radius * options.highlightXOffset;
            const highlightY = radius * options.highlightYOffset;
            this.fill = new RadialGradient(highlightX, highlightY, 0, highlightX, highlightY, radius * 2).addColorStop(0, options.highlightColor).addColorStop(options.highlightDiameterRatio, options.mainColor).addColorStop(1, options.shadowColor);
        };
        this.updateShadedSphereFill();
    }
};
export { ShadedSphereNode as default };
sceneryPhet.register('ShadedSphereNode', ShadedSphereNode);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9TaGFkZWRTcGhlcmVOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgM0QtbG9va2luZyBzcGhlcmUgd2l0aCBhIHNwZWN1bGFyIGhpZ2hsaWdodC5cbiAqXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxuICovXG5cbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XG5pbXBvcnQgeyBDaXJjbGUsIENpcmNsZU9wdGlvbnMsIFJhZGlhbEdyYWRpZW50LCBUQ29sb3IgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuICBtYWluQ29sb3I/OiBUQ29sb3I7XG4gIGhpZ2hsaWdodENvbG9yPzogVENvbG9yO1xuICBzaGFkb3dDb2xvcj86IFRDb2xvcjtcbiAgaGlnaGxpZ2h0RGlhbWV0ZXJSYXRpbz86IG51bWJlcjtcbiAgaGlnaGxpZ2h0WE9mZnNldD86IG51bWJlcjsgLy8geC1vZmZzZXQgb2YgdGhlIGhpZ2hsaWdodCBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIHNwaGVyZSwgcGVyY2VudGFnZSBvZiByYWRpdXMsIFstMSwxXVxuICBoaWdobGlnaHRZT2Zmc2V0PzogbnVtYmVyOyAvLyB5LW9mZnNldCBvZiB0aGUgaGlnaGxpZ2h0IGZyb20gdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlLCBwZXJjZW50YWdlIG9mIHJhZGl1cywgWy0xLDFdXG59O1xuXG5leHBvcnQgdHlwZSBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxDaXJjbGVPcHRpb25zLCAnZmlsbCc+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGFkZWRTcGhlcmVOb2RlIGV4dGVuZHMgQ2lyY2xlIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IHVwZGF0ZVNoYWRlZFNwaGVyZUZpbGw6ICgpID0+IHZvaWQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBkaWFtZXRlcjogbnVtYmVyLCBwcm92aWRlZE9wdGlvbnM/OiBTaGFkZWRTcGhlcmVOb2RlT3B0aW9ucyApIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U2hhZGVkU3BoZXJlTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBDaXJjbGVPcHRpb25zPigpKCB7XG5cbiAgICAgIC8vIFNlbGZPcHRpb25zXG4gICAgICBtYWluQ29sb3I6ICdncmF5JyxcbiAgICAgIGhpZ2hsaWdodENvbG9yOiAnd2hpdGUnLFxuICAgICAgc2hhZG93Q29sb3I6ICdibGFjaycsXG4gICAgICBoaWdobGlnaHREaWFtZXRlclJhdGlvOiAwLjUsXG4gICAgICBoaWdobGlnaHRYT2Zmc2V0OiAtMC40LFxuICAgICAgaGlnaGxpZ2h0WU9mZnNldDogLTAuNFxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgLy8gdmFsaWRhdGUgb3B0aW9uIHZhbHVlc1xuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMuaGlnaGxpZ2h0RGlhbWV0ZXJSYXRpbyA8IDEsXG4gICAgICBgaGlnaGxpZ2h0RGlhbWV0ZXJSYXRpbyBtdXN0IGJlIDwgZGlhbWV0ZXI6ICR7b3B0aW9ucy5oaWdobGlnaHREaWFtZXRlclJhdGlvfWAgKTtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLmhpZ2hsaWdodFhPZmZzZXQgPj0gLTEgJiYgb3B0aW9ucy5oaWdobGlnaHRYT2Zmc2V0IDw9IDEsXG4gICAgICBgaGlnaGxpZ2h0WE9mZnNldCBvdXQgb2YgcmFuZ2U6ICR7b3B0aW9ucy5oaWdobGlnaHRYT2Zmc2V0fWAgKTtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLmhpZ2hsaWdodFlPZmZzZXQgPj0gLTEgJiYgb3B0aW9ucy5oaWdobGlnaHRZT2Zmc2V0IDw9IDEsXG4gICAgICBgaGlnaGxpZ2h0WU9mZnNldCBvdXQgb2YgcmFuZ2U6ICR7b3B0aW9ucy5oaWdobGlnaHRZT2Zmc2V0fWAgKTtcblxuICAgIHN1cGVyKCBkaWFtZXRlciAvIDIsIG9wdGlvbnMgKTtcblxuICAgIHRoaXMudXBkYXRlU2hhZGVkU3BoZXJlRmlsbCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMucmFkaXVzO1xuICAgICAgY29uc3QgaGlnaGxpZ2h0WCA9IHJhZGl1cyAqIG9wdGlvbnMuaGlnaGxpZ2h0WE9mZnNldDtcbiAgICAgIGNvbnN0IGhpZ2hsaWdodFkgPSByYWRpdXMgKiBvcHRpb25zLmhpZ2hsaWdodFlPZmZzZXQ7XG4gICAgICB0aGlzLmZpbGwgPSBuZXcgUmFkaWFsR3JhZGllbnQoIGhpZ2hsaWdodFgsIGhpZ2hsaWdodFksIDAsIGhpZ2hsaWdodFgsIGhpZ2hsaWdodFksIHJhZGl1cyAqIDIgKVxuICAgICAgICAuYWRkQ29sb3JTdG9wKCAwLCBvcHRpb25zLmhpZ2hsaWdodENvbG9yIClcbiAgICAgICAgLmFkZENvbG9yU3RvcCggb3B0aW9ucy5oaWdobGlnaHREaWFtZXRlclJhdGlvLCBvcHRpb25zLm1haW5Db2xvciApXG4gICAgICAgIC5hZGRDb2xvclN0b3AoIDEsIG9wdGlvbnMuc2hhZG93Q29sb3IgKTtcbiAgICB9O1xuXG4gICAgdGhpcy51cGRhdGVTaGFkZWRTcGhlcmVGaWxsKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgaW52YWxpZGF0ZVBhdGgoKTogdm9pZCB7XG4gICAgc3VwZXIuaW52YWxpZGF0ZVBhdGgoKTtcblxuICAgIC8vIENhbGxlZCBkdXJpbmcgdGhlIHN1cGVyKCkgY2FsbCwgc28gd2UgbWF5IG5vdCBiZSBkZWZpbmVkIHlldC4gV2UnbGwgY2FsbCB0aGlzIGR1cmluZyB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBtYW51YWxseS5cbiAgICB0aGlzLnVwZGF0ZVNoYWRlZFNwaGVyZUZpbGwgJiYgdGhpcy51cGRhdGVTaGFkZWRTcGhlcmVGaWxsKCk7XG4gIH1cbn1cblxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdTaGFkZWRTcGhlcmVOb2RlJywgU2hhZGVkU3BoZXJlTm9kZSApOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJDaXJjbGUiLCJSYWRpYWxHcmFkaWVudCIsInNjZW5lcnlQaGV0IiwiU2hhZGVkU3BoZXJlTm9kZSIsImludmFsaWRhdGVQYXRoIiwidXBkYXRlU2hhZGVkU3BoZXJlRmlsbCIsImRpYW1ldGVyIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIm1haW5Db2xvciIsImhpZ2hsaWdodENvbG9yIiwic2hhZG93Q29sb3IiLCJoaWdobGlnaHREaWFtZXRlclJhdGlvIiwiaGlnaGxpZ2h0WE9mZnNldCIsImhpZ2hsaWdodFlPZmZzZXQiLCJhc3NlcnQiLCJyYWRpdXMiLCJoaWdobGlnaHRYIiwiaGlnaGxpZ2h0WSIsImZpbGwiLCJhZGRDb2xvclN0b3AiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7O0NBSUMsR0FFRCxPQUFPQSxlQUFlLGtDQUFrQztBQUV4RCxTQUFTQyxNQUFNLEVBQWlCQyxjQUFjLFFBQWdCLDhCQUE4QjtBQUM1RixPQUFPQyxpQkFBaUIsbUJBQW1CO0FBYTVCLElBQUEsQUFBTUMsbUJBQU4sTUFBTUEseUJBQXlCSDtJQXdDekJJLGlCQUF1QjtRQUN4QyxLQUFLLENBQUNBO1FBRU4sdUdBQXVHO1FBQ3ZHLFlBQVk7UUFDWixJQUFJLENBQUNDLHNCQUFzQixJQUFJLElBQUksQ0FBQ0Esc0JBQXNCO0lBQzVEO0lBMUNBLFlBQW9CQyxRQUFnQixFQUFFQyxlQUF5QyxDQUFHO1FBRWhGLE1BQU1DLFVBQVVULFlBQWtFO1lBRWhGLGNBQWM7WUFDZFUsV0FBVztZQUNYQyxnQkFBZ0I7WUFDaEJDLGFBQWE7WUFDYkMsd0JBQXdCO1lBQ3hCQyxrQkFBa0IsQ0FBQztZQUNuQkMsa0JBQWtCLENBQUM7UUFDckIsR0FBR1A7UUFFSCx5QkFBeUI7UUFDekJRLFVBQVVBLE9BQVFQLFFBQVFJLHNCQUFzQixHQUFHLEdBQ2pELENBQUMsMkNBQTJDLEVBQUVKLFFBQVFJLHNCQUFzQixFQUFFO1FBQ2hGRyxVQUFVQSxPQUFRUCxRQUFRSyxnQkFBZ0IsSUFBSSxDQUFDLEtBQUtMLFFBQVFLLGdCQUFnQixJQUFJLEdBQzlFLENBQUMsK0JBQStCLEVBQUVMLFFBQVFLLGdCQUFnQixFQUFFO1FBQzlERSxVQUFVQSxPQUFRUCxRQUFRTSxnQkFBZ0IsSUFBSSxDQUFDLEtBQUtOLFFBQVFNLGdCQUFnQixJQUFJLEdBQzlFLENBQUMsK0JBQStCLEVBQUVOLFFBQVFNLGdCQUFnQixFQUFFO1FBRTlELEtBQUssQ0FBRVIsV0FBVyxHQUFHRTtRQUVyQixJQUFJLENBQUNILHNCQUFzQixHQUFHO1lBQzVCLE1BQU1XLFNBQVMsSUFBSSxDQUFDQSxNQUFNO1lBQzFCLE1BQU1DLGFBQWFELFNBQVNSLFFBQVFLLGdCQUFnQjtZQUNwRCxNQUFNSyxhQUFhRixTQUFTUixRQUFRTSxnQkFBZ0I7WUFDcEQsSUFBSSxDQUFDSyxJQUFJLEdBQUcsSUFBSWxCLGVBQWdCZ0IsWUFBWUMsWUFBWSxHQUFHRCxZQUFZQyxZQUFZRixTQUFTLEdBQ3pGSSxZQUFZLENBQUUsR0FBR1osUUFBUUUsY0FBYyxFQUN2Q1UsWUFBWSxDQUFFWixRQUFRSSxzQkFBc0IsRUFBRUosUUFBUUMsU0FBUyxFQUMvRFcsWUFBWSxDQUFFLEdBQUdaLFFBQVFHLFdBQVc7UUFDekM7UUFFQSxJQUFJLENBQUNOLHNCQUFzQjtJQUM3QjtBQVNGO0FBL0NBLFNBQXFCRiw4QkErQ3BCO0FBRURELFlBQVltQixRQUFRLENBQUUsb0JBQW9CbEIifQ==