// Copyright 2022-2024, University of Colorado Boulder
/**
 * Draws an equilateral or isosceles triangle pointing up by default.
 * triangleWidth sets the base, while triangleHeight sets the altitude.
 * The point of the triangle is drawn to be perpendicular from the halfway point of the base.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 */ import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { Path } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
let TriangleNode = class TriangleNode extends Path {
    constructor(providedOptions){
        const options = optionize()({
            pointDirection: 'up',
            triangleWidth: 15,
            triangleHeight: 13,
            stroke: 'black',
            lineWidth: 1,
            cursor: 'pointer'
        }, providedOptions);
        // Draws an equilateral or isosceles triangle
        const triangleShape = new Shape().moveTo(options.triangleWidth / 2, 0).lineTo(options.triangleWidth, options.triangleHeight).lineTo(0, options.triangleHeight).close();
        super(triangleShape, options);
        // rotate triangle according to provided options
        this.rotation = options.pointDirection === 'up' ? 0 : options.pointDirection === 'right' ? Math.PI / 2 : options.pointDirection === 'down' ? Math.PI : -Math.PI / 2;
    }
};
export { TriangleNode as default };
sceneryPhet.register('TriangleNode', TriangleNode);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9UcmlhbmdsZU5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogRHJhd3MgYW4gZXF1aWxhdGVyYWwgb3IgaXNvc2NlbGVzIHRyaWFuZ2xlIHBvaW50aW5nIHVwIGJ5IGRlZmF1bHQuXG4gKiB0cmlhbmdsZVdpZHRoIHNldHMgdGhlIGJhc2UsIHdoaWxlIHRyaWFuZ2xlSGVpZ2h0IHNldHMgdGhlIGFsdGl0dWRlLlxuICogVGhlIHBvaW50IG9mIHRoZSB0cmlhbmdsZSBpcyBkcmF3biB0byBiZSBwZXJwZW5kaWN1bGFyIGZyb20gdGhlIGhhbGZ3YXkgcG9pbnQgb2YgdGhlIGJhc2UuXG4gKlxuICogQGF1dGhvciBNYXJsYSBTY2h1bHogKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcbmltcG9ydCB7IFBhdGgsIFBhdGhPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcblxudHlwZSBTZWxmT3B0aW9ucyA9IHtcbiAgcG9pbnREaXJlY3Rpb24/OiAndXAnIHwgJ2Rvd24nIHwgJ3JpZ2h0JyB8ICdsZWZ0JztcbiAgdHJpYW5nbGVXaWR0aD86IG51bWJlcjtcbiAgdHJpYW5nbGVIZWlnaHQ/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBUcmlhbmdsZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFBhdGhPcHRpb25zLCAncm90YXRpb24nIHwgJ3NoYXBlJyB8ICdzaGFwZVByb3BlcnR5Jz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaWFuZ2xlTm9kZSBleHRlbmRzIFBhdGgge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogVHJpYW5nbGVOb2RlT3B0aW9ucyApIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VHJpYW5nbGVOb2RlT3B0aW9ucywgU2VsZk9wdGlvbnMsIFBhdGhPcHRpb25zPigpKCB7XG4gICAgICBwb2ludERpcmVjdGlvbjogJ3VwJyxcbiAgICAgIHRyaWFuZ2xlV2lkdGg6IDE1LFxuICAgICAgdHJpYW5nbGVIZWlnaHQ6IDEzLFxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxuICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIC8vIERyYXdzIGFuIGVxdWlsYXRlcmFsIG9yIGlzb3NjZWxlcyB0cmlhbmdsZVxuICAgIGNvbnN0IHRyaWFuZ2xlU2hhcGUgPSBuZXcgU2hhcGUoKVxuICAgICAgLm1vdmVUbyggb3B0aW9ucy50cmlhbmdsZVdpZHRoIC8gMiwgMCApXG4gICAgICAubGluZVRvKCBvcHRpb25zLnRyaWFuZ2xlV2lkdGgsIG9wdGlvbnMudHJpYW5nbGVIZWlnaHQgKVxuICAgICAgLmxpbmVUbyggMCwgb3B0aW9ucy50cmlhbmdsZUhlaWdodCApXG4gICAgICAuY2xvc2UoKTtcblxuICAgIHN1cGVyKCB0cmlhbmdsZVNoYXBlLCBvcHRpb25zICk7XG5cbiAgICAvLyByb3RhdGUgdHJpYW5nbGUgYWNjb3JkaW5nIHRvIHByb3ZpZGVkIG9wdGlvbnNcbiAgICB0aGlzLnJvdGF0aW9uID0gb3B0aW9ucy5wb2ludERpcmVjdGlvbiA9PT0gJ3VwJyA/IDAgOlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBvaW50RGlyZWN0aW9uID09PSAncmlnaHQnID8gTWF0aC5QSSAvIDIgOlxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBvaW50RGlyZWN0aW9uID09PSAnZG93bicgPyBNYXRoLlBJIDpcbiAgICAgICAgICAgICAgICAgICAgLU1hdGguUEkgLyAyO1xuICB9XG59XG5cbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnVHJpYW5nbGVOb2RlJywgVHJpYW5nbGVOb2RlICk7Il0sIm5hbWVzIjpbIlNoYXBlIiwib3B0aW9uaXplIiwiUGF0aCIsInNjZW5lcnlQaGV0IiwiVHJpYW5nbGVOb2RlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBvaW50RGlyZWN0aW9uIiwidHJpYW5nbGVXaWR0aCIsInRyaWFuZ2xlSGVpZ2h0Iiwic3Ryb2tlIiwibGluZVdpZHRoIiwiY3Vyc29yIiwidHJpYW5nbGVTaGFwZSIsIm1vdmVUbyIsImxpbmVUbyIsImNsb3NlIiwicm90YXRpb24iLCJNYXRoIiwiUEkiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7Ozs7Q0FNQyxHQUVELFNBQVNBLEtBQUssUUFBUSwyQkFBMkI7QUFDakQsT0FBT0MsZUFBZSxrQ0FBa0M7QUFFeEQsU0FBU0MsSUFBSSxRQUFxQiw4QkFBOEI7QUFDaEUsT0FBT0MsaUJBQWlCLG1CQUFtQjtBQVU1QixJQUFBLEFBQU1DLGVBQU4sTUFBTUEscUJBQXFCRjtJQUV4QyxZQUFvQkcsZUFBcUMsQ0FBRztRQUUxRCxNQUFNQyxVQUFVTCxZQUE0RDtZQUMxRU0sZ0JBQWdCO1lBQ2hCQyxlQUFlO1lBQ2ZDLGdCQUFnQjtZQUNoQkMsUUFBUTtZQUNSQyxXQUFXO1lBQ1hDLFFBQVE7UUFDVixHQUFHUDtRQUVILDZDQUE2QztRQUM3QyxNQUFNUSxnQkFBZ0IsSUFBSWIsUUFDdkJjLE1BQU0sQ0FBRVIsUUFBUUUsYUFBYSxHQUFHLEdBQUcsR0FDbkNPLE1BQU0sQ0FBRVQsUUFBUUUsYUFBYSxFQUFFRixRQUFRRyxjQUFjLEVBQ3JETSxNQUFNLENBQUUsR0FBR1QsUUFBUUcsY0FBYyxFQUNqQ08sS0FBSztRQUVSLEtBQUssQ0FBRUgsZUFBZVA7UUFFdEIsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQ1csUUFBUSxHQUFHWCxRQUFRQyxjQUFjLEtBQUssT0FBTyxJQUNsQ0QsUUFBUUMsY0FBYyxLQUFLLFVBQVVXLEtBQUtDLEVBQUUsR0FBRyxJQUMvQ2IsUUFBUUMsY0FBYyxLQUFLLFNBQVNXLEtBQUtDLEVBQUUsR0FDM0MsQ0FBQ0QsS0FBS0MsRUFBRSxHQUFHO0lBQzdCO0FBQ0Y7QUE1QkEsU0FBcUJmLDBCQTRCcEI7QUFFREQsWUFBWWlCLFFBQVEsQ0FBRSxnQkFBZ0JoQiJ9