// Copyright 2016-2022, University of Colorado Boulder
/**
 * Shape used to indicate 'reset' of something, used on ResetButton.
 * Origin is at the center of the circle.
 *
 * @author John Blanco
 */ import { Shape } from '../../kite/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
let ResetShape = class ResetShape extends Shape {
    /**
   * @param radius of the center of the reset arrow
   */ constructor(radius){
        super();
        // Adjust these parameters to tweak the appearance of the arrow.
        const INNER_RADIUS = radius * 0.4;
        const OUTER_RADIUS = radius * 0.625;
        const HEAD_WIDTH = 2.25 * (OUTER_RADIUS - INNER_RADIUS);
        const START_ANGLE = -Math.PI * 0.35;
        const END_TO_NECK_ANGULAR_SPAN = -2 * Math.PI * 0.85;
        const ARROW_HEAD_ANGULAR_SPAN = -Math.PI * 0.18;
        // Create the curved arrow shape, starting at the inside of the non-pointed end.
        // Inner edge of end.
        this.moveTo(INNER_RADIUS * Math.cos(START_ANGLE), INNER_RADIUS * Math.sin(START_ANGLE));
        this.lineTo(OUTER_RADIUS * Math.cos(START_ANGLE), OUTER_RADIUS * Math.sin(START_ANGLE));
        const neckAngle = START_ANGLE + END_TO_NECK_ANGULAR_SPAN;
        // Outer curve.
        this.arc(0, 0, OUTER_RADIUS, START_ANGLE, neckAngle, true);
        const HEAD_WIDTHExtrusion = (HEAD_WIDTH - (OUTER_RADIUS - INNER_RADIUS)) / 2;
        this.lineTo((OUTER_RADIUS + HEAD_WIDTHExtrusion) * Math.cos(neckAngle), (OUTER_RADIUS + HEAD_WIDTHExtrusion) * Math.sin(neckAngle));
        // Tip of arrowhead.
        const pointRadius = (OUTER_RADIUS + INNER_RADIUS) * 0.55; // Tweaked a little from center for better look.
        this.lineTo(pointRadius * Math.cos(neckAngle + ARROW_HEAD_ANGULAR_SPAN), pointRadius * Math.sin(neckAngle + ARROW_HEAD_ANGULAR_SPAN));
        this.lineTo((INNER_RADIUS - HEAD_WIDTHExtrusion) * Math.cos(neckAngle), (INNER_RADIUS - HEAD_WIDTHExtrusion) * Math.sin(neckAngle));
        this.lineTo(INNER_RADIUS * Math.cos(neckAngle), INNER_RADIUS * Math.sin(neckAngle));
        // Inner curve.
        this.arc(0, 0, INNER_RADIUS, neckAngle, START_ANGLE);
        this.close();
    }
};
export { ResetShape as default };
sceneryPhet.register('ResetShape', ResetShape);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9SZXNldFNoYXBlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFNoYXBlIHVzZWQgdG8gaW5kaWNhdGUgJ3Jlc2V0JyBvZiBzb21ldGhpbmcsIHVzZWQgb24gUmVzZXRCdXR0b24uXG4gKiBPcmlnaW4gaXMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY2lyY2xlLlxuICpcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cbiAqL1xuXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc2V0U2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSByYWRpdXMgb2YgdGhlIGNlbnRlciBvZiB0aGUgcmVzZXQgYXJyb3dcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcmFkaXVzOiBudW1iZXIgKSB7XG5cbiAgICBzdXBlcigpO1xuXG4gICAgLy8gQWRqdXN0IHRoZXNlIHBhcmFtZXRlcnMgdG8gdHdlYWsgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGFycm93LlxuICAgIGNvbnN0IElOTkVSX1JBRElVUyA9IHJhZGl1cyAqIDAuNDtcbiAgICBjb25zdCBPVVRFUl9SQURJVVMgPSByYWRpdXMgKiAwLjYyNTtcbiAgICBjb25zdCBIRUFEX1dJRFRIID0gMi4yNSAqICggT1VURVJfUkFESVVTIC0gSU5ORVJfUkFESVVTICk7XG4gICAgY29uc3QgU1RBUlRfQU5HTEUgPSAtTWF0aC5QSSAqIDAuMzU7XG4gICAgY29uc3QgRU5EX1RPX05FQ0tfQU5HVUxBUl9TUEFOID0gLTIgKiBNYXRoLlBJICogMC44NTtcbiAgICBjb25zdCBBUlJPV19IRUFEX0FOR1VMQVJfU1BBTiA9IC1NYXRoLlBJICogMC4xODtcblxuICAgIC8vIENyZWF0ZSB0aGUgY3VydmVkIGFycm93IHNoYXBlLCBzdGFydGluZyBhdCB0aGUgaW5zaWRlIG9mIHRoZSBub24tcG9pbnRlZCBlbmQuXG4gICAgLy8gSW5uZXIgZWRnZSBvZiBlbmQuXG4gICAgdGhpcy5tb3ZlVG8oIElOTkVSX1JBRElVUyAqIE1hdGguY29zKCBTVEFSVF9BTkdMRSApLCBJTk5FUl9SQURJVVMgKiBNYXRoLnNpbiggU1RBUlRfQU5HTEUgKSApO1xuICAgIHRoaXMubGluZVRvKCBPVVRFUl9SQURJVVMgKiBNYXRoLmNvcyggU1RBUlRfQU5HTEUgKSwgT1VURVJfUkFESVVTICogTWF0aC5zaW4oIFNUQVJUX0FOR0xFICkgKTtcbiAgICBjb25zdCBuZWNrQW5nbGUgPSBTVEFSVF9BTkdMRSArIEVORF9UT19ORUNLX0FOR1VMQVJfU1BBTjtcblxuICAgIC8vIE91dGVyIGN1cnZlLlxuICAgIHRoaXMuYXJjKCAwLCAwLCBPVVRFUl9SQURJVVMsIFNUQVJUX0FOR0xFLCBuZWNrQW5nbGUsIHRydWUgKTtcbiAgICBjb25zdCBIRUFEX1dJRFRIRXh0cnVzaW9uID0gKCBIRUFEX1dJRFRIIC0gKCBPVVRFUl9SQURJVVMgLSBJTk5FUl9SQURJVVMgKSApIC8gMjtcbiAgICB0aGlzLmxpbmVUbyhcbiAgICAgICggT1VURVJfUkFESVVTICsgSEVBRF9XSURUSEV4dHJ1c2lvbiApICogTWF0aC5jb3MoIG5lY2tBbmdsZSApLFxuICAgICAgKCBPVVRFUl9SQURJVVMgKyBIRUFEX1dJRFRIRXh0cnVzaW9uICkgKiBNYXRoLnNpbiggbmVja0FuZ2xlICkgKTtcblxuICAgIC8vIFRpcCBvZiBhcnJvd2hlYWQuXG4gICAgY29uc3QgcG9pbnRSYWRpdXMgPSAoIE9VVEVSX1JBRElVUyArIElOTkVSX1JBRElVUyApICogMC41NTsgLy8gVHdlYWtlZCBhIGxpdHRsZSBmcm9tIGNlbnRlciBmb3IgYmV0dGVyIGxvb2suXG4gICAgdGhpcy5saW5lVG8oXG4gICAgICBwb2ludFJhZGl1cyAqIE1hdGguY29zKCBuZWNrQW5nbGUgKyBBUlJPV19IRUFEX0FOR1VMQVJfU1BBTiApLFxuICAgICAgcG9pbnRSYWRpdXMgKiBNYXRoLnNpbiggbmVja0FuZ2xlICsgQVJST1dfSEVBRF9BTkdVTEFSX1NQQU4gKSApO1xuICAgIHRoaXMubGluZVRvKFxuICAgICAgKCBJTk5FUl9SQURJVVMgLSBIRUFEX1dJRFRIRXh0cnVzaW9uICkgKiBNYXRoLmNvcyggbmVja0FuZ2xlICksXG4gICAgICAoIElOTkVSX1JBRElVUyAtIEhFQURfV0lEVEhFeHRydXNpb24gKSAqIE1hdGguc2luKCBuZWNrQW5nbGUgKSApO1xuICAgIHRoaXMubGluZVRvKFxuICAgICAgSU5ORVJfUkFESVVTICogTWF0aC5jb3MoIG5lY2tBbmdsZSApLFxuICAgICAgSU5ORVJfUkFESVVTICogTWF0aC5zaW4oIG5lY2tBbmdsZSApICk7XG5cbiAgICAvLyBJbm5lciBjdXJ2ZS5cbiAgICB0aGlzLmFyYyggMCwgMCwgSU5ORVJfUkFESVVTLCBuZWNrQW5nbGUsIFNUQVJUX0FOR0xFICk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG59XG5cbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnUmVzZXRTaGFwZScsIFJlc2V0U2hhcGUgKTsiXSwibmFtZXMiOlsiU2hhcGUiLCJzY2VuZXJ5UGhldCIsIlJlc2V0U2hhcGUiLCJyYWRpdXMiLCJJTk5FUl9SQURJVVMiLCJPVVRFUl9SQURJVVMiLCJIRUFEX1dJRFRIIiwiU1RBUlRfQU5HTEUiLCJNYXRoIiwiUEkiLCJFTkRfVE9fTkVDS19BTkdVTEFSX1NQQU4iLCJBUlJPV19IRUFEX0FOR1VMQVJfU1BBTiIsIm1vdmVUbyIsImNvcyIsInNpbiIsImxpbmVUbyIsIm5lY2tBbmdsZSIsImFyYyIsIkhFQURfV0lEVEhFeHRydXNpb24iLCJwb2ludFJhZGl1cyIsImNsb3NlIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7Q0FLQyxHQUVELFNBQVNBLEtBQUssUUFBUSwyQkFBMkI7QUFDakQsT0FBT0MsaUJBQWlCLG1CQUFtQjtBQUU1QixJQUFBLEFBQU1DLGFBQU4sTUFBTUEsbUJBQW1CRjtJQUV0Qzs7R0FFQyxHQUNELFlBQW9CRyxNQUFjLENBQUc7UUFFbkMsS0FBSztRQUVMLGdFQUFnRTtRQUNoRSxNQUFNQyxlQUFlRCxTQUFTO1FBQzlCLE1BQU1FLGVBQWVGLFNBQVM7UUFDOUIsTUFBTUcsYUFBYSxPQUFTRCxDQUFBQSxlQUFlRCxZQUFXO1FBQ3RELE1BQU1HLGNBQWMsQ0FBQ0MsS0FBS0MsRUFBRSxHQUFHO1FBQy9CLE1BQU1DLDJCQUEyQixDQUFDLElBQUlGLEtBQUtDLEVBQUUsR0FBRztRQUNoRCxNQUFNRSwwQkFBMEIsQ0FBQ0gsS0FBS0MsRUFBRSxHQUFHO1FBRTNDLGdGQUFnRjtRQUNoRixxQkFBcUI7UUFDckIsSUFBSSxDQUFDRyxNQUFNLENBQUVSLGVBQWVJLEtBQUtLLEdBQUcsQ0FBRU4sY0FBZUgsZUFBZUksS0FBS00sR0FBRyxDQUFFUDtRQUM5RSxJQUFJLENBQUNRLE1BQU0sQ0FBRVYsZUFBZUcsS0FBS0ssR0FBRyxDQUFFTixjQUFlRixlQUFlRyxLQUFLTSxHQUFHLENBQUVQO1FBQzlFLE1BQU1TLFlBQVlULGNBQWNHO1FBRWhDLGVBQWU7UUFDZixJQUFJLENBQUNPLEdBQUcsQ0FBRSxHQUFHLEdBQUdaLGNBQWNFLGFBQWFTLFdBQVc7UUFDdEQsTUFBTUUsc0JBQXNCLEFBQUVaLENBQUFBLGFBQWVELENBQUFBLGVBQWVELFlBQVcsQ0FBRSxJQUFNO1FBQy9FLElBQUksQ0FBQ1csTUFBTSxDQUNULEFBQUVWLENBQUFBLGVBQWVhLG1CQUFrQixJQUFNVixLQUFLSyxHQUFHLENBQUVHLFlBQ25ELEFBQUVYLENBQUFBLGVBQWVhLG1CQUFrQixJQUFNVixLQUFLTSxHQUFHLENBQUVFO1FBRXJELG9CQUFvQjtRQUNwQixNQUFNRyxjQUFjLEFBQUVkLENBQUFBLGVBQWVELFlBQVcsSUFBTSxNQUFNLGdEQUFnRDtRQUM1RyxJQUFJLENBQUNXLE1BQU0sQ0FDVEksY0FBY1gsS0FBS0ssR0FBRyxDQUFFRyxZQUFZTCwwQkFDcENRLGNBQWNYLEtBQUtNLEdBQUcsQ0FBRUUsWUFBWUw7UUFDdEMsSUFBSSxDQUFDSSxNQUFNLENBQ1QsQUFBRVgsQ0FBQUEsZUFBZWMsbUJBQWtCLElBQU1WLEtBQUtLLEdBQUcsQ0FBRUcsWUFDbkQsQUFBRVosQ0FBQUEsZUFBZWMsbUJBQWtCLElBQU1WLEtBQUtNLEdBQUcsQ0FBRUU7UUFDckQsSUFBSSxDQUFDRCxNQUFNLENBQ1RYLGVBQWVJLEtBQUtLLEdBQUcsQ0FBRUcsWUFDekJaLGVBQWVJLEtBQUtNLEdBQUcsQ0FBRUU7UUFFM0IsZUFBZTtRQUNmLElBQUksQ0FBQ0MsR0FBRyxDQUFFLEdBQUcsR0FBR2IsY0FBY1ksV0FBV1Q7UUFDekMsSUFBSSxDQUFDYSxLQUFLO0lBQ1o7QUFDRjtBQTlDQSxTQUFxQmxCLHdCQThDcEI7QUFFREQsWUFBWW9CLFFBQVEsQ0FBRSxjQUFjbkIifQ==