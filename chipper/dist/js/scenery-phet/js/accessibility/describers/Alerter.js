// Copyright 2021-2024, University of Colorado Boulder
/**
 * Generic base class responsible for interfacing between a Node to alert description.
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import EnabledComponent from '../../../../axon/js/EnabledComponent.js';
import optionize from '../../../../phet-core/js/optionize.js';
import { Voicing } from '../../../../scenery/js/imports.js';
import Utterance from '../../../../utterance-queue/js/Utterance.js';
import sceneryPhet from '../../sceneryPhet.js';
let Alerter = class Alerter extends EnabledComponent {
    /**
   * Alert to both description and voicing utteranceQueues, depending on if both are supported by this instance
   */ alert(alertable) {
        if (this.enabled) {
            if (this.alertToVoicing) {
                assert && assert(alertable instanceof Utterance, 'If alerting to Voicing, the alertable needs to be an Utterance'); // eslint-disable-line phet/no-simple-type-checking-assertions
                Voicing.alertUtterance(alertable);
            }
            this.alertDescriptionUtterance(alertable);
        }
    }
    /**
   * Forward to provided Node for UtteranceQueue alerting logic. See ParallelDOM.alertDescriptionUtterance() for details.
   */ alertDescriptionUtterance(alertable) {
        this.enabled && this.descriptionAlertNode && this.descriptionAlertNode.alertDescriptionUtterance(alertable);
    }
    /**
   * Forward to provided Node for UtteranceQueue alerting logic. See ParallelDOM.forEachUtteranceQueue() for details.
   */ forEachUtteranceQueue(utteranceQueueCallback) {
        this.enabled && this.descriptionAlertNode && this.descriptionAlertNode.forEachUtteranceQueue(utteranceQueueCallback);
    }
    constructor(providedOptions){
        const options = optionize()({
            alertToVoicing: true,
            descriptionAlertNode: null
        }, providedOptions);
        super(options);
        this.alertToVoicing = options.alertToVoicing;
        this.descriptionAlertNode = options.descriptionAlertNode;
    }
};
sceneryPhet.register('Alerter', Alerter);
export default Alerter;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9hY2Nlc3NpYmlsaXR5L2Rlc2NyaWJlcnMvQWxlcnRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBHZW5lcmljIGJhc2UgY2xhc3MgcmVzcG9uc2libGUgZm9yIGludGVyZmFjaW5nIGJldHdlZW4gYSBOb2RlIHRvIGFsZXJ0IGRlc2NyaXB0aW9uLlxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBFbmFibGVkQ29tcG9uZW50LCB7IEVuYWJsZWRDb21wb25lbnRPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbmFibGVkQ29tcG9uZW50LmpzJztcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgeyBOb2RlLCBWb2ljaW5nIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBVdHRlcmFuY2UsIHsgVEFsZXJ0YWJsZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9VdHRlcmFuY2UuanMnO1xuaW1wb3J0IFV0dGVyYW5jZVF1ZXVlIGZyb20gJy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9VdHRlcmFuY2VRdWV1ZS5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vLi4vc2NlbmVyeVBoZXQuanMnO1xuXG50eXBlIFV0dGVyYW5jZVF1ZXVlQ2FsbGJhY2sgPSAoIHF1ZXVlOiBVdHRlcmFuY2VRdWV1ZSApID0+IHZvaWQ7XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSB7XG5cbiAgLy8gV2hlbiB0cnVlLCBhbGVydHMgd2lsbCBiZSBzZW50IHRvIHRoZSB2b2ljaW5nVXR0ZXJhbmNlUXVldWUuIFRoaXMgc2h1dG9mZiB2YWx2ZSBpcyBzaW1pbGFyIHRvXG4gIC8vIGRlc2NyaXB0aW9uQWxlcnROb2RlLCBidXQgZm9yIHZvaWNpbmcuXG4gIGFsZXJ0VG9Wb2ljaW5nPzogYm9vbGVhbjtcblxuICAvLyBJZiBwcm92aWRlZCwgdXNlIHRoaXMgTm9kZSB0byBzZW5kIGRlc2NyaXB0aW9uIGFsZXJ0cyB0byBvbmUgb3IgbW9yZSBEaXNwbGF5J3MgVXR0ZXJhbmNlUXVldWUuIFVubGlrZSBmb3JcbiAgLy8gVm9pY2luZywgZGVzY3JpcHRpb24gYWxlcnRzIG11c3Qgb2NjdXIgdGhyb3VnaCBhIE5vZGUgY29ubmVjdGVkIHRvIGEgRGlzcGxheSB0aHJvdWdoIHRoZSBzY2VuZSBncmFwaC4gSWYgbnVsbCxcbiAgLy8gZG8gbm90IGFsZXJ0IGZvciBkZXNjcmlwdGlvbiAoc2FtZSBhcyBhbGVydFRvVm9pY2luZzpmYWxzZSkuIE5PVEU6IE5vIGRlc2NyaXB0aW9uIHdpbGwgYWxlcnQgd2l0aG91dCB0aGlzIG9wdGlvbiFcbiAgZGVzY3JpcHRpb25BbGVydE5vZGU/OiBOb2RlIHwgbnVsbDtcbn07XG5leHBvcnQgdHlwZSBBbGVydGVyT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgRW5hYmxlZENvbXBvbmVudE9wdGlvbnM7XG5cbmNsYXNzIEFsZXJ0ZXIgZXh0ZW5kcyBFbmFibGVkQ29tcG9uZW50IHtcblxuICBwdWJsaWMgcmVhZG9ubHkgYWxlcnRUb1ZvaWNpbmc6IGJvb2xlYW47XG4gIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbkFsZXJ0Tm9kZTogTm9kZSB8IG51bGw7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBBbGVydGVyT3B0aW9ucyApIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QWxlcnRlck9wdGlvbnMsIFNlbGZPcHRpb25zLCBFbmFibGVkQ29tcG9uZW50T3B0aW9ucz4oKSgge1xuICAgICAgYWxlcnRUb1ZvaWNpbmc6IHRydWUsXG4gICAgICBkZXNjcmlwdGlvbkFsZXJ0Tm9kZTogbnVsbFxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcbiAgICB0aGlzLmFsZXJ0VG9Wb2ljaW5nID0gb3B0aW9ucy5hbGVydFRvVm9pY2luZztcbiAgICB0aGlzLmRlc2NyaXB0aW9uQWxlcnROb2RlID0gb3B0aW9ucy5kZXNjcmlwdGlvbkFsZXJ0Tm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGVydCB0byBib3RoIGRlc2NyaXB0aW9uIGFuZCB2b2ljaW5nIHV0dGVyYW5jZVF1ZXVlcywgZGVwZW5kaW5nIG9uIGlmIGJvdGggYXJlIHN1cHBvcnRlZCBieSB0aGlzIGluc3RhbmNlXG4gICAqL1xuICBwdWJsaWMgYWxlcnQoIGFsZXJ0YWJsZTogVEFsZXJ0YWJsZSApOiB2b2lkIHtcbiAgICBpZiAoIHRoaXMuZW5hYmxlZCApIHtcbiAgICAgIGlmICggdGhpcy5hbGVydFRvVm9pY2luZyApIHtcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggYWxlcnRhYmxlIGluc3RhbmNlb2YgVXR0ZXJhbmNlLCAnSWYgYWxlcnRpbmcgdG8gVm9pY2luZywgdGhlIGFsZXJ0YWJsZSBuZWVkcyB0byBiZSBhbiBVdHRlcmFuY2UnICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcGhldC9uby1zaW1wbGUtdHlwZS1jaGVja2luZy1hc3NlcnRpb25zXG4gICAgICAgIFZvaWNpbmcuYWxlcnRVdHRlcmFuY2UoIGFsZXJ0YWJsZSBhcyBVdHRlcmFuY2UgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlKCBhbGVydGFibGUgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRm9yd2FyZCB0byBwcm92aWRlZCBOb2RlIGZvciBVdHRlcmFuY2VRdWV1ZSBhbGVydGluZyBsb2dpYy4gU2VlIFBhcmFsbGVsRE9NLmFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UoKSBmb3IgZGV0YWlscy5cbiAgICovXG4gIHB1YmxpYyBhbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlKCBhbGVydGFibGU6IFRBbGVydGFibGUgKTogdm9pZCB7XG4gICAgdGhpcy5lbmFibGVkICYmIHRoaXMuZGVzY3JpcHRpb25BbGVydE5vZGUgJiYgdGhpcy5kZXNjcmlwdGlvbkFsZXJ0Tm9kZS5hbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlKCBhbGVydGFibGUgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3J3YXJkIHRvIHByb3ZpZGVkIE5vZGUgZm9yIFV0dGVyYW5jZVF1ZXVlIGFsZXJ0aW5nIGxvZ2ljLiBTZWUgUGFyYWxsZWxET00uZm9yRWFjaFV0dGVyYW5jZVF1ZXVlKCkgZm9yIGRldGFpbHMuXG4gICAqL1xuICBwdWJsaWMgZm9yRWFjaFV0dGVyYW5jZVF1ZXVlKCB1dHRlcmFuY2VRdWV1ZUNhbGxiYWNrOiBVdHRlcmFuY2VRdWV1ZUNhbGxiYWNrICk6IHZvaWQge1xuICAgIHRoaXMuZW5hYmxlZCAmJiB0aGlzLmRlc2NyaXB0aW9uQWxlcnROb2RlICYmIHRoaXMuZGVzY3JpcHRpb25BbGVydE5vZGUuZm9yRWFjaFV0dGVyYW5jZVF1ZXVlKCB1dHRlcmFuY2VRdWV1ZUNhbGxiYWNrICk7XG4gIH1cbn1cblxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdBbGVydGVyJywgQWxlcnRlciApO1xuZXhwb3J0IGRlZmF1bHQgQWxlcnRlcjsiXSwibmFtZXMiOlsiRW5hYmxlZENvbXBvbmVudCIsIm9wdGlvbml6ZSIsIlZvaWNpbmciLCJVdHRlcmFuY2UiLCJzY2VuZXJ5UGhldCIsIkFsZXJ0ZXIiLCJhbGVydCIsImFsZXJ0YWJsZSIsImVuYWJsZWQiLCJhbGVydFRvVm9pY2luZyIsImFzc2VydCIsImFsZXJ0VXR0ZXJhbmNlIiwiYWxlcnREZXNjcmlwdGlvblV0dGVyYW5jZSIsImRlc2NyaXB0aW9uQWxlcnROb2RlIiwiZm9yRWFjaFV0dGVyYW5jZVF1ZXVlIiwidXR0ZXJhbmNlUXVldWVDYWxsYmFjayIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7Q0FHQyxHQUVELE9BQU9BLHNCQUFtRCwwQ0FBMEM7QUFDcEcsT0FBT0MsZUFBZSx3Q0FBd0M7QUFDOUQsU0FBZUMsT0FBTyxRQUFRLG9DQUFvQztBQUNsRSxPQUFPQyxlQUErQiw4Q0FBOEM7QUFFcEYsT0FBT0MsaUJBQWlCLHVCQUF1QjtBQWlCL0MsSUFBQSxBQUFNQyxVQUFOLE1BQU1BLGdCQUFnQkw7SUFpQnBCOztHQUVDLEdBQ0QsQUFBT00sTUFBT0MsU0FBcUIsRUFBUztRQUMxQyxJQUFLLElBQUksQ0FBQ0MsT0FBTyxFQUFHO1lBQ2xCLElBQUssSUFBSSxDQUFDQyxjQUFjLEVBQUc7Z0JBQ3pCQyxVQUFVQSxPQUFRSCxxQkFBcUJKLFdBQVcsbUVBQW9FLDhEQUE4RDtnQkFDcExELFFBQVFTLGNBQWMsQ0FBRUo7WUFDMUI7WUFFQSxJQUFJLENBQUNLLHlCQUF5QixDQUFFTDtRQUNsQztJQUNGO0lBRUE7O0dBRUMsR0FDRCxBQUFPSywwQkFBMkJMLFNBQXFCLEVBQVM7UUFDOUQsSUFBSSxDQUFDQyxPQUFPLElBQUksSUFBSSxDQUFDSyxvQkFBb0IsSUFBSSxJQUFJLENBQUNBLG9CQUFvQixDQUFDRCx5QkFBeUIsQ0FBRUw7SUFDcEc7SUFFQTs7R0FFQyxHQUNELEFBQU9PLHNCQUF1QkMsc0JBQThDLEVBQVM7UUFDbkYsSUFBSSxDQUFDUCxPQUFPLElBQUksSUFBSSxDQUFDSyxvQkFBb0IsSUFBSSxJQUFJLENBQUNBLG9CQUFvQixDQUFDQyxxQkFBcUIsQ0FBRUM7SUFDaEc7SUF0Q0EsWUFBb0JDLGVBQWdDLENBQUc7UUFFckQsTUFBTUMsVUFBVWhCLFlBQW1FO1lBQ2pGUSxnQkFBZ0I7WUFDaEJJLHNCQUFzQjtRQUN4QixHQUFHRztRQUVILEtBQUssQ0FBRUM7UUFDUCxJQUFJLENBQUNSLGNBQWMsR0FBR1EsUUFBUVIsY0FBYztRQUM1QyxJQUFJLENBQUNJLG9CQUFvQixHQUFHSSxRQUFRSixvQkFBb0I7SUFDMUQ7QUE2QkY7QUFFQVQsWUFBWWMsUUFBUSxDQUFFLFdBQVdiO0FBQ2pDLGVBQWVBLFFBQVEifQ==