// Copyright 2022-2024, University of Colorado Boulder
/**
 * Help section that explains how to use a keyboard to toggle play/pause and time controls.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */ import optionize from '../../../../phet-core/js/optionize.js';
import PlayControlButton from '../../buttons/PlayControlButton.js';
import sceneryPhet from '../../sceneryPhet.js';
import SceneryPhetStrings from '../../SceneryPhetStrings.js';
import KeyboardHelpSection from './KeyboardHelpSection.js';
import KeyboardHelpSectionRow from './KeyboardHelpSectionRow.js';
// constants
const timeControlsStringProperty = SceneryPhetStrings.keyboardHelpDialog.timingControls.timingControlsStringProperty;
const pauseOrPlayActionStringProperty = SceneryPhetStrings.keyboardHelpDialog.timingControls.pauseOrPlayActionStringProperty;
const pauseOrPlayActionDescriptionStringProperty = SceneryPhetStrings.a11y.keyboardHelpDialog.timingControls.pauseOrPlayActionDescriptionStringProperty;
let TimeControlsKeyboardHelpSection = class TimeControlsKeyboardHelpSection extends KeyboardHelpSection {
    constructor(providedOptions){
        const options = optionize()({
            headingString: timeControlsStringProperty,
            pauseOrPlayActionStringProperty: pauseOrPlayActionStringProperty,
            pauseOrPlayActionDescriptionString: pauseOrPlayActionDescriptionStringProperty
        }, providedOptions);
        const playPauseRow = KeyboardHelpSectionRow.fromHotkeyData(PlayControlButton.TOGGLE_PLAY_HOTKEY_DATA, {
            labelStringProperty: options.pauseOrPlayActionStringProperty,
            pdomLabelStringProperty: options.pauseOrPlayActionDescriptionString
        });
        super(options.headingString, [
            playPauseRow
        ], options);
    }
};
sceneryPhet.register('TimeControlsKeyboardHelpSection', TimeControlsKeyboardHelpSection);
export default TimeControlsKeyboardHelpSection;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9rZXlib2FyZC9oZWxwL1RpbWVDb250cm9sc0tleWJvYXJkSGVscFNlY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogSGVscCBzZWN0aW9uIHRoYXQgZXhwbGFpbnMgaG93IHRvIHVzZSBhIGtleWJvYXJkIHRvIHRvZ2dsZSBwbGF5L3BhdXNlIGFuZCB0aW1lIGNvbnRyb2xzLlxuICpcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgUGxheUNvbnRyb2xCdXR0b24gZnJvbSAnLi4vLi4vYnV0dG9ucy9QbGF5Q29udHJvbEJ1dHRvbi5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vLi4vc2NlbmVyeVBoZXQuanMnO1xuaW1wb3J0IFNjZW5lcnlQaGV0U3RyaW5ncyBmcm9tICcuLi8uLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xuaW1wb3J0IEtleWJvYXJkSGVscFNlY3Rpb24sIHsgS2V5Ym9hcmRIZWxwU2VjdGlvbk9wdGlvbnMgfSBmcm9tICcuL0tleWJvYXJkSGVscFNlY3Rpb24uanMnO1xuaW1wb3J0IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cgZnJvbSAnLi9LZXlib2FyZEhlbHBTZWN0aW9uUm93LmpzJztcblxuLy8gY29uc3RhbnRzXG5jb25zdCB0aW1lQ29udHJvbHNTdHJpbmdQcm9wZXJ0eSA9IFNjZW5lcnlQaGV0U3RyaW5ncy5rZXlib2FyZEhlbHBEaWFsb2cudGltaW5nQ29udHJvbHMudGltaW5nQ29udHJvbHNTdHJpbmdQcm9wZXJ0eTtcbmNvbnN0IHBhdXNlT3JQbGF5QWN0aW9uU3RyaW5nUHJvcGVydHkgPSBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5Ym9hcmRIZWxwRGlhbG9nLnRpbWluZ0NvbnRyb2xzLnBhdXNlT3JQbGF5QWN0aW9uU3RyaW5nUHJvcGVydHk7XG5jb25zdCBwYXVzZU9yUGxheUFjdGlvbkRlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkgPSBTY2VuZXJ5UGhldFN0cmluZ3MuYTExeS5rZXlib2FyZEhlbHBEaWFsb2cudGltaW5nQ29udHJvbHMucGF1c2VPclBsYXlBY3Rpb25EZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5O1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuXG4gIC8vIFRoZSBoZWFkaW5nIHN0cmluZyBmb3IgdGhpcyBzZWN0aW9uIG9mIGtleWJvYXJkIGhlbHAgY29udGVudFxuICBoZWFkaW5nU3RyaW5nPzogc3RyaW5nIHwgVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPjtcblxuICAvLyBWaXNpYmxlIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgYWN0aW9uIG9mIHBhdXNlL3BsYXkgZnJvbSBhIGtleSBjb21tYW5kLiBZb3UgbWF5IHdhbnQgc2ltLXNwZWNpZmljIHRlcm1pbm9sb2d5XG4gIC8vIGZvciB0aGlzIGNvbW1hbmQuXG4gIHBhdXNlT3JQbGF5QWN0aW9uU3RyaW5nUHJvcGVydHk/OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+O1xuXG4gIC8vIFN0cmluZyBmb3IgdGhlIFBET00gKHNjcmVlbiByZWFkZXJzKSB0aGF0IGRlc2NyaWJlcyB0aGUgaG90a2V5cyBmb3IgcGxheS9wYXVzZS5cbiAgcGF1c2VPclBsYXlBY3Rpb25EZXNjcmlwdGlvblN0cmluZz86IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XG59O1xudHlwZSBQYXJlbnRPcHRpb25zID0gS2V5Ym9hcmRIZWxwU2VjdGlvbk9wdGlvbnM7XG5leHBvcnQgdHlwZSBUaW1lQ29udHJvbEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQYXJlbnRPcHRpb25zO1xuXG5jbGFzcyBUaW1lQ29udHJvbHNLZXlib2FyZEhlbHBTZWN0aW9uIGV4dGVuZHMgS2V5Ym9hcmRIZWxwU2VjdGlvbiB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogVGltZUNvbnRyb2xLZXlib2FyZEhlbHBTZWN0aW9uT3B0aW9ucyApIHtcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFRpbWVDb250cm9sS2V5Ym9hcmRIZWxwU2VjdGlvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBQYXJlbnRPcHRpb25zPigpKCB7XG4gICAgICBoZWFkaW5nU3RyaW5nOiB0aW1lQ29udHJvbHNTdHJpbmdQcm9wZXJ0eSxcbiAgICAgIHBhdXNlT3JQbGF5QWN0aW9uU3RyaW5nUHJvcGVydHk6IHBhdXNlT3JQbGF5QWN0aW9uU3RyaW5nUHJvcGVydHksXG4gICAgICBwYXVzZU9yUGxheUFjdGlvbkRlc2NyaXB0aW9uU3RyaW5nOiBwYXVzZU9yUGxheUFjdGlvbkRlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHlcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuXG4gICAgY29uc3QgcGxheVBhdXNlUm93ID0gS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5mcm9tSG90a2V5RGF0YSggUGxheUNvbnRyb2xCdXR0b24uVE9HR0xFX1BMQVlfSE9US0VZX0RBVEEsIHtcbiAgICAgIGxhYmVsU3RyaW5nUHJvcGVydHk6IG9wdGlvbnMucGF1c2VPclBsYXlBY3Rpb25TdHJpbmdQcm9wZXJ0eSxcbiAgICAgIHBkb21MYWJlbFN0cmluZ1Byb3BlcnR5OiBvcHRpb25zLnBhdXNlT3JQbGF5QWN0aW9uRGVzY3JpcHRpb25TdHJpbmdcbiAgICB9ICk7XG5cbiAgICBzdXBlciggb3B0aW9ucy5oZWFkaW5nU3RyaW5nLCBbIHBsYXlQYXVzZVJvdyBdLCBvcHRpb25zICk7XG4gIH1cbn1cblxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdUaW1lQ29udHJvbHNLZXlib2FyZEhlbHBTZWN0aW9uJywgVGltZUNvbnRyb2xzS2V5Ym9hcmRIZWxwU2VjdGlvbiApO1xuZXhwb3J0IGRlZmF1bHQgVGltZUNvbnRyb2xzS2V5Ym9hcmRIZWxwU2VjdGlvbjsiXSwibmFtZXMiOlsib3B0aW9uaXplIiwiUGxheUNvbnRyb2xCdXR0b24iLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIktleWJvYXJkSGVscFNlY3Rpb24iLCJLZXlib2FyZEhlbHBTZWN0aW9uUm93IiwidGltZUNvbnRyb2xzU3RyaW5nUHJvcGVydHkiLCJrZXlib2FyZEhlbHBEaWFsb2ciLCJ0aW1pbmdDb250cm9scyIsInRpbWluZ0NvbnRyb2xzU3RyaW5nUHJvcGVydHkiLCJwYXVzZU9yUGxheUFjdGlvblN0cmluZ1Byb3BlcnR5IiwicGF1c2VPclBsYXlBY3Rpb25EZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5IiwiYTExeSIsIlRpbWVDb250cm9sc0tleWJvYXJkSGVscFNlY3Rpb24iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaGVhZGluZ1N0cmluZyIsInBhdXNlT3JQbGF5QWN0aW9uRGVzY3JpcHRpb25TdHJpbmciLCJwbGF5UGF1c2VSb3ciLCJmcm9tSG90a2V5RGF0YSIsIlRPR0dMRV9QTEFZX0hPVEtFWV9EQVRBIiwibGFiZWxTdHJpbmdQcm9wZXJ0eSIsInBkb21MYWJlbFN0cmluZ1Byb3BlcnR5IiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBR0QsT0FBT0EsZUFBZSx3Q0FBd0M7QUFDOUQsT0FBT0MsdUJBQXVCLHFDQUFxQztBQUNuRSxPQUFPQyxpQkFBaUIsdUJBQXVCO0FBQy9DLE9BQU9DLHdCQUF3Qiw4QkFBOEI7QUFDN0QsT0FBT0MseUJBQXlELDJCQUEyQjtBQUMzRixPQUFPQyw0QkFBNEIsOEJBQThCO0FBRWpFLFlBQVk7QUFDWixNQUFNQyw2QkFBNkJILG1CQUFtQkksa0JBQWtCLENBQUNDLGNBQWMsQ0FBQ0MsNEJBQTRCO0FBQ3BILE1BQU1DLGtDQUFrQ1AsbUJBQW1CSSxrQkFBa0IsQ0FBQ0MsY0FBYyxDQUFDRSwrQkFBK0I7QUFDNUgsTUFBTUMsNkNBQTZDUixtQkFBbUJTLElBQUksQ0FBQ0wsa0JBQWtCLENBQUNDLGNBQWMsQ0FBQ0csMENBQTBDO0FBaUJ2SixJQUFBLEFBQU1FLGtDQUFOLE1BQU1BLHdDQUF3Q1Q7SUFDNUMsWUFBb0JVLGVBQXVELENBQUc7UUFDNUUsTUFBTUMsVUFBVWYsWUFBZ0Y7WUFDOUZnQixlQUFlVjtZQUNmSSxpQ0FBaUNBO1lBQ2pDTyxvQ0FBb0NOO1FBQ3RDLEdBQUdHO1FBR0gsTUFBTUksZUFBZWIsdUJBQXVCYyxjQUFjLENBQUVsQixrQkFBa0JtQix1QkFBdUIsRUFBRTtZQUNyR0MscUJBQXFCTixRQUFRTCwrQkFBK0I7WUFDNURZLHlCQUF5QlAsUUFBUUUsa0NBQWtDO1FBQ3JFO1FBRUEsS0FBSyxDQUFFRixRQUFRQyxhQUFhLEVBQUU7WUFBRUU7U0FBYyxFQUFFSDtJQUNsRDtBQUNGO0FBRUFiLFlBQVlxQixRQUFRLENBQUUsbUNBQW1DVjtBQUN6RCxlQUFlQSxnQ0FBZ0MifQ==