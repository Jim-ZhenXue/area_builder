// Copyright 2017-2024, University of Colorado Boulder
/**
 * LetterKeyNode is a TextKeyNode with layout and spacing defaults that look best for a single letter. A letter key is
 * square and that looks best for a single character.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */ import optionize from '../../../phet-core/js/optionize.js';
import sceneryPhet from '../sceneryPhet.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
import TextKeyNode from './TextKeyNode.js';
let LetterKeyNode = class LetterKeyNode extends TextKeyNode {
    //-------------------------------------------------------------------------------------------------
    // Static factory methods for specific letter key strings.
    //-------------------------------------------------------------------------------------------------
    static a(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.aStringProperty, providedOptions);
    }
    static c(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.cStringProperty, providedOptions);
    }
    static d(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.dStringProperty, providedOptions);
    }
    static l(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.lStringProperty, providedOptions);
    }
    static r(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.rStringProperty, providedOptions);
    }
    static s(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.sStringProperty, providedOptions);
    }
    static w(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.wStringProperty, providedOptions);
    }
    static one(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.oneStringProperty, providedOptions);
    }
    static two(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.twoStringProperty, providedOptions);
    }
    static three(providedOptions) {
        return new LetterKeyNode(SceneryPhetStrings.key.threeStringProperty, providedOptions);
    }
    constructor(letter, providedOptions){
        const options = optionize()({
            xPadding: 5,
            forceSquareKey: true
        }, providedOptions);
        super(letter, options);
    }
};
export { LetterKeyNode as default };
sceneryPhet.register('LetterKeyNode', LetterKeyNode);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9rZXlib2FyZC9MZXR0ZXJLZXlOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIExldHRlcktleU5vZGUgaXMgYSBUZXh0S2V5Tm9kZSB3aXRoIGxheW91dCBhbmQgc3BhY2luZyBkZWZhdWx0cyB0aGF0IGxvb2sgYmVzdCBmb3IgYSBzaW5nbGUgbGV0dGVyLiBBIGxldHRlciBrZXkgaXNcbiAqIHNxdWFyZSBhbmQgdGhhdCBsb29rcyBiZXN0IGZvciBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gKlxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vc2NlbmVyeVBoZXQuanMnO1xuaW1wb3J0IFNjZW5lcnlQaGV0U3RyaW5ncyBmcm9tICcuLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xuaW1wb3J0IEtleU5vZGUgZnJvbSAnLi9LZXlOb2RlLmpzJztcbmltcG9ydCBUZXh0S2V5Tm9kZSwgeyBUZXh0S2V5Tm9kZU9wdGlvbnMgfSBmcm9tICcuL1RleHRLZXlOb2RlLmpzJztcblxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XG5cbmV4cG9ydCB0eXBlIExldHRlcktleU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFRleHRLZXlOb2RlT3B0aW9ucywgJ2ZvcmNlU3F1YXJlS2V5Jz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExldHRlcktleU5vZGUgZXh0ZW5kcyBUZXh0S2V5Tm9kZSB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsZXR0ZXI6IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4sIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8TGV0dGVyS2V5Tm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBUZXh0S2V5Tm9kZU9wdGlvbnM+KCkoIHtcbiAgICAgIHhQYWRkaW5nOiA1LFxuICAgICAgZm9yY2VTcXVhcmVLZXk6IHRydWVcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIHN1cGVyKCBsZXR0ZXIsIG9wdGlvbnMgKTtcbiAgfVxuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTdGF0aWMgZmFjdG9yeSBtZXRob2RzIGZvciBzcGVjaWZpYyBsZXR0ZXIga2V5IHN0cmluZ3MuXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHB1YmxpYyBzdGF0aWMgYSggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LmFTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGMoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xuICAgIHJldHVybiBuZXcgTGV0dGVyS2V5Tm9kZSggU2NlbmVyeVBoZXRTdHJpbmdzLmtleS5jU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBkKCBwcm92aWRlZE9wdGlvbnM/OiBMZXR0ZXJLZXlOb2RlT3B0aW9ucyApOiBLZXlOb2RlIHtcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkuZFN0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbCggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LmxTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHIoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xuICAgIHJldHVybiBuZXcgTGV0dGVyS2V5Tm9kZSggU2NlbmVyeVBoZXRTdHJpbmdzLmtleS5yU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzKCBwcm92aWRlZE9wdGlvbnM/OiBMZXR0ZXJLZXlOb2RlT3B0aW9ucyApOiBLZXlOb2RlIHtcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkuc1N0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdyggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LndTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG9uZSggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5Lm9uZVN0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdHdvKCBwcm92aWRlZE9wdGlvbnM/OiBMZXR0ZXJLZXlOb2RlT3B0aW9ucyApOiBLZXlOb2RlIHtcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkudHdvU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB0aHJlZSggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LnRocmVlU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xuICB9XG59XG5cbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnTGV0dGVyS2V5Tm9kZScsIExldHRlcktleU5vZGUgKTsiXSwibmFtZXMiOlsib3B0aW9uaXplIiwic2NlbmVyeVBoZXQiLCJTY2VuZXJ5UGhldFN0cmluZ3MiLCJUZXh0S2V5Tm9kZSIsIkxldHRlcktleU5vZGUiLCJhIiwicHJvdmlkZWRPcHRpb25zIiwia2V5IiwiYVN0cmluZ1Byb3BlcnR5IiwiYyIsImNTdHJpbmdQcm9wZXJ0eSIsImQiLCJkU3RyaW5nUHJvcGVydHkiLCJsIiwibFN0cmluZ1Byb3BlcnR5IiwiciIsInJTdHJpbmdQcm9wZXJ0eSIsInMiLCJzU3RyaW5nUHJvcGVydHkiLCJ3Iiwid1N0cmluZ1Byb3BlcnR5Iiwib25lIiwib25lU3RyaW5nUHJvcGVydHkiLCJ0d28iLCJ0d29TdHJpbmdQcm9wZXJ0eSIsInRocmVlIiwidGhyZWVTdHJpbmdQcm9wZXJ0eSIsImxldHRlciIsIm9wdGlvbnMiLCJ4UGFkZGluZyIsImZvcmNlU3F1YXJlS2V5IiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7Q0FLQyxHQUdELE9BQU9BLGVBQXFDLHFDQUFxQztBQUVqRixPQUFPQyxpQkFBaUIsb0JBQW9CO0FBQzVDLE9BQU9DLHdCQUF3QiwyQkFBMkI7QUFFMUQsT0FBT0MsaUJBQXlDLG1CQUFtQjtBQU1wRCxJQUFBLEFBQU1DLGdCQUFOLE1BQU1BLHNCQUFzQkQ7SUFXekMsbUdBQW1HO0lBQ25HLDBEQUEwRDtJQUMxRCxtR0FBbUc7SUFFbkcsT0FBY0UsRUFBR0MsZUFBc0MsRUFBWTtRQUNqRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDQyxlQUFlLEVBQUVGO0lBQ3BFO0lBRUEsT0FBY0csRUFBR0gsZUFBc0MsRUFBWTtRQUNqRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDRyxlQUFlLEVBQUVKO0lBQ3BFO0lBRUEsT0FBY0ssRUFBR0wsZUFBc0MsRUFBWTtRQUNqRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDSyxlQUFlLEVBQUVOO0lBQ3BFO0lBRUEsT0FBY08sRUFBR1AsZUFBc0MsRUFBWTtRQUNqRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDTyxlQUFlLEVBQUVSO0lBQ3BFO0lBRUEsT0FBY1MsRUFBR1QsZUFBc0MsRUFBWTtRQUNqRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDUyxlQUFlLEVBQUVWO0lBQ3BFO0lBRUEsT0FBY1csRUFBR1gsZUFBc0MsRUFBWTtRQUNqRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDVyxlQUFlLEVBQUVaO0lBQ3BFO0lBRUEsT0FBY2EsRUFBR2IsZUFBc0MsRUFBWTtRQUNqRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDYSxlQUFlLEVBQUVkO0lBQ3BFO0lBRUEsT0FBY2UsSUFBS2YsZUFBc0MsRUFBWTtRQUNuRSxPQUFPLElBQUlGLGNBQWVGLG1CQUFtQkssR0FBRyxDQUFDZSxpQkFBaUIsRUFBRWhCO0lBQ3RFO0lBRUEsT0FBY2lCLElBQUtqQixlQUFzQyxFQUFZO1FBQ25FLE9BQU8sSUFBSUYsY0FBZUYsbUJBQW1CSyxHQUFHLENBQUNpQixpQkFBaUIsRUFBRWxCO0lBQ3RFO0lBRUEsT0FBY21CLE1BQU9uQixlQUFzQyxFQUFZO1FBQ3JFLE9BQU8sSUFBSUYsY0FBZUYsbUJBQW1CSyxHQUFHLENBQUNtQixtQkFBbUIsRUFBRXBCO0lBQ3hFO0lBbkRBLFlBQW9CcUIsTUFBMEMsRUFBRXJCLGVBQXNDLENBQUc7UUFDdkcsTUFBTXNCLFVBQVU1QixZQUFvRTtZQUNsRjZCLFVBQVU7WUFDVkMsZ0JBQWdCO1FBQ2xCLEdBQUd4QjtRQUVILEtBQUssQ0FBRXFCLFFBQVFDO0lBQ2pCO0FBNkNGO0FBdERBLFNBQXFCeEIsMkJBc0RwQjtBQUVESCxZQUFZOEIsUUFBUSxDQUFFLGlCQUFpQjNCIn0=