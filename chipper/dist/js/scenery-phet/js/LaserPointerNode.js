// Copyright 2015-2024, University of Colorado Boulder
/**
 * A laser pointer, with optional on/off button (toggle or momentary).
 * Default orientation is pointing to the right. Origin is at right center (the edge of the output nozzle).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */ import Dimension2 from '../../dot/js/Dimension2.js';
import Utils from '../../dot/js/Utils.js';
import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import merge from '../../phet-core/js/merge.js';
import { combineOptions, optionize3 } from '../../phet-core/js/optionize.js';
import { LinearGradient, Node, ParallelDOM, Rectangle } from '../../scenery/js/imports.js';
import RoundMomentaryButton from '../../sun/js/buttons/RoundMomentaryButton.js';
import RoundStickyToggleButton from '../../sun/js/buttons/RoundStickyToggleButton.js';
import Tandem from '../../tandem/js/Tandem.js';
import sceneryPhet from './sceneryPhet.js';
import ShadedSphereNode from './ShadedSphereNode.js';
const DEFAULT_OPTIONS = {
    // nozzle and body options
    bodySize: new Dimension2(110, 78),
    nozzleSize: new Dimension2(20, 60),
    topColor: 'rgb( 170, 170, 170 )',
    bottomColor: 'rgb( 40, 40, 40 )',
    highlightColor: 'rgb( 245, 245, 245 )',
    highlightColorStop: 0.3,
    stroke: 'black',
    lineWidth: 1,
    cornerRadius: 5,
    // button options
    hasButton: true,
    buttonType: 'toggle',
    buttonOptions: {
        baseColor: 'red',
        radius: 22,
        xMargin: 10,
        yMargin: 10,
        touchAreaDilation: 15,
        mouseAreaDilation: 0,
        rotation: 0 // {number} use this to adjust lighting on the button
    },
    // where to position the button within the body
    getButtonLocation: (bodyNode)=>bodyNode.center,
    hasGlass: false,
    // Glass options, nested as discussed in https://github.com/phetsims/tasks/issues/730
    glassOptions: {
        mainColor: 'rgb(188,225,238)',
        highlightColor: 'white',
        shadowColor: 'white',
        stroke: 'black',
        heightProportion: 0.7,
        proportionStickingOut: 0.5
    },
    tandem: Tandem.REQUIRED,
    tandemNameSuffix: [
        'LaserPointerNode',
        'LightNode'
    ]
};
assert && Object.freeze(DEFAULT_OPTIONS);
let LaserPointerNode = class LaserPointerNode extends Node {
    get enabled() {
        return this.isEnabled();
    }
    set enabled(value) {
        this.setEnabled(value);
    }
    dispose() {
        this.disposeLaserPointerNode();
        super.dispose();
    }
    /**
   * @param onProperty - is the laser on?
   * @param providedOptions
   */ constructor(onProperty, providedOptions){
        var _window_phet_chipper_queryParameters, _window_phet_chipper, _window_phet;
        const options = optionize3()({}, DEFAULT_OPTIONS, providedOptions);
        assert && assert(options.highlightColorStop > 0 && options.highlightColorStop < 1);
        assert && assert(options.glassOptions.heightProportion >= 0 && options.glassOptions.heightProportion <= 1);
        assert && assert(options.glassOptions.proportionStickingOut >= 0 && options.glassOptions.proportionStickingOut <= 1);
        const children = [];
        // the narrow part that the light will come out of
        const nozzleNode = new Rectangle(0, 0, options.nozzleSize.width + options.cornerRadius, options.nozzleSize.height, {
            cornerRadius: options.cornerRadius,
            fill: new LinearGradient(0, 0, 0, options.nozzleSize.height).addColorStop(0, options.topColor).addColorStop(options.highlightColorStop, options.highlightColor).addColorStop(1, options.bottomColor),
            stroke: options.stroke,
            lineWidth: options.lineWidth,
            right: 0,
            centerY: 0
        });
        children.push(nozzleNode);
        // the main body of the laser pointer
        const bodyNode = new Rectangle(0, 0, options.bodySize.width, options.bodySize.height, {
            cornerRadius: options.cornerRadius,
            fill: new LinearGradient(0, 0, 0, options.bodySize.height).addColorStop(0, options.topColor).addColorStop(options.highlightColorStop, options.highlightColor).addColorStop(1, options.bottomColor),
            stroke: options.stroke,
            lineWidth: options.lineWidth,
            right: nozzleNode.left + options.cornerRadius,
            centerY: nozzleNode.centerY
        });
        children.push(bodyNode);
        // the optional button that controls whether the laser is on or off
        let onOffButton = null;
        if (options.hasButton) {
            const buttonOptions = combineOptions(options.buttonOptions, {
                center: options.getButtonLocation(bodyNode),
                tandem: options.tandem.createTandem('button')
            });
            onOffButton = options.buttonType === 'toggle' ? new RoundStickyToggleButton(onProperty, false, true, buttonOptions) : new RoundMomentaryButton(onProperty, false, true, buttonOptions);
            children.push(onOffButton);
        }
        // optional glass (lens)
        if (options.hasGlass) {
            const glassDiameter = options.nozzleSize.height * options.glassOptions.heightProportion;
            const glassOptions = merge({}, options.glassOptions, {
                // The origin is at the output point of the nozzle, translate accordingly
                centerX: Utils.linear(0, 1, -glassDiameter / 2, 0, options.glassOptions.proportionStickingOut),
                // Center vertically
                centerY: 0
            });
            const glassNode = new ShadedSphereNode(glassDiameter, glassOptions);
            // Glass is behind everything else.
            children.unshift(glassNode);
        }
        // add any children specified by the client
        options.children = children.concat(options.children || []);
        super(options), // Read-only access to see if the pointer is over the button specifically, ok to add listeners, but do not mutate.
        this.onOffButton = null;
        if (onOffButton) {
            this.onOffButton = onOffButton;
            ParallelDOM.forwardAccessibleName(this, onOffButton);
            ParallelDOM.forwardHelpText(this, onOffButton);
        }
        this.disposeLaserPointerNode = ()=>{
            onOffButton && onOffButton.dispose();
        };
        // support for binder documentation, stripped out in builds and only runs when ?binder is specified
        assert && ((_window_phet = window.phet) == null ? void 0 : (_window_phet_chipper = _window_phet.chipper) == null ? void 0 : (_window_phet_chipper_queryParameters = _window_phet_chipper.queryParameters) == null ? void 0 : _window_phet_chipper_queryParameters.binder) && InstanceRegistry.registerDataURL('scenery-phet', 'LaserPointerNode', this);
    }
};
LaserPointerNode.DEFAULT_LASER_NODE_OPTIONS = DEFAULT_OPTIONS;
export { LaserPointerNode as default };
sceneryPhet.register('LaserPointerNode', LaserPointerNode);

//# sourceMappingURL=data:application/json;base64,