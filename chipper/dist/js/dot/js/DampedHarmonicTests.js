// Copyright 2017-2021, University of Colorado Boulder
/**
 * Bounds2 tests
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */ import DampedHarmonic from './DampedHarmonic.js';
QUnit.module('DampedHarmonic');
function approxEquals(assert, a, b, msg) {
    assert.ok(Math.abs(a - b) < 1e-4, `${msg}: ${a} ~= ${b}`);
}
function estimateDerivative(harmonic, t) {
    return (harmonic.getValue(t + 1e-5) - harmonic.getValue(t - 1e-5)) / 2e-5;
}
function runHarmonic(a, b, c, initialValue, initialDerivative, assert) {
    const harmonic = new DampedHarmonic(a, b, c, initialValue, initialDerivative);
    approxEquals(assert, harmonic.getValue(0), initialValue, 'Initial value');
    approxEquals(assert, harmonic.getDerivative(0), initialDerivative, 'Initial derivative');
    approxEquals(assert, harmonic.getDerivative(0), estimateDerivative(harmonic, 0), 'Derivative at 0');
    approxEquals(assert, harmonic.getDerivative(0.35), estimateDerivative(harmonic, 0.35), 'Derivative at 0.35');
}
QUnit.test('Critically damped, no initial velocity', runHarmonic.bind(null, 1, 4, 4, 10, 0));
QUnit.test('Under damped, no initial velocity', runHarmonic.bind(null, 1, 2, 4, 10, 0));
QUnit.test('Over damped, no initial velocity', runHarmonic.bind(null, 1, 10, 4, 10, 0));
QUnit.test('Critically damped, no initial position', runHarmonic.bind(null, 1, 4, 4, 0, 10));
QUnit.test('Under damped, no initial position', runHarmonic.bind(null, 1, 2, 4, 0, 10));
QUnit.test('Over damped, no initial position', runHarmonic.bind(null, 1, 10, 4, 0, 10));
QUnit.test('Harmonic A', runHarmonic.bind(null, 1.2, 10.154, 4.2, 0.154, 1.515));
QUnit.test('Harmonic B', runHarmonic.bind(null, -5.2, -1.2, -103.2, 14.32, -17.5));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2RvdC9qcy9EYW1wZWRIYXJtb25pY1Rlc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEJvdW5kczIgdGVzdHNcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgRGFtcGVkSGFybW9uaWMgZnJvbSAnLi9EYW1wZWRIYXJtb25pYy5qcyc7XG5cblFVbml0Lm1vZHVsZSggJ0RhbXBlZEhhcm1vbmljJyApO1xuXG5mdW5jdGlvbiBhcHByb3hFcXVhbHMoIGFzc2VydCwgYSwgYiwgbXNnICkge1xuICBhc3NlcnQub2soIE1hdGguYWJzKCBhIC0gYiApIDwgMWUtNCwgYCR7bXNnfTogJHthfSB+PSAke2J9YCApO1xufVxuXG5mdW5jdGlvbiBlc3RpbWF0ZURlcml2YXRpdmUoIGhhcm1vbmljLCB0ICkge1xuICByZXR1cm4gKCBoYXJtb25pYy5nZXRWYWx1ZSggdCArIDFlLTUgKSAtIGhhcm1vbmljLmdldFZhbHVlKCB0IC0gMWUtNSApICkgLyAyZS01O1xufVxuXG5mdW5jdGlvbiBydW5IYXJtb25pYyggYSwgYiwgYywgaW5pdGlhbFZhbHVlLCBpbml0aWFsRGVyaXZhdGl2ZSwgYXNzZXJ0ICkge1xuICBjb25zdCBoYXJtb25pYyA9IG5ldyBEYW1wZWRIYXJtb25pYyggYSwgYiwgYywgaW5pdGlhbFZhbHVlLCBpbml0aWFsRGVyaXZhdGl2ZSApO1xuXG4gIGFwcHJveEVxdWFscyggYXNzZXJ0LCBoYXJtb25pYy5nZXRWYWx1ZSggMCApLCBpbml0aWFsVmFsdWUsICdJbml0aWFsIHZhbHVlJyApO1xuICBhcHByb3hFcXVhbHMoIGFzc2VydCwgaGFybW9uaWMuZ2V0RGVyaXZhdGl2ZSggMCApLCBpbml0aWFsRGVyaXZhdGl2ZSwgJ0luaXRpYWwgZGVyaXZhdGl2ZScgKTtcblxuICBhcHByb3hFcXVhbHMoIGFzc2VydCwgaGFybW9uaWMuZ2V0RGVyaXZhdGl2ZSggMCApLCBlc3RpbWF0ZURlcml2YXRpdmUoIGhhcm1vbmljLCAwICksICdEZXJpdmF0aXZlIGF0IDAnICk7XG4gIGFwcHJveEVxdWFscyggYXNzZXJ0LCBoYXJtb25pYy5nZXREZXJpdmF0aXZlKCAwLjM1ICksIGVzdGltYXRlRGVyaXZhdGl2ZSggaGFybW9uaWMsIDAuMzUgKSwgJ0Rlcml2YXRpdmUgYXQgMC4zNScgKTtcbn1cblxuUVVuaXQudGVzdCggJ0NyaXRpY2FsbHkgZGFtcGVkLCBubyBpbml0aWFsIHZlbG9jaXR5JywgcnVuSGFybW9uaWMuYmluZCggbnVsbCwgMSwgNCwgNCwgMTAsIDAgKSApO1xuUVVuaXQudGVzdCggJ1VuZGVyIGRhbXBlZCwgbm8gaW5pdGlhbCB2ZWxvY2l0eScsIHJ1bkhhcm1vbmljLmJpbmQoIG51bGwsIDEsIDIsIDQsIDEwLCAwICkgKTtcblFVbml0LnRlc3QoICdPdmVyIGRhbXBlZCwgbm8gaW5pdGlhbCB2ZWxvY2l0eScsIHJ1bkhhcm1vbmljLmJpbmQoIG51bGwsIDEsIDEwLCA0LCAxMCwgMCApICk7XG5cblFVbml0LnRlc3QoICdDcml0aWNhbGx5IGRhbXBlZCwgbm8gaW5pdGlhbCBwb3NpdGlvbicsIHJ1bkhhcm1vbmljLmJpbmQoIG51bGwsIDEsIDQsIDQsIDAsIDEwICkgKTtcblFVbml0LnRlc3QoICdVbmRlciBkYW1wZWQsIG5vIGluaXRpYWwgcG9zaXRpb24nLCBydW5IYXJtb25pYy5iaW5kKCBudWxsLCAxLCAyLCA0LCAwLCAxMCApICk7XG5RVW5pdC50ZXN0KCAnT3ZlciBkYW1wZWQsIG5vIGluaXRpYWwgcG9zaXRpb24nLCBydW5IYXJtb25pYy5iaW5kKCBudWxsLCAxLCAxMCwgNCwgMCwgMTAgKSApO1xuXG5RVW5pdC50ZXN0KCAnSGFybW9uaWMgQScsIHJ1bkhhcm1vbmljLmJpbmQoIG51bGwsIDEuMiwgMTAuMTU0LCA0LjIsIDAuMTU0LCAxLjUxNSApICk7XG5RVW5pdC50ZXN0KCAnSGFybW9uaWMgQicsIHJ1bkhhcm1vbmljLmJpbmQoIG51bGwsIC01LjIsIC0xLjIsIC0xMDMuMiwgMTQuMzIsIC0xNy41ICkgKTsiXSwibmFtZXMiOlsiRGFtcGVkSGFybW9uaWMiLCJRVW5pdCIsIm1vZHVsZSIsImFwcHJveEVxdWFscyIsImFzc2VydCIsImEiLCJiIiwibXNnIiwib2siLCJNYXRoIiwiYWJzIiwiZXN0aW1hdGVEZXJpdmF0aXZlIiwiaGFybW9uaWMiLCJ0IiwiZ2V0VmFsdWUiLCJydW5IYXJtb25pYyIsImMiLCJpbml0aWFsVmFsdWUiLCJpbml0aWFsRGVyaXZhdGl2ZSIsImdldERlcml2YXRpdmUiLCJ0ZXN0IiwiYmluZCJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7OztDQUtDLEdBRUQsT0FBT0Esb0JBQW9CLHNCQUFzQjtBQUVqREMsTUFBTUMsTUFBTSxDQUFFO0FBRWQsU0FBU0MsYUFBY0MsTUFBTSxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsR0FBRztJQUN0Q0gsT0FBT0ksRUFBRSxDQUFFQyxLQUFLQyxHQUFHLENBQUVMLElBQUlDLEtBQU0sTUFBTSxHQUFHQyxJQUFJLEVBQUUsRUFBRUYsRUFBRSxJQUFJLEVBQUVDLEdBQUc7QUFDN0Q7QUFFQSxTQUFTSyxtQkFBb0JDLFFBQVEsRUFBRUMsQ0FBQztJQUN0QyxPQUFPLEFBQUVELENBQUFBLFNBQVNFLFFBQVEsQ0FBRUQsSUFBSSxRQUFTRCxTQUFTRSxRQUFRLENBQUVELElBQUksS0FBSyxJQUFNO0FBQzdFO0FBRUEsU0FBU0UsWUFBYVYsQ0FBQyxFQUFFQyxDQUFDLEVBQUVVLENBQUMsRUFBRUMsWUFBWSxFQUFFQyxpQkFBaUIsRUFBRWQsTUFBTTtJQUNwRSxNQUFNUSxXQUFXLElBQUlaLGVBQWdCSyxHQUFHQyxHQUFHVSxHQUFHQyxjQUFjQztJQUU1RGYsYUFBY0MsUUFBUVEsU0FBU0UsUUFBUSxDQUFFLElBQUtHLGNBQWM7SUFDNURkLGFBQWNDLFFBQVFRLFNBQVNPLGFBQWEsQ0FBRSxJQUFLRCxtQkFBbUI7SUFFdEVmLGFBQWNDLFFBQVFRLFNBQVNPLGFBQWEsQ0FBRSxJQUFLUixtQkFBb0JDLFVBQVUsSUFBSztJQUN0RlQsYUFBY0MsUUFBUVEsU0FBU08sYUFBYSxDQUFFLE9BQVFSLG1CQUFvQkMsVUFBVSxPQUFRO0FBQzlGO0FBRUFYLE1BQU1tQixJQUFJLENBQUUsMENBQTBDTCxZQUFZTSxJQUFJLENBQUUsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJO0FBQzNGcEIsTUFBTW1CLElBQUksQ0FBRSxxQ0FBcUNMLFlBQVlNLElBQUksQ0FBRSxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUk7QUFDdEZwQixNQUFNbUIsSUFBSSxDQUFFLG9DQUFvQ0wsWUFBWU0sSUFBSSxDQUFFLE1BQU0sR0FBRyxJQUFJLEdBQUcsSUFBSTtBQUV0RnBCLE1BQU1tQixJQUFJLENBQUUsMENBQTBDTCxZQUFZTSxJQUFJLENBQUUsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQzFGcEIsTUFBTW1CLElBQUksQ0FBRSxxQ0FBcUNMLFlBQVlNLElBQUksQ0FBRSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUc7QUFDckZwQixNQUFNbUIsSUFBSSxDQUFFLG9DQUFvQ0wsWUFBWU0sSUFBSSxDQUFFLE1BQU0sR0FBRyxJQUFJLEdBQUcsR0FBRztBQUVyRnBCLE1BQU1tQixJQUFJLENBQUUsY0FBY0wsWUFBWU0sSUFBSSxDQUFFLE1BQU0sS0FBSyxRQUFRLEtBQUssT0FBTztBQUMzRXBCLE1BQU1tQixJQUFJLENBQUUsY0FBY0wsWUFBWU0sSUFBSSxDQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sT0FBTyxDQUFDIn0=