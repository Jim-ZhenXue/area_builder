// Copyright 2014-2022, University of Colorado Boulder
/**
 * The 'Explore' screen in the Area Builder simulation. Conforms to the contract specified in joist/Screen.
 *
 * @author John Blanco
 */ import Property from '../../../axon/js/Property.js';
import Screen from '../../../joist/js/Screen.js';
import ScreenIcon from '../../../joist/js/ScreenIcon.js';
import { Image } from '../../../scenery/js/imports.js';
import exploreIcon_png from '../../images/exploreIcon_png.js';
import areaBuilder from '../areaBuilder.js';
import AreaBuilderStrings from '../AreaBuilderStrings.js';
import AreaBuilderSharedConstants from '../common/AreaBuilderSharedConstants.js';
import AreaBuilderIconFactory from '../common/view/AreaBuilderIconFactory.js';
import AreaBuilderExploreModel from './model/AreaBuilderExploreModel.js';
import AreaBuilderExploreView from './view/AreaBuilderExploreView.js';
let AreaBuilderExploreScreen = class AreaBuilderExploreScreen extends Screen {
    /**
   * @param {Tandem} tandem
   */ constructor(tandem){
        const options = {
            name: AreaBuilderStrings.exploreStringProperty,
            backgroundColorProperty: new Property(AreaBuilderSharedConstants.BACKGROUND_COLOR),
            homeScreenIcon: new ScreenIcon(new Image(exploreIcon_png), {
                maxIconWidthProportion: 1,
                maxIconHeightProportion: 1
            }),
            navigationBarIcon: AreaBuilderIconFactory.createExploreScreenNavBarIcon(),
            tandem: tandem
        };
        super(()=>new AreaBuilderExploreModel(), (model)=>new AreaBuilderExploreView(model), options);
    }
};
areaBuilder.register('AreaBuilderExploreScreen', AreaBuilderExploreScreen);
export default AreaBuilderExploreScreen;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2FyZWEtYnVpbGRlci9qcy9leHBsb3JlL0FyZWFCdWlsZGVyRXhwbG9yZVNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBUaGUgJ0V4cGxvcmUnIHNjcmVlbiBpbiB0aGUgQXJlYSBCdWlsZGVyIHNpbXVsYXRpb24uIENvbmZvcm1zIHRvIHRoZSBjb250cmFjdCBzcGVjaWZpZWQgaW4gam9pc3QvU2NyZWVuLlxuICpcbiAqIEBhdXRob3IgSm9obiBCbGFuY29cbiAqL1xuXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XG5pbXBvcnQgU2NyZWVuIGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlbi5qcyc7XG5pbXBvcnQgU2NyZWVuSWNvbiBmcm9tICcuLi8uLi8uLi9qb2lzdC9qcy9TY3JlZW5JY29uLmpzJztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBleHBsb3JlSWNvbl9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL2V4cGxvcmVJY29uX3BuZy5qcyc7XG5pbXBvcnQgYXJlYUJ1aWxkZXIgZnJvbSAnLi4vYXJlYUJ1aWxkZXIuanMnO1xuaW1wb3J0IEFyZWFCdWlsZGVyU3RyaW5ncyBmcm9tICcuLi9BcmVhQnVpbGRlclN0cmluZ3MuanMnO1xuaW1wb3J0IEFyZWFCdWlsZGVyU2hhcmVkQ29uc3RhbnRzIGZyb20gJy4uL2NvbW1vbi9BcmVhQnVpbGRlclNoYXJlZENvbnN0YW50cy5qcyc7XG5pbXBvcnQgQXJlYUJ1aWxkZXJJY29uRmFjdG9yeSBmcm9tICcuLi9jb21tb24vdmlldy9BcmVhQnVpbGRlckljb25GYWN0b3J5LmpzJztcbmltcG9ydCBBcmVhQnVpbGRlckV4cGxvcmVNb2RlbCBmcm9tICcuL21vZGVsL0FyZWFCdWlsZGVyRXhwbG9yZU1vZGVsLmpzJztcbmltcG9ydCBBcmVhQnVpbGRlckV4cGxvcmVWaWV3IGZyb20gJy4vdmlldy9BcmVhQnVpbGRlckV4cGxvcmVWaWV3LmpzJztcblxuXG5jbGFzcyBBcmVhQnVpbGRlckV4cGxvcmVTY3JlZW4gZXh0ZW5kcyBTY3JlZW4ge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RhbmRlbX0gdGFuZGVtXG4gICAqL1xuICBjb25zdHJ1Y3RvciggdGFuZGVtICkge1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG5hbWU6IEFyZWFCdWlsZGVyU3RyaW5ncy5leHBsb3JlU3RyaW5nUHJvcGVydHksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBBcmVhQnVpbGRlclNoYXJlZENvbnN0YW50cy5CQUNLR1JPVU5EX0NPTE9SICksXG4gICAgICBob21lU2NyZWVuSWNvbjogbmV3IFNjcmVlbkljb24oIG5ldyBJbWFnZSggZXhwbG9yZUljb25fcG5nICksIHtcbiAgICAgICAgbWF4SWNvbldpZHRoUHJvcG9ydGlvbjogMSxcbiAgICAgICAgbWF4SWNvbkhlaWdodFByb3BvcnRpb246IDFcbiAgICAgIH0gKSxcbiAgICAgIG5hdmlnYXRpb25CYXJJY29uOiBBcmVhQnVpbGRlckljb25GYWN0b3J5LmNyZWF0ZUV4cGxvcmVTY3JlZW5OYXZCYXJJY29uKCksXG4gICAgICB0YW5kZW06IHRhbmRlbVxuICAgIH07XG5cbiAgICBzdXBlcihcbiAgICAgICgpID0+IG5ldyBBcmVhQnVpbGRlckV4cGxvcmVNb2RlbCgpLFxuICAgICAgbW9kZWwgPT4gbmV3IEFyZWFCdWlsZGVyRXhwbG9yZVZpZXcoIG1vZGVsICksXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxufVxuXG5hcmVhQnVpbGRlci5yZWdpc3RlciggJ0FyZWFCdWlsZGVyRXhwbG9yZVNjcmVlbicsIEFyZWFCdWlsZGVyRXhwbG9yZVNjcmVlbiApO1xuZXhwb3J0IGRlZmF1bHQgQXJlYUJ1aWxkZXJFeHBsb3JlU2NyZWVuOyJdLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNjcmVlbkljb24iLCJJbWFnZSIsImV4cGxvcmVJY29uX3BuZyIsImFyZWFCdWlsZGVyIiwiQXJlYUJ1aWxkZXJTdHJpbmdzIiwiQXJlYUJ1aWxkZXJTaGFyZWRDb25zdGFudHMiLCJBcmVhQnVpbGRlckljb25GYWN0b3J5IiwiQXJlYUJ1aWxkZXJFeHBsb3JlTW9kZWwiLCJBcmVhQnVpbGRlckV4cGxvcmVWaWV3IiwiQXJlYUJ1aWxkZXJFeHBsb3JlU2NyZWVuIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJvcHRpb25zIiwibmFtZSIsImV4cGxvcmVTdHJpbmdQcm9wZXJ0eSIsImJhY2tncm91bmRDb2xvclByb3BlcnR5IiwiQkFDS0dST1VORF9DT0xPUiIsImhvbWVTY3JlZW5JY29uIiwibWF4SWNvbldpZHRoUHJvcG9ydGlvbiIsIm1heEljb25IZWlnaHRQcm9wb3J0aW9uIiwibmF2aWdhdGlvbkJhckljb24iLCJjcmVhdGVFeHBsb3JlU2NyZWVuTmF2QmFySWNvbiIsIm1vZGVsIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBRUQsT0FBT0EsY0FBYywrQkFBK0I7QUFDcEQsT0FBT0MsWUFBWSw4QkFBOEI7QUFDakQsT0FBT0MsZ0JBQWdCLGtDQUFrQztBQUN6RCxTQUFTQyxLQUFLLFFBQVEsaUNBQWlDO0FBQ3ZELE9BQU9DLHFCQUFxQixrQ0FBa0M7QUFDOUQsT0FBT0MsaUJBQWlCLG9CQUFvQjtBQUM1QyxPQUFPQyx3QkFBd0IsMkJBQTJCO0FBQzFELE9BQU9DLGdDQUFnQywwQ0FBMEM7QUFDakYsT0FBT0MsNEJBQTRCLDJDQUEyQztBQUM5RSxPQUFPQyw2QkFBNkIscUNBQXFDO0FBQ3pFLE9BQU9DLDRCQUE0QixtQ0FBbUM7QUFHdEUsSUFBQSxBQUFNQywyQkFBTixNQUFNQSxpQ0FBaUNWO0lBRXJDOztHQUVDLEdBQ0RXLFlBQWFDLE1BQU0sQ0FBRztRQUVwQixNQUFNQyxVQUFVO1lBQ2RDLE1BQU1ULG1CQUFtQlUscUJBQXFCO1lBQzlDQyx5QkFBeUIsSUFBSWpCLFNBQVVPLDJCQUEyQlcsZ0JBQWdCO1lBQ2xGQyxnQkFBZ0IsSUFBSWpCLFdBQVksSUFBSUMsTUFBT0Msa0JBQW1CO2dCQUM1RGdCLHdCQUF3QjtnQkFDeEJDLHlCQUF5QjtZQUMzQjtZQUNBQyxtQkFBbUJkLHVCQUF1QmUsNkJBQTZCO1lBQ3ZFVixRQUFRQTtRQUNWO1FBRUEsS0FBSyxDQUNILElBQU0sSUFBSUosMkJBQ1ZlLENBQUFBLFFBQVMsSUFBSWQsdUJBQXdCYyxRQUNyQ1Y7SUFFSjtBQUNGO0FBRUFULFlBQVlvQixRQUFRLENBQUUsNEJBQTRCZDtBQUNsRCxlQUFlQSx5QkFBeUIifQ==