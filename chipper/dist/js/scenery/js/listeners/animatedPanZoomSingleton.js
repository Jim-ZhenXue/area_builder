// Copyright 2021-2023, University of Colorado Boulder
/**
 * A singleton with an instance of an AnimatedPanZoomListener that can be easily accessed for an application.
 * The AnimatedPanZoomListener adds global key press listeners and it is reasonable that you would only want
 * one for a document/application.
 *
 * @author Jesse Greenberg
 */ import { AnimatedPanZoomListener, scenery } from '../imports.js';
let AnimatedPanZoomSingleton = class AnimatedPanZoomSingleton {
    initialize(targetNode, options) {
        this._listener = new AnimatedPanZoomListener(targetNode, options);
    }
    dispose() {
        assert && assert(this._listener, 'No listener, call initialize first.');
        this._listener.dispose();
        this._listener = null;
    }
    /**
   * Returns the AnimatedPanZoomListener.
   */ get listener() {
        assert && assert(this._listener, 'No listener, call initialize first.');
        return this._listener;
    }
    /**
   * Returns true if the animatedPanZoomSingleton has been initialized.
   */ get initialized() {
        return !!this._listener;
    }
    constructor(){
        // A reference to the instance of the listener, null until initialized.
        this._listener = null;
    }
};
const animatedPanZoomSingleton = new AnimatedPanZoomSingleton();
scenery.register('animatedPanZoomSingleton', animatedPanZoomSingleton);
export default animatedPanZoomSingleton;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvbGlzdGVuZXJzL2FuaW1hdGVkUGFuWm9vbVNpbmdsZXRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBBIHNpbmdsZXRvbiB3aXRoIGFuIGluc3RhbmNlIG9mIGFuIEFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyIHRoYXQgY2FuIGJlIGVhc2lseSBhY2Nlc3NlZCBmb3IgYW4gYXBwbGljYXRpb24uXG4gKiBUaGUgQW5pbWF0ZWRQYW5ab29tTGlzdGVuZXIgYWRkcyBnbG9iYWwga2V5IHByZXNzIGxpc3RlbmVycyBhbmQgaXQgaXMgcmVhc29uYWJsZSB0aGF0IHlvdSB3b3VsZCBvbmx5IHdhbnRcbiAqIG9uZSBmb3IgYSBkb2N1bWVudC9hcHBsaWNhdGlvbi5cbiAqXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xuICovXG5cbmltcG9ydCB7IEFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyLCBOb2RlLCBQYW5ab29tTGlzdGVuZXJPcHRpb25zLCBzY2VuZXJ5IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XG5cbmNsYXNzIEFuaW1hdGVkUGFuWm9vbVNpbmdsZXRvbiB7XG5cbiAgLy8gQSByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIHRoZSBsaXN0ZW5lciwgbnVsbCB1bnRpbCBpbml0aWFsaXplZC5cbiAgcHJpdmF0ZSBfbGlzdGVuZXI6IEFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgcHVibGljIGluaXRpYWxpemUoIHRhcmdldE5vZGU6IE5vZGUsIG9wdGlvbnM/OiBQYW5ab29tTGlzdGVuZXJPcHRpb25zICk6IHZvaWQge1xuICAgIHRoaXMuX2xpc3RlbmVyID0gbmV3IEFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyKCB0YXJnZXROb2RlLCBvcHRpb25zICk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0aGlzLl9saXN0ZW5lciwgJ05vIGxpc3RlbmVyLCBjYWxsIGluaXRpYWxpemUgZmlyc3QuJyApO1xuICAgIHRoaXMuX2xpc3RlbmVyIS5kaXNwb3NlKCk7XG4gICAgdGhpcy5fbGlzdGVuZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyLlxuICAgKi9cbiAgcHVibGljIGdldCBsaXN0ZW5lcigpOiBBbmltYXRlZFBhblpvb21MaXN0ZW5lciB7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5fbGlzdGVuZXIsICdObyBsaXN0ZW5lciwgY2FsbCBpbml0aWFsaXplIGZpcnN0LicgKTtcbiAgICByZXR1cm4gdGhpcy5fbGlzdGVuZXIhO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICAgKi9cbiAgcHVibGljIGdldCBpbml0aWFsaXplZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLl9saXN0ZW5lcjtcbiAgfVxufVxuXG5jb25zdCBhbmltYXRlZFBhblpvb21TaW5nbGV0b24gPSBuZXcgQW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uKCk7XG5zY2VuZXJ5LnJlZ2lzdGVyKCAnYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uJywgYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uICk7XG5leHBvcnQgZGVmYXVsdCBhbmltYXRlZFBhblpvb21TaW5nbGV0b247Il0sIm5hbWVzIjpbIkFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyIiwic2NlbmVyeSIsIkFuaW1hdGVkUGFuWm9vbVNpbmdsZXRvbiIsImluaXRpYWxpemUiLCJ0YXJnZXROb2RlIiwib3B0aW9ucyIsIl9saXN0ZW5lciIsImRpc3Bvc2UiLCJhc3NlcnQiLCJsaXN0ZW5lciIsImluaXRpYWxpemVkIiwiYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7O0NBTUMsR0FFRCxTQUFTQSx1QkFBdUIsRUFBZ0NDLE9BQU8sUUFBUSxnQkFBZ0I7QUFFL0YsSUFBQSxBQUFNQywyQkFBTixNQUFNQTtJQUtHQyxXQUFZQyxVQUFnQixFQUFFQyxPQUFnQyxFQUFTO1FBQzVFLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUlOLHdCQUF5QkksWUFBWUM7SUFDNUQ7SUFFT0UsVUFBZ0I7UUFDckJDLFVBQVVBLE9BQVEsSUFBSSxDQUFDRixTQUFTLEVBQUU7UUFDbEMsSUFBSSxDQUFDQSxTQUFTLENBQUVDLE9BQU87UUFDdkIsSUFBSSxDQUFDRCxTQUFTLEdBQUc7SUFDbkI7SUFFQTs7R0FFQyxHQUNELElBQVdHLFdBQW9DO1FBQzdDRCxVQUFVQSxPQUFRLElBQUksQ0FBQ0YsU0FBUyxFQUFFO1FBQ2xDLE9BQU8sSUFBSSxDQUFDQSxTQUFTO0lBQ3ZCO0lBRUE7O0dBRUMsR0FDRCxJQUFXSSxjQUF1QjtRQUNoQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNKLFNBQVM7SUFDekI7O1FBMUJBLHVFQUF1RTthQUMvREEsWUFBNEM7O0FBMEJ0RDtBQUVBLE1BQU1LLDJCQUEyQixJQUFJVDtBQUNyQ0QsUUFBUVcsUUFBUSxDQUFFLDRCQUE0QkQ7QUFDOUMsZUFBZUEseUJBQXlCIn0=