// Copyright 2014-2024, University of Colorado Boulder
/**
 * Base type for gradients and patterns (and NOT the only type for fills/strokes)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import { scenery } from '../imports.js';
let globalId = 1;
let Paint = class Paint {
    /**
   * Sets how this paint (pattern/gradient) is transformed, compared with the local coordinate frame of where it is
   *
   * NOTE: This should only be used before the pattern/gradient is ever displayed.
   * TODO: Catch if this is violated? https://github.com/phetsims/scenery/issues/1581
   *
   * NOTE: The scale should be symmetric if it will be used as a stroke. It is difficult to set a different x and y scale
   * for canvas at the same time.
   */ setTransformMatrix(transformMatrix) {
        if (this.transformMatrix !== transformMatrix) {
            this.transformMatrix = transformMatrix;
        }
        return this;
    }
    /**
   * Returns a string form of this object
   */ toString() {
        return this.id;
    }
    constructor(){
        this.id = `paint${globalId++}`;
        this.transformMatrix = null;
    }
};
export { Paint as default };
// TODO: can we remove this in favor of type checks? https://github.com/phetsims/scenery/issues/1581
Paint.prototype.isPaint = true;
scenery.register('Paint', Paint);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvdXRpbC9QYWludC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBCYXNlIHR5cGUgZm9yIGdyYWRpZW50cyBhbmQgcGF0dGVybnMgKGFuZCBOT1QgdGhlIG9ubHkgdHlwZSBmb3IgZmlsbHMvc3Ryb2tlcylcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IE1hdHJpeDMgZnJvbSAnLi4vLi4vLi4vZG90L2pzL01hdHJpeDMuanMnO1xuaW1wb3J0IHsgc2NlbmVyeSwgU1ZHQmxvY2ssIFNWR0dyYWRpZW50LCBTVkdQYXR0ZXJuIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XG5cbmxldCBnbG9iYWxJZCA9IDE7XG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFBhaW50IHtcblxuICAvLyAoc2NlbmVyeS1pbnRlcm5hbClcbiAgcHVibGljIGlkOiBzdHJpbmc7XG5cbiAgLy8gKHNjZW5lcnktaW50ZXJuYWwpXG4gIHB1YmxpYyB0cmFuc2Zvcm1NYXRyaXg6IE1hdHJpeDMgfCBudWxsO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlkID0gYHBhaW50JHtnbG9iYWxJZCsrfWA7XG4gICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byBhIENhbnZhcyBjb250ZXh0J3MgZmlsbFN0eWxlIG9yIHN0cm9rZVN0eWxlLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldENhbnZhc1N0eWxlKCk6IHN0cmluZyB8IENhbnZhc0dyYWRpZW50IHwgQ2FudmFzUGF0dGVybjtcblxuICAvKipcbiAgICogU2V0cyBob3cgdGhpcyBwYWludCAocGF0dGVybi9ncmFkaWVudCkgaXMgdHJhbnNmb3JtZWQsIGNvbXBhcmVkIHdpdGggdGhlIGxvY2FsIGNvb3JkaW5hdGUgZnJhbWUgb2Ygd2hlcmUgaXQgaXNcbiAgICpcbiAgICogTk9URTogVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIGJlZm9yZSB0aGUgcGF0dGVybi9ncmFkaWVudCBpcyBldmVyIGRpc3BsYXllZC5cbiAgICogVE9ETzogQ2F0Y2ggaWYgdGhpcyBpcyB2aW9sYXRlZD8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnkvaXNzdWVzLzE1ODFcbiAgICpcbiAgICogTk9URTogVGhlIHNjYWxlIHNob3VsZCBiZSBzeW1tZXRyaWMgaWYgaXQgd2lsbCBiZSB1c2VkIGFzIGEgc3Ryb2tlLiBJdCBpcyBkaWZmaWN1bHQgdG8gc2V0IGEgZGlmZmVyZW50IHggYW5kIHkgc2NhbGVcbiAgICogZm9yIGNhbnZhcyBhdCB0aGUgc2FtZSB0aW1lLlxuICAgKi9cbiAgcHVibGljIHNldFRyYW5zZm9ybU1hdHJpeCggdHJhbnNmb3JtTWF0cml4OiBNYXRyaXgzICk6IHRoaXMge1xuICAgIGlmICggdGhpcy50cmFuc2Zvcm1NYXRyaXggIT09IHRyYW5zZm9ybU1hdHJpeCApIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gdHJhbnNmb3JtTWF0cml4O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIFNWRyBwYWludCBvYmplY3QgZm9yIGNyZWF0aW5nL3VwZGF0aW5nIHRoZSBTVkcgZXF1aXZhbGVudCBkZWZpbml0aW9uLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGNyZWF0ZVNWR1BhaW50KCBzdmdCbG9jazogU1ZHQmxvY2sgKTogU1ZHR3JhZGllbnQgfCBTVkdQYXR0ZXJuO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIGZvcm0gb2YgdGhpcyBvYmplY3RcbiAgICovXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG5cbiAgcHVibGljIGlzUGFpbnQhOiBib29sZWFuO1xufVxuXG4vLyBUT0RPOiBjYW4gd2UgcmVtb3ZlIHRoaXMgaW4gZmF2b3Igb2YgdHlwZSBjaGVja3M/IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy8xNTgxXG5QYWludC5wcm90b3R5cGUuaXNQYWludCA9IHRydWU7XG5cbnNjZW5lcnkucmVnaXN0ZXIoICdQYWludCcsIFBhaW50ICk7Il0sIm5hbWVzIjpbInNjZW5lcnkiLCJnbG9iYWxJZCIsIlBhaW50Iiwic2V0VHJhbnNmb3JtTWF0cml4IiwidHJhbnNmb3JtTWF0cml4IiwidG9TdHJpbmciLCJpZCIsInByb3RvdHlwZSIsImlzUGFpbnQiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7O0NBSUMsR0FHRCxTQUFTQSxPQUFPLFFBQTJDLGdCQUFnQjtBQUUzRSxJQUFJQyxXQUFXO0FBRUEsSUFBQSxBQUFlQyxRQUFmLE1BQWVBO0lBa0I1Qjs7Ozs7Ozs7R0FRQyxHQUNELEFBQU9DLG1CQUFvQkMsZUFBd0IsRUFBUztRQUMxRCxJQUFLLElBQUksQ0FBQ0EsZUFBZSxLQUFLQSxpQkFBa0I7WUFDOUMsSUFBSSxDQUFDQSxlQUFlLEdBQUdBO1FBQ3pCO1FBQ0EsT0FBTyxJQUFJO0lBQ2I7SUFPQTs7R0FFQyxHQUNELEFBQU9DLFdBQW1CO1FBQ3hCLE9BQU8sSUFBSSxDQUFDQyxFQUFFO0lBQ2hCO0lBcENBLGFBQXFCO1FBQ25CLElBQUksQ0FBQ0EsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFTCxZQUFZO1FBQzlCLElBQUksQ0FBQ0csZUFBZSxHQUFHO0lBQ3pCO0FBb0NGO0FBL0NBLFNBQThCRixtQkErQzdCO0FBRUQsb0dBQW9HO0FBQ3BHQSxNQUFNSyxTQUFTLENBQUNDLE9BQU8sR0FBRztBQUUxQlIsUUFBUVMsUUFBUSxDQUFFLFNBQVNQIn0=