// Copyright 2018-2021, University of Colorado Boulder
/**
 * Utilities for full-screen support
 * Used to live at '/joist/js/FullScreen'. Moved to '/scenery/js/util/FullScreen' on 4/10/2018
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import Property from '../../../axon/js/Property.js';
import detectPrefix from '../../../phet-core/js/detectPrefix.js';
import detectPrefixEvent from '../../../phet-core/js/detectPrefixEvent.js';
import platform from '../../../phet-core/js/platform.js';
import { scenery } from '../imports.js';
// get prefixed (and properly capitalized) property names
const exitFullscreenPropertyName = detectPrefix(document, 'exitFullscreen') || detectPrefix(document, 'cancelFullScreen'); // Firefox
const fullscreenElementPropertyName = detectPrefix(document, 'fullscreenElement') || detectPrefix(document, 'fullScreenElement'); // Firefox capitalization
const fullscreenEnabledPropertyName = detectPrefix(document, 'fullscreenEnabled') || detectPrefix(document, 'fullScreenEnabled'); // Firefox capitalization
let fullscreenChangeEvent = detectPrefixEvent(document, 'fullscreenchange');
// required capitalization workaround for now
if (fullscreenChangeEvent === 'msfullscreenchange') {
    fullscreenChangeEvent = 'MSFullscreenChange';
}
const FullScreen = {
    // @public
    isFullScreen () {
        return !!document[fullscreenElementPropertyName];
    },
    // @public
    isFullScreenEnabled () {
        return document[fullscreenEnabledPropertyName] && !platform.safari7;
    },
    /**
   * @public
   * @param {Display} display
   */ enterFullScreen (display) {
        const requestFullscreenPropertyName = detectPrefix(document.body, 'requestFullscreen') || detectPrefix(document.body, 'requestFullScreen'); // Firefox capitalization
        display.domElement[requestFullscreenPropertyName] && display.domElement[requestFullscreenPropertyName]();
    },
    // @public
    exitFullScreen () {
        document[exitFullscreenPropertyName] && document[exitFullscreenPropertyName]();
    },
    /**
   * @public
   * @param {Display} display
   */ toggleFullScreen (display) {
        if (FullScreen.isFullScreen()) {
            FullScreen.exitFullScreen();
        } else {
            FullScreen.enterFullScreen(display);
        }
    },
    isFullScreenProperty: new Property(false)
};
// update isFullScreenProperty on potential changes
document.addEventListener(fullscreenChangeEvent, (evt)=>{
    FullScreen.isFullScreenProperty.set(FullScreen.isFullScreen());
});
scenery.register('FullScreen', FullScreen);
export default FullScreen;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvdXRpbC9GdWxsU2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFV0aWxpdGllcyBmb3IgZnVsbC1zY3JlZW4gc3VwcG9ydFxuICogVXNlZCB0byBsaXZlIGF0ICcvam9pc3QvanMvRnVsbFNjcmVlbicuIE1vdmVkIHRvICcvc2NlbmVyeS9qcy91dGlsL0Z1bGxTY3JlZW4nIG9uIDQvMTAvMjAxOFxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XG5pbXBvcnQgZGV0ZWN0UHJlZml4IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9kZXRlY3RQcmVmaXguanMnO1xuaW1wb3J0IGRldGVjdFByZWZpeEV2ZW50IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9kZXRlY3RQcmVmaXhFdmVudC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3BsYXRmb3JtLmpzJztcbmltcG9ydCB7IHNjZW5lcnkgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcblxuLy8gZ2V0IHByZWZpeGVkIChhbmQgcHJvcGVybHkgY2FwaXRhbGl6ZWQpIHByb3BlcnR5IG5hbWVzXG5jb25zdCBleGl0RnVsbHNjcmVlblByb3BlcnR5TmFtZSA9IGRldGVjdFByZWZpeCggZG9jdW1lbnQsICdleGl0RnVsbHNjcmVlbicgKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RQcmVmaXgoIGRvY3VtZW50LCAnY2FuY2VsRnVsbFNjcmVlbicgKTsgLy8gRmlyZWZveFxuY29uc3QgZnVsbHNjcmVlbkVsZW1lbnRQcm9wZXJ0eU5hbWUgPSBkZXRlY3RQcmVmaXgoIGRvY3VtZW50LCAnZnVsbHNjcmVlbkVsZW1lbnQnICkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0UHJlZml4KCBkb2N1bWVudCwgJ2Z1bGxTY3JlZW5FbGVtZW50JyApOyAvLyBGaXJlZm94IGNhcGl0YWxpemF0aW9uXG5jb25zdCBmdWxsc2NyZWVuRW5hYmxlZFByb3BlcnR5TmFtZSA9IGRldGVjdFByZWZpeCggZG9jdW1lbnQsICdmdWxsc2NyZWVuRW5hYmxlZCcgKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RQcmVmaXgoIGRvY3VtZW50LCAnZnVsbFNjcmVlbkVuYWJsZWQnICk7IC8vIEZpcmVmb3ggY2FwaXRhbGl6YXRpb25cbmxldCBmdWxsc2NyZWVuQ2hhbmdlRXZlbnQgPSBkZXRlY3RQcmVmaXhFdmVudCggZG9jdW1lbnQsICdmdWxsc2NyZWVuY2hhbmdlJyApO1xuXG4vLyByZXF1aXJlZCBjYXBpdGFsaXphdGlvbiB3b3JrYXJvdW5kIGZvciBub3dcbmlmICggZnVsbHNjcmVlbkNoYW5nZUV2ZW50ID09PSAnbXNmdWxsc2NyZWVuY2hhbmdlJyApIHtcbiAgZnVsbHNjcmVlbkNoYW5nZUV2ZW50ID0gJ01TRnVsbHNjcmVlbkNoYW5nZSc7XG59XG5cbmNvbnN0IEZ1bGxTY3JlZW4gPSB7XG5cbiAgLy8gQHB1YmxpY1xuICBpc0Z1bGxTY3JlZW4oKSB7XG4gICAgcmV0dXJuICEhZG9jdW1lbnRbIGZ1bGxzY3JlZW5FbGVtZW50UHJvcGVydHlOYW1lIF07XG4gIH0sXG5cbiAgLy8gQHB1YmxpY1xuICBpc0Z1bGxTY3JlZW5FbmFibGVkKCkge1xuICAgIHJldHVybiBkb2N1bWVudFsgZnVsbHNjcmVlbkVuYWJsZWRQcm9wZXJ0eU5hbWUgXSAmJiAhcGxhdGZvcm0uc2FmYXJpNztcbiAgfSxcblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge0Rpc3BsYXl9IGRpc3BsYXlcbiAgICovXG4gIGVudGVyRnVsbFNjcmVlbiggZGlzcGxheSApIHtcbiAgICBjb25zdCByZXF1ZXN0RnVsbHNjcmVlblByb3BlcnR5TmFtZSA9IGRldGVjdFByZWZpeCggZG9jdW1lbnQuYm9keSwgJ3JlcXVlc3RGdWxsc2NyZWVuJyApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RQcmVmaXgoIGRvY3VtZW50LmJvZHksICdyZXF1ZXN0RnVsbFNjcmVlbicgKTsgLy8gRmlyZWZveCBjYXBpdGFsaXphdGlvblxuXG4gICAgZGlzcGxheS5kb21FbGVtZW50WyByZXF1ZXN0RnVsbHNjcmVlblByb3BlcnR5TmFtZSBdICYmIGRpc3BsYXkuZG9tRWxlbWVudFsgcmVxdWVzdEZ1bGxzY3JlZW5Qcm9wZXJ0eU5hbWUgXSgpO1xuICB9LFxuXG4gIC8vIEBwdWJsaWNcbiAgZXhpdEZ1bGxTY3JlZW4oKSB7XG4gICAgZG9jdW1lbnRbIGV4aXRGdWxsc2NyZWVuUHJvcGVydHlOYW1lIF0gJiYgZG9jdW1lbnRbIGV4aXRGdWxsc2NyZWVuUHJvcGVydHlOYW1lIF0oKTtcbiAgfSxcblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge0Rpc3BsYXl9IGRpc3BsYXlcbiAgICovXG4gIHRvZ2dsZUZ1bGxTY3JlZW4oIGRpc3BsYXkgKSB7XG4gICAgaWYgKCBGdWxsU2NyZWVuLmlzRnVsbFNjcmVlbigpICkge1xuICAgICAgRnVsbFNjcmVlbi5leGl0RnVsbFNjcmVlbigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIEZ1bGxTY3JlZW4uZW50ZXJGdWxsU2NyZWVuKCBkaXNwbGF5ICk7XG4gICAgfVxuICB9LFxuXG4gIGlzRnVsbFNjcmVlblByb3BlcnR5OiBuZXcgUHJvcGVydHkoIGZhbHNlIClcbn07XG5cbi8vIHVwZGF0ZSBpc0Z1bGxTY3JlZW5Qcm9wZXJ0eSBvbiBwb3RlbnRpYWwgY2hhbmdlc1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggZnVsbHNjcmVlbkNoYW5nZUV2ZW50LCBldnQgPT4ge1xuICBGdWxsU2NyZWVuLmlzRnVsbFNjcmVlblByb3BlcnR5LnNldCggRnVsbFNjcmVlbi5pc0Z1bGxTY3JlZW4oKSApO1xufSApO1xuXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnRnVsbFNjcmVlbicsIEZ1bGxTY3JlZW4gKTtcbmV4cG9ydCBkZWZhdWx0IEZ1bGxTY3JlZW47Il0sIm5hbWVzIjpbIlByb3BlcnR5IiwiZGV0ZWN0UHJlZml4IiwiZGV0ZWN0UHJlZml4RXZlbnQiLCJwbGF0Zm9ybSIsInNjZW5lcnkiLCJleGl0RnVsbHNjcmVlblByb3BlcnR5TmFtZSIsImRvY3VtZW50IiwiZnVsbHNjcmVlbkVsZW1lbnRQcm9wZXJ0eU5hbWUiLCJmdWxsc2NyZWVuRW5hYmxlZFByb3BlcnR5TmFtZSIsImZ1bGxzY3JlZW5DaGFuZ2VFdmVudCIsIkZ1bGxTY3JlZW4iLCJpc0Z1bGxTY3JlZW4iLCJpc0Z1bGxTY3JlZW5FbmFibGVkIiwic2FmYXJpNyIsImVudGVyRnVsbFNjcmVlbiIsImRpc3BsYXkiLCJyZXF1ZXN0RnVsbHNjcmVlblByb3BlcnR5TmFtZSIsImJvZHkiLCJkb21FbGVtZW50IiwiZXhpdEZ1bGxTY3JlZW4iLCJ0b2dnbGVGdWxsU2NyZWVuIiwiaXNGdWxsU2NyZWVuUHJvcGVydHkiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0Iiwic2V0IiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7Q0FLQyxHQUVELE9BQU9BLGNBQWMsK0JBQStCO0FBQ3BELE9BQU9DLGtCQUFrQix3Q0FBd0M7QUFDakUsT0FBT0MsdUJBQXVCLDZDQUE2QztBQUMzRSxPQUFPQyxjQUFjLG9DQUFvQztBQUN6RCxTQUFTQyxPQUFPLFFBQVEsZ0JBQWdCO0FBRXhDLHlEQUF5RDtBQUN6RCxNQUFNQyw2QkFBNkJKLGFBQWNLLFVBQVUscUJBQ3hCTCxhQUFjSyxVQUFVLHFCQUFzQixVQUFVO0FBQzNGLE1BQU1DLGdDQUFnQ04sYUFBY0ssVUFBVSx3QkFDeEJMLGFBQWNLLFVBQVUsc0JBQXVCLHlCQUF5QjtBQUM5RyxNQUFNRSxnQ0FBZ0NQLGFBQWNLLFVBQVUsd0JBQ3hCTCxhQUFjSyxVQUFVLHNCQUF1Qix5QkFBeUI7QUFDOUcsSUFBSUcsd0JBQXdCUCxrQkFBbUJJLFVBQVU7QUFFekQsNkNBQTZDO0FBQzdDLElBQUtHLDBCQUEwQixzQkFBdUI7SUFDcERBLHdCQUF3QjtBQUMxQjtBQUVBLE1BQU1DLGFBQWE7SUFFakIsVUFBVTtJQUNWQztRQUNFLE9BQU8sQ0FBQyxDQUFDTCxRQUFRLENBQUVDLDhCQUErQjtJQUNwRDtJQUVBLFVBQVU7SUFDVks7UUFDRSxPQUFPTixRQUFRLENBQUVFLDhCQUErQixJQUFJLENBQUNMLFNBQVNVLE9BQU87SUFDdkU7SUFFQTs7O0dBR0MsR0FDREMsaUJBQWlCQyxPQUFPO1FBQ3RCLE1BQU1DLGdDQUFnQ2YsYUFBY0ssU0FBU1csSUFBSSxFQUFFLHdCQUM3QmhCLGFBQWNLLFNBQVNXLElBQUksRUFBRSxzQkFBdUIseUJBQXlCO1FBRW5IRixRQUFRRyxVQUFVLENBQUVGLDhCQUErQixJQUFJRCxRQUFRRyxVQUFVLENBQUVGLDhCQUErQjtJQUM1RztJQUVBLFVBQVU7SUFDVkc7UUFDRWIsUUFBUSxDQUFFRCwyQkFBNEIsSUFBSUMsUUFBUSxDQUFFRCwyQkFBNEI7SUFDbEY7SUFFQTs7O0dBR0MsR0FDRGUsa0JBQWtCTCxPQUFPO1FBQ3ZCLElBQUtMLFdBQVdDLFlBQVksSUFBSztZQUMvQkQsV0FBV1MsY0FBYztRQUMzQixPQUNLO1lBQ0hULFdBQVdJLGVBQWUsQ0FBRUM7UUFDOUI7SUFDRjtJQUVBTSxzQkFBc0IsSUFBSXJCLFNBQVU7QUFDdEM7QUFFQSxtREFBbUQ7QUFDbkRNLFNBQVNnQixnQkFBZ0IsQ0FBRWIsdUJBQXVCYyxDQUFBQTtJQUNoRGIsV0FBV1csb0JBQW9CLENBQUNHLEdBQUcsQ0FBRWQsV0FBV0MsWUFBWTtBQUM5RDtBQUVBUCxRQUFRcUIsUUFBUSxDQUFFLGNBQWNmO0FBQ2hDLGVBQWVBLFdBQVcifQ==