// Copyright 2020-2024, University of Colorado Boulder
/**
 * DropShadow filter
 *
 * EXPERIMENTAL! DO not use in production code yet
 *
 * TODO: preventFit OR handle bounds increase (or both) https://github.com/phetsims/scenery/issues/1581
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import toSVGNumber from '../../../dot/js/toSVGNumber.js';
import { ColorDef, Filter, PaintDef, scenery } from '../imports.js';
let DropShadow = class DropShadow extends Filter {
    /**
   * Returns the CSS-style filter substring specific to this single filter, e.g. `grayscale(1)`. This should be used for
   * both DOM elements (https://developer.mozilla.org/en-US/docs/Web/CSS/filter) and when supported, Canvas
   * (https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter).
   */ getCSSFilterString() {
        return `drop-shadow(${toSVGNumber(this.offset.x)}px ${toSVGNumber(this.offset.y)}px ${toSVGNumber(this.blurRadius)}px ${this.colorCSS})`;
    }
    isDOMCompatible() {
        return true;
    }
    applyCanvasFilter() {
        throw new Error('unimplemented');
    }
    applySVGFilter(svgFilter, inName, resultName) {
        throw new Error('unimplemented');
    }
    /**
   * @param offset
   * @param blurRadius
   * @param color
   * @param [filterRegionPercentage]
   */ constructor(offset, blurRadius, color, filterRegionPercentage = 15){
        assert && assert(offset.isFinite(), 'DropShadow offset should be finite');
        assert && assert(isFinite(blurRadius), 'DropShadow blurRadius should be finite');
        assert && assert(blurRadius >= 0, 'DropShadow blurRadius should be non-negative');
        assert && assert(ColorDef.isColorDef(color), 'DropShadow color should be a ColorDef');
        super();
        // TODO: consider linking to the ColorDef (if it's a Property), or indicating that we need an update https://github.com/phetsims/scenery/issues/1581
        this.offset = offset;
        this.blurRadius = blurRadius;
        this.color = color;
        this.colorCSS = PaintDef.toColor(color).toCSS();
        this.filterRegionPercentageIncrease = filterRegionPercentage;
    }
};
export { DropShadow as default };
scenery.register('DropShadow', DropShadow);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvZmlsdGVycy9Ecm9wU2hhZG93LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIERyb3BTaGFkb3cgZmlsdGVyXG4gKlxuICogRVhQRVJJTUVOVEFMISBETyBub3QgdXNlIGluIHByb2R1Y3Rpb24gY29kZSB5ZXRcbiAqXG4gKiBUT0RPOiBwcmV2ZW50Rml0IE9SIGhhbmRsZSBib3VuZHMgaW5jcmVhc2UgKG9yIGJvdGgpIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy8xNTgxXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCB0b1NWR051bWJlciBmcm9tICcuLi8uLi8uLi9kb3QvanMvdG9TVkdOdW1iZXIuanMnO1xuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgQ29sb3JEZWYsIEZpbHRlciwgUGFpbnREZWYsIHNjZW5lcnksIFRDb2xvciB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcm9wU2hhZG93IGV4dGVuZHMgRmlsdGVyIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IG9mZnNldDogVmVjdG9yMjtcbiAgcHJpdmF0ZSByZWFkb25seSBibHVyUmFkaXVzOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29sb3I6IFRDb2xvcjtcbiAgcHJpdmF0ZSByZWFkb25seSBjb2xvckNTUzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gb2Zmc2V0XG4gICAqIEBwYXJhbSBibHVyUmFkaXVzXG4gICAqIEBwYXJhbSBjb2xvclxuICAgKiBAcGFyYW0gW2ZpbHRlclJlZ2lvblBlcmNlbnRhZ2VdXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoIG9mZnNldDogVmVjdG9yMiwgYmx1clJhZGl1czogbnVtYmVyLCBjb2xvcjogVENvbG9yLCBmaWx0ZXJSZWdpb25QZXJjZW50YWdlID0gMTUgKSB7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb2Zmc2V0LmlzRmluaXRlKCksICdEcm9wU2hhZG93IG9mZnNldCBzaG91bGQgYmUgZmluaXRlJyApO1xuICAgIGFzc2VydCAmJiBhc3NlcnQoIGlzRmluaXRlKCBibHVyUmFkaXVzICksICdEcm9wU2hhZG93IGJsdXJSYWRpdXMgc2hvdWxkIGJlIGZpbml0ZScgKTtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBibHVyUmFkaXVzID49IDAsICdEcm9wU2hhZG93IGJsdXJSYWRpdXMgc2hvdWxkIGJlIG5vbi1uZWdhdGl2ZScgKTtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBDb2xvckRlZi5pc0NvbG9yRGVmKCBjb2xvciApLCAnRHJvcFNoYWRvdyBjb2xvciBzaG91bGQgYmUgYSBDb2xvckRlZicgKTtcblxuICAgIHN1cGVyKCk7XG5cbiAgICAvLyBUT0RPOiBjb25zaWRlciBsaW5raW5nIHRvIHRoZSBDb2xvckRlZiAoaWYgaXQncyBhIFByb3BlcnR5KSwgb3IgaW5kaWNhdGluZyB0aGF0IHdlIG5lZWQgYW4gdXBkYXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy8xNTgxXG5cbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLmJsdXJSYWRpdXMgPSBibHVyUmFkaXVzO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLmNvbG9yQ1NTID0gUGFpbnREZWYudG9Db2xvciggY29sb3IgKS50b0NTUygpO1xuXG4gICAgdGhpcy5maWx0ZXJSZWdpb25QZXJjZW50YWdlSW5jcmVhc2UgPSBmaWx0ZXJSZWdpb25QZXJjZW50YWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIENTUy1zdHlsZSBmaWx0ZXIgc3Vic3RyaW5nIHNwZWNpZmljIHRvIHRoaXMgc2luZ2xlIGZpbHRlciwgZS5nLiBgZ3JheXNjYWxlKDEpYC4gVGhpcyBzaG91bGQgYmUgdXNlZCBmb3JcbiAgICogYm90aCBET00gZWxlbWVudHMgKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9maWx0ZXIpIGFuZCB3aGVuIHN1cHBvcnRlZCwgQ2FudmFzXG4gICAqIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2ZpbHRlcikuXG4gICAqL1xuICBwdWJsaWMgZ2V0Q1NTRmlsdGVyU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBkcm9wLXNoYWRvdygke3RvU1ZHTnVtYmVyKCB0aGlzLm9mZnNldC54ICl9cHggJHt0b1NWR051bWJlciggdGhpcy5vZmZzZXQueSApfXB4ICR7dG9TVkdOdW1iZXIoIHRoaXMuYmx1clJhZGl1cyApfXB4ICR7dGhpcy5jb2xvckNTU30pYDtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBpc0RPTUNvbXBhdGlibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgYXBwbHlDYW52YXNGaWx0ZXIoKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCAndW5pbXBsZW1lbnRlZCcgKTtcbiAgfVxuXG4gIHB1YmxpYyBhcHBseVNWR0ZpbHRlciggc3ZnRmlsdGVyOiBTVkdGaWx0ZXJFbGVtZW50LCBpbk5hbWU6IHN0cmluZywgcmVzdWx0TmFtZT86IHN0cmluZyApOiB2b2lkIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoICd1bmltcGxlbWVudGVkJyApO1xuICB9XG59XG5cbnNjZW5lcnkucmVnaXN0ZXIoICdEcm9wU2hhZG93JywgRHJvcFNoYWRvdyApOyJdLCJuYW1lcyI6WyJ0b1NWR051bWJlciIsIkNvbG9yRGVmIiwiRmlsdGVyIiwiUGFpbnREZWYiLCJzY2VuZXJ5IiwiRHJvcFNoYWRvdyIsImdldENTU0ZpbHRlclN0cmluZyIsIm9mZnNldCIsIngiLCJ5IiwiYmx1clJhZGl1cyIsImNvbG9yQ1NTIiwiaXNET01Db21wYXRpYmxlIiwiYXBwbHlDYW52YXNGaWx0ZXIiLCJFcnJvciIsImFwcGx5U1ZHRmlsdGVyIiwic3ZnRmlsdGVyIiwiaW5OYW1lIiwicmVzdWx0TmFtZSIsImNvbG9yIiwiZmlsdGVyUmVnaW9uUGVyY2VudGFnZSIsImFzc2VydCIsImlzRmluaXRlIiwiaXNDb2xvckRlZiIsInRvQ29sb3IiLCJ0b0NTUyIsImZpbHRlclJlZ2lvblBlcmNlbnRhZ2VJbmNyZWFzZSIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Ozs7O0NBUUMsR0FFRCxPQUFPQSxpQkFBaUIsaUNBQWlDO0FBRXpELFNBQVNDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sUUFBZ0IsZ0JBQWdCO0FBRTdELElBQUEsQUFBTUMsYUFBTixNQUFNQSxtQkFBbUJIO0lBK0J0Qzs7OztHQUlDLEdBQ0QsQUFBT0kscUJBQTZCO1FBQ2xDLE9BQU8sQ0FBQyxZQUFZLEVBQUVOLFlBQWEsSUFBSSxDQUFDTyxNQUFNLENBQUNDLENBQUMsRUFBRyxHQUFHLEVBQUVSLFlBQWEsSUFBSSxDQUFDTyxNQUFNLENBQUNFLENBQUMsRUFBRyxHQUFHLEVBQUVULFlBQWEsSUFBSSxDQUFDVSxVQUFVLEVBQUcsR0FBRyxFQUFFLElBQUksQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNoSjtJQUVnQkMsa0JBQTJCO1FBQ3pDLE9BQU87SUFDVDtJQUVPQyxvQkFBMEI7UUFDL0IsTUFBTSxJQUFJQyxNQUFPO0lBQ25CO0lBRU9DLGVBQWdCQyxTQUEyQixFQUFFQyxNQUFjLEVBQUVDLFVBQW1CLEVBQVM7UUFDOUYsTUFBTSxJQUFJSixNQUFPO0lBQ25CO0lBM0NBOzs7OztHQUtDLEdBQ0QsWUFBb0JQLE1BQWUsRUFBRUcsVUFBa0IsRUFBRVMsS0FBYSxFQUFFQyx5QkFBeUIsRUFBRSxDQUFHO1FBQ3BHQyxVQUFVQSxPQUFRZCxPQUFPZSxRQUFRLElBQUk7UUFDckNELFVBQVVBLE9BQVFDLFNBQVVaLGFBQWM7UUFDMUNXLFVBQVVBLE9BQVFYLGNBQWMsR0FBRztRQUNuQ1csVUFBVUEsT0FBUXBCLFNBQVNzQixVQUFVLENBQUVKLFFBQVM7UUFFaEQsS0FBSztRQUVMLG9KQUFvSjtRQUVwSixJQUFJLENBQUNaLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNHLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDUyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDUixRQUFRLEdBQUdSLFNBQVNxQixPQUFPLENBQUVMLE9BQVFNLEtBQUs7UUFFL0MsSUFBSSxDQUFDQyw4QkFBOEIsR0FBR047SUFDeEM7QUFzQkY7QUFuREEsU0FBcUJmLHdCQW1EcEI7QUFFREQsUUFBUXVCLFFBQVEsQ0FBRSxjQUFjdEIifQ==