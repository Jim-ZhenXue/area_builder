// Copyright 2021-2024, University of Colorado Boulder
/**
 * A configurable cell containing a Node used for FlowConstraint layout
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import optionize from '../../../../phet-core/js/optionize.js';
import { FLOW_CONFIGURABLE_OPTION_KEYS, FlowConfigurable, MarginLayoutCell, scenery } from '../../imports.js';
const FLOW_CELL_KEYS = [
    ...FLOW_CONFIGURABLE_OPTION_KEYS,
    'isSeparator'
];
let FlowCell = class FlowCell extends FlowConfigurable(MarginLayoutCell) {
    // The used value, with this cell's value taking precedence over the constraint's default
    get effectiveAlign() {
        return this._align !== null ? this._align : this.flowConstraint._align;
    }
    // The used value, with this cell's value taking precedence over the constraint's default
    get effectiveCellAlign() {
        return this._cellAlign !== null ? this._cellAlign : this.flowConstraint._cellAlign;
    }
    // The used value, with this cell's value taking precedence over the constraint's default
    get effectiveStretch() {
        return this._stretch !== null ? this._stretch : this.flowConstraint._stretch;
    }
    // The used value, with this cell's value taking precedence over the constraint's default
    get effectiveGrow() {
        return this._grow !== null ? this._grow : this.flowConstraint._grow;
    }
    onLayoutOptionsChange(isInitial = false) {
        if (this.node.layoutOptions) {
            this.setOptions(this.node.layoutOptions);
        }
        super.onLayoutOptionsChange();
        if (!isInitial) {
            this.flowConstraint.updateLayoutAutomatically();
        }
    }
    setOptions(providedOptions) {
        const options = optionize()({
            isSeparator: false
        }, providedOptions);
        assert && Object.keys(options).forEach((key)=>{
            assert && assert(FLOW_CELL_KEYS.includes(key), `Cannot provide key ${key} to a FlowCell's layoutOptions. Perhaps this is a Grid-style layout option?`);
        });
        this._isSeparator = options.isSeparator;
        // Clear options that are not provided in the mutate options (but if they are present, do NOT clear, so we avoid
        // more potential for infinite loops)
        this.setConfigToInherit(options);
        this.mutateConfigurable(options);
    }
    constructor(constraint, node, proxy){
        super(constraint, node, proxy), // (scenery-internal) Set during FlowConstraint layout
        this.size = 0, // (scenery-internal)
        this._isSeparator = false;
        this.flowConstraint = constraint;
        this.orientation = constraint.orientation;
        this.onLayoutOptionsChange(true);
    }
};
export { FlowCell as default };
scenery.register('FlowCell', FlowCell);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvbGF5b3V0L2NvbnN0cmFpbnRzL0Zsb3dDZWxsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgY29uZmlndXJhYmxlIGNlbGwgY29udGFpbmluZyBhIE5vZGUgdXNlZCBmb3IgRmxvd0NvbnN0cmFpbnQgbGF5b3V0XG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XG5pbXBvcnQgeyBFeHRlcm5hbEZsb3dDb25maWd1cmFibGVPcHRpb25zLCBGTE9XX0NPTkZJR1VSQUJMRV9PUFRJT05fS0VZUywgRmxvd0NvbmZpZ3VyYWJsZSwgRmxvd0NvbnN0cmFpbnQsIExheW91dEFsaWduLCBMYXlvdXRQcm94eSwgTWFyZ2luTGF5b3V0Q2VsbCwgTm9kZSwgc2NlbmVyeSB9IGZyb20gJy4uLy4uL2ltcG9ydHMuanMnO1xuXG5jb25zdCBGTE9XX0NFTExfS0VZUyA9IFtcbiAgLi4uRkxPV19DT05GSUdVUkFCTEVfT1BUSU9OX0tFWVMsXG4gICdpc1NlcGFyYXRvcidcbl07XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSB7XG4gIC8vIEFsbG93cyBtYXJraW5nIGEgY2VsbCBhcyBhIFwic2VwYXJhdG9yXCIsIHN1Y2ggdGhhdCBtdWx0aXBsZSBhZGphY2VudCBzZXBhcmF0b3JzIChhbmQgdGhvc2UgYXQgdGhlIHN0YXJ0L2VuZCkgZ2V0XG4gIC8vIGNvbGxhcHNlZCAoYWxsIGJ1dCB0aGUgZmlyc3QgYXJlIG5vdCBpbmNsdWRlZCBpbiBsYXlvdXQgQU5EIG1hZGUgaW52aXNpYmxlKVxuICBpc1NlcGFyYXRvcj86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBGbG93Q2VsbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8RXh0ZXJuYWxGbG93Q29uZmlndXJhYmxlT3B0aW9ucywgJ29yaWVudGF0aW9uJz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsb3dDZWxsIGV4dGVuZHMgRmxvd0NvbmZpZ3VyYWJsZSggTWFyZ2luTGF5b3V0Q2VsbCApIHtcblxuICAvLyAoc2NlbmVyeS1pbnRlcm5hbCkgU2V0IGR1cmluZyBGbG93Q29uc3RyYWludCBsYXlvdXRcbiAgcHVibGljIHNpemUgPSAwO1xuXG4gIC8vIChzY2VuZXJ5LWludGVybmFsKVxuICBwdWJsaWMgX2lzU2VwYXJhdG9yID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBmbG93Q29uc3RyYWludDogRmxvd0NvbnN0cmFpbnQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBjb25zdHJhaW50OiBGbG93Q29uc3RyYWludCwgbm9kZTogTm9kZSwgcHJveHk6IExheW91dFByb3h5IHwgbnVsbCApIHtcbiAgICBzdXBlciggY29uc3RyYWludCwgbm9kZSwgcHJveHkgKTtcblxuICAgIHRoaXMuZmxvd0NvbnN0cmFpbnQgPSBjb25zdHJhaW50O1xuXG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IGNvbnN0cmFpbnQub3JpZW50YXRpb247XG4gICAgdGhpcy5vbkxheW91dE9wdGlvbnNDaGFuZ2UoIHRydWUgKTtcbiAgfVxuXG4gIC8vIFRoZSB1c2VkIHZhbHVlLCB3aXRoIHRoaXMgY2VsbCdzIHZhbHVlIHRha2luZyBwcmVjZWRlbmNlIG92ZXIgdGhlIGNvbnN0cmFpbnQncyBkZWZhdWx0XG4gIHB1YmxpYyBnZXQgZWZmZWN0aXZlQWxpZ24oKTogTGF5b3V0QWxpZ24ge1xuICAgIHJldHVybiB0aGlzLl9hbGlnbiAhPT0gbnVsbCA/IHRoaXMuX2FsaWduIDogdGhpcy5mbG93Q29uc3RyYWludC5fYWxpZ24hO1xuICB9XG5cbiAgLy8gVGhlIHVzZWQgdmFsdWUsIHdpdGggdGhpcyBjZWxsJ3MgdmFsdWUgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciB0aGUgY29uc3RyYWludCdzIGRlZmF1bHRcbiAgcHVibGljIGdldCBlZmZlY3RpdmVDZWxsQWxpZ24oKTogTGF5b3V0QWxpZ24ge1xuICAgIHJldHVybiB0aGlzLl9jZWxsQWxpZ24gIT09IG51bGwgPyB0aGlzLl9jZWxsQWxpZ24gOiB0aGlzLmZsb3dDb25zdHJhaW50Ll9jZWxsQWxpZ24hO1xuICB9XG5cbiAgLy8gVGhlIHVzZWQgdmFsdWUsIHdpdGggdGhpcyBjZWxsJ3MgdmFsdWUgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciB0aGUgY29uc3RyYWludCdzIGRlZmF1bHRcbiAgcHVibGljIGdldCBlZmZlY3RpdmVTdHJldGNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zdHJldGNoICE9PSBudWxsID8gdGhpcy5fc3RyZXRjaCA6IHRoaXMuZmxvd0NvbnN0cmFpbnQuX3N0cmV0Y2ghO1xuICB9XG5cbiAgLy8gVGhlIHVzZWQgdmFsdWUsIHdpdGggdGhpcyBjZWxsJ3MgdmFsdWUgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciB0aGUgY29uc3RyYWludCdzIGRlZmF1bHRcbiAgcHVibGljIGdldCBlZmZlY3RpdmVHcm93KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2dyb3cgIT09IG51bGwgPyB0aGlzLl9ncm93IDogdGhpcy5mbG93Q29uc3RyYWludC5fZ3JvdyE7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgb25MYXlvdXRPcHRpb25zQ2hhbmdlKCBpc0luaXRpYWwgPSBmYWxzZSApOiB2b2lkIHtcbiAgICBpZiAoIHRoaXMubm9kZS5sYXlvdXRPcHRpb25zICkge1xuICAgICAgdGhpcy5zZXRPcHRpb25zKCB0aGlzLm5vZGUubGF5b3V0T3B0aW9ucyBhcyBFeHRlcm5hbEZsb3dDb25maWd1cmFibGVPcHRpb25zICk7XG4gICAgfVxuXG4gICAgc3VwZXIub25MYXlvdXRPcHRpb25zQ2hhbmdlKCk7XG5cbiAgICBpZiAoICFpc0luaXRpYWwgKSB7XG4gICAgICB0aGlzLmZsb3dDb25zdHJhaW50LnVwZGF0ZUxheW91dEF1dG9tYXRpY2FsbHkoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldE9wdGlvbnMoIHByb3ZpZGVkT3B0aW9ucz86IEV4dGVybmFsRmxvd0NvbmZpZ3VyYWJsZU9wdGlvbnMgKTogdm9pZCB7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEZsb3dDZWxsT3B0aW9ucywgU2VsZk9wdGlvbnMsIEV4dGVybmFsRmxvd0NvbmZpZ3VyYWJsZU9wdGlvbnM+KCkoIHtcbiAgICAgIGlzU2VwYXJhdG9yOiBmYWxzZVxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgYXNzZXJ0ICYmIE9iamVjdC5rZXlzKCBvcHRpb25zICkuZm9yRWFjaCgga2V5ID0+IHtcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIEZMT1dfQ0VMTF9LRVlTLmluY2x1ZGVzKCBrZXkgKSwgYENhbm5vdCBwcm92aWRlIGtleSAke2tleX0gdG8gYSBGbG93Q2VsbCdzIGxheW91dE9wdGlvbnMuIFBlcmhhcHMgdGhpcyBpcyBhIEdyaWQtc3R5bGUgbGF5b3V0IG9wdGlvbj9gICk7XG4gICAgfSApO1xuXG4gICAgdGhpcy5faXNTZXBhcmF0b3IgPSBvcHRpb25zLmlzU2VwYXJhdG9yO1xuXG4gICAgLy8gQ2xlYXIgb3B0aW9ucyB0aGF0IGFyZSBub3QgcHJvdmlkZWQgaW4gdGhlIG11dGF0ZSBvcHRpb25zIChidXQgaWYgdGhleSBhcmUgcHJlc2VudCwgZG8gTk9UIGNsZWFyLCBzbyB3ZSBhdm9pZFxuICAgIC8vIG1vcmUgcG90ZW50aWFsIGZvciBpbmZpbml0ZSBsb29wcylcbiAgICB0aGlzLnNldENvbmZpZ1RvSW5oZXJpdCggb3B0aW9ucyApO1xuXG4gICAgdGhpcy5tdXRhdGVDb25maWd1cmFibGUoIG9wdGlvbnMgKTtcbiAgfVxufVxuXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnRmxvd0NlbGwnLCBGbG93Q2VsbCApOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJGTE9XX0NPTkZJR1VSQUJMRV9PUFRJT05fS0VZUyIsIkZsb3dDb25maWd1cmFibGUiLCJNYXJnaW5MYXlvdXRDZWxsIiwic2NlbmVyeSIsIkZMT1dfQ0VMTF9LRVlTIiwiRmxvd0NlbGwiLCJlZmZlY3RpdmVBbGlnbiIsIl9hbGlnbiIsImZsb3dDb25zdHJhaW50IiwiZWZmZWN0aXZlQ2VsbEFsaWduIiwiX2NlbGxBbGlnbiIsImVmZmVjdGl2ZVN0cmV0Y2giLCJfc3RyZXRjaCIsImVmZmVjdGl2ZUdyb3ciLCJfZ3JvdyIsIm9uTGF5b3V0T3B0aW9uc0NoYW5nZSIsImlzSW5pdGlhbCIsIm5vZGUiLCJsYXlvdXRPcHRpb25zIiwic2V0T3B0aW9ucyIsInVwZGF0ZUxheW91dEF1dG9tYXRpY2FsbHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaXNTZXBhcmF0b3IiLCJhc3NlcnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImluY2x1ZGVzIiwiX2lzU2VwYXJhdG9yIiwic2V0Q29uZmlnVG9Jbmhlcml0IiwibXV0YXRlQ29uZmlndXJhYmxlIiwiY29uc3RyYWludCIsInByb3h5Iiwic2l6ZSIsIm9yaWVudGF0aW9uIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBRUQsT0FBT0EsZUFBZSx3Q0FBd0M7QUFFOUQsU0FBMENDLDZCQUE2QixFQUFFQyxnQkFBZ0IsRUFBNENDLGdCQUFnQixFQUFRQyxPQUFPLFFBQVEsbUJBQW1CO0FBRS9MLE1BQU1DLGlCQUFpQjtPQUNsQko7SUFDSDtDQUNEO0FBVWMsSUFBQSxBQUFNSyxXQUFOLE1BQU1BLGlCQUFpQkosaUJBQWtCQztJQW1CdEQseUZBQXlGO0lBQ3pGLElBQVdJLGlCQUE4QjtRQUN2QyxPQUFPLElBQUksQ0FBQ0MsTUFBTSxLQUFLLE9BQU8sSUFBSSxDQUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDQyxjQUFjLENBQUNELE1BQU07SUFDeEU7SUFFQSx5RkFBeUY7SUFDekYsSUFBV0UscUJBQWtDO1FBQzNDLE9BQU8sSUFBSSxDQUFDQyxVQUFVLEtBQUssT0FBTyxJQUFJLENBQUNBLFVBQVUsR0FBRyxJQUFJLENBQUNGLGNBQWMsQ0FBQ0UsVUFBVTtJQUNwRjtJQUVBLHlGQUF5RjtJQUN6RixJQUFXQyxtQkFBNEI7UUFDckMsT0FBTyxJQUFJLENBQUNDLFFBQVEsS0FBSyxPQUFPLElBQUksQ0FBQ0EsUUFBUSxHQUFHLElBQUksQ0FBQ0osY0FBYyxDQUFDSSxRQUFRO0lBQzlFO0lBRUEseUZBQXlGO0lBQ3pGLElBQVdDLGdCQUF3QjtRQUNqQyxPQUFPLElBQUksQ0FBQ0MsS0FBSyxLQUFLLE9BQU8sSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDTixjQUFjLENBQUNNLEtBQUs7SUFDckU7SUFFbUJDLHNCQUF1QkMsWUFBWSxLQUFLLEVBQVM7UUFDbEUsSUFBSyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsYUFBYSxFQUFHO1lBQzdCLElBQUksQ0FBQ0MsVUFBVSxDQUFFLElBQUksQ0FBQ0YsSUFBSSxDQUFDQyxhQUFhO1FBQzFDO1FBRUEsS0FBSyxDQUFDSDtRQUVOLElBQUssQ0FBQ0MsV0FBWTtZQUNoQixJQUFJLENBQUNSLGNBQWMsQ0FBQ1kseUJBQXlCO1FBQy9DO0lBQ0Y7SUFFUUQsV0FBWUUsZUFBaUQsRUFBUztRQUU1RSxNQUFNQyxVQUFVdkIsWUFBNEU7WUFDMUZ3QixhQUFhO1FBQ2YsR0FBR0Y7UUFFSEcsVUFBVUMsT0FBT0MsSUFBSSxDQUFFSixTQUFVSyxPQUFPLENBQUVDLENBQUFBO1lBQ3hDSixVQUFVQSxPQUFRcEIsZUFBZXlCLFFBQVEsQ0FBRUQsTUFBTyxDQUFDLG1CQUFtQixFQUFFQSxJQUFJLDJFQUEyRSxDQUFDO1FBQzFKO1FBRUEsSUFBSSxDQUFDRSxZQUFZLEdBQUdSLFFBQVFDLFdBQVc7UUFFdkMsZ0hBQWdIO1FBQ2hILHFDQUFxQztRQUNyQyxJQUFJLENBQUNRLGtCQUFrQixDQUFFVDtRQUV6QixJQUFJLENBQUNVLGtCQUFrQixDQUFFVjtJQUMzQjtJQTFEQSxZQUFvQlcsVUFBMEIsRUFBRWhCLElBQVUsRUFBRWlCLEtBQXlCLENBQUc7UUFDdEYsS0FBSyxDQUFFRCxZQUFZaEIsTUFBTWlCLFFBVDNCLHNEQUFzRDthQUMvQ0MsT0FBTyxHQUVkLHFCQUFxQjthQUNkTCxlQUFlO1FBT3BCLElBQUksQ0FBQ3RCLGNBQWMsR0FBR3lCO1FBRXRCLElBQUksQ0FBQ0csV0FBVyxHQUFHSCxXQUFXRyxXQUFXO1FBQ3pDLElBQUksQ0FBQ3JCLHFCQUFxQixDQUFFO0lBQzlCO0FBb0RGO0FBckVBLFNBQXFCVixzQkFxRXBCO0FBRURGLFFBQVFrQyxRQUFRLENBQUUsWUFBWWhDIn0=