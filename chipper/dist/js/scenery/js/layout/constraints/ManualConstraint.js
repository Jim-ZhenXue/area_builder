// Copyright 2021-2024, University of Colorado Boulder
/**
 * ManualConstraint exists for cases where imperative-based positioning code (e.g. `node.left = otherNode.right + 5`)
 * is best for a case, and should be rerun whenever one of the nodes changes bounds.
 *
 * ManualConstraint also can handle cases where the nodes do not live in the same coordinate frame (but instead with
 * some common ancestor).
 *
 * For example:
 *
 * new ManualConstraint( ancestorNode, [ firstNode, secondNode ], ( firstProxy, secondProxy ) => {
 *   firstProxy.left = secondProxy.right + 5;
 *   secondProxy.centerY = firstProxy.centerY;
 * } );
 *
 * Notably in the callback, it uses LayoutProxy (which has the positional getters/setters of an object, and handles
 * coordinate transforms).
 *
 * See https://phetsims.github.io/scenery/doc/layout#ManualConstraint for details
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import { LayoutCell, LayoutConstraint, Node, scenery } from '../../imports.js';
let ManualConstraint = class ManualConstraint extends LayoutConstraint {
    /**
   * (scenery-internal)
   */ layout() {
        super.layout();
        assert && assert(_.every(this.nodes, (node)=>!node.isDisposed));
        // Don't do layout if something is missing
        const isMissingProxy = _.some(this.cells, (cell)=>!cell.isConnected());
        if (!isMissingProxy) {
            const proxies = this.cells.map((cell)=>cell.proxy);
            this.layoutCallback.apply(null, proxies);
            this.finishedLayoutEmitter.emit();
        }
    }
    /**
   * Releases references
   */ dispose() {
        this.cells.forEach((cell)=>cell.dispose());
        super.dispose();
    }
    static create(ancestorNode, nodes, layoutCallback) {
        return new ManualConstraint(ancestorNode, nodes, layoutCallback);
    }
    constructor(ancestorNode, nodes, layoutCallback){
        assert && assert(Array.isArray(nodes) && _.every(nodes, (node)=>node instanceof Node));
        super(ancestorNode);
        // Don't churn updates during construction
        this.lock();
        this.nodes = nodes;
        // Having cells will give us proxy Properties and listening for when it's added for free
        this.cells = nodes.map((node)=>new LayoutCell(this, node, null));
        this.layoutCallback = layoutCallback;
        // Hook up to listen to these nodes (will be handled by LayoutConstraint disposal)
        this.nodes.forEach((node)=>this.addNode(node, false));
        // Run the layout manually at the start
        this.unlock();
        this.updateLayout();
    }
};
export { ManualConstraint as default };
scenery.register('ManualConstraint', ManualConstraint);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvbGF5b3V0L2NvbnN0cmFpbnRzL01hbnVhbENvbnN0cmFpbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogTWFudWFsQ29uc3RyYWludCBleGlzdHMgZm9yIGNhc2VzIHdoZXJlIGltcGVyYXRpdmUtYmFzZWQgcG9zaXRpb25pbmcgY29kZSAoZS5nLiBgbm9kZS5sZWZ0ID0gb3RoZXJOb2RlLnJpZ2h0ICsgNWApXG4gKiBpcyBiZXN0IGZvciBhIGNhc2UsIGFuZCBzaG91bGQgYmUgcmVydW4gd2hlbmV2ZXIgb25lIG9mIHRoZSBub2RlcyBjaGFuZ2VzIGJvdW5kcy5cbiAqXG4gKiBNYW51YWxDb25zdHJhaW50IGFsc28gY2FuIGhhbmRsZSBjYXNlcyB3aGVyZSB0aGUgbm9kZXMgZG8gbm90IGxpdmUgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZSBmcmFtZSAoYnV0IGluc3RlYWQgd2l0aFxuICogc29tZSBjb21tb24gYW5jZXN0b3IpLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIG5ldyBNYW51YWxDb25zdHJhaW50KCBhbmNlc3Rvck5vZGUsIFsgZmlyc3ROb2RlLCBzZWNvbmROb2RlIF0sICggZmlyc3RQcm94eSwgc2Vjb25kUHJveHkgKSA9PiB7XG4gKiAgIGZpcnN0UHJveHkubGVmdCA9IHNlY29uZFByb3h5LnJpZ2h0ICsgNTtcbiAqICAgc2Vjb25kUHJveHkuY2VudGVyWSA9IGZpcnN0UHJveHkuY2VudGVyWTtcbiAqIH0gKTtcbiAqXG4gKiBOb3RhYmx5IGluIHRoZSBjYWxsYmFjaywgaXQgdXNlcyBMYXlvdXRQcm94eSAod2hpY2ggaGFzIHRoZSBwb3NpdGlvbmFsIGdldHRlcnMvc2V0dGVycyBvZiBhbiBvYmplY3QsIGFuZCBoYW5kbGVzXG4gKiBjb29yZGluYXRlIHRyYW5zZm9ybXMpLlxuICpcbiAqIFNlZSBodHRwczovL3BoZXRzaW1zLmdpdGh1Yi5pby9zY2VuZXJ5L2RvYy9sYXlvdXQjTWFudWFsQ29uc3RyYWludCBmb3IgZGV0YWlsc1xuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgSW50ZW50aW9uYWxBbnkgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL0ludGVudGlvbmFsQW55LmpzJztcbmltcG9ydCB7IExheW91dENlbGwsIExheW91dENvbnN0cmFpbnQsIExheW91dFByb3h5LCBOb2RlLCBzY2VuZXJ5IH0gZnJvbSAnLi4vLi4vaW1wb3J0cy5qcyc7XG5cbi8vIFR1cm5zIGEgdHVwbGUgb2YgdGhpbmdzIGludG8gYSB0dXBsZSBvZiBMYXlvdXRQcm94aWVzXG50eXBlIExheW91dFByb3h5TWFwPFQ+ID0ge1xuICBbUHJvcGVydHkgaW4ga2V5b2YgVF06IExheW91dFByb3h5XG59O1xudHlwZSBMYXlvdXRDYWxsYmFjazxUIGV4dGVuZHMgSW50ZW50aW9uYWxBbnlbXT4gPSAoIC4uLmFyZ3M6IExheW91dFByb3h5TWFwPFQ+ICkgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFudWFsQ29uc3RyYWludDxUIGV4dGVuZHMgTm9kZVtdPiBleHRlbmRzIExheW91dENvbnN0cmFpbnQge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgbm9kZXM6IFQ7XG5cbiAgLy8gQ2VsbHMgcHJvdmlkZSB1cyBMYXlvdXRQcm94eSBhbmQgY29ubmVjdGlvbiB0cmFja2luZ1xuICBwcml2YXRlIHJlYWRvbmx5IGNlbGxzOiBMYXlvdXRDZWxsW107XG5cbiAgLy8gVGhlIHVzZXItc3VwcGxpZWQgY2FsbGJhY2sgdGhhdCBzaG91bGQgYmUgY2FsbGVkIHRvIGRvIGxheW91dFxuICBwcml2YXRlIHJlYWRvbmx5IGxheW91dENhbGxiYWNrOiBMYXlvdXRDYWxsYmFjazxUPjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIGFuY2VzdG9yTm9kZTogTm9kZSwgbm9kZXM6IFQsIGxheW91dENhbGxiYWNrOiBMYXlvdXRDYWxsYmFjazxUPiApIHtcblxuICAgIGFzc2VydCAmJiBhc3NlcnQoIEFycmF5LmlzQXJyYXkoIG5vZGVzICkgJiYgXy5ldmVyeSggbm9kZXMsIG5vZGUgPT4gbm9kZSBpbnN0YW5jZW9mIE5vZGUgKSApO1xuXG4gICAgc3VwZXIoIGFuY2VzdG9yTm9kZSApO1xuXG4gICAgLy8gRG9uJ3QgY2h1cm4gdXBkYXRlcyBkdXJpbmcgY29uc3RydWN0aW9uXG4gICAgdGhpcy5sb2NrKCk7XG5cbiAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG5cbiAgICAvLyBIYXZpbmcgY2VsbHMgd2lsbCBnaXZlIHVzIHByb3h5IFByb3BlcnRpZXMgYW5kIGxpc3RlbmluZyBmb3Igd2hlbiBpdCdzIGFkZGVkIGZvciBmcmVlXG4gICAgdGhpcy5jZWxscyA9IG5vZGVzLm1hcCggbm9kZSA9PiBuZXcgTGF5b3V0Q2VsbCggdGhpcywgbm9kZSwgbnVsbCApICk7XG5cbiAgICB0aGlzLmxheW91dENhbGxiYWNrID0gbGF5b3V0Q2FsbGJhY2s7XG5cbiAgICAvLyBIb29rIHVwIHRvIGxpc3RlbiB0byB0aGVzZSBub2RlcyAod2lsbCBiZSBoYW5kbGVkIGJ5IExheW91dENvbnN0cmFpbnQgZGlzcG9zYWwpXG4gICAgdGhpcy5ub2Rlcy5mb3JFYWNoKCBub2RlID0+IHRoaXMuYWRkTm9kZSggbm9kZSwgZmFsc2UgKSApO1xuXG4gICAgLy8gUnVuIHRoZSBsYXlvdXQgbWFudWFsbHkgYXQgdGhlIHN0YXJ0XG4gICAgdGhpcy51bmxvY2soKTtcbiAgICB0aGlzLnVwZGF0ZUxheW91dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIChzY2VuZXJ5LWludGVybmFsKVxuICAgKi9cbiAgcHVibGljIG92ZXJyaWRlIGxheW91dCgpOiB2b2lkIHtcbiAgICBzdXBlci5sYXlvdXQoKTtcblxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uZXZlcnkoIHRoaXMubm9kZXMsIG5vZGUgPT4gIW5vZGUuaXNEaXNwb3NlZCApICk7XG5cbiAgICAvLyBEb24ndCBkbyBsYXlvdXQgaWYgc29tZXRoaW5nIGlzIG1pc3NpbmdcbiAgICBjb25zdCBpc01pc3NpbmdQcm94eSA9IF8uc29tZSggdGhpcy5jZWxscywgY2VsbCA9PiAhY2VsbC5pc0Nvbm5lY3RlZCgpICk7XG4gICAgaWYgKCAhaXNNaXNzaW5nUHJveHkgKSB7XG4gICAgICBjb25zdCBwcm94aWVzID0gdGhpcy5jZWxscy5tYXAoIGNlbGwgPT4gY2VsbC5wcm94eSApO1xuXG4gICAgICB0aGlzLmxheW91dENhbGxiYWNrLmFwcGx5KCBudWxsLCBwcm94aWVzIGFzIExheW91dFByb3h5TWFwPFQ+ICk7XG5cbiAgICAgIHRoaXMuZmluaXNoZWRMYXlvdXRFbWl0dGVyLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVsZWFzZXMgcmVmZXJlbmNlc1xuICAgKi9cbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKCBjZWxsID0+IGNlbGwuZGlzcG9zZSgpICk7XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZTxUIGV4dGVuZHMgTm9kZVtdPiggYW5jZXN0b3JOb2RlOiBOb2RlLCBub2RlczogVCwgbGF5b3V0Q2FsbGJhY2s6IExheW91dENhbGxiYWNrPFQ+ICk6IE1hbnVhbENvbnN0cmFpbnQ8VD4ge1xuICAgIHJldHVybiBuZXcgTWFudWFsQ29uc3RyYWludCggYW5jZXN0b3JOb2RlLCBub2RlcywgbGF5b3V0Q2FsbGJhY2sgKTtcbiAgfVxufVxuXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnTWFudWFsQ29uc3RyYWludCcsIE1hbnVhbENvbnN0cmFpbnQgKTsiXSwibmFtZXMiOlsiTGF5b3V0Q2VsbCIsIkxheW91dENvbnN0cmFpbnQiLCJOb2RlIiwic2NlbmVyeSIsIk1hbnVhbENvbnN0cmFpbnQiLCJsYXlvdXQiLCJhc3NlcnQiLCJfIiwiZXZlcnkiLCJub2RlcyIsIm5vZGUiLCJpc0Rpc3Bvc2VkIiwiaXNNaXNzaW5nUHJveHkiLCJzb21lIiwiY2VsbHMiLCJjZWxsIiwiaXNDb25uZWN0ZWQiLCJwcm94aWVzIiwibWFwIiwicHJveHkiLCJsYXlvdXRDYWxsYmFjayIsImFwcGx5IiwiZmluaXNoZWRMYXlvdXRFbWl0dGVyIiwiZW1pdCIsImRpc3Bvc2UiLCJmb3JFYWNoIiwiY3JlYXRlIiwiYW5jZXN0b3JOb2RlIiwiQXJyYXkiLCJpc0FycmF5IiwibG9jayIsImFkZE5vZGUiLCJ1bmxvY2siLCJ1cGRhdGVMYXlvdXQiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW9CQyxHQUdELFNBQVNBLFVBQVUsRUFBRUMsZ0JBQWdCLEVBQWVDLElBQUksRUFBRUMsT0FBTyxRQUFRLG1CQUFtQjtBQVE3RSxJQUFBLEFBQU1DLG1CQUFOLE1BQU1BLHlCQUEyQ0g7SUFrQzlEOztHQUVDLEdBQ0QsQUFBZ0JJLFNBQWU7UUFDN0IsS0FBSyxDQUFDQTtRQUVOQyxVQUFVQSxPQUFRQyxFQUFFQyxLQUFLLENBQUUsSUFBSSxDQUFDQyxLQUFLLEVBQUVDLENBQUFBLE9BQVEsQ0FBQ0EsS0FBS0MsVUFBVTtRQUUvRCwwQ0FBMEM7UUFDMUMsTUFBTUMsaUJBQWlCTCxFQUFFTSxJQUFJLENBQUUsSUFBSSxDQUFDQyxLQUFLLEVBQUVDLENBQUFBLE9BQVEsQ0FBQ0EsS0FBS0MsV0FBVztRQUNwRSxJQUFLLENBQUNKLGdCQUFpQjtZQUNyQixNQUFNSyxVQUFVLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxHQUFHLENBQUVILENBQUFBLE9BQVFBLEtBQUtJLEtBQUs7WUFFbEQsSUFBSSxDQUFDQyxjQUFjLENBQUNDLEtBQUssQ0FBRSxNQUFNSjtZQUVqQyxJQUFJLENBQUNLLHFCQUFxQixDQUFDQyxJQUFJO1FBQ2pDO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELEFBQWdCQyxVQUFnQjtRQUM5QixJQUFJLENBQUNWLEtBQUssQ0FBQ1csT0FBTyxDQUFFVixDQUFBQSxPQUFRQSxLQUFLUyxPQUFPO1FBRXhDLEtBQUssQ0FBQ0E7SUFDUjtJQUVBLE9BQWNFLE9BQTBCQyxZQUFrQixFQUFFbEIsS0FBUSxFQUFFVyxjQUFpQyxFQUF3QjtRQUM3SCxPQUFPLElBQUloQixpQkFBa0J1QixjQUFjbEIsT0FBT1c7SUFDcEQ7SUF0REEsWUFBb0JPLFlBQWtCLEVBQUVsQixLQUFRLEVBQUVXLGNBQWlDLENBQUc7UUFFcEZkLFVBQVVBLE9BQVFzQixNQUFNQyxPQUFPLENBQUVwQixVQUFXRixFQUFFQyxLQUFLLENBQUVDLE9BQU9DLENBQUFBLE9BQVFBLGdCQUFnQlI7UUFFcEYsS0FBSyxDQUFFeUI7UUFFUCwwQ0FBMEM7UUFDMUMsSUFBSSxDQUFDRyxJQUFJO1FBRVQsSUFBSSxDQUFDckIsS0FBSyxHQUFHQTtRQUViLHdGQUF3RjtRQUN4RixJQUFJLENBQUNLLEtBQUssR0FBR0wsTUFBTVMsR0FBRyxDQUFFUixDQUFBQSxPQUFRLElBQUlWLFdBQVksSUFBSSxFQUFFVSxNQUFNO1FBRTVELElBQUksQ0FBQ1UsY0FBYyxHQUFHQTtRQUV0QixrRkFBa0Y7UUFDbEYsSUFBSSxDQUFDWCxLQUFLLENBQUNnQixPQUFPLENBQUVmLENBQUFBLE9BQVEsSUFBSSxDQUFDcUIsT0FBTyxDQUFFckIsTUFBTTtRQUVoRCx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDc0IsTUFBTTtRQUNYLElBQUksQ0FBQ0MsWUFBWTtJQUNuQjtBQWlDRjtBQWpFQSxTQUFxQjdCLDhCQWlFcEI7QUFFREQsUUFBUStCLFFBQVEsQ0FBRSxvQkFBb0I5QiJ9