// Copyright 2017-2022, University of Colorado Boulder
/**
 * AlignBox tests
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */ import Bounds2 from '../../../../dot/js/Bounds2.js';
import Circle from '../../nodes/Circle.js';
import Rectangle from '../../nodes/Rectangle.js';
import AlignGroup from '../constraints/AlignGroup.js';
QUnit.module('AlignBox');
QUnit.test('Single Box Group', (assert)=>{
    const circle = new Circle(20);
    const group = new AlignGroup();
    const box = group.createBox(circle, {
        xMargin: 10,
        yMargin: 20
    });
    assert.ok(box.xMargin === 10, 'xMargin');
    assert.ok(box.yMargin === 20, 'yMargin');
    assert.ok(box.xAlign === 'center', 'xAlign');
    assert.ok(box.yAlign === 'center', 'yAlign');
    assert.ok(box.bounds.equals(new Bounds2(0, 0, 60, 80)), 'Margins');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 50, 60)), 'Circle: Margins');
    circle.radius = 10;
    circle.getBounds(); // trigger bounds check
    assert.ok(box.bounds.equals(new Bounds2(0, 0, 40, 60)), 'Change to the content size');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 30, 40)), 'Circle: Change to the content size');
    circle.x = 100;
    circle.getBounds(); // trigger bounds check
    assert.ok(box.bounds.equals(new Bounds2(0, 0, 40, 60)), 'Reposition on content location change');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 30, 40)), 'Circle: Reposition on content location change');
    circle.scale(2);
    circle.getBounds(); // trigger bounds check
    assert.ok(box.bounds.equals(new Bounds2(0, 0, 60, 80)), 'Handle scaling');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 50, 60)), 'Circle: Handle scaling');
    box.xMargin = 0;
    circle.getBounds(); // trigger bounds check
    assert.ok(box.bounds.equals(new Bounds2(0, 0, 40, 80)), 'xMargin change');
    assert.ok(circle.bounds.equals(new Bounds2(0, 20, 40, 60)), 'Circle: xMargin change');
    group.dispose();
});
QUnit.test('Multiple Boxes in a Group', (assert)=>{
    const circle = new Circle(10);
    const rectangle = new Rectangle(0, 0, 60, 60);
    const group = new AlignGroup();
    const circleBox = group.createBox(circle, {
        xMargin: 10,
        yMargin: 20,
        xAlign: 'left',
        yAlign: 'bottom'
    });
    let rectangleBox = group.createBox(rectangle);
    assert.ok(circleBox.xMargin === 10, 'circle: xMargin');
    assert.ok(circleBox.yMargin === 20, 'circle: yMargin');
    assert.ok(circleBox.xAlign === 'left', 'circle: xAlign');
    assert.ok(circleBox.yAlign === 'bottom', 'circle: yAlign');
    assert.ok(rectangleBox.xMargin === 0, 'rectangle: xMargin');
    assert.ok(rectangleBox.yMargin === 0, 'rectangle: yMargin');
    assert.ok(rectangleBox.xAlign === 'center', 'rectangle: xAlign');
    assert.ok(rectangleBox.yAlign === 'center', 'rectangle: yAlign');
    // circle: 20x20, with margin: 40x60
    // rectangle: 60x60 (max in both)
    assert.ok(circleBox.bounds.equals(new Bounds2(0, 0, 60, 60)), 'Circle Container: Initial multiple');
    assert.ok(rectangleBox.bounds.equals(new Bounds2(0, 0, 60, 60)), 'Rectangle Container: Initial multiple');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 30, 40)), 'Circle: Initial multiple');
    assert.ok(rectangle.bounds.equals(new Bounds2(0, 0, 60, 60)), 'Rectangle: Initial multiple');
    rectangleBox.yMargin = 20;
    circleBox.getBounds();
    rectangleBox.getBounds(); // trigger check
    // circle: 20x20, with margin: 40x60
    // rectangle: 60x60, with margin: 60x100
    assert.ok(circleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'Circle Container: Align Change Rect');
    assert.ok(rectangleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'RectangleContainer: Align Change Rect');
    assert.ok(circle.bounds.equals(new Bounds2(10, 60, 30, 80)), 'Circle: Align Change Rect');
    assert.ok(rectangle.bounds.equals(new Bounds2(0, 20, 60, 80)), 'Rectangle: Align Change Rect');
    circleBox.yAlign = 'top';
    circleBox.getBounds();
    rectangleBox.getBounds(); // trigger check
    // circle: 20x20, with margin: 40x60
    // rectangle: 60x60, with margin: 60x100
    assert.ok(circleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'Circle Container: Align Change Circle');
    assert.ok(rectangleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'RectangleContainer: Align Change Circle');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 30, 40)), 'Circle: Align Change Circle');
    assert.ok(rectangle.bounds.equals(new Bounds2(0, 20, 60, 80)), 'Rectangle: Align Change Circle');
    rectangleBox.dispose();
    circleBox.getBounds(); // trigger check
    // circle: 20x20, with margin: 40x60
    assert.ok(circleBox.bounds.equals(new Bounds2(0, 0, 40, 60)), 'Circle Container: Removed Rect Container');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 30, 40)), 'Circle: Removed Rect Container');
    rectangleBox = group.createBox(rectangle, {
        yMargin: 20
    });
    circleBox.getBounds();
    rectangleBox.getBounds(); // trigger check
    // circle: 20x20, with margin: 40x60
    // rectangle: 60x60, with margin: 60x100
    assert.ok(circleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'Circle Container: Added back box');
    assert.ok(rectangleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'RectangleContainer: Added back box');
    assert.ok(circle.bounds.equals(new Bounds2(10, 20, 30, 40)), 'Circle: Added back box');
    assert.ok(rectangle.bounds.equals(new Bounds2(0, 20, 60, 80)), 'Rectangle: Added back box');
    circleBox.xAlign = 'right';
    circleBox.getBounds();
    rectangleBox.getBounds(); // trigger check
    // circle: 20x20, with margin: 40x60
    // rectangle: 60x60, with margin: 60x100
    assert.ok(circleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'Circle Container: More circle xAlign:right');
    assert.ok(rectangleBox.bounds.equals(new Bounds2(0, 0, 60, 100)), 'RectangleContainer: More circle xAlign:right');
    assert.ok(circle.bounds.equals(new Bounds2(30, 20, 50, 40)), 'Circle: More circle xAlign:right');
    assert.ok(rectangle.bounds.equals(new Bounds2(0, 20, 60, 80)), 'Rectangle: More circle xAlign:right');
    group.dispose();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvbGF5b3V0L25vZGVzL0FsaWduQm94VGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQWxpZ25Cb3ggdGVzdHNcbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcbmltcG9ydCBDaXJjbGUgZnJvbSAnLi4vLi4vbm9kZXMvQ2lyY2xlLmpzJztcbmltcG9ydCBSZWN0YW5nbGUgZnJvbSAnLi4vLi4vbm9kZXMvUmVjdGFuZ2xlLmpzJztcbmltcG9ydCBBbGlnbkdyb3VwIGZyb20gJy4uL2NvbnN0cmFpbnRzL0FsaWduR3JvdXAuanMnO1xuXG5RVW5pdC5tb2R1bGUoICdBbGlnbkJveCcgKTtcblxuUVVuaXQudGVzdCggJ1NpbmdsZSBCb3ggR3JvdXAnLCBhc3NlcnQgPT4ge1xuICBjb25zdCBjaXJjbGUgPSBuZXcgQ2lyY2xlKCAyMCApO1xuXG4gIGNvbnN0IGdyb3VwID0gbmV3IEFsaWduR3JvdXAoKTtcbiAgY29uc3QgYm94ID0gZ3JvdXAuY3JlYXRlQm94KCBjaXJjbGUsIHtcbiAgICB4TWFyZ2luOiAxMCxcbiAgICB5TWFyZ2luOiAyMFxuICB9ICk7XG5cbiAgYXNzZXJ0Lm9rKCBib3gueE1hcmdpbiA9PT0gMTAsICd4TWFyZ2luJyApO1xuICBhc3NlcnQub2soIGJveC55TWFyZ2luID09PSAyMCwgJ3lNYXJnaW4nICk7XG4gIGFzc2VydC5vayggYm94LnhBbGlnbiA9PT0gJ2NlbnRlcicsICd4QWxpZ24nICk7XG4gIGFzc2VydC5vayggYm94LnlBbGlnbiA9PT0gJ2NlbnRlcicsICd5QWxpZ24nICk7XG5cbiAgYXNzZXJ0Lm9rKCBib3guYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDAsIDAsIDYwLCA4MCApICksICdNYXJnaW5zJyApO1xuICBhc3NlcnQub2soIGNpcmNsZS5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMTAsIDIwLCA1MCwgNjAgKSApLCAnQ2lyY2xlOiBNYXJnaW5zJyApO1xuXG4gIGNpcmNsZS5yYWRpdXMgPSAxMDtcbiAgY2lyY2xlLmdldEJvdW5kcygpOyAvLyB0cmlnZ2VyIGJvdW5kcyBjaGVja1xuICBhc3NlcnQub2soIGJveC5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMCwgMCwgNDAsIDYwICkgKSwgJ0NoYW5nZSB0byB0aGUgY29udGVudCBzaXplJyApO1xuICBhc3NlcnQub2soIGNpcmNsZS5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMTAsIDIwLCAzMCwgNDAgKSApLCAnQ2lyY2xlOiBDaGFuZ2UgdG8gdGhlIGNvbnRlbnQgc2l6ZScgKTtcblxuICBjaXJjbGUueCA9IDEwMDtcbiAgY2lyY2xlLmdldEJvdW5kcygpOyAvLyB0cmlnZ2VyIGJvdW5kcyBjaGVja1xuICBhc3NlcnQub2soIGJveC5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMCwgMCwgNDAsIDYwICkgKSwgJ1JlcG9zaXRpb24gb24gY29udGVudCBsb2NhdGlvbiBjaGFuZ2UnICk7XG4gIGFzc2VydC5vayggY2lyY2xlLmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAxMCwgMjAsIDMwLCA0MCApICksICdDaXJjbGU6IFJlcG9zaXRpb24gb24gY29udGVudCBsb2NhdGlvbiBjaGFuZ2UnICk7XG5cbiAgY2lyY2xlLnNjYWxlKCAyICk7XG4gIGNpcmNsZS5nZXRCb3VuZHMoKTsgLy8gdHJpZ2dlciBib3VuZHMgY2hlY2tcbiAgYXNzZXJ0Lm9rKCBib3guYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDAsIDAsIDYwLCA4MCApICksICdIYW5kbGUgc2NhbGluZycgKTtcbiAgYXNzZXJ0Lm9rKCBjaXJjbGUuYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDEwLCAyMCwgNTAsIDYwICkgKSwgJ0NpcmNsZTogSGFuZGxlIHNjYWxpbmcnICk7XG5cbiAgYm94LnhNYXJnaW4gPSAwO1xuICBjaXJjbGUuZ2V0Qm91bmRzKCk7IC8vIHRyaWdnZXIgYm91bmRzIGNoZWNrXG4gIGFzc2VydC5vayggYm94LmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAwLCA0MCwgODAgKSApLCAneE1hcmdpbiBjaGFuZ2UnICk7XG4gIGFzc2VydC5vayggY2lyY2xlLmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAyMCwgNDAsIDYwICkgKSwgJ0NpcmNsZTogeE1hcmdpbiBjaGFuZ2UnICk7XG5cbiAgZ3JvdXAuZGlzcG9zZSgpO1xufSApO1xuXG5RVW5pdC50ZXN0KCAnTXVsdGlwbGUgQm94ZXMgaW4gYSBHcm91cCcsIGFzc2VydCA9PiB7XG4gIGNvbnN0IGNpcmNsZSA9IG5ldyBDaXJjbGUoIDEwICk7XG4gIGNvbnN0IHJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDYwLCA2MCApO1xuXG4gIGNvbnN0IGdyb3VwID0gbmV3IEFsaWduR3JvdXAoKTtcblxuICBjb25zdCBjaXJjbGVCb3ggPSBncm91cC5jcmVhdGVCb3goIGNpcmNsZSwge1xuICAgIHhNYXJnaW46IDEwLFxuICAgIHlNYXJnaW46IDIwLFxuICAgIHhBbGlnbjogJ2xlZnQnLFxuICAgIHlBbGlnbjogJ2JvdHRvbSdcbiAgfSApO1xuXG4gIGxldCByZWN0YW5nbGVCb3ggPSBncm91cC5jcmVhdGVCb3goIHJlY3RhbmdsZSApO1xuXG4gIGFzc2VydC5vayggY2lyY2xlQm94LnhNYXJnaW4gPT09IDEwLCAnY2lyY2xlOiB4TWFyZ2luJyApO1xuICBhc3NlcnQub2soIGNpcmNsZUJveC55TWFyZ2luID09PSAyMCwgJ2NpcmNsZTogeU1hcmdpbicgKTtcbiAgYXNzZXJ0Lm9rKCBjaXJjbGVCb3gueEFsaWduID09PSAnbGVmdCcsICdjaXJjbGU6IHhBbGlnbicgKTtcbiAgYXNzZXJ0Lm9rKCBjaXJjbGVCb3gueUFsaWduID09PSAnYm90dG9tJywgJ2NpcmNsZTogeUFsaWduJyApO1xuXG4gIGFzc2VydC5vayggcmVjdGFuZ2xlQm94LnhNYXJnaW4gPT09IDAsICdyZWN0YW5nbGU6IHhNYXJnaW4nICk7XG4gIGFzc2VydC5vayggcmVjdGFuZ2xlQm94LnlNYXJnaW4gPT09IDAsICdyZWN0YW5nbGU6IHlNYXJnaW4nICk7XG4gIGFzc2VydC5vayggcmVjdGFuZ2xlQm94LnhBbGlnbiA9PT0gJ2NlbnRlcicsICdyZWN0YW5nbGU6IHhBbGlnbicgKTtcbiAgYXNzZXJ0Lm9rKCByZWN0YW5nbGVCb3gueUFsaWduID09PSAnY2VudGVyJywgJ3JlY3RhbmdsZTogeUFsaWduJyApO1xuXG4gIC8vIGNpcmNsZTogMjB4MjAsIHdpdGggbWFyZ2luOiA0MHg2MFxuICAvLyByZWN0YW5nbGU6IDYweDYwIChtYXggaW4gYm90aClcbiAgYXNzZXJ0Lm9rKCBjaXJjbGVCb3guYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDAsIDAsIDYwLCA2MCApICksICdDaXJjbGUgQ29udGFpbmVyOiBJbml0aWFsIG11bHRpcGxlJyApO1xuICBhc3NlcnQub2soIHJlY3RhbmdsZUJveC5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMCwgMCwgNjAsIDYwICkgKSwgJ1JlY3RhbmdsZSBDb250YWluZXI6IEluaXRpYWwgbXVsdGlwbGUnICk7XG4gIGFzc2VydC5vayggY2lyY2xlLmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAxMCwgMjAsIDMwLCA0MCApICksICdDaXJjbGU6IEluaXRpYWwgbXVsdGlwbGUnICk7XG4gIGFzc2VydC5vayggcmVjdGFuZ2xlLmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAwLCA2MCwgNjAgKSApLCAnUmVjdGFuZ2xlOiBJbml0aWFsIG11bHRpcGxlJyApO1xuXG4gIHJlY3RhbmdsZUJveC55TWFyZ2luID0gMjA7XG4gIGNpcmNsZUJveC5nZXRCb3VuZHMoKTtcbiAgcmVjdGFuZ2xlQm94LmdldEJvdW5kcygpOyAvLyB0cmlnZ2VyIGNoZWNrXG4gIC8vIGNpcmNsZTogMjB4MjAsIHdpdGggbWFyZ2luOiA0MHg2MFxuICAvLyByZWN0YW5nbGU6IDYweDYwLCB3aXRoIG1hcmdpbjogNjB4MTAwXG4gIGFzc2VydC5vayggY2lyY2xlQm94LmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAwLCA2MCwgMTAwICkgKSwgJ0NpcmNsZSBDb250YWluZXI6IEFsaWduIENoYW5nZSBSZWN0JyApO1xuICBhc3NlcnQub2soIHJlY3RhbmdsZUJveC5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMCwgMCwgNjAsIDEwMCApICksICdSZWN0YW5nbGVDb250YWluZXI6IEFsaWduIENoYW5nZSBSZWN0JyApO1xuICBhc3NlcnQub2soIGNpcmNsZS5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMTAsIDYwLCAzMCwgODAgKSApLCAnQ2lyY2xlOiBBbGlnbiBDaGFuZ2UgUmVjdCcgKTtcbiAgYXNzZXJ0Lm9rKCByZWN0YW5nbGUuYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDAsIDIwLCA2MCwgODAgKSApLCAnUmVjdGFuZ2xlOiBBbGlnbiBDaGFuZ2UgUmVjdCcgKTtcblxuICBjaXJjbGVCb3gueUFsaWduID0gJ3RvcCc7XG4gIGNpcmNsZUJveC5nZXRCb3VuZHMoKTtcbiAgcmVjdGFuZ2xlQm94LmdldEJvdW5kcygpOyAvLyB0cmlnZ2VyIGNoZWNrXG4gIC8vIGNpcmNsZTogMjB4MjAsIHdpdGggbWFyZ2luOiA0MHg2MFxuICAvLyByZWN0YW5nbGU6IDYweDYwLCB3aXRoIG1hcmdpbjogNjB4MTAwXG4gIGFzc2VydC5vayggY2lyY2xlQm94LmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAwLCA2MCwgMTAwICkgKSwgJ0NpcmNsZSBDb250YWluZXI6IEFsaWduIENoYW5nZSBDaXJjbGUnICk7XG4gIGFzc2VydC5vayggcmVjdGFuZ2xlQm94LmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAwLCA2MCwgMTAwICkgKSwgJ1JlY3RhbmdsZUNvbnRhaW5lcjogQWxpZ24gQ2hhbmdlIENpcmNsZScgKTtcbiAgYXNzZXJ0Lm9rKCBjaXJjbGUuYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDEwLCAyMCwgMzAsIDQwICkgKSwgJ0NpcmNsZTogQWxpZ24gQ2hhbmdlIENpcmNsZScgKTtcbiAgYXNzZXJ0Lm9rKCByZWN0YW5nbGUuYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDAsIDIwLCA2MCwgODAgKSApLCAnUmVjdGFuZ2xlOiBBbGlnbiBDaGFuZ2UgQ2lyY2xlJyApO1xuXG4gIHJlY3RhbmdsZUJveC5kaXNwb3NlKCk7XG4gIGNpcmNsZUJveC5nZXRCb3VuZHMoKTsgLy8gdHJpZ2dlciBjaGVja1xuICAvLyBjaXJjbGU6IDIweDIwLCB3aXRoIG1hcmdpbjogNDB4NjBcbiAgYXNzZXJ0Lm9rKCBjaXJjbGVCb3guYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDAsIDAsIDQwLCA2MCApICksICdDaXJjbGUgQ29udGFpbmVyOiBSZW1vdmVkIFJlY3QgQ29udGFpbmVyJyApO1xuICBhc3NlcnQub2soIGNpcmNsZS5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMTAsIDIwLCAzMCwgNDAgKSApLCAnQ2lyY2xlOiBSZW1vdmVkIFJlY3QgQ29udGFpbmVyJyApO1xuXG4gIHJlY3RhbmdsZUJveCA9IGdyb3VwLmNyZWF0ZUJveCggcmVjdGFuZ2xlLCB7IHlNYXJnaW46IDIwIH0gKTtcbiAgY2lyY2xlQm94LmdldEJvdW5kcygpO1xuICByZWN0YW5nbGVCb3guZ2V0Qm91bmRzKCk7IC8vIHRyaWdnZXIgY2hlY2tcbiAgLy8gY2lyY2xlOiAyMHgyMCwgd2l0aCBtYXJnaW46IDQweDYwXG4gIC8vIHJlY3RhbmdsZTogNjB4NjAsIHdpdGggbWFyZ2luOiA2MHgxMDBcbiAgYXNzZXJ0Lm9rKCBjaXJjbGVCb3guYm91bmRzLmVxdWFscyggbmV3IEJvdW5kczIoIDAsIDAsIDYwLCAxMDAgKSApLCAnQ2lyY2xlIENvbnRhaW5lcjogQWRkZWQgYmFjayBib3gnICk7XG4gIGFzc2VydC5vayggcmVjdGFuZ2xlQm94LmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAwLCA2MCwgMTAwICkgKSwgJ1JlY3RhbmdsZUNvbnRhaW5lcjogQWRkZWQgYmFjayBib3gnICk7XG4gIGFzc2VydC5vayggY2lyY2xlLmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAxMCwgMjAsIDMwLCA0MCApICksICdDaXJjbGU6IEFkZGVkIGJhY2sgYm94JyApO1xuICBhc3NlcnQub2soIHJlY3RhbmdsZS5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMCwgMjAsIDYwLCA4MCApICksICdSZWN0YW5nbGU6IEFkZGVkIGJhY2sgYm94JyApO1xuXG4gIGNpcmNsZUJveC54QWxpZ24gPSAncmlnaHQnO1xuICBjaXJjbGVCb3guZ2V0Qm91bmRzKCk7XG4gIHJlY3RhbmdsZUJveC5nZXRCb3VuZHMoKTsgLy8gdHJpZ2dlciBjaGVja1xuICAvLyBjaXJjbGU6IDIweDIwLCB3aXRoIG1hcmdpbjogNDB4NjBcbiAgLy8gcmVjdGFuZ2xlOiA2MHg2MCwgd2l0aCBtYXJnaW46IDYweDEwMFxuICBhc3NlcnQub2soIGNpcmNsZUJveC5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMCwgMCwgNjAsIDEwMCApICksICdDaXJjbGUgQ29udGFpbmVyOiBNb3JlIGNpcmNsZSB4QWxpZ246cmlnaHQnICk7XG4gIGFzc2VydC5vayggcmVjdGFuZ2xlQm94LmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAwLCA2MCwgMTAwICkgKSwgJ1JlY3RhbmdsZUNvbnRhaW5lcjogTW9yZSBjaXJjbGUgeEFsaWduOnJpZ2h0JyApO1xuICBhc3NlcnQub2soIGNpcmNsZS5ib3VuZHMuZXF1YWxzKCBuZXcgQm91bmRzMiggMzAsIDIwLCA1MCwgNDAgKSApLCAnQ2lyY2xlOiBNb3JlIGNpcmNsZSB4QWxpZ246cmlnaHQnICk7XG4gIGFzc2VydC5vayggcmVjdGFuZ2xlLmJvdW5kcy5lcXVhbHMoIG5ldyBCb3VuZHMyKCAwLCAyMCwgNjAsIDgwICkgKSwgJ1JlY3RhbmdsZTogTW9yZSBjaXJjbGUgeEFsaWduOnJpZ2h0JyApO1xuXG5cbiAgZ3JvdXAuZGlzcG9zZSgpO1xufSApOyJdLCJuYW1lcyI6WyJCb3VuZHMyIiwiQ2lyY2xlIiwiUmVjdGFuZ2xlIiwiQWxpZ25Hcm91cCIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImNpcmNsZSIsImdyb3VwIiwiYm94IiwiY3JlYXRlQm94IiwieE1hcmdpbiIsInlNYXJnaW4iLCJvayIsInhBbGlnbiIsInlBbGlnbiIsImJvdW5kcyIsImVxdWFscyIsInJhZGl1cyIsImdldEJvdW5kcyIsIngiLCJzY2FsZSIsImRpc3Bvc2UiLCJyZWN0YW5nbGUiLCJjaXJjbGVCb3giLCJyZWN0YW5nbGVCb3giXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBRUQsT0FBT0EsYUFBYSxnQ0FBZ0M7QUFDcEQsT0FBT0MsWUFBWSx3QkFBd0I7QUFDM0MsT0FBT0MsZUFBZSwyQkFBMkI7QUFDakQsT0FBT0MsZ0JBQWdCLCtCQUErQjtBQUV0REMsTUFBTUMsTUFBTSxDQUFFO0FBRWRELE1BQU1FLElBQUksQ0FBRSxvQkFBb0JDLENBQUFBO0lBQzlCLE1BQU1DLFNBQVMsSUFBSVAsT0FBUTtJQUUzQixNQUFNUSxRQUFRLElBQUlOO0lBQ2xCLE1BQU1PLE1BQU1ELE1BQU1FLFNBQVMsQ0FBRUgsUUFBUTtRQUNuQ0ksU0FBUztRQUNUQyxTQUFTO0lBQ1g7SUFFQU4sT0FBT08sRUFBRSxDQUFFSixJQUFJRSxPQUFPLEtBQUssSUFBSTtJQUMvQkwsT0FBT08sRUFBRSxDQUFFSixJQUFJRyxPQUFPLEtBQUssSUFBSTtJQUMvQk4sT0FBT08sRUFBRSxDQUFFSixJQUFJSyxNQUFNLEtBQUssVUFBVTtJQUNwQ1Is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