// Copyright 2020-2024, University of Colorado Boulder
/**
 * Uses the Web Speech API to produce speech from the browser. This is a prototype, DO NOT USE IN PRODUCTION CODE.
 * There is no speech output until the voicingManager has been initialized. Supported voices will depend on platform.
 * For each voice, you can customize the rate and pitch. Only one voicingManager should be active at a time and so this
 * type is a singleton.
 *
 * @author Jesse Greenberg
 */ import optionize from '../../../../phet-core/js/optionize.js';
import SpeechSynthesisAnnouncer from '../../../../utterance-queue/js/SpeechSynthesisAnnouncer.js';
import { globalKeyStateTracker, KeyboardUtils, scenery } from '../../imports.js';
let VoicingManager = class VoicingManager extends SpeechSynthesisAnnouncer {
    /**
   * The initialization with some additional scenery-specific work for voicingManager.
   */ initialize(userGestureEmitter, options) {
        super.initialize(userGestureEmitter, options);
        // The control key will stop the synth from speaking if there is an active utterance. This key was decided because
        // most major screen readers will stop speech when this key is pressed
        globalKeyStateTracker.keyupEmitter.addListener((domEvent)=>{
            if (KeyboardUtils.isControlKey(domEvent)) {
                this.cancel();
            }
        });
    }
    /**
   * Returns true if voicing is supported for the provided locale. Currently, only English is supported.
   * @param locale - the locale string
   */ voicingSupportedForLocale(locale) {
        return locale.startsWith('en');
    }
    constructor(providedOptions){
        const options = optionize()({
            // All VoicingManager instances should respect responseCollector's current state.
            respectResponseCollectorProperties: true,
            // phet-io
            phetioDocumentation: 'Announcer that manages the voicing feature, providing audio responses via WebAudio.'
        }, providedOptions);
        super(options);
    }
};
const voicingManager = new VoicingManager();
scenery.register('voicingManager', voicingManager);
export default voicingManager;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvYWNjZXNzaWJpbGl0eS92b2ljaW5nL3ZvaWNpbmdNYW5hZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFVzZXMgdGhlIFdlYiBTcGVlY2ggQVBJIHRvIHByb2R1Y2Ugc3BlZWNoIGZyb20gdGhlIGJyb3dzZXIuIFRoaXMgaXMgYSBwcm90b3R5cGUsIERPIE5PVCBVU0UgSU4gUFJPRFVDVElPTiBDT0RFLlxuICogVGhlcmUgaXMgbm8gc3BlZWNoIG91dHB1dCB1bnRpbCB0aGUgdm9pY2luZ01hbmFnZXIgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuIFN1cHBvcnRlZCB2b2ljZXMgd2lsbCBkZXBlbmQgb24gcGxhdGZvcm0uXG4gKiBGb3IgZWFjaCB2b2ljZSwgeW91IGNhbiBjdXN0b21pemUgdGhlIHJhdGUgYW5kIHBpdGNoLiBPbmx5IG9uZSB2b2ljaW5nTWFuYWdlciBzaG91bGQgYmUgYWN0aXZlIGF0IGEgdGltZSBhbmQgc28gdGhpc1xuICogdHlwZSBpcyBhIHNpbmdsZXRvbi5cbiAqXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xuICovXG5cbmltcG9ydCB7IFRSZWFkT25seUVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1RFbWl0dGVyLmpzJztcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlciwgeyBTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXJPcHRpb25zLCBTcGVlY2hTeW50aGVzaXNJbml0aWFsaXplT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0dGVyYW5jZS1xdWV1ZS9qcy9TcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIuanMnO1xuaW1wb3J0IHsgZ2xvYmFsS2V5U3RhdGVUcmFja2VyLCBLZXlib2FyZFV0aWxzLCBzY2VuZXJ5IH0gZnJvbSAnLi4vLi4vaW1wb3J0cy5qcyc7XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xudHlwZSBWb2ljaW5nTWFuYWdlck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlck9wdGlvbnM7XG5cbmNsYXNzIFZvaWNpbmdNYW5hZ2VyIGV4dGVuZHMgU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBWb2ljaW5nTWFuYWdlck9wdGlvbnMgKSB7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFZvaWNpbmdNYW5hZ2VyT3B0aW9ucywgU2VsZk9wdGlvbnMsIFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlck9wdGlvbnM+KCkoIHtcblxuICAgICAgLy8gQWxsIFZvaWNpbmdNYW5hZ2VyIGluc3RhbmNlcyBzaG91bGQgcmVzcGVjdCByZXNwb25zZUNvbGxlY3RvcidzIGN1cnJlbnQgc3RhdGUuXG4gICAgICByZXNwZWN0UmVzcG9uc2VDb2xsZWN0b3JQcm9wZXJ0aWVzOiB0cnVlLFxuXG4gICAgICAvLyBwaGV0LWlvXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnQW5ub3VuY2VyIHRoYXQgbWFuYWdlcyB0aGUgdm9pY2luZyBmZWF0dXJlLCBwcm92aWRpbmcgYXVkaW8gcmVzcG9uc2VzIHZpYSBXZWJBdWRpby4nXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICBzdXBlciggb3B0aW9ucyApO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsaXphdGlvbiB3aXRoIHNvbWUgYWRkaXRpb25hbCBzY2VuZXJ5LXNwZWNpZmljIHdvcmsgZm9yIHZvaWNpbmdNYW5hZ2VyLlxuICAgKi9cbiAgcHVibGljIG92ZXJyaWRlIGluaXRpYWxpemUoIHVzZXJHZXN0dXJlRW1pdHRlcjogVFJlYWRPbmx5RW1pdHRlciwgb3B0aW9ucz86IFNwZWVjaFN5bnRoZXNpc0luaXRpYWxpemVPcHRpb25zICk6IHZvaWQge1xuICAgIHN1cGVyLmluaXRpYWxpemUoIHVzZXJHZXN0dXJlRW1pdHRlciwgb3B0aW9ucyApO1xuXG4gICAgLy8gVGhlIGNvbnRyb2wga2V5IHdpbGwgc3RvcCB0aGUgc3ludGggZnJvbSBzcGVha2luZyBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgdXR0ZXJhbmNlLiBUaGlzIGtleSB3YXMgZGVjaWRlZCBiZWNhdXNlXG4gICAgLy8gbW9zdCBtYWpvciBzY3JlZW4gcmVhZGVycyB3aWxsIHN0b3Agc3BlZWNoIHdoZW4gdGhpcyBrZXkgaXMgcHJlc3NlZFxuICAgIGdsb2JhbEtleVN0YXRlVHJhY2tlci5rZXl1cEVtaXR0ZXIuYWRkTGlzdGVuZXIoIGRvbUV2ZW50ID0+IHtcbiAgICAgIGlmICggS2V5Ym9hcmRVdGlscy5pc0NvbnRyb2xLZXkoIGRvbUV2ZW50ICkgKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfSApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB2b2ljaW5nIGlzIHN1cHBvcnRlZCBmb3IgdGhlIHByb3ZpZGVkIGxvY2FsZS4gQ3VycmVudGx5LCBvbmx5IEVuZ2xpc2ggaXMgc3VwcG9ydGVkLlxuICAgKiBAcGFyYW0gbG9jYWxlIC0gdGhlIGxvY2FsZSBzdHJpbmdcbiAgICovXG4gIHB1YmxpYyB2b2ljaW5nU3VwcG9ydGVkRm9yTG9jYWxlKCBsb2NhbGU6IHN0cmluZyApOiBib29sZWFuIHtcbiAgICByZXR1cm4gbG9jYWxlLnN0YXJ0c1dpdGgoICdlbicgKTtcbiAgfVxufVxuXG5jb25zdCB2b2ljaW5nTWFuYWdlciA9IG5ldyBWb2ljaW5nTWFuYWdlcigpO1xuXG5zY2VuZXJ5LnJlZ2lzdGVyKCAndm9pY2luZ01hbmFnZXInLCB2b2ljaW5nTWFuYWdlciApO1xuZXhwb3J0IGRlZmF1bHQgdm9pY2luZ01hbmFnZXI7Il0sIm5hbWVzIjpbIm9wdGlvbml6ZSIsIlNwZWVjaFN5bnRoZXNpc0Fubm91bmNlciIsImdsb2JhbEtleVN0YXRlVHJhY2tlciIsIktleWJvYXJkVXRpbHMiLCJzY2VuZXJ5IiwiVm9pY2luZ01hbmFnZXIiLCJpbml0aWFsaXplIiwidXNlckdlc3R1cmVFbWl0dGVyIiwib3B0aW9ucyIsImtleXVwRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZG9tRXZlbnQiLCJpc0NvbnRyb2xLZXkiLCJjYW5jZWwiLCJ2b2ljaW5nU3VwcG9ydGVkRm9yTG9jYWxlIiwibG9jYWxlIiwic3RhcnRzV2l0aCIsInByb3ZpZGVkT3B0aW9ucyIsInJlc3BlY3RSZXNwb25zZUNvbGxlY3RvclByb3BlcnRpZXMiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwidm9pY2luZ01hbmFnZXIiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7Ozs7O0NBT0MsR0FHRCxPQUFPQSxlQUFxQyx3Q0FBd0M7QUFDcEYsT0FBT0MsOEJBQXFHLDZEQUE2RDtBQUN6SyxTQUFTQyxxQkFBcUIsRUFBRUMsYUFBYSxFQUFFQyxPQUFPLFFBQVEsbUJBQW1CO0FBS2pGLElBQUEsQUFBTUMsaUJBQU4sTUFBTUEsdUJBQXVCSjtJQWUzQjs7R0FFQyxHQUNELEFBQWdCSyxXQUFZQyxrQkFBb0MsRUFBRUMsT0FBMEMsRUFBUztRQUNuSCxLQUFLLENBQUNGLFdBQVlDLG9CQUFvQkM7UUFFdEMsa0hBQWtIO1FBQ2xILHNFQUFzRTtRQUN0RU4sc0JBQXNCTyxZQUFZLENBQUNDLFdBQVcsQ0FBRUMsQ0FBQUE7WUFDOUMsSUFBS1IsY0FBY1MsWUFBWSxDQUFFRCxXQUFhO2dCQUM1QyxJQUFJLENBQUNFLE1BQU07WUFDYjtRQUNGO0lBQ0Y7SUFFQTs7O0dBR0MsR0FDRCxBQUFPQywwQkFBMkJDLE1BQWMsRUFBWTtRQUMxRCxPQUFPQSxPQUFPQyxVQUFVLENBQUU7SUFDNUI7SUFuQ0EsWUFBb0JDLGVBQXVDLENBQUc7UUFFNUQsTUFBTVQsVUFBVVIsWUFBa0Y7WUFFaEcsaUZBQWlGO1lBQ2pGa0Isb0NBQW9DO1lBRXBDLFVBQVU7WUFDVkMscUJBQXFCO1FBQ3ZCLEdBQUdGO1FBRUgsS0FBSyxDQUFFVDtJQUNUO0FBd0JGO0FBRUEsTUFBTVksaUJBQWlCLElBQUlmO0FBRTNCRCxRQUFRaUIsUUFBUSxDQUFFLGtCQUFrQkQ7QUFDcEMsZUFBZUEsZUFBZSJ9