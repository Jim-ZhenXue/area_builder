// Copyright 2017-2024, University of Colorado Boulder
/**
 * Controller that creates and keeps an SVG radial gradient up-to-date with a Scenery RadialGradient
 *
 * SVG gradients, see http://www.w3.org/TR/SVG/pservers.html
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import Pool from '../../../phet-core/js/Pool.js';
import { scenery, SVGGradient, svgns } from '../imports.js';
let SVGRadialGradient = class SVGRadialGradient extends SVGGradient {
    initialize(svgBlock, radialGradient) {
        sceneryLog && sceneryLog.Paints && sceneryLog.Paints(`[SVGRadialGradient] initialize ${radialGradient.id}`);
        sceneryLog && sceneryLog.Paints && sceneryLog.push();
        super.initialize(svgBlock, radialGradient);
        // Radial-specific setup
        this.definition.setAttribute('cx', '' + radialGradient.largePoint.x);
        this.definition.setAttribute('cy', '' + radialGradient.largePoint.y);
        this.definition.setAttribute('r', '' + radialGradient.maxRadius);
        this.definition.setAttribute('fx', '' + radialGradient.focalPoint.x);
        this.definition.setAttribute('fy', '' + radialGradient.focalPoint.y);
        sceneryLog && sceneryLog.Paints && sceneryLog.pop();
        return this;
    }
    /**
   * Creates the gradient-type-specific definition.
   */ createDefinition() {
        return document.createElementNS(svgns, 'radialGradient');
    }
    freeToPool() {
        SVGRadialGradient.pool.freeToPool(this);
    }
    constructor(svgBlock, gradient){
        super(svgBlock, gradient);
    }
};
SVGRadialGradient.pool = new Pool(SVGRadialGradient);
export { SVGRadialGradient as default };
scenery.register('SVGRadialGradient', SVGRadialGradient);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvZGlzcGxheS9TVkdSYWRpYWxHcmFkaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBDb250cm9sbGVyIHRoYXQgY3JlYXRlcyBhbmQga2VlcHMgYW4gU1ZHIHJhZGlhbCBncmFkaWVudCB1cC10by1kYXRlIHdpdGggYSBTY2VuZXJ5IFJhZGlhbEdyYWRpZW50XG4gKlxuICogU1ZHIGdyYWRpZW50cywgc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9wc2VydmVycy5odG1sXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBQb29sLCB7IFRQb29sYWJsZSB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9Qb29sLmpzJztcbmltcG9ydCB7IFJhZGlhbEdyYWRpZW50LCBzY2VuZXJ5LCBTVkdCbG9jaywgU1ZHR3JhZGllbnQsIHN2Z25zIH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNWR1JhZGlhbEdyYWRpZW50IGV4dGVuZHMgU1ZHR3JhZGllbnQgaW1wbGVtZW50cyBUUG9vbGFibGUge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3ZnQmxvY2s6IFNWR0Jsb2NrLCBncmFkaWVudDogUmFkaWFsR3JhZGllbnQgKSB7XG4gICAgc3VwZXIoIHN2Z0Jsb2NrLCBncmFkaWVudCApO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIGluaXRpYWxpemUoIHN2Z0Jsb2NrOiBTVkdCbG9jaywgcmFkaWFsR3JhZGllbnQ6IFJhZGlhbEdyYWRpZW50ICk6IHRoaXMge1xuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoIGBbU1ZHUmFkaWFsR3JhZGllbnRdIGluaXRpYWxpemUgJHtyYWRpYWxHcmFkaWVudC5pZH1gICk7XG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnB1c2goKTtcblxuICAgIHN1cGVyLmluaXRpYWxpemUoIHN2Z0Jsb2NrLCByYWRpYWxHcmFkaWVudCApO1xuXG4gICAgLy8gUmFkaWFsLXNwZWNpZmljIHNldHVwXG4gICAgdGhpcy5kZWZpbml0aW9uLnNldEF0dHJpYnV0ZSggJ2N4JywgJycgKyByYWRpYWxHcmFkaWVudC5sYXJnZVBvaW50LnggKTtcbiAgICB0aGlzLmRlZmluaXRpb24uc2V0QXR0cmlidXRlKCAnY3knLCAnJyArIHJhZGlhbEdyYWRpZW50LmxhcmdlUG9pbnQueSApO1xuICAgIHRoaXMuZGVmaW5pdGlvbi5zZXRBdHRyaWJ1dGUoICdyJywgJycgKyByYWRpYWxHcmFkaWVudC5tYXhSYWRpdXMgKTtcbiAgICB0aGlzLmRlZmluaXRpb24uc2V0QXR0cmlidXRlKCAnZngnLCAnJyArIHJhZGlhbEdyYWRpZW50LmZvY2FsUG9pbnQueCApO1xuICAgIHRoaXMuZGVmaW5pdGlvbi5zZXRBdHRyaWJ1dGUoICdmeScsICcnICsgcmFkaWFsR3JhZGllbnQuZm9jYWxQb2ludC55ICk7XG5cbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucG9wKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBncmFkaWVudC10eXBlLXNwZWNpZmljIGRlZmluaXRpb24uXG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlRGVmaW5pdGlvbigpOiBTVkdSYWRpYWxHcmFkaWVudEVsZW1lbnQge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z25zLCAncmFkaWFsR3JhZGllbnQnICk7XG4gIH1cblxuICBwdWJsaWMgZnJlZVRvUG9vbCgpOiB2b2lkIHtcbiAgICBTVkdSYWRpYWxHcmFkaWVudC5wb29sLmZyZWVUb1Bvb2woIHRoaXMgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcG9vbCA9IG5ldyBQb29sKCBTVkdSYWRpYWxHcmFkaWVudCApO1xufVxuXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnU1ZHUmFkaWFsR3JhZGllbnQnLCBTVkdSYWRpYWxHcmFkaWVudCApOyJdLCJuYW1lcyI6WyJQb29sIiwic2NlbmVyeSIsIlNWR0dyYWRpZW50Iiwic3ZnbnMiLCJTVkdSYWRpYWxHcmFkaWVudCIsImluaXRpYWxpemUiLCJzdmdCbG9jayIsInJhZGlhbEdyYWRpZW50Iiwic2NlbmVyeUxvZyIsIlBhaW50cyIsImlkIiwicHVzaCIsImRlZmluaXRpb24iLCJzZXRBdHRyaWJ1dGUiLCJsYXJnZVBvaW50IiwieCIsInkiLCJtYXhSYWRpdXMiLCJmb2NhbFBvaW50IiwicG9wIiwiY3JlYXRlRGVmaW5pdGlvbiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiZnJlZVRvUG9vbCIsInBvb2wiLCJncmFkaWVudCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7OztDQU1DLEdBRUQsT0FBT0EsVUFBeUIsZ0NBQWdDO0FBQ2hFLFNBQXlCQyxPQUFPLEVBQVlDLFdBQVcsRUFBRUMsS0FBSyxRQUFRLGdCQUFnQjtBQUV2RSxJQUFBLEFBQU1DLG9CQUFOLE1BQU1BLDBCQUEwQkY7SUFNN0JHLFdBQVlDLFFBQWtCLEVBQUVDLGNBQThCLEVBQVM7UUFDckZDLGNBQWNBLFdBQVdDLE1BQU0sSUFBSUQsV0FBV0MsTUFBTSxDQUFFLENBQUMsK0JBQStCLEVBQUVGLGVBQWVHLEVBQUUsRUFBRTtRQUMzR0YsY0FBY0EsV0FBV0MsTUFBTSxJQUFJRCxXQUFXRyxJQUFJO1FBRWxELEtBQUssQ0FBQ04sV0FBWUMsVUFBVUM7UUFFNUIsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQ0ssVUFBVSxDQUFDQyxZQUFZLENBQUUsTUFBTSxLQUFLTixlQUFlTyxVQUFVLENBQUNDLENBQUM7UUFDcEUsSUFBSSxDQUFDSCxVQUFVLENBQUNDLFlBQVksQ0FBRSxNQUFNLEtBQUtOLGVBQWVPLFVBQVUsQ0FBQ0UsQ0FBQztRQUNwRSxJQUFJLENBQUNKLFVBQVUsQ0FBQ0MsWUFBWSxDQUFFLEtBQUssS0FBS04sZUFBZVUsU0FBUztRQUNoRSxJQUFJLENBQUNMLFVBQVUsQ0FBQ0MsWUFBWSxDQUFFLE1BQU0sS0FBS04sZUFBZVcsVUFBVSxDQUFDSCxDQUFDO1FBQ3BFLElBQUksQ0FBQ0gsVUFBVSxDQUFDQyxZQUFZLENBQUUsTUFBTSxLQUFLTixlQUFlVyxVQUFVLENBQUNGLENBQUM7UUFFcEVSLGNBQWNBLFdBQVdDLE1BQU0sSUFBSUQsV0FBV1csR0FBRztRQUVqRCxPQUFPLElBQUk7SUFDYjtJQUVBOztHQUVDLEdBQ0QsQUFBVUMsbUJBQTZDO1FBQ3JELE9BQU9DLFNBQVNDLGVBQWUsQ0FBRW5CLE9BQU87SUFDMUM7SUFFT29CLGFBQW1CO1FBQ3hCbkIsa0JBQWtCb0IsSUFBSSxDQUFDRCxVQUFVLENBQUUsSUFBSTtJQUN6QztJQS9CQSxZQUFvQmpCLFFBQWtCLEVBQUVtQixRQUF3QixDQUFHO1FBQ2pFLEtBQUssQ0FBRW5CLFVBQVVtQjtJQUNuQjtBQWdDRjtBQXBDcUJyQixrQkFtQ0lvQixPQUFPLElBQUl4QixLQUFNSTtBQW5DMUMsU0FBcUJBLCtCQW9DcEI7QUFFREgsUUFBUXlCLFFBQVEsQ0FBRSxxQkFBcUJ0QiJ9