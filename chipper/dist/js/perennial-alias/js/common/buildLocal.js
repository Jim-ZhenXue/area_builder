// Copyright 2017, University of Colorado Boulder
/**
 * Settings defined in buildLocal
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ const assert = require('assert');
const fs = require('fs');
const winston = require('winston');
// Handle the lack of build.json
let buildLocalObject;
try {
    buildLocalObject = JSON.parse(fs.readFileSync(`${process.env.HOME}/.phet/build-local.json`, 'utf8'));
} catch (e) {
    winston.warn('Missing or incorrect build-local.json!');
    buildLocalObject = {};
}
module.exports = {
    get devUsername () {
        assert(buildLocalObject.devUsername);
        return buildLocalObject.devUsername;
    },
    get buildServerAuthorizationCode () {
        assert(buildLocalObject.buildServerAuthorizationCode);
        return buildLocalObject.buildServerAuthorizationCode;
    },
    get phetDevGitHubAccessToken () {
        assert(buildLocalObject.phetDevGitHubAccessToken, 'The phetDevGitHubAccessToken field of build-local.json is required, and can be retrieved from the PhET ' + 'credentials document for the "Github Machine User" row with the node "phetDevGitHubAccessToken" (it is ' + 'a hexadecimal string).');
        return buildLocalObject.phetDevGitHubAccessToken;
    },
    get developerGithubAccessToken () {
        assert(buildLocalObject.developerGithubAccessToken, 'The developerGithubAccessToken field of build-local.json is required for the use of the scripts in' + 'phet-info/github-labels.  For information on how to create one, see' + 'https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line#creating-a-token');
        return buildLocalObject.developerGithubAccessToken;
    },
    get developerGithubUsername () {
        assert(buildLocalObject.developerGithubUsername, 'The developerGithubUsername field of build-local.json is required for the use of the scripts in' + 'phet-info/github-labels.');
        return buildLocalObject.developerGithubUsername;
    },
    get slackBotToken () {
        assert(buildLocalObject.slackBotToken, 'The slackBotToken field of build-local.json is required for CT Slack integration');
        return buildLocalObject.slackBotToken;
    },
    get slackSigningSecret () {
        assert(buildLocalObject.slackSigningSecret, 'The slackSigningSecret field of build-local.json is required for CT Slack integration');
        return buildLocalObject.slackSigningSecret;
    },
    // Wrappers are now deployed to the dev location (for convenience)
    devDeployServer: buildLocalObject.devDeployServer || 'bayes.colorado.edu',
    devDeployPath: buildLocalObject.devDeployPath || '/data/web/htdocs/dev/html/',
    decafDeployPath: buildLocalObject.decafDeployPath || '/data/web/htdocs/dev/decaf/',
    buildServerNotifyEmail: buildLocalObject.buildServerNotifyEmail || null,
    productionServerURL: buildLocalObject.productionServerURL || 'https://phet.colorado.edu',
    babelBranch: buildLocalObject.babelBranch || 'main',
    brands: buildLocalObject.brands || [
        'adapted-from-phet'
    ],
    // By default, run all tasks
    // check local preferences for overrides for which tasks to turn off
    // see grunt/tasks/pre-commit.ts
    hookPreCommit: buildLocalObject.hookPreCommit || {},
    // Set to true to mark a codebase as supported by a phet developer. This unlocks internal behavior that is not
    // desirable to outside collaborators (or may just not work). See https://github.com/phetsims/special-ops/issues/268
    isPhetTeamMember: !!buildLocalObject.isPhetTeamMember
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BlcmVubmlhbC1hbGlhcy9qcy9jb21tb24vYnVpbGRMb2NhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogU2V0dGluZ3MgZGVmaW5lZCBpbiBidWlsZExvY2FsXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCAnd2luc3RvbicgKTtcblxuLy8gSGFuZGxlIHRoZSBsYWNrIG9mIGJ1aWxkLmpzb25cbmxldCBidWlsZExvY2FsT2JqZWN0O1xudHJ5IHtcbiAgYnVpbGRMb2NhbE9iamVjdCA9IEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLnBoZXQvYnVpbGQtbG9jYWwuanNvbmAsICd1dGY4JyApICk7XG59XG5jYXRjaCggZSApIHtcbiAgd2luc3Rvbi53YXJuKCAnTWlzc2luZyBvciBpbmNvcnJlY3QgYnVpbGQtbG9jYWwuanNvbiEnICk7XG4gIGJ1aWxkTG9jYWxPYmplY3QgPSB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldCBkZXZVc2VybmFtZSgpIHtcbiAgICBhc3NlcnQoIGJ1aWxkTG9jYWxPYmplY3QuZGV2VXNlcm5hbWUgKTtcbiAgICByZXR1cm4gYnVpbGRMb2NhbE9iamVjdC5kZXZVc2VybmFtZTtcbiAgfSxcbiAgZ2V0IGJ1aWxkU2VydmVyQXV0aG9yaXphdGlvbkNvZGUoKSB7XG4gICAgYXNzZXJ0KCBidWlsZExvY2FsT2JqZWN0LmJ1aWxkU2VydmVyQXV0aG9yaXphdGlvbkNvZGUgKTtcbiAgICByZXR1cm4gYnVpbGRMb2NhbE9iamVjdC5idWlsZFNlcnZlckF1dGhvcml6YXRpb25Db2RlO1xuICB9LFxuICBnZXQgcGhldERldkdpdEh1YkFjY2Vzc1Rva2VuKCkge1xuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5waGV0RGV2R2l0SHViQWNjZXNzVG9rZW4sXG4gICAgICAnVGhlIHBoZXREZXZHaXRIdWJBY2Nlc3NUb2tlbiBmaWVsZCBvZiBidWlsZC1sb2NhbC5qc29uIGlzIHJlcXVpcmVkLCBhbmQgY2FuIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBQaEVUICcgK1xuICAgICAgJ2NyZWRlbnRpYWxzIGRvY3VtZW50IGZvciB0aGUgXCJHaXRodWIgTWFjaGluZSBVc2VyXCIgcm93IHdpdGggdGhlIG5vZGUgXCJwaGV0RGV2R2l0SHViQWNjZXNzVG9rZW5cIiAoaXQgaXMgJyArXG4gICAgICAnYSBoZXhhZGVjaW1hbCBzdHJpbmcpLicgKTtcbiAgICByZXR1cm4gYnVpbGRMb2NhbE9iamVjdC5waGV0RGV2R2l0SHViQWNjZXNzVG9rZW47XG4gIH0sXG5cbiAgZ2V0IGRldmVsb3BlckdpdGh1YkFjY2Vzc1Rva2VuKCkge1xuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5kZXZlbG9wZXJHaXRodWJBY2Nlc3NUb2tlbixcbiAgICAgICdUaGUgZGV2ZWxvcGVyR2l0aHViQWNjZXNzVG9rZW4gZmllbGQgb2YgYnVpbGQtbG9jYWwuanNvbiBpcyByZXF1aXJlZCBmb3IgdGhlIHVzZSBvZiB0aGUgc2NyaXB0cyBpbicgK1xuICAgICAgJ3BoZXQtaW5mby9naXRodWItbGFiZWxzLiAgRm9yIGluZm9ybWF0aW9uIG9uIGhvdyB0byBjcmVhdGUgb25lLCBzZWUnICtcbiAgICAgICdodHRwczovL2hlbHAuZ2l0aHViLmNvbS9lbi9naXRodWIvYXV0aGVudGljYXRpbmctdG8tZ2l0aHViL2NyZWF0aW5nLWEtcGVyc29uYWwtYWNjZXNzLXRva2VuLWZvci10aGUtY29tbWFuZC1saW5lI2NyZWF0aW5nLWEtdG9rZW4nICk7XG4gICAgcmV0dXJuIGJ1aWxkTG9jYWxPYmplY3QuZGV2ZWxvcGVyR2l0aHViQWNjZXNzVG9rZW47XG4gIH0sXG4gIGdldCBkZXZlbG9wZXJHaXRodWJVc2VybmFtZSgpIHtcbiAgICBhc3NlcnQoIGJ1aWxkTG9jYWxPYmplY3QuZGV2ZWxvcGVyR2l0aHViVXNlcm5hbWUsXG4gICAgICAnVGhlIGRldmVsb3BlckdpdGh1YlVzZXJuYW1lIGZpZWxkIG9mIGJ1aWxkLWxvY2FsLmpzb24gaXMgcmVxdWlyZWQgZm9yIHRoZSB1c2Ugb2YgdGhlIHNjcmlwdHMgaW4nICtcbiAgICAgICdwaGV0LWluZm8vZ2l0aHViLWxhYmVscy4nICk7XG4gICAgcmV0dXJuIGJ1aWxkTG9jYWxPYmplY3QuZGV2ZWxvcGVyR2l0aHViVXNlcm5hbWU7XG4gIH0sXG4gIGdldCBzbGFja0JvdFRva2VuKCkge1xuICAgIGFzc2VydCggYnVpbGRMb2NhbE9iamVjdC5zbGFja0JvdFRva2VuLFxuICAgICAgJ1RoZSBzbGFja0JvdFRva2VuIGZpZWxkIG9mIGJ1aWxkLWxvY2FsLmpzb24gaXMgcmVxdWlyZWQgZm9yIENUIFNsYWNrIGludGVncmF0aW9uJyApO1xuICAgIHJldHVybiBidWlsZExvY2FsT2JqZWN0LnNsYWNrQm90VG9rZW47XG4gIH0sXG4gIGdldCBzbGFja1NpZ25pbmdTZWNyZXQoKSB7XG4gICAgYXNzZXJ0KCBidWlsZExvY2FsT2JqZWN0LnNsYWNrU2lnbmluZ1NlY3JldCxcbiAgICAgICdUaGUgc2xhY2tTaWduaW5nU2VjcmV0IGZpZWxkIG9mIGJ1aWxkLWxvY2FsLmpzb24gaXMgcmVxdWlyZWQgZm9yIENUIFNsYWNrIGludGVncmF0aW9uJyApO1xuICAgIHJldHVybiBidWlsZExvY2FsT2JqZWN0LnNsYWNrU2lnbmluZ1NlY3JldDtcbiAgfSxcblxuICAvLyBXcmFwcGVycyBhcmUgbm93IGRlcGxveWVkIHRvIHRoZSBkZXYgbG9jYXRpb24gKGZvciBjb252ZW5pZW5jZSlcbiAgZGV2RGVwbG95U2VydmVyOiBidWlsZExvY2FsT2JqZWN0LmRldkRlcGxveVNlcnZlciB8fCAnYmF5ZXMuY29sb3JhZG8uZWR1JyxcbiAgZGV2RGVwbG95UGF0aDogYnVpbGRMb2NhbE9iamVjdC5kZXZEZXBsb3lQYXRoIHx8ICcvZGF0YS93ZWIvaHRkb2NzL2Rldi9odG1sLycsXG4gIGRlY2FmRGVwbG95UGF0aDogYnVpbGRMb2NhbE9iamVjdC5kZWNhZkRlcGxveVBhdGggfHwgJy9kYXRhL3dlYi9odGRvY3MvZGV2L2RlY2FmLycsXG4gIGJ1aWxkU2VydmVyTm90aWZ5RW1haWw6IGJ1aWxkTG9jYWxPYmplY3QuYnVpbGRTZXJ2ZXJOb3RpZnlFbWFpbCB8fCBudWxsLFxuICBwcm9kdWN0aW9uU2VydmVyVVJMOiBidWlsZExvY2FsT2JqZWN0LnByb2R1Y3Rpb25TZXJ2ZXJVUkwgfHwgJ2h0dHBzOi8vcGhldC5jb2xvcmFkby5lZHUnLFxuICBiYWJlbEJyYW5jaDogYnVpbGRMb2NhbE9iamVjdC5iYWJlbEJyYW5jaCB8fCAnbWFpbicsXG5cbiAgYnJhbmRzOiBidWlsZExvY2FsT2JqZWN0LmJyYW5kcyB8fCBbICdhZGFwdGVkLWZyb20tcGhldCcgXSxcblxuICAvLyBCeSBkZWZhdWx0LCBydW4gYWxsIHRhc2tzXG4gIC8vIGNoZWNrIGxvY2FsIHByZWZlcmVuY2VzIGZvciBvdmVycmlkZXMgZm9yIHdoaWNoIHRhc2tzIHRvIHR1cm4gb2ZmXG4gIC8vIHNlZSBncnVudC90YXNrcy9wcmUtY29tbWl0LnRzXG4gIGhvb2tQcmVDb21taXQ6IGJ1aWxkTG9jYWxPYmplY3QuaG9va1ByZUNvbW1pdCB8fCB7fSxcblxuICAvLyBTZXQgdG8gdHJ1ZSB0byBtYXJrIGEgY29kZWJhc2UgYXMgc3VwcG9ydGVkIGJ5IGEgcGhldCBkZXZlbG9wZXIuIFRoaXMgdW5sb2NrcyBpbnRlcm5hbCBiZWhhdmlvciB0aGF0IGlzIG5vdFxuICAvLyBkZXNpcmFibGUgdG8gb3V0c2lkZSBjb2xsYWJvcmF0b3JzIChvciBtYXkganVzdCBub3Qgd29yaykuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3BlY2lhbC1vcHMvaXNzdWVzLzI2OFxuICBpc1BoZXRUZWFtTWVtYmVyOiAhIWJ1aWxkTG9jYWxPYmplY3QuaXNQaGV0VGVhbU1lbWJlclxufTsiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImZzIiwid2luc3RvbiIsImJ1aWxkTG9jYWxPYmplY3QiLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJwcm9jZXNzIiwiZW52IiwiSE9NRSIsImUiLCJ3YXJuIiwibW9kdWxlIiwiZXhwb3J0cyIsImRldlVzZXJuYW1lIiwiYnVpbGRTZXJ2ZXJBdXRob3JpemF0aW9uQ29kZSIsInBoZXREZXZHaXRIdWJBY2Nlc3NUb2tlbiIsImRldmVsb3BlckdpdGh1YkFjY2Vzc1Rva2VuIiwiZGV2ZWxvcGVyR2l0aHViVXNlcm5hbWUiLCJzbGFja0JvdFRva2VuIiwic2xhY2tTaWduaW5nU2VjcmV0IiwiZGV2RGVwbG95U2VydmVyIiwiZGV2RGVwbG95UGF0aCIsImRlY2FmRGVwbG95UGF0aCIsImJ1aWxkU2VydmVyTm90aWZ5RW1haWwiLCJwcm9kdWN0aW9uU2VydmVyVVJMIiwiYmFiZWxCcmFuY2giLCJicmFuZHMiLCJob29rUHJlQ29tbWl0IiwiaXNQaGV0VGVhbU1lbWJlciJdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBRWpEOzs7O0NBSUMsR0FFRCxNQUFNQSxTQUFTQyxRQUFTO0FBQ3hCLE1BQU1DLEtBQUtELFFBQVM7QUFDcEIsTUFBTUUsVUFBVUYsUUFBUztBQUV6QixnQ0FBZ0M7QUFDaEMsSUFBSUc7QUFDSixJQUFJO0lBQ0ZBLG1CQUFtQkMsS0FBS0MsS0FBSyxDQUFFSixHQUFHSyxZQUFZLENBQUUsR0FBR0MsUUFBUUMsR0FBRyxDQUFDQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsRUFBRTtBQUNoRyxFQUNBLE9BQU9DLEdBQUk7SUFDVFIsUUFBUVMsSUFBSSxDQUFFO0lBQ2RSLG1CQUFtQixDQUFDO0FBQ3RCO0FBRUFTLE9BQU9DLE9BQU8sR0FBRztJQUNmLElBQUlDLGVBQWM7UUFDaEJmLE9BQVFJLGlCQUFpQlcsV0FBVztRQUNwQyxPQUFPWCxpQkFBaUJXLFdBQVc7SUFDckM7SUFDQSxJQUFJQyxnQ0FBK0I7UUFDakNoQixPQUFRSSxpQkFBaUJZLDRCQUE0QjtRQUNyRCxPQUFPWixpQkFBaUJZLDRCQUE0QjtJQUN0RDtJQUNBLElBQUlDLDRCQUEyQjtRQUM3QmpCLE9BQVFJLGlCQUFpQmEsd0JBQXdCLEVBQy9DLDRHQUNBLDRHQUNBO1FBQ0YsT0FBT2IsaUJBQWlCYSx3QkFBd0I7SUFDbEQ7SUFFQSxJQUFJQyw4QkFBNkI7UUFDL0JsQixPQUFRSSxpQkFBaUJjLDBCQUEwQixFQUNqRCx1R0FDQSx3RUFDQTtRQUNGLE9BQU9kLGlCQUFpQmMsMEJBQTBCO0lBQ3BEO0lBQ0EsSUFBSUMsMkJBQTBCO1FBQzVCbkIsT0FBUUksaUJBQWlCZSx1QkFBdUIsRUFDOUMsb0dBQ0E7UUFDRixPQUFPZixpQkFBaUJlLHVCQUF1QjtJQUNqRDtJQUNBLElBQUlDLGlCQUFnQjtRQUNsQnBCLE9BQVFJLGlCQUFpQmdCLGFBQWEsRUFDcEM7UUFDRixPQUFPaEIsaUJBQWlCZ0IsYUFBYTtJQUN2QztJQUNBLElBQUlDLHNCQUFxQjtRQUN2QnJCLE9BQVFJLGlCQUFpQmlCLGtCQUFrQixFQUN6QztRQUNGLE9BQU9qQixpQkFBaUJpQixrQkFBa0I7SUFDNUM7SUFFQSxrRUFBa0U7SUFDbEVDLGlCQUFpQmxCLGlCQUFpQmtCLGVBQWUsSUFBSTtJQUNyREMsZUFBZW5CLGlCQUFpQm1CLGFBQWEsSUFBSTtJQUNqREMsaUJBQWlCcEIsaUJBQWlCb0IsZUFBZSxJQUFJO0lBQ3JEQyx3QkFBd0JyQixpQkFBaUJxQixzQkFBc0IsSUFBSTtJQUNuRUMscUJBQXFCdEIsaUJBQWlCc0IsbUJBQW1CLElBQUk7SUFDN0RDLGFBQWF2QixpQkFBaUJ1QixXQUFXLElBQUk7SUFFN0NDLFFBQVF4QixpQkFBaUJ3QixNQUFNLElBQUk7UUFBRTtLQUFxQjtJQUUxRCw0QkFBNEI7SUFDNUIsb0VBQW9FO0lBQ3BFLGdDQUFnQztJQUNoQ0MsZUFBZXpCLGlCQUFpQnlCLGFBQWEsSUFBSSxDQUFDO0lBRWxELDhHQUE4RztJQUM5RyxvSEFBb0g7SUFDcEhDLGtCQUFrQixDQUFDLENBQUMxQixpQkFBaUIwQixnQkFBZ0I7QUFDdkQifQ==