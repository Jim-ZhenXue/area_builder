// Copyright 2024, University of Colorado Boulder
// Respect the global assert flag, which can be set to false to disable all assertions
const isBrowser = globalThis.hasOwnProperty('window');
const isNode = !isBrowser;
/**
 * Like assert.js, with the following differences:
 *
 * 1. Can be used in browser/node/both code
 * 2. Call are stripped out during the babel step, without another guard
 * 3. Adds an `asserts` type to the predicate, which is a TypeScript feature that allows the type checker to
 *    understand that the predicate is true after the call to affirm.
 *
 * We choose the term affirm since it has a positive connotation, and has a similar letter pattern as assert, and since
 * the term `affirm` is not otherwise used in our codebase.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ export default function affirm(predicate, ...messages) {
    // Cast 'globalThis' to 'GlobalWithAssert' to access 'assert' safely
    const isAssertEnabled = isNode || globalThis.assert;
    if (isAssertEnabled && !predicate) {
        // Add "Affirmation Failed" to the front of the message list
        const affirmPrefix = messages.length > 0 ? 'Affirmation failed: ' : 'Affirmation failed';
        console.error(affirmPrefix, ...messages);
        affirmationHooks.forEach((hook)=>hook());
        if (debuggerMode) {
            debugger; // eslint-disable-line no-debugger
        }
        // Check if Error.stackTraceLimit exists and is writable
        const descriptor = Object.getOwnPropertyDescriptor(Error, 'stackTraceLimit');
        const stackTraceWritable = descriptor && (descriptor.writable || descriptor.set && typeof descriptor.set === 'function');
        if (stackTraceWritable) {
            // @ts-expect-error - At some point this will no longer be experimental for the Browser error constructor, but not this day.
            Error.stackTraceLimit = 20;
        }
        throw new Error(affirmPrefix + messages.join('\n '));
    }
}
const affirmationHooks = [];
export function addAffirmationHook(hook) {
    affirmationHooks.push(hook);
}
let debuggerMode = false;
export function setAffirmationDebuggerMode(isDebuggerMode) {
    debuggerMode = isDebuggerMode;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BlcmVubmlhbC1hbGlhcy9qcy9icm93c2VyLWFuZC1ub2RlL2FmZmlybS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbmltcG9ydCB7IEludGVudGlvbmFsUGVyZW5uaWFsQW55IH0gZnJvbSAnLi9QZXJlbm5pYWxUeXBlcy5qcyc7XG5cbi8vIERlZmluZSBhbiBpbnRlcmZhY2UgdGhhdCBpbmNsdWRlcyB0aGUgb3B0aW9uYWwgJ2Fzc2VydCcgcHJvcGVydHlcbnR5cGUgR2xvYmFsV2l0aEFzc2VydCA9IHtcbiAgYXNzZXJ0PzogYm9vbGVhbjtcbn07XG5cbi8vIFJlc3BlY3QgdGhlIGdsb2JhbCBhc3NlcnQgZmxhZywgd2hpY2ggY2FuIGJlIHNldCB0byBmYWxzZSB0byBkaXNhYmxlIGFsbCBhc3NlcnRpb25zXG5jb25zdCBpc0Jyb3dzZXIgPSBnbG9iYWxUaGlzLmhhc093blByb3BlcnR5KCAnd2luZG93JyApO1xuY29uc3QgaXNOb2RlID0gIWlzQnJvd3NlcjtcblxuLyoqXG4gKiBMaWtlIGFzc2VydC5qcywgd2l0aCB0aGUgZm9sbG93aW5nIGRpZmZlcmVuY2VzOlxuICpcbiAqIDEuIENhbiBiZSB1c2VkIGluIGJyb3dzZXIvbm9kZS9ib3RoIGNvZGVcbiAqIDIuIENhbGwgYXJlIHN0cmlwcGVkIG91dCBkdXJpbmcgdGhlIGJhYmVsIHN0ZXAsIHdpdGhvdXQgYW5vdGhlciBndWFyZFxuICogMy4gQWRkcyBhbiBgYXNzZXJ0c2AgdHlwZSB0byB0aGUgcHJlZGljYXRlLCB3aGljaCBpcyBhIFR5cGVTY3JpcHQgZmVhdHVyZSB0aGF0IGFsbG93cyB0aGUgdHlwZSBjaGVja2VyIHRvXG4gKiAgICB1bmRlcnN0YW5kIHRoYXQgdGhlIHByZWRpY2F0ZSBpcyB0cnVlIGFmdGVyIHRoZSBjYWxsIHRvIGFmZmlybS5cbiAqXG4gKiBXZSBjaG9vc2UgdGhlIHRlcm0gYWZmaXJtIHNpbmNlIGl0IGhhcyBhIHBvc2l0aXZlIGNvbm5vdGF0aW9uLCBhbmQgaGFzIGEgc2ltaWxhciBsZXR0ZXIgcGF0dGVybiBhcyBhc3NlcnQsIGFuZCBzaW5jZVxuICogdGhlIHRlcm0gYGFmZmlybWAgaXMgbm90IG90aGVyd2lzZSB1c2VkIGluIG91ciBjb2RlYmFzZS5cbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZmZpcm0oIHByZWRpY2F0ZTogdW5rbm93biwgLi4ubWVzc2FnZXM6IEludGVudGlvbmFsUGVyZW5uaWFsQW55W10gKTogYXNzZXJ0cyBwcmVkaWNhdGUge1xuXG4gIC8vIENhc3QgJ2dsb2JhbFRoaXMnIHRvICdHbG9iYWxXaXRoQXNzZXJ0JyB0byBhY2Nlc3MgJ2Fzc2VydCcgc2FmZWx5XG4gIGNvbnN0IGlzQXNzZXJ0RW5hYmxlZCA9IGlzTm9kZSB8fCAoIGdsb2JhbFRoaXMgYXMgR2xvYmFsV2l0aEFzc2VydCApLmFzc2VydDtcblxuICBpZiAoIGlzQXNzZXJ0RW5hYmxlZCAmJiAhcHJlZGljYXRlICkge1xuXG4gICAgLy8gQWRkIFwiQWZmaXJtYXRpb24gRmFpbGVkXCIgdG8gdGhlIGZyb250IG9mIHRoZSBtZXNzYWdlIGxpc3RcbiAgICBjb25zdCBhZmZpcm1QcmVmaXggPSBtZXNzYWdlcy5sZW5ndGggPiAwID8gJ0FmZmlybWF0aW9uIGZhaWxlZDogJyA6ICdBZmZpcm1hdGlvbiBmYWlsZWQnO1xuICAgIGNvbnNvbGUuZXJyb3IoIGFmZmlybVByZWZpeCwgLi4ubWVzc2FnZXMgKTtcblxuICAgIGFmZmlybWF0aW9uSG9va3MuZm9yRWFjaCggaG9vayA9PiBob29rKCkgKTtcblxuICAgIGlmICggZGVidWdnZXJNb2RlICkge1xuICAgICAgZGVidWdnZXI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZGVidWdnZXJcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBFcnJvci5zdGFja1RyYWNlTGltaXQgZXhpc3RzIGFuZCBpcyB3cml0YWJsZVxuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCBFcnJvciwgJ3N0YWNrVHJhY2VMaW1pdCcgKTtcbiAgICBjb25zdCBzdGFja1RyYWNlV3JpdGFibGUgPSBkZXNjcmlwdG9yICYmICggZGVzY3JpcHRvci53cml0YWJsZSB8fCAoIGRlc2NyaXB0b3Iuc2V0ICYmIHR5cGVvZiBkZXNjcmlwdG9yLnNldCA9PT0gJ2Z1bmN0aW9uJyApICk7XG5cbiAgICBpZiAoIHN0YWNrVHJhY2VXcml0YWJsZSApIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBBdCBzb21lIHBvaW50IHRoaXMgd2lsbCBubyBsb25nZXIgYmUgZXhwZXJpbWVudGFsIGZvciB0aGUgQnJvd3NlciBlcnJvciBjb25zdHJ1Y3RvciwgYnV0IG5vdCB0aGlzIGRheS5cbiAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IDIwO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvciggYWZmaXJtUHJlZml4ICsgbWVzc2FnZXMuam9pbiggJ1xcbiAnICkgKTtcbiAgfVxufVxuXG5jb25zdCBhZmZpcm1hdGlvbkhvb2tzOiAoICgpID0+IHZvaWQgKVtdID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRBZmZpcm1hdGlvbkhvb2soIGhvb2s6ICgpID0+IHZvaWQgKTogdm9pZCB7XG4gIGFmZmlybWF0aW9uSG9va3MucHVzaCggaG9vayApO1xufVxuXG5sZXQgZGVidWdnZXJNb2RlID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRBZmZpcm1hdGlvbkRlYnVnZ2VyTW9kZSggaXNEZWJ1Z2dlck1vZGU6IGJvb2xlYW4gKTogdm9pZCB7XG4gIGRlYnVnZ2VyTW9kZSA9IGlzRGVidWdnZXJNb2RlO1xufSJdLCJuYW1lcyI6WyJpc0Jyb3dzZXIiLCJnbG9iYWxUaGlzIiwiaGFzT3duUHJvcGVydHkiLCJpc05vZGUiLCJhZmZpcm0iLCJwcmVkaWNhdGUiLCJtZXNzYWdlcyIsImlzQXNzZXJ0RW5hYmxlZCIsImFzc2VydCIsImFmZmlybVByZWZpeCIsImxlbmd0aCIsImNvbnNvbGUiLCJlcnJvciIsImFmZmlybWF0aW9uSG9va3MiLCJmb3JFYWNoIiwiaG9vayIsImRlYnVnZ2VyTW9kZSIsImRlc2NyaXB0b3IiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJFcnJvciIsInN0YWNrVHJhY2VXcml0YWJsZSIsIndyaXRhYmxlIiwic2V0Iiwic3RhY2tUcmFjZUxpbWl0Iiwiam9pbiIsImFkZEFmZmlybWF0aW9uSG9vayIsInB1c2giLCJzZXRBZmZpcm1hdGlvbkRlYnVnZ2VyTW9kZSIsImlzRGVidWdnZXJNb2RlIl0sIm1hcHBpbmdzIjoiQUFBQSxpREFBaUQ7QUFTakQsc0ZBQXNGO0FBQ3RGLE1BQU1BLFlBQVlDLFdBQVdDLGNBQWMsQ0FBRTtBQUM3QyxNQUFNQyxTQUFTLENBQUNIO0FBRWhCOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDRCxlQUFlLFNBQVNJLE9BQVFDLFNBQWtCLEVBQUUsR0FBR0MsUUFBbUM7SUFFeEYsb0VBQW9FO0lBQ3BFLE1BQU1DLGtCQUFrQkosVUFBVSxBQUFFRixXQUFpQ08sTUFBTTtJQUUzRSxJQUFLRCxtQkFBbUIsQ0FBQ0YsV0FBWTtRQUVuQyw0REFBNEQ7UUFDNUQsTUFBTUksZUFBZUgsU0FBU0ksTUFBTSxHQUFHLElBQUkseUJBQXlCO1FBQ3BFQyxRQUFRQyxLQUFLLENBQUVILGlCQUFpQkg7UUFFaENPLGlCQUFpQkMsT0FBTyxDQUFFQyxDQUFBQSxPQUFRQTtRQUVsQyxJQUFLQyxjQUFlO1lBQ2xCLFFBQVMsRUFBQyxrQ0FBa0M7UUFDOUM7UUFFQSx3REFBd0Q7UUFDeEQsTUFBTUMsYUFBYUMsT0FBT0Msd0JBQXdCLENBQUVDLE9BQU87UUFDM0QsTUFBTUMscUJBQXFCSixjQUFnQkEsQ0FBQUEsV0FBV0ssUUFBUSxJQUFNTCxXQUFXTSxHQUFHLElBQUksT0FBT04sV0FBV00sR0FBRyxLQUFLLFVBQVc7UUFFM0gsSUFBS0Ysb0JBQXFCO1lBQ3hCLDRIQUE0SDtZQUM1SEQsTUFBTUksZUFBZSxHQUFHO1FBQzFCO1FBRUEsTUFBTSxJQUFJSixNQUFPWCxlQUFlSCxTQUFTbUIsSUFBSSxDQUFFO0lBQ2pEO0FBQ0Y7QUFFQSxNQUFNWixtQkFBcUMsRUFBRTtBQUU3QyxPQUFPLFNBQVNhLG1CQUFvQlgsSUFBZ0I7SUFDbERGLGlCQUFpQmMsSUFBSSxDQUFFWjtBQUN6QjtBQUVBLElBQUlDLGVBQWU7QUFFbkIsT0FBTyxTQUFTWSwyQkFBNEJDLGNBQXVCO0lBQ2pFYixlQUFlYTtBQUNqQiJ9