// Copyright 2021, University of Colorado Boulder
/* eslint-disable no-var */ /**
 * Ambient type declarations for PhET code.  Many of these definitions can be moved/disabled once the common code is
 * converted to TypeScript. Note that this file is in globals mode, so the `declare var` statements will be available
 * as globals like `phetio` and also as properties on the `window` object like `window.phetio`.
 *
 * See also phet-types-module.d.ts which is in module mode.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */ // NOTE: we cannot use IntentionalAny in this file because it is a global file, and IntentionalAny is a module file
// Therefore, we must a custom declaration. See https://github.com/phetsims/perennial/issues/406
// eslint-disable-next-line @typescript-eslint/no-explicit-any

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BlcmVubmlhbC1hbGlhcy9qcy9waGV0LXR5cGVzLmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cblxuLyoqXG4gKiBBbWJpZW50IHR5cGUgZGVjbGFyYXRpb25zIGZvciBQaEVUIGNvZGUuICBNYW55IG9mIHRoZXNlIGRlZmluaXRpb25zIGNhbiBiZSBtb3ZlZC9kaXNhYmxlZCBvbmNlIHRoZSBjb21tb24gY29kZSBpc1xuICogY29udmVydGVkIHRvIFR5cGVTY3JpcHQuIE5vdGUgdGhhdCB0aGlzIGZpbGUgaXMgaW4gZ2xvYmFscyBtb2RlLCBzbyB0aGUgYGRlY2xhcmUgdmFyYCBzdGF0ZW1lbnRzIHdpbGwgYmUgYXZhaWxhYmxlXG4gKiBhcyBnbG9iYWxzIGxpa2UgYHBoZXRpb2AgYW5kIGFsc28gYXMgcHJvcGVydGllcyBvbiB0aGUgYHdpbmRvd2Agb2JqZWN0IGxpa2UgYHdpbmRvdy5waGV0aW9gLlxuICpcbiAqIFNlZSBhbHNvIHBoZXQtdHlwZXMtbW9kdWxlLmQudHMgd2hpY2ggaXMgaW4gbW9kdWxlIG1vZGUuXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG4vLyBOT1RFOiB3ZSBjYW5ub3QgdXNlIEludGVudGlvbmFsQW55IGluIHRoaXMgZmlsZSBiZWNhdXNlIGl0IGlzIGEgZ2xvYmFsIGZpbGUsIGFuZCBJbnRlbnRpb25hbEFueSBpcyBhIG1vZHVsZSBmaWxlXG4vLyBUaGVyZWZvcmUsIHdlIG11c3QgYSBjdXN0b20gZGVjbGFyYXRpb24uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy80MDZcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG50eXBlIEFueSA9IGFueTtcblxuZGVjbGFyZSB2YXIgYXNzZXJ0OiB1bmRlZmluZWQgfCAoICggeDogQW55LCAuLi5tZXNzYWdlczogQW55W10gKSA9PiB2b2lkICk7XG5kZWNsYXJlIHZhciBhc3NlcnRTbG93OiB1bmRlZmluZWQgfCAoICggeDogQW55LCAuLi5tZXNzYWdlczogQW55W10gKSA9PiB2b2lkICk7XG5kZWNsYXJlIHZhciBzY2VuZXJ5TG9nOiBudWxsIHwgZmFsc2UgfCAoIFJlY29yZDxzdHJpbmcsICggb2I6IEFueSwgc3R5bGU/OiBzdHJpbmcgKSA9PiB2b2lkPiAmIHtcbiAgcHVzaCgpOiB2b2lkO1xuICBwb3AoKTogdm9pZDtcbiAgZ2V0RGVwdGgoKTogbnVtYmVyO1xufSApO1xuZGVjbGFyZSB2YXIgcGhldDogUmVjb3JkPHN0cmluZywgQW55PjtcblxuLy8gVE9ETzogVGhpcyBjYW4gYmUgbW92ZWQgdG8gUXVlcnlTdHJpbmdNYWNoaW5lIHdoZW4gaXQgaXMgbW92ZWQgdG8gVHlwZVNjcmlwdCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9xdWVyeS1zdHJpbmctbWFjaGluZS9pc3N1ZXMvNDlcbmRlY2xhcmUgdHlwZSBXYXJuaW5nID0ge1xuICBrZXk6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn07XG5cbi8vIE1hdGNoZXMgVFlQRSBkb2N1bWVudGF0aW9uIGluIFF1ZXJ5U3RyaW5nTWFjaGluZVxuZGVjbGFyZSB0eXBlIFF1ZXJ5U3RyaW5nTWFjaGluZVNjaGVtYSA9IHtcbiAgcHJpdmF0ZT86IGJvb2xlYW47XG4gIHB1YmxpYz86IGJvb2xlYW47XG59ICYgKFxuICB7XG4gICAgdHlwZTogJ2ZsYWcnO1xuICB9IHxcbiAge1xuICAgIHR5cGU6ICdib29sZWFuJztcbiAgICBkZWZhdWx0VmFsdWU/OiBib29sZWFuO1xuICB9IHxcbiAge1xuICAgIHR5cGU6ICdudW1iZXInO1xuICAgIGRlZmF1bHRWYWx1ZT86IG51bWJlcjtcbiAgICB2YWxpZFZhbHVlcz86IHJlYWRvbmx5IG51bWJlcltdO1xuICAgIGlzVmFsaWRWYWx1ZT86ICggbjogbnVtYmVyICkgPT4gYm9vbGVhbjtcbiAgfSB8XG4gIHtcbiAgICB0eXBlOiAnc3RyaW5nJztcbiAgICBkZWZhdWx0VmFsdWU/OiBzdHJpbmcgfCBudWxsO1xuICAgIHZhbGlkVmFsdWVzPzogcmVhZG9ubHkgKCBzdHJpbmcgfCBudWxsIClbXTtcbiAgICBpc1ZhbGlkVmFsdWU/OiAoIG46IHN0cmluZyB8IG51bGwgKSA9PiBib29sZWFuO1xuICB9IHxcbiAge1xuICAgIHR5cGU6ICdhcnJheSc7XG4gICAgZWxlbWVudFNjaGVtYTogUXVlcnlTdHJpbmdNYWNoaW5lU2NoZW1hO1xuICAgIHNlcGFyYXRvcj86IHN0cmluZztcbiAgICBkZWZhdWx0VmFsdWU/OiBudWxsIHwgcmVhZG9ubHkgQW55W107XG4gICAgdmFsaWRWYWx1ZXM/OiByZWFkb25seSBBbnlbXVtdO1xuICAgIGlzVmFsaWRWYWx1ZT86ICggbjogQW55W10gKSA9PiBib29sZWFuO1xuICB9IHxcbiAge1xuICAgIHR5cGU6ICdjdXN0b20nO1xuICAgIHBhcnNlOiAoIHN0cjogc3RyaW5nICkgPT4gQW55O1xuICAgIGRlZmF1bHRWYWx1ZT86IEFueTtcbiAgICB2YWxpZFZhbHVlcz86IHJlYWRvbmx5IEFueVtdO1xuICAgIGlzVmFsaWRWYWx1ZT86ICggbjogQW55ICkgPT4gYm9vbGVhbjtcbiAgfSApO1xuXG4vLyBDb252ZXJ0cyBhIFNjaGVtYSdzIHR5cGUgdG8gdGhlIGFjdHVhbCBUeXBlc2NyaXB0IHR5cGUgaXQgcmVwcmVzZW50c1xuZGVjbGFyZSB0eXBlIFF1ZXJ5TWFjaGluZVR5cGVUb1R5cGU8VD4gPSBUIGV4dGVuZHMgKCAnZmxhZycgfCAnYm9vbGVhbicgKSA/IGJvb2xlYW4gOiAoIFQgZXh0ZW5kcyAnbnVtYmVyJyA/IG51bWJlciA6ICggVCBleHRlbmRzICdzdHJpbmcnID8gKCBzdHJpbmcgfCBudWxsICkgOiAoIFQgZXh0ZW5kcyAnYXJyYXknID8gQW55W10gOiBBbnkgKSApICk7XG5cbnR5cGUgUVNNU2NoZW1hT2JqZWN0ID0gUmVjb3JkPHN0cmluZywgUXVlcnlTdHJpbmdNYWNoaW5lU2NoZW1hPjtcblxuZGVjbGFyZSB0eXBlIFFTTVBhcnNlZFBhcmFtZXRlcnM8U2NoZW1hTWFwIGV4dGVuZHMgUVNNU2NoZW1hT2JqZWN0PiA9IHtcbiAgLy8gV2lsbCByZXR1cm4gYSBtYXAgb2YgdGhlIFwicmVzdWx0XCIgdHlwZXNcbiAgW1Byb3BlcnR5IGluIGtleW9mIFNjaGVtYU1hcF06IFF1ZXJ5TWFjaGluZVR5cGVUb1R5cGU8U2NoZW1hTWFwWyBQcm9wZXJ0eSBdWyAndHlwZScgXT5cbiAgLy8gU0NIRU1BX01BUCBhbGxvd2VkIHRvIGJlIHNldCBpbiB0eXBlc1xufSAmIHsgU0NIRU1BX01BUD86IFFTTVNjaGVtYU9iamVjdCB9O1xuXG5kZWNsYXJlIHZhciBRdWVyeVN0cmluZ01hY2hpbmU6IHtcbiAgZ2V0QWxsOiA8U2NoZW1hTWFwIGV4dGVuZHMgUVNNU2NoZW1hT2JqZWN0PiggYTogU2NoZW1hTWFwICkgPT4gUVNNUGFyc2VkUGFyYW1ldGVyczxTY2hlbWFNYXA+O1xuICBnZXRBbGxGb3JTdHJpbmc6IDxTY2hlbWFNYXAgZXh0ZW5kcyBRU01TY2hlbWFPYmplY3Q+KCBhOiBTY2hlbWFNYXAsIGI6IHN0cmluZyApID0+IFFTTVBhcnNlZFBhcmFtZXRlcnM8U2NoZW1hTWFwPjtcblxuICBnZXQ6IDxTY2hlbWEgZXh0ZW5kcyBRdWVyeVN0cmluZ01hY2hpbmVTY2hlbWE+KCBhOiBzdHJpbmcsIHNjaGVtYTogU2NoZW1hICkgPT4gUXVlcnlNYWNoaW5lVHlwZVRvVHlwZTxTY2hlbWFbICd0eXBlJyBdPjtcbiAgY29udGFpbnNLZXk6ICgga2V5OiBzdHJpbmcgKSA9PiBib29sZWFuO1xuICB3YXJuaW5nczogV2FybmluZ1tdO1xuICBhZGRXYXJuaW5nOiAoIGtleTogc3RyaW5nLCB2YWx1ZTogQW55LCBtZXNzYWdlOiBzdHJpbmcgKSA9PiB2b2lkO1xuICByZW1vdmVLZXlWYWx1ZVBhaXI6ICggcXVlcnlTdHJpbmc6IHN0cmluZywga2V5OiBzdHJpbmcgKSA9PiBzdHJpbmc7XG4gIHJlbW92ZUtleVZhbHVlUGFpcnM6ICggcXVlcnlTdHJpbmc6IHN0cmluZywga2V5czogc3RyaW5nW10gKSA9PiBzdHJpbmc7XG4gIGFwcGVuZFF1ZXJ5U3RyaW5nOiAoIHVybDogc3RyaW5nLCB0YWlsOiBzdHJpbmcgKSA9PiBzdHJpbmc7XG4gIGdldEZvclN0cmluZzogKCBzOiBzdHJpbmcsIHNjaGVtYTogUXVlcnlTdHJpbmdNYWNoaW5lU2NoZW1hLCBzOiBzdHJpbmcgKSA9PiBzdHJpbmc7XG4gIGdldFF1ZXJ5U3RyaW5nOiAoIHVybDogc3RyaW5nICkgPT4gc3RyaW5nO1xuICBjb250YWluc0tleUZvclN0cmluZzogKCBrZXk6IHN0cmluZywgczogc3RyaW5nICkgPT4gYm9vbGVhbjtcbiAgZ2V0U2luZ2xlUXVlcnlQYXJhbWV0ZXJTdHJpbmc6ICgga2V5OiBzdHJpbmcsIHVybDogc3RyaW5nICkgPT4gc3RyaW5nIHwgbnVsbDtcbiAgZ2V0UXVlcnlQYXJhbWV0ZXJzRnJvbVN0cmluZzogKCBzdHJpbmc6IHN0cmluZyApID0+IHN0cmluZ1tdO1xufTtcblxuLy8gZ2xvYmFscyB1c2VkIGluIFNpbS50c1xuZGVjbGFyZSB2YXIgcGhldFNwbGFzaFNjcmVlbkRvd25sb2FkQ29tcGxldGU6ICgpID0+IHZvaWQ7XG5kZWNsYXJlIHZhciBUV0VFTjogeyB1cGRhdGU6ICggZHQ6IG51bWJlciApID0+IHZvaWQgfTtcbmRlY2xhcmUgdmFyIHBoZXRTcGxhc2hTY3JlZW46IHsgZGlzcG9zZTogKCkgPT4gdm9pZCB9O1xuZGVjbGFyZSB2YXIgcGhldGlvOiBSZWNvcmQ8c3RyaW5nLCBBbnk+O1xuXG4vLyBUeXBpbmcgZm9yIGxpbmVicmVha2VyLTEuMS4wLmpzIHByZWxvYWRcbmRlY2xhcmUgdHlwZSBMaW5lQnJlYWtlckJyZWFrID0ge1xuICBwb3NpdGlvbjogbnVtYmVyO1xuICByZXF1aXJlZDogYm9vbGVhbjtcbn07XG5kZWNsYXJlIHR5cGUgTGluZUJyZWFrZXJUeXBlID0ge1xuICBuZXh0QnJlYWsoKTogTGluZUJyZWFrZXJCcmVhayB8IG51bGw7XG5cbiAgLy8gV2UgbWFrZSBpdCBpdGVyYWJsZVxuICBbIFN5bWJvbC5pdGVyYXRvciBdKCk6IEl0ZXJhdG9yPExpbmVCcmVha2VyQnJlYWssIHVuZGVmaW5lZD47XG59O1xuZGVjbGFyZSB2YXIgTGluZUJyZWFrZXI6IHtcbiAgbmV3KCBzdHI6IHN0cmluZyApOiBMaW5lQnJlYWtlclR5cGU7XG59O1xuXG5kZWNsYXJlIHZhciBhc3NlcnRpb25zOiB7XG4gIGVuYWJsZUFzc2VydDogKCkgPT4gdm9pZDtcbiAgYXNzZXJ0aW9uSG9va3M6IEFycmF5PCgpID0+IHZvaWQ+O1xufTtcblxuLy8gRXhwZXJpbWVudCB0byBhbGxvdyBhY2Nlc3NpbmcgdGhlc2Ugb2ZmIHdpbmRvdy4gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNzA5MDc0L2hvdy1kby15b3UtZXhwbGljaXRseS1zZXQtYS1uZXctcHJvcGVydHktb24td2luZG93LWluLXR5cGVzY3JpcHRcbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1kZWZpbml0aW9uc1xuICAgIHBoZXQ6IHR5cGVvZiBwaGV0O1xuICAgIHBoZXRpbzogdHlwZW9mIHBoZXRpbztcbiAgfVxufVxuXG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21vdXJuZXIvZmxhdHF1ZXVlL2Jsb2IvbWFpbi9pbmRleC5kLnRzXG5kZWNsYXJlIGNsYXNzIEZsYXRRdWV1ZTxUPiB7XG4gIHB1YmxpYyByZWFkb25seSBsZW5ndGg6IG51bWJlcjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoKTtcblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZDtcblxuICBwdWJsaWMgcHVzaCggaXRlbTogVCwgcHJpb3JpdHk6IG51bWJlciApOiB2b2lkO1xuXG4gIHB1YmxpYyBwb3AoKTogVCB8IHVuZGVmaW5lZDtcblxuICBwdWJsaWMgcGVlaygpOiBUIHwgdW5kZWZpbmVkO1xuXG4gIHB1YmxpYyBwZWVrVmFsdWUoKTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIHB1YmxpYyBzaHJpbmsoKTogdm9pZDtcbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBRWpELHlCQUF5QixHQUV6Qjs7Ozs7Ozs7Q0FRQyxHQUVELG1IQUFtSDtBQUNuSCxnR0FBZ0c7QUFDaEcsOERBQThEIn0=