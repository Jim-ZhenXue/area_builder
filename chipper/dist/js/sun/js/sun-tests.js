// Copyright 2020-2024, University of Colorado Boulder
/**
 * Unit tests for sun. Please run once in ?brand=phet and once in ?brand=phet-io to cover all functionality.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import BooleanProperty from '../../axon/js/BooleanProperty.js';
import qunitStart from '../../chipper/js/browser/sim-tests/qunitStart.js';
import merge from '../../phet-core/js/merge.js';
import { Node, SceneryConstants } from '../../scenery/js/imports.js';
import './SliderTests.js';
QUnit.module('sun');
QUnit.test('enabled/disabled appearance', (assert)=>{
    let SunComponentNode = class SunComponentNode extends Node {
        constructor(options){
            options = merge({
                disabledOpacity: SceneryConstants.DISABLED_OPACITY
            }, options);
            super(options);
        }
    };
    let node = new SunComponentNode();
    const disabledOpacity = 0.2;
    node = new SunComponentNode({
        disabledOpacity: disabledOpacity
    });
    assert.ok(node.effectiveOpacity === new SunComponentNode().opacity, 'opacity should default to Node default');
    node.enabled = false;
    assert.ok(node.effectiveOpacity === disabledOpacity, 'test disabled opacity');
    node.dispose();
    // TinyProperty.isDisposed is only defined when assertions are enabled, for performance
    window.assert && assert.ok(node.enabledProperty.isDisposed, 'should be disposed');
    const myEnabledProperty = new BooleanProperty(true);
    const defaultListenerCount = myEnabledProperty.getListenerCount();
    const node2 = new SunComponentNode({
        enabledProperty: myEnabledProperty
    });
    assert.ok(myEnabledProperty.getListenerCount() > defaultListenerCount, 'listener count should be more since passing in enabledProperty');
    node2.dispose();
    assert.ok(myEnabledProperty.getListenerCount() === defaultListenerCount, 'listener count should match original');
});
qunitStart();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3N1bi9qcy9zdW4tdGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogVW5pdCB0ZXN0cyBmb3Igc3VuLiBQbGVhc2UgcnVuIG9uY2UgaW4gP2JyYW5kPXBoZXQgYW5kIG9uY2UgaW4gP2JyYW5kPXBoZXQtaW8gdG8gY292ZXIgYWxsIGZ1bmN0aW9uYWxpdHkuXG4gKlxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9Cb29sZWFuUHJvcGVydHkuanMnO1xuaW1wb3J0IHF1bml0U3RhcnQgZnJvbSAnLi4vLi4vY2hpcHBlci9qcy9icm93c2VyL3NpbS10ZXN0cy9xdW5pdFN0YXJ0LmpzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xuaW1wb3J0IHsgTm9kZSwgU2NlbmVyeUNvbnN0YW50cyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XG5pbXBvcnQgJy4vU2xpZGVyVGVzdHMuanMnO1xuXG5cblFVbml0Lm1vZHVsZSggJ3N1bicgKTtcblxuUVVuaXQudGVzdCggJ2VuYWJsZWQvZGlzYWJsZWQgYXBwZWFyYW5jZScsIGFzc2VydCA9PiB7XG5cbiAgY2xhc3MgU3VuQ29tcG9uZW50Tm9kZSBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKCBvcHRpb25zICkge1xuICAgICAgb3B0aW9ucyA9IG1lcmdlKCB7XG4gICAgICAgIGRpc2FibGVkT3BhY2l0eTogU2NlbmVyeUNvbnN0YW50cy5ESVNBQkxFRF9PUEFDSVRZXG4gICAgICB9LCBvcHRpb25zICk7XG4gICAgICBzdXBlciggb3B0aW9ucyApO1xuICAgIH1cbiAgfVxuXG4gIGxldCBub2RlID0gbmV3IFN1bkNvbXBvbmVudE5vZGUoKTtcblxuICBjb25zdCBkaXNhYmxlZE9wYWNpdHkgPSAwLjI7XG4gIG5vZGUgPSBuZXcgU3VuQ29tcG9uZW50Tm9kZSgge1xuICAgIGRpc2FibGVkT3BhY2l0eTogZGlzYWJsZWRPcGFjaXR5XG4gIH0gKTtcblxuICBhc3NlcnQub2soIG5vZGUuZWZmZWN0aXZlT3BhY2l0eSA9PT0gbmV3IFN1bkNvbXBvbmVudE5vZGUoKS5vcGFjaXR5LCAnb3BhY2l0eSBzaG91bGQgZGVmYXVsdCB0byBOb2RlIGRlZmF1bHQnICk7XG4gIG5vZGUuZW5hYmxlZCA9IGZhbHNlO1xuICBhc3NlcnQub2soIG5vZGUuZWZmZWN0aXZlT3BhY2l0eSA9PT0gZGlzYWJsZWRPcGFjaXR5LCAndGVzdCBkaXNhYmxlZCBvcGFjaXR5JyApO1xuXG4gIG5vZGUuZGlzcG9zZSgpO1xuXG4gIC8vIFRpbnlQcm9wZXJ0eS5pc0Rpc3Bvc2VkIGlzIG9ubHkgZGVmaW5lZCB3aGVuIGFzc2VydGlvbnMgYXJlIGVuYWJsZWQsIGZvciBwZXJmb3JtYW5jZVxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC5vayggbm9kZS5lbmFibGVkUHJvcGVydHkuaXNEaXNwb3NlZCwgJ3Nob3VsZCBiZSBkaXNwb3NlZCcgKTtcblxuICBjb25zdCBteUVuYWJsZWRQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKTtcbiAgY29uc3QgZGVmYXVsdExpc3RlbmVyQ291bnQgPSBteUVuYWJsZWRQcm9wZXJ0eS5nZXRMaXN0ZW5lckNvdW50KCk7XG4gIGNvbnN0IG5vZGUyID0gbmV3IFN1bkNvbXBvbmVudE5vZGUoIHtcbiAgICBlbmFibGVkUHJvcGVydHk6IG15RW5hYmxlZFByb3BlcnR5XG4gIH0gKTtcbiAgYXNzZXJ0Lm9rKCBteUVuYWJsZWRQcm9wZXJ0eS5nZXRMaXN0ZW5lckNvdW50KCkgPiBkZWZhdWx0TGlzdGVuZXJDb3VudCwgJ2xpc3RlbmVyIGNvdW50IHNob3VsZCBiZSBtb3JlIHNpbmNlIHBhc3NpbmcgaW4gZW5hYmxlZFByb3BlcnR5JyApO1xuXG4gIG5vZGUyLmRpc3Bvc2UoKTtcbiAgYXNzZXJ0Lm9rKCBteUVuYWJsZWRQcm9wZXJ0eS5nZXRMaXN0ZW5lckNvdW50KCkgPT09IGRlZmF1bHRMaXN0ZW5lckNvdW50LCAnbGlzdGVuZXIgY291bnQgc2hvdWxkIG1hdGNoIG9yaWdpbmFsJyApO1xufSApO1xuXG5xdW5pdFN0YXJ0KCk7Il0sIm5hbWVzIjpbIkJvb2xlYW5Qcm9wZXJ0eSIsInF1bml0U3RhcnQiLCJtZXJnZSIsIk5vZGUiLCJTY2VuZXJ5Q29uc3RhbnRzIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwiU3VuQ29tcG9uZW50Tm9kZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImRpc2FibGVkT3BhY2l0eSIsIkRJU0FCTEVEX09QQUNJVFkiLCJub2RlIiwib2siLCJlZmZlY3RpdmVPcGFjaXR5Iiwib3BhY2l0eSIsImVuYWJsZWQiLCJkaXNwb3NlIiwid2luZG93IiwiZW5hYmxlZFByb3BlcnR5IiwiaXNEaXNwb3NlZCIsIm15RW5hYmxlZFByb3BlcnR5IiwiZGVmYXVsdExpc3RlbmVyQ291bnQiLCJnZXRMaXN0ZW5lckNvdW50Iiwibm9kZTIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBRUQsT0FBT0EscUJBQXFCLG1DQUFtQztBQUMvRCxPQUFPQyxnQkFBZ0IsbURBQW1EO0FBQzFFLE9BQU9DLFdBQVcsOEJBQThCO0FBQ2hELFNBQVNDLElBQUksRUFBRUMsZ0JBQWdCLFFBQVEsOEJBQThCO0FBQ3JFLE9BQU8sbUJBQW1CO0FBRzFCQyxNQUFNQyxNQUFNLENBQUU7QUFFZEQsTUFBTUUsSUFBSSxDQUFFLCtCQUErQkMsQ0FBQUE7SUFFekMsSUFBQSxBQUFNQyxtQkFBTixNQUFNQSx5QkFBeUJOO1FBQzdCTyxZQUFhQyxPQUFPLENBQUc7WUFDckJBLFVBQVVULE1BQU87Z0JBQ2ZVLGlCQUFpQlIsaUJBQWlCUyxnQkFBZ0I7WUFDcEQsR0FBR0Y7WUFDSCxLQUFLLENBQUVBO1FBQ1Q7SUFDRjtJQUVBLElBQUlHLE9BQU8sSUFBSUw7SUFFZixNQUFNRyxrQkFBa0I7SUFDeEJFLE9BQU8sSUFBSUwsaUJBQWtCO1FBQzNCRyxpQkFBaUJBO0lBQ25CO0lBRUFKLE9BQU9PLEVBQUUsQ0FBRUQsS0FBS0UsZ0JBQWdCLEtBQUssSUFBSVAsbUJBQW1CUSxPQUFPLEVBQUU7SUFDckVILEtBQUtJLE9BQU8sR0FBRztJQUNmVixPQUFPTyxFQUFFLENBQUVELEtBQUtFLGdCQUFnQixLQUFLSixpQkFBaUI7SUFFdERFLEtBQUtLLE9BQU87SUFFWix1RkFBdUY7SUFDdkZDLE9BQU9aLE1BQU0sSUFBSUEsT0FBT08sRUFBRSxDQUFFRCxLQUFLTyxlQUFlLENBQUNDLFVBQVUsRUFBRTtJQUU3RCxNQUFNQyxvQkFBb0IsSUFBSXZCLGdCQUFpQjtJQUMvQyxNQUFNd0IsdUJBQXVCRCxrQkFBa0JFLGdCQUFnQjtJQUMvRCxNQUFNQyxRQUFRLElBQUlqQixpQkFBa0I7UUFDbENZLGlCQUFpQkU7SUFDbkI7SUFDQWYsT0FBT08sRUFBRSxDQUFFUSxrQkFBa0JFLGdCQUFnQixLQUFLRCxzQkFBc0I7SUFFeEVFLE1BQU1QLE9BQU87SUFDYlgsT0FBT08sRUFBRSxDQUFFUSxrQkFBa0JFLGdCQUFnQixPQUFPRCxzQkFBc0I7QUFDNUU7QUFFQXZCIn0=