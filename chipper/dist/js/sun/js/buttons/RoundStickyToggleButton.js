// Copyright 2014-2024, University of Colorado Boulder
/**
 * RoundStickyToggleButton is a round toggle button that toggles the value of a Property between 2 values.
 * It has a different look (referred to as 'up' and 'down') for the 2 values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */ import optionize from '../../../phet-core/js/optionize.js';
import sharedSoundPlayers from '../../../tambo/js/sharedSoundPlayers.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import RoundButton from './RoundButton.js';
import StickyToggleButtonInteractionStateProperty from './StickyToggleButtonInteractionStateProperty.js';
import StickyToggleButtonModel from './StickyToggleButtonModel.js';
let RoundStickyToggleButton = class RoundStickyToggleButton extends RoundButton {
    dispose() {
        this.disposeRoundStickyToggleButton();
        super.dispose();
    }
    /**
   * @param valueProperty - axon Property that can be either valueUp or valueDown.
   * @param valueUp - value when the toggle is in the 'up' position
   * @param valueDown - value when the toggle is in the 'down' position
   * @param providedOptions?
   */ constructor(valueProperty, valueUp, valueDown, providedOptions){
        assert && assert(valueProperty.valueComparisonStrategy === 'reference', 'RoundStickyToggleButton depends on "===" equality for value comparison');
        const options = optionize()({
            // SelfOptions
            soundPlayer: sharedSoundPlayers.get('pushButton'),
            // RoundButtonOptions
            tandem: Tandem.REQUIRED,
            // pdom
            ariaRole: 'switch'
        }, providedOptions);
        // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
        const toggleButtonModel = new StickyToggleButtonModel(valueUp, valueDown, valueProperty, options);
        const stickyToggleButtonInteractionStateProperty = new StickyToggleButtonInteractionStateProperty(toggleButtonModel);
        super(toggleButtonModel, stickyToggleButtonInteractionStateProperty, options);
        // sound generation
        const playSound = ()=>options.soundPlayer.play();
        toggleButtonModel.produceSoundEmitter.addListener(playSound);
        // pdom - Signify button is 'pressed' when down. Use both aria-pressed and aria-checked
        // because that sounds best in NVDA.
        const updateAria = ()=>{
            this.setPDOMAttribute('aria-pressed', valueProperty.value === valueDown);
            this.setPDOMAttribute('aria-checked', valueProperty.value === valueDown);
        };
        valueProperty.link(updateAria);
        this.disposeRoundStickyToggleButton = ()=>{
            valueProperty.unlink(updateAria);
            toggleButtonModel.produceSoundEmitter.removeListener(playSound);
            toggleButtonModel.dispose();
        };
    }
};
export { RoundStickyToggleButton as default };
sun.register('RoundStickyToggleButton', RoundStickyToggleButton);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFJvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uIGlzIGEgcm91bmQgdG9nZ2xlIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgdGhlIHZhbHVlIG9mIGEgUHJvcGVydHkgYmV0d2VlbiAyIHZhbHVlcy5cbiAqIEl0IGhhcyBhIGRpZmZlcmVudCBsb29rIChyZWZlcnJlZCB0byBhcyAndXAnIGFuZCAnZG93bicpIGZvciB0aGUgMiB2YWx1ZXMuXG4gKlxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IHNoYXJlZFNvdW5kUGxheWVycyBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zaGFyZWRTb3VuZFBsYXllcnMuanMnO1xuaW1wb3J0IFRTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9UU291bmRQbGF5ZXIuanMnO1xuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcbmltcG9ydCBzdW4gZnJvbSAnLi4vc3VuLmpzJztcbmltcG9ydCBSb3VuZEJ1dHRvbiwgeyBSb3VuZEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL1JvdW5kQnV0dG9uLmpzJztcbmltcG9ydCBTdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgZnJvbSAnLi9TdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkuanMnO1xuaW1wb3J0IFN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsIGZyb20gJy4vU3RpY2t5VG9nZ2xlQnV0dG9uTW9kZWwuanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuICBzb3VuZFBsYXllcj86IFRTb3VuZFBsYXllcjtcbn07XG5cbmV4cG9ydCB0eXBlIFJvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUm91bmRCdXR0b25PcHRpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbjxUPiBleHRlbmRzIFJvdW5kQnV0dG9uIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQHBhcmFtIHZhbHVlUHJvcGVydHkgLSBheG9uIFByb3BlcnR5IHRoYXQgY2FuIGJlIGVpdGhlciB2YWx1ZVVwIG9yIHZhbHVlRG93bi5cbiAgICogQHBhcmFtIHZhbHVlVXAgLSB2YWx1ZSB3aGVuIHRoZSB0b2dnbGUgaXMgaW4gdGhlICd1cCcgcG9zaXRpb25cbiAgICogQHBhcmFtIHZhbHVlRG93biAtIHZhbHVlIHdoZW4gdGhlIHRvZ2dsZSBpcyBpbiB0aGUgJ2Rvd24nIHBvc2l0aW9uXG4gICAqIEBwYXJhbSBwcm92aWRlZE9wdGlvbnM/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoIHZhbHVlUHJvcGVydHk6IFRQcm9wZXJ0eTxUPiwgdmFsdWVVcDogVCwgdmFsdWVEb3duOiBULCBwcm92aWRlZE9wdGlvbnM/OiBSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbk9wdGlvbnMgKSB7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdmFsdWVQcm9wZXJ0eS52YWx1ZUNvbXBhcmlzb25TdHJhdGVneSA9PT0gJ3JlZmVyZW5jZScsXG4gICAgICAnUm91bmRTdGlja3lUb2dnbGVCdXR0b24gZGVwZW5kcyBvbiBcIj09PVwiIGVxdWFsaXR5IGZvciB2YWx1ZSBjb21wYXJpc29uJyApO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSb3VuZEJ1dHRvbk9wdGlvbnM+KCkoIHtcblxuICAgICAgLy8gU2VsZk9wdGlvbnNcbiAgICAgIHNvdW5kUGxheWVyOiBzaGFyZWRTb3VuZFBsYXllcnMuZ2V0KCAncHVzaEJ1dHRvbicgKSxcblxuICAgICAgLy8gUm91bmRCdXR0b25PcHRpb25zXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRCxcblxuICAgICAgLy8gcGRvbVxuICAgICAgYXJpYVJvbGU6ICdzd2l0Y2gnXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICAvLyBOb3RlIGl0IHNoYXJlcyBhIHRhbmRlbSB3aXRoIHRoaXMsIHNvIHRoZSBlbWl0dGVyIHdpbGwgYmUgaW5zdHJ1bWVudGVkIGFzIGEgY2hpbGQgb2YgdGhlIGJ1dHRvblxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbk1vZGVsID0gbmV3IFN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsKCB2YWx1ZVVwLCB2YWx1ZURvd24sIHZhbHVlUHJvcGVydHksIG9wdGlvbnMgKTtcbiAgICBjb25zdCBzdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgPSBuZXcgU3RpY2t5VG9nZ2xlQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5KCB0b2dnbGVCdXR0b25Nb2RlbCApO1xuXG4gICAgc3VwZXIoIHRvZ2dsZUJ1dHRvbk1vZGVsLCBzdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHksIG9wdGlvbnMgKTtcblxuICAgIC8vIHNvdW5kIGdlbmVyYXRpb25cbiAgICBjb25zdCBwbGF5U291bmQgPSAoKSA9PiBvcHRpb25zLnNvdW5kUGxheWVyLnBsYXkoKTtcbiAgICB0b2dnbGVCdXR0b25Nb2RlbC5wcm9kdWNlU291bmRFbWl0dGVyLmFkZExpc3RlbmVyKCBwbGF5U291bmQgKTtcblxuICAgIC8vIHBkb20gLSBTaWduaWZ5IGJ1dHRvbiBpcyAncHJlc3NlZCcgd2hlbiBkb3duLiBVc2UgYm90aCBhcmlhLXByZXNzZWQgYW5kIGFyaWEtY2hlY2tlZFxuICAgIC8vIGJlY2F1c2UgdGhhdCBzb3VuZHMgYmVzdCBpbiBOVkRBLlxuICAgIGNvbnN0IHVwZGF0ZUFyaWEgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFBET01BdHRyaWJ1dGUoICdhcmlhLXByZXNzZWQnLCB2YWx1ZVByb3BlcnR5LnZhbHVlID09PSB2YWx1ZURvd24gKTtcbiAgICAgIHRoaXMuc2V0UERPTUF0dHJpYnV0ZSggJ2FyaWEtY2hlY2tlZCcsIHZhbHVlUHJvcGVydHkudmFsdWUgPT09IHZhbHVlRG93biApO1xuICAgIH07XG4gICAgdmFsdWVQcm9wZXJ0eS5saW5rKCB1cGRhdGVBcmlhICk7XG5cbiAgICB0aGlzLmRpc3Bvc2VSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbiA9ICgpID0+IHtcbiAgICAgIHZhbHVlUHJvcGVydHkudW5saW5rKCB1cGRhdGVBcmlhICk7XG4gICAgICB0b2dnbGVCdXR0b25Nb2RlbC5wcm9kdWNlU291bmRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCBwbGF5U291bmQgKTtcbiAgICAgIHRvZ2dsZUJ1dHRvbk1vZGVsLmRpc3Bvc2UoKTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwb3NlUm91bmRTdGlja3lUb2dnbGVCdXR0b24oKTtcbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cbn1cblxuc3VuLnJlZ2lzdGVyKCAnUm91bmRTdGlja3lUb2dnbGVCdXR0b24nLCBSb3VuZFN0aWNreVRvZ2dsZUJ1dHRvbiApOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzaGFyZWRTb3VuZFBsYXllcnMiLCJUYW5kZW0iLCJzdW4iLCJSb3VuZEJ1dHRvbiIsIlN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIlN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsIiwiUm91bmRTdGlja3lUb2dnbGVCdXR0b24iLCJkaXNwb3NlIiwiZGlzcG9zZVJvdW5kU3RpY2t5VG9nZ2xlQnV0dG9uIiwidmFsdWVQcm9wZXJ0eSIsInZhbHVlVXAiLCJ2YWx1ZURvd24iLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJ2YWx1ZUNvbXBhcmlzb25TdHJhdGVneSIsIm9wdGlvbnMiLCJzb3VuZFBsYXllciIsImdldCIsInRhbmRlbSIsIlJFUVVJUkVEIiwiYXJpYVJvbGUiLCJ0b2dnbGVCdXR0b25Nb2RlbCIsInN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsInBsYXlTb3VuZCIsInBsYXkiLCJwcm9kdWNlU291bmRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJ1cGRhdGVBcmlhIiwic2V0UERPTUF0dHJpYnV0ZSIsInZhbHVlIiwibGluayIsInVubGluayIsInJlbW92ZUxpc3RlbmVyIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7O0NBTUMsR0FHRCxPQUFPQSxlQUFlLHFDQUFxQztBQUMzRCxPQUFPQyx3QkFBd0IsMENBQTBDO0FBRXpFLE9BQU9DLFlBQVksK0JBQStCO0FBQ2xELE9BQU9DLFNBQVMsWUFBWTtBQUM1QixPQUFPQyxpQkFBeUMsbUJBQW1CO0FBQ25FLE9BQU9DLGdEQUFnRCxrREFBa0Q7QUFDekcsT0FBT0MsNkJBQTZCLCtCQUErQjtBQVFwRCxJQUFBLEFBQU1DLDBCQUFOLE1BQU1BLGdDQUFtQ0g7SUFtRHRDSSxVQUFnQjtRQUM5QixJQUFJLENBQUNDLDhCQUE4QjtRQUNuQyxLQUFLLENBQUNEO0lBQ1I7SUFsREE7Ozs7O0dBS0MsR0FDRCxZQUFvQkUsYUFBMkIsRUFBRUMsT0FBVSxFQUFFQyxTQUFZLEVBQUVDLGVBQWdELENBQUc7UUFDNUhDLFVBQVVBLE9BQVFKLGNBQWNLLHVCQUF1QixLQUFLLGFBQzFEO1FBRUYsTUFBTUMsVUFBVWhCLFlBQThFO1lBRTVGLGNBQWM7WUFDZGlCLGFBQWFoQixtQkFBbUJpQixHQUFHLENBQUU7WUFFckMscUJBQXFCO1lBQ3JCQyxRQUFRakIsT0FBT2tCLFFBQVE7WUFFdkIsT0FBTztZQUNQQyxVQUFVO1FBQ1osR0FBR1I7UUFFSCxrR0FBa0c7UUFDbEcsTUFBTVMsb0JBQW9CLElBQUloQix3QkFBeUJLLFNBQVNDLFdBQVdGLGVBQWVNO1FBQzFGLE1BQU1PLDZDQUE2QyxJQUFJbEIsMkNBQTRDaUI7UUFFbkcsS0FBSyxDQUFFQSxtQkFBbUJDLDRDQUE0Q1A7UUFFdEUsbUJBQW1CO1FBQ25CLE1BQU1RLFlBQVksSUFBTVIsUUFBUUMsV0FBVyxDQUFDUSxJQUFJO1FBQ2hESCxrQkFBa0JJLG1CQUFtQixDQUFDQyxXQUFXLENBQUVIO1FBRW5ELHVGQUF1RjtRQUN2RixvQ0FBb0M7UUFDcEMsTUFBTUksYUFBYTtZQUNqQixJQUFJLENBQUNDLGdCQUFnQixDQUFFLGdCQUFnQm5CLGNBQWNvQixLQUFLLEtBQUtsQjtZQUMvRCxJQUFJLENBQUNpQixnQkFBZ0IsQ0FBRSxnQkFBZ0JuQixjQUFjb0IsS0FBSyxLQUFLbEI7UUFDakU7UUFDQUYsY0FBY3FCLElBQUksQ0FBRUg7UUFFcEIsSUFBSSxDQUFDbkIsOEJBQThCLEdBQUc7WUFDcENDLGNBQWNzQixNQUFNLENBQUVKO1lBQ3RCTixrQkFBa0JJLG1CQUFtQixDQUFDTyxjQUFjLENBQUVUO1lBQ3RERixrQkFBa0JkLE9BQU87UUFDM0I7SUFDRjtBQU1GO0FBdkRBLFNBQXFCRCxxQ0F1RHBCO0FBRURKLElBQUkrQixRQUFRLENBQUUsMkJBQTJCM0IifQ==