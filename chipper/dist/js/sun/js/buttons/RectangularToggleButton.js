// Copyright 2014-2024, University of Colorado Boulder
/**
 * RectangularToggleButton is a rectangular toggle button that toggles the value of a Property between 2 values.
 * It has the same look for both values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */ import optionize from '../../../phet-core/js/optionize.js';
import sharedSoundPlayers from '../../../tambo/js/sharedSoundPlayers.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import RectangularButton from './RectangularButton.js';
import ToggleButtonInteractionStateProperty from './ToggleButtonInteractionStateProperty.js';
import ToggleButtonModel from './ToggleButtonModel.js';
let RectangularToggleButton = class RectangularToggleButton extends RectangularButton {
    dispose() {
        this.disposeRectangularToggleButton();
        super.dispose();
    }
    /**
   * @param property - axon Property that can be either valueOff or valueOn
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param [providedOptions]
   */ constructor(property, valueOff, valueOn, providedOptions){
        assert && assert(property.valueComparisonStrategy === 'reference', 'RectangularToggleButton depends on "===" equality for value comparison');
        const options = optionize()({
            // {TSoundPlayer} - sounds to be played on toggle transitions
            valueOffSoundPlayer: sharedSoundPlayers.get('toggleOff'),
            valueOnSoundPlayer: sharedSoundPlayers.get('toggleOn'),
            // phet-io support
            tandem: Tandem.REQUIRED,
            phetioFeatured: true
        }, providedOptions);
        // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
        const toggleButtonModel = new ToggleButtonModel(valueOff, valueOn, property, options);
        const toggleButtonInteractionStateProperty = new ToggleButtonInteractionStateProperty(toggleButtonModel);
        super(toggleButtonModel, toggleButtonInteractionStateProperty, options);
        this.addLinkedElement(property, {
            tandemName: 'property'
        });
        // sound generation
        const playSounds = ()=>{
            if (property.value === valueOff) {
                options.valueOffSoundPlayer.play();
            } else if (property.value === valueOn) {
                options.valueOnSoundPlayer.play();
            }
        };
        this.buttonModel.produceSoundEmitter.addListener(playSounds);
        this.disposeRectangularToggleButton = ()=>{
            this.buttonModel.produceSoundEmitter.removeListener(playSounds);
            toggleButtonModel.dispose();
        };
    }
};
export { RectangularToggleButton as default };
sun.register('RectangularToggleButton', RectangularToggleButton);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uIGlzIGEgcmVjdGFuZ3VsYXIgdG9nZ2xlIGJ1dHRvbiB0aGF0IHRvZ2dsZXMgdGhlIHZhbHVlIG9mIGEgUHJvcGVydHkgYmV0d2VlbiAyIHZhbHVlcy5cbiAqIEl0IGhhcyB0aGUgc2FtZSBsb29rIGZvciBib3RoIHZhbHVlcy5cbiAqXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IHNoYXJlZFNvdW5kUGxheWVycyBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zaGFyZWRTb3VuZFBsYXllcnMuanMnO1xuaW1wb3J0IFRTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9UU291bmRQbGF5ZXIuanMnO1xuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcbmltcG9ydCBzdW4gZnJvbSAnLi4vc3VuLmpzJztcbmltcG9ydCBSZWN0YW5ndWxhckJ1dHRvbiwgeyBSZWN0YW5ndWxhckJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL1JlY3Rhbmd1bGFyQnV0dG9uLmpzJztcbmltcG9ydCBUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgZnJvbSAnLi9Ub2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkuanMnO1xuaW1wb3J0IFRvZ2dsZUJ1dHRvbk1vZGVsIGZyb20gJy4vVG9nZ2xlQnV0dG9uTW9kZWwuanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuXG4gIC8vIHNvdW5kcyB0byBiZSBwbGF5ZWQgb24gdG9nZ2xlIHRyYW5zaXRpb25zXG4gIHZhbHVlT2ZmU291bmRQbGF5ZXI/OiBUU291bmRQbGF5ZXI7XG4gIHZhbHVlT25Tb3VuZFBsYXllcj86IFRTb3VuZFBsYXllcjtcbn07XG5cbmV4cG9ydCB0eXBlIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUmVjdGFuZ3VsYXJCdXR0b25PcHRpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbjxUPiBleHRlbmRzIFJlY3Rhbmd1bGFyQnV0dG9uIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQHBhcmFtIHByb3BlcnR5IC0gYXhvbiBQcm9wZXJ0eSB0aGF0IGNhbiBiZSBlaXRoZXIgdmFsdWVPZmYgb3IgdmFsdWVPblxuICAgKiBAcGFyYW0gdmFsdWVPZmYgLSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgaW4gdGhlIG9mZiBzdGF0ZVxuICAgKiBAcGFyYW0gdmFsdWVPbiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb24gc3RhdGVcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3BlcnR5OiBQcm9wZXJ0eTxUPiwgdmFsdWVPZmY6IFQsIHZhbHVlT246IFQsIHByb3ZpZGVkT3B0aW9ucz86IFJlY3Rhbmd1bGFyQnV0dG9uT3B0aW9ucyApIHtcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBwcm9wZXJ0eS52YWx1ZUNvbXBhcmlzb25TdHJhdGVneSA9PT0gJ3JlZmVyZW5jZScsXG4gICAgICAnUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24gZGVwZW5kcyBvbiBcIj09PVwiIGVxdWFsaXR5IGZvciB2YWx1ZSBjb21wYXJpc29uJyApO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhckJ1dHRvbk9wdGlvbnM+KCkoIHtcblxuICAgICAgLy8ge1RTb3VuZFBsYXllcn0gLSBzb3VuZHMgdG8gYmUgcGxheWVkIG9uIHRvZ2dsZSB0cmFuc2l0aW9uc1xuICAgICAgdmFsdWVPZmZTb3VuZFBsYXllcjogc2hhcmVkU291bmRQbGF5ZXJzLmdldCggJ3RvZ2dsZU9mZicgKSxcbiAgICAgIHZhbHVlT25Tb3VuZFBsYXllcjogc2hhcmVkU291bmRQbGF5ZXJzLmdldCggJ3RvZ2dsZU9uJyApLFxuXG4gICAgICAvLyBwaGV0LWlvIHN1cHBvcnRcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIC8vIE5vdGUgaXQgc2hhcmVzIGEgdGFuZGVtIHdpdGggdGhpcywgc28gdGhlIGVtaXR0ZXIgd2lsbCBiZSBpbnN0cnVtZW50ZWQgYXMgYSBjaGlsZCBvZiB0aGUgYnV0dG9uXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uTW9kZWwgPSBuZXcgVG9nZ2xlQnV0dG9uTW9kZWwoIHZhbHVlT2ZmLCB2YWx1ZU9uLCBwcm9wZXJ0eSwgb3B0aW9ucyApO1xuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSA9IG5ldyBUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkoIHRvZ2dsZUJ1dHRvbk1vZGVsICk7XG5cbiAgICBzdXBlciggdG9nZ2xlQnV0dG9uTW9kZWwsIHRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSwgb3B0aW9ucyApO1xuXG4gICAgdGhpcy5hZGRMaW5rZWRFbGVtZW50KCBwcm9wZXJ0eSwge1xuICAgICAgdGFuZGVtTmFtZTogJ3Byb3BlcnR5J1xuICAgIH0gKTtcblxuICAgIC8vIHNvdW5kIGdlbmVyYXRpb25cbiAgICBjb25zdCBwbGF5U291bmRzID0gKCkgPT4ge1xuICAgICAgaWYgKCBwcm9wZXJ0eS52YWx1ZSA9PT0gdmFsdWVPZmYgKSB7XG4gICAgICAgIG9wdGlvbnMudmFsdWVPZmZTb3VuZFBsYXllci5wbGF5KCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICggcHJvcGVydHkudmFsdWUgPT09IHZhbHVlT24gKSB7XG4gICAgICAgIG9wdGlvbnMudmFsdWVPblNvdW5kUGxheWVyLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuYnV0dG9uTW9kZWwucHJvZHVjZVNvdW5kRW1pdHRlci5hZGRMaXN0ZW5lciggcGxheVNvdW5kcyApO1xuXG4gICAgdGhpcy5kaXNwb3NlUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24gPSAoKSA9PiB7XG4gICAgICB0aGlzLmJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIHBsYXlTb3VuZHMgKTtcbiAgICAgIHRvZ2dsZUJ1dHRvbk1vZGVsLmRpc3Bvc2UoKTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwb3NlUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24oKTtcbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cbn1cblxuc3VuLnJlZ2lzdGVyKCAnUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24nLCBSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiApOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzaGFyZWRTb3VuZFBsYXllcnMiLCJUYW5kZW0iLCJzdW4iLCJSZWN0YW5ndWxhckJ1dHRvbiIsIlRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIlRvZ2dsZUJ1dHRvbk1vZGVsIiwiUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24iLCJkaXNwb3NlIiwiZGlzcG9zZVJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uIiwicHJvcGVydHkiLCJ2YWx1ZU9mZiIsInZhbHVlT24iLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJ2YWx1ZUNvbXBhcmlzb25TdHJhdGVneSIsIm9wdGlvbnMiLCJ2YWx1ZU9mZlNvdW5kUGxheWVyIiwiZ2V0IiwidmFsdWVPblNvdW5kUGxheWVyIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJwaGV0aW9GZWF0dXJlZCIsInRvZ2dsZUJ1dHRvbk1vZGVsIiwidG9nZ2xlQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5IiwiYWRkTGlua2VkRWxlbWVudCIsInRhbmRlbU5hbWUiLCJwbGF5U291bmRzIiwidmFsdWUiLCJwbGF5IiwiYnV0dG9uTW9kZWwiLCJwcm9kdWNlU291bmRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7OztDQU1DLEdBR0QsT0FBT0EsZUFBZSxxQ0FBcUM7QUFDM0QsT0FBT0Msd0JBQXdCLDBDQUEwQztBQUV6RSxPQUFPQyxZQUFZLCtCQUErQjtBQUNsRCxPQUFPQyxTQUFTLFlBQVk7QUFDNUIsT0FBT0MsdUJBQXFELHlCQUF5QjtBQUNyRixPQUFPQywwQ0FBMEMsNENBQTRDO0FBQzdGLE9BQU9DLHVCQUF1Qix5QkFBeUI7QUFXeEMsSUFBQSxBQUFNQywwQkFBTixNQUFNQSxnQ0FBbUNIO0lBb0R0Q0ksVUFBZ0I7UUFDOUIsSUFBSSxDQUFDQyw4QkFBOEI7UUFDbkMsS0FBSyxDQUFDRDtJQUNSO0lBbkRBOzs7OztHQUtDLEdBQ0QsWUFBb0JFLFFBQXFCLEVBQUVDLFFBQVcsRUFBRUMsT0FBVSxFQUFFQyxlQUEwQyxDQUFHO1FBQy9HQyxVQUFVQSxPQUFRSixTQUFTSyx1QkFBdUIsS0FBSyxhQUNyRDtRQUVGLE1BQU1DLFVBQVVoQixZQUFvRjtZQUVsRyw2REFBNkQ7WUFDN0RpQixxQkFBcUJoQixtQkFBbUJpQixHQUFHLENBQUU7WUFDN0NDLG9CQUFvQmxCLG1CQUFtQmlCLEdBQUcsQ0FBRTtZQUU1QyxrQkFBa0I7WUFDbEJFLFFBQVFsQixPQUFPbUIsUUFBUTtZQUN2QkMsZ0JBQWdCO1FBQ2xCLEdBQUdUO1FBRUgsa0dBQWtHO1FBQ2xHLE1BQU1VLG9CQUFvQixJQUFJakIsa0JBQW1CSyxVQUFVQyxTQUFTRixVQUFVTTtRQUM5RSxNQUFNUSx1Q0FBdUMsSUFBSW5CLHFDQUFzQ2tCO1FBRXZGLEtBQUssQ0FBRUEsbUJBQW1CQyxzQ0FBc0NSO1FBRWhFLElBQUksQ0FBQ1MsZ0JBQWdCLENBQUVmLFVBQVU7WUFDL0JnQixZQUFZO1FBQ2Q7UUFFQSxtQkFBbUI7UUFDbkIsTUFBTUMsYUFBYTtZQUNqQixJQUFLakIsU0FBU2tCLEtBQUssS0FBS2pCLFVBQVc7Z0JBQ2pDSyxRQUFRQyxtQkFBbUIsQ0FBQ1ksSUFBSTtZQUNsQyxPQUNLLElBQUtuQixTQUFTa0IsS0FBSyxLQUFLaEIsU0FBVTtnQkFDckNJLFFBQVFHLGtCQUFrQixDQUFDVSxJQUFJO1lBQ2pDO1FBQ0Y7UUFDQSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsbUJBQW1CLENBQUNDLFdBQVcsQ0FBRUw7UUFFbEQsSUFBSSxDQUFDbEIsOEJBQThCLEdBQUc7WUFDcEMsSUFBSSxDQUFDcUIsV0FBVyxDQUFDQyxtQkFBbUIsQ0FBQ0UsY0FBYyxDQUFFTjtZQUNyREosa0JBQWtCZixPQUFPO1FBQzNCO0lBQ0Y7QUFNRjtBQXhEQSxTQUFxQkQscUNBd0RwQjtBQUVESixJQUFJK0IsUUFBUSxDQUFFLDJCQUEyQjNCIn0=