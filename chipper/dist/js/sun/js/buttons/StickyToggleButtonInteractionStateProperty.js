// Copyright 2014-2022, University of Colorado Boulder
/**
 * A DerivedProperty that maps StickyToggleButtonModel states to the states needed by the button view.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */ import { DerivedProperty5 } from '../../../axon/js/DerivedProperty.js';
import sun from '../sun.js';
import ButtonInteractionState from './ButtonInteractionState.js';
let StickyToggleButtonInteractionStateProperty = class StickyToggleButtonInteractionStateProperty extends DerivedProperty5 {
    constructor(buttonModel){
        super([
            buttonModel.focusedProperty,
            buttonModel.overProperty,
            buttonModel.looksOverProperty,
            buttonModel.looksPressedProperty,
            buttonModel.valueProperty
        ], (focused, over, looksOver, looksPressed, propertyValue)=>{
            const isValueDown = propertyValue === buttonModel.valueDown;
            return looksOver && !(looksPressed || isValueDown) ? ButtonInteractionState.OVER : (over || focused) && (looksPressed || isValueDown) ? ButtonInteractionState.PRESSED : isValueDown ? ButtonInteractionState.PRESSED : ButtonInteractionState.IDLE;
        }, {
            valueType: ButtonInteractionState
        });
    }
};
export { StickyToggleButtonInteractionStateProperty as default };
sun.register('StickyToggleButtonInteractionStateProperty', StickyToggleButtonInteractionStateProperty);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1N0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIyLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBBIERlcml2ZWRQcm9wZXJ0eSB0aGF0IG1hcHMgU3RpY2t5VG9nZ2xlQnV0dG9uTW9kZWwgc3RhdGVzIHRvIHRoZSBzdGF0ZXMgbmVlZGVkIGJ5IHRoZSBidXR0b24gdmlldy5cbiAqXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCB7IERlcml2ZWRQcm9wZXJ0eTUgfSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgc3VuIGZyb20gJy4uL3N1bi5qcyc7XG5pbXBvcnQgQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZSBmcm9tICcuL0J1dHRvbkludGVyYWN0aW9uU3RhdGUuanMnO1xuaW1wb3J0IFN0aWNreVRvZ2dsZUJ1dHRvbk1vZGVsIGZyb20gJy4vU3RpY2t5VG9nZ2xlQnV0dG9uTW9kZWwuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGlja3lUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHk8VD4gZXh0ZW5kcyBEZXJpdmVkUHJvcGVydHk1PEJ1dHRvbkludGVyYWN0aW9uU3RhdGUsIGJvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW4sIFQ+IHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBidXR0b25Nb2RlbDogU3RpY2t5VG9nZ2xlQnV0dG9uTW9kZWw8VD4gKSB7XG4gICAgc3VwZXIoXG4gICAgICBbIGJ1dHRvbk1vZGVsLmZvY3VzZWRQcm9wZXJ0eSwgYnV0dG9uTW9kZWwub3ZlclByb3BlcnR5LCBidXR0b25Nb2RlbC5sb29rc092ZXJQcm9wZXJ0eSxcbiAgICAgICAgYnV0dG9uTW9kZWwubG9va3NQcmVzc2VkUHJvcGVydHksIGJ1dHRvbk1vZGVsLnZhbHVlUHJvcGVydHkgXSxcbiAgICAgICggZm9jdXNlZCwgb3ZlciwgbG9va3NPdmVyLCBsb29rc1ByZXNzZWQsIHByb3BlcnR5VmFsdWUgKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzVmFsdWVEb3duID0gKCBwcm9wZXJ0eVZhbHVlID09PSBidXR0b25Nb2RlbC52YWx1ZURvd24gKTtcbiAgICAgICAgcmV0dXJuIGxvb2tzT3ZlciAmJiAhKCBsb29rc1ByZXNzZWQgfHwgaXNWYWx1ZURvd24gKSA/IEJ1dHRvbkludGVyYWN0aW9uU3RhdGUuT1ZFUiA6XG4gICAgICAgICAgICAgICAoIG92ZXIgfHwgZm9jdXNlZCApICYmICggbG9va3NQcmVzc2VkIHx8IGlzVmFsdWVEb3duICkgPyBCdXR0b25JbnRlcmFjdGlvblN0YXRlLlBSRVNTRUQgOlxuICAgICAgICAgICAgICAgaXNWYWx1ZURvd24gPyBCdXR0b25JbnRlcmFjdGlvblN0YXRlLlBSRVNTRUQgOlxuICAgICAgICAgICAgICAgQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZS5JRExFO1xuICAgICAgfSxcbiAgICAgIHsgdmFsdWVUeXBlOiBCdXR0b25JbnRlcmFjdGlvblN0YXRlIH1cbiAgICApO1xuICB9XG59XG5cbnN1bi5yZWdpc3RlciggJ1N0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eScsIFN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSApOyJdLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHk1Iiwic3VuIiwiQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZSIsIlN0aWNreVRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsImJ1dHRvbk1vZGVsIiwiZm9jdXNlZFByb3BlcnR5Iiwib3ZlclByb3BlcnR5IiwibG9va3NPdmVyUHJvcGVydHkiLCJsb29rc1ByZXNzZWRQcm9wZXJ0eSIsInZhbHVlUHJvcGVydHkiLCJmb2N1c2VkIiwib3ZlciIsImxvb2tzT3ZlciIsImxvb2tzUHJlc3NlZCIsInByb3BlcnR5VmFsdWUiLCJpc1ZhbHVlRG93biIsInZhbHVlRG93biIsIk9WRVIiLCJQUkVTU0VEIiwiSURMRSIsInZhbHVlVHlwZSIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Q0FJQyxHQUVELFNBQVNBLGdCQUFnQixRQUFRLHNDQUFzQztBQUN2RSxPQUFPQyxTQUFTLFlBQVk7QUFDNUIsT0FBT0MsNEJBQTRCLDhCQUE4QjtBQUdsRCxJQUFBLEFBQU1DLDZDQUFOLE1BQU1BLG1EQUFzREg7SUFDekUsWUFBb0JJLFdBQXVDLENBQUc7UUFDNUQsS0FBSyxDQUNIO1lBQUVBLFlBQVlDLGVBQWU7WUFBRUQsWUFBWUUsWUFBWTtZQUFFRixZQUFZRyxpQkFBaUI7WUFDcEZILFlBQVlJLG9CQUFvQjtZQUFFSixZQUFZSyxhQUFhO1NBQUUsRUFDL0QsQ0FBRUMsU0FBU0MsTUFBTUMsV0FBV0MsY0FBY0M7WUFDeEMsTUFBTUMsY0FBZ0JELGtCQUFrQlYsWUFBWVksU0FBUztZQUM3RCxPQUFPSixhQUFhLENBQUdDLENBQUFBLGdCQUFnQkUsV0FBVSxJQUFNYix1QkFBdUJlLElBQUksR0FDM0UsQUFBRU4sQ0FBQUEsUUFBUUQsT0FBTSxLQUFTRyxDQUFBQSxnQkFBZ0JFLFdBQVUsSUFBTWIsdUJBQXVCZ0IsT0FBTyxHQUN2RkgsY0FBY2IsdUJBQXVCZ0IsT0FBTyxHQUM1Q2hCLHVCQUF1QmlCLElBQUk7UUFDcEMsR0FDQTtZQUFFQyxXQUFXbEI7UUFBdUI7SUFFeEM7QUFDRjtBQWZBLFNBQXFCQyx3REFlcEI7QUFFREYsSUFBSW9CLFFBQVEsQ0FBRSw4Q0FBOENsQiJ9