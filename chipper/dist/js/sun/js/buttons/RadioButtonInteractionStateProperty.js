// Copyright 2014-2024, University of Colorado Boulder
/**
 * A DerivedProperty that maps ButtonModel states to the states needed by the radio button view.
 *
 * @author Aaron Davis (PhET Interactive Simulations)
 */ import { DerivedProperty5 } from '../../../axon/js/DerivedProperty.js';
import sun from '../sun.js';
import RadioButtonInteractionState from './RadioButtonInteractionState.js';
let RadioButtonInteractionStateProperty = class RadioButtonInteractionStateProperty extends DerivedProperty5 {
    /**
   * @param buttonModel
   * @param property - the axon Property set by the button
   * @param value - the value set by the button
   */ constructor(buttonModel, property, value){
        super([
            buttonModel.focusedProperty,
            buttonModel.overProperty,
            buttonModel.looksOverProperty,
            buttonModel.looksPressedProperty,
            property
        ], (focused, over, looksOver, looksPressed, propertyValue)=>{
            const isSelected = propertyValue === value;
            return looksOver && !(looksPressed || isSelected) ? RadioButtonInteractionState.OVER : (over || focused) && looksPressed ? RadioButtonInteractionState.PRESSED : isSelected ? RadioButtonInteractionState.SELECTED : RadioButtonInteractionState.DESELECTED;
        }, {
            valueType: RadioButtonInteractionState
        });
    }
};
export { RadioButtonInteractionStateProperty as default };
sun.register('RadioButtonInteractionStateProperty', RadioButtonInteractionStateProperty);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JhZGlvQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE0LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgRGVyaXZlZFByb3BlcnR5IHRoYXQgbWFwcyBCdXR0b25Nb2RlbCBzdGF0ZXMgdG8gdGhlIHN0YXRlcyBuZWVkZWQgYnkgdGhlIHJhZGlvIGJ1dHRvbiB2aWV3LlxuICpcbiAqIEBhdXRob3IgQWFyb24gRGF2aXMgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IHsgRGVyaXZlZFByb3BlcnR5NSB9IGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xuaW1wb3J0IHN1biBmcm9tICcuLi9zdW4uanMnO1xuaW1wb3J0IEJ1dHRvbk1vZGVsIGZyb20gJy4vQnV0dG9uTW9kZWwuanMnO1xuaW1wb3J0IFJhZGlvQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZSBmcm9tICcuL1JhZGlvQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhZGlvQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5PFQ+IGV4dGVuZHMgRGVyaXZlZFByb3BlcnR5NTxSYWRpb0J1dHRvbkludGVyYWN0aW9uU3RhdGUsIGJvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW4sIFQ+IHtcblxuICAvKipcbiAgICogQHBhcmFtIGJ1dHRvbk1vZGVsXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSAtIHRoZSBheG9uIFByb3BlcnR5IHNldCBieSB0aGUgYnV0dG9uXG4gICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSBzZXQgYnkgdGhlIGJ1dHRvblxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBidXR0b25Nb2RlbDogQnV0dG9uTW9kZWwsIHByb3BlcnR5OiBUUHJvcGVydHk8VD4sIHZhbHVlOiBUICkge1xuICAgIHN1cGVyKFxuICAgICAgWyBidXR0b25Nb2RlbC5mb2N1c2VkUHJvcGVydHksIGJ1dHRvbk1vZGVsLm92ZXJQcm9wZXJ0eSwgYnV0dG9uTW9kZWwubG9va3NPdmVyUHJvcGVydHksIGJ1dHRvbk1vZGVsLmxvb2tzUHJlc3NlZFByb3BlcnR5LCBwcm9wZXJ0eSBdLFxuICAgICAgKCBmb2N1c2VkLCBvdmVyLCBsb29rc092ZXIsIGxvb2tzUHJlc3NlZCwgcHJvcGVydHlWYWx1ZSApID0+IHtcbiAgICAgICAgY29uc3QgaXNTZWxlY3RlZCA9ICggcHJvcGVydHlWYWx1ZSA9PT0gdmFsdWUgKTtcbiAgICAgICAgcmV0dXJuIGxvb2tzT3ZlciAmJiAhKCBsb29rc1ByZXNzZWQgfHwgaXNTZWxlY3RlZCApID8gUmFkaW9CdXR0b25JbnRlcmFjdGlvblN0YXRlLk9WRVIgOlxuICAgICAgICAgICAgICAgKCBvdmVyIHx8IGZvY3VzZWQgKSAmJiBsb29rc1ByZXNzZWQgPyBSYWRpb0J1dHRvbkludGVyYWN0aW9uU3RhdGUuUFJFU1NFRCA6XG4gICAgICAgICAgICAgICBpc1NlbGVjdGVkID8gUmFkaW9CdXR0b25JbnRlcmFjdGlvblN0YXRlLlNFTEVDVEVEIDpcbiAgICAgICAgICAgICAgIFJhZGlvQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZS5ERVNFTEVDVEVEO1xuICAgICAgfSxcbiAgICAgIHsgdmFsdWVUeXBlOiBSYWRpb0J1dHRvbkludGVyYWN0aW9uU3RhdGUgfVxuICAgICk7XG4gIH1cbn1cblxuc3VuLnJlZ2lzdGVyKCAnUmFkaW9CdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHknLCBSYWRpb0J1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSApOyJdLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHk1Iiwic3VuIiwiUmFkaW9CdXR0b25JbnRlcmFjdGlvblN0YXRlIiwiUmFkaW9CdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkiLCJidXR0b25Nb2RlbCIsInByb3BlcnR5IiwidmFsdWUiLCJmb2N1c2VkUHJvcGVydHkiLCJvdmVyUHJvcGVydHkiLCJsb29rc092ZXJQcm9wZXJ0eSIsImxvb2tzUHJlc3NlZFByb3BlcnR5IiwiZm9jdXNlZCIsIm92ZXIiLCJsb29rc092ZXIiLCJsb29rc1ByZXNzZWQiLCJwcm9wZXJ0eVZhbHVlIiwiaXNTZWxlY3RlZCIsIk9WRVIiLCJQUkVTU0VEIiwiU0VMRUNURUQiLCJERVNFTEVDVEVEIiwidmFsdWVUeXBlIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBRUQsU0FBU0EsZ0JBQWdCLFFBQVEsc0NBQXNDO0FBRXZFLE9BQU9DLFNBQVMsWUFBWTtBQUU1QixPQUFPQyxpQ0FBaUMsbUNBQW1DO0FBRTVELElBQUEsQUFBTUMsc0NBQU4sTUFBTUEsNENBQStDSDtJQUVsRTs7OztHQUlDLEdBQ0QsWUFBb0JJLFdBQXdCLEVBQUVDLFFBQXNCLEVBQUVDLEtBQVEsQ0FBRztRQUMvRSxLQUFLLENBQ0g7WUFBRUYsWUFBWUcsZUFBZTtZQUFFSCxZQUFZSSxZQUFZO1lBQUVKLFlBQVlLLGlCQUFpQjtZQUFFTCxZQUFZTSxvQkFBb0I7WUFBRUw7U0FBVSxFQUNwSSxDQUFFTSxTQUFTQyxNQUFNQyxXQUFXQyxjQUFjQztZQUN4QyxNQUFNQyxhQUFlRCxrQkFBa0JUO1lBQ3ZDLE9BQU9PLGFBQWEsQ0FBR0MsQ0FBQUEsZ0JBQWdCRSxVQUFTLElBQU1kLDRCQUE0QmUsSUFBSSxHQUMvRSxBQUFFTCxDQUFBQSxRQUFRRCxPQUFNLEtBQU9HLGVBQWVaLDRCQUE0QmdCLE9BQU8sR0FDekVGLGFBQWFkLDRCQUE0QmlCLFFBQVEsR0FDakRqQiw0QkFBNEJrQixVQUFVO1FBQy9DLEdBQ0E7WUFBRUMsV0FBV25CO1FBQTRCO0lBRTdDO0FBQ0Y7QUFwQkEsU0FBcUJDLGlEQW9CcEI7QUFFREYsSUFBSXFCLFFBQVEsQ0FBRSx1Q0FBdUNuQiJ9