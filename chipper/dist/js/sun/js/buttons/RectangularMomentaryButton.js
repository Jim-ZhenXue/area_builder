// Copyright 2015-2024, University of Colorado Boulder
/**
 * RectangularMomentaryButton is a rectangular momentary button that toggles a Property between 2 values.
 * The 'off value' is the value when the button is not pressed.
 * The 'on value' is the value when the button is pressed.
 *
 * TODO: Not supported with alternative input, see https://github.com/phetsims/scenery/issues/1117
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */ import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import sharedSoundPlayers from '../../../tambo/js/sharedSoundPlayers.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import MomentaryButtonInteractionStateProperty from './MomentaryButtonInteractionStateProperty.js';
import MomentaryButtonModel from './MomentaryButtonModel.js';
import RectangularButton from './RectangularButton.js';
let RectangularMomentaryButton = class RectangularMomentaryButton extends RectangularButton {
    dispose() {
        this.disposeRectangularMomentaryButton();
        super.dispose();
    }
    /**
   * @param property
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param [providedOptions?]
   */ constructor(property, valueOff, valueOn, providedOptions){
        var _window_phet_chipper_queryParameters, _window_phet_chipper, _window_phet;
        const options = optionize()({
            // SelfOptions
            valueOffSoundPlayer: sharedSoundPlayers.get('toggleOff'),
            valueOnSoundPlayer: sharedSoundPlayers.get('toggleOn'),
            tandem: Tandem.REQUIRED
        }, providedOptions);
        // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
        const buttonModel = new MomentaryButtonModel(valueOff, valueOn, property, options);
        super(buttonModel, new MomentaryButtonInteractionStateProperty(buttonModel), options);
        // sound generation
        const playSounds = ()=>{
            if (property.value === valueOff) {
                options.valueOffSoundPlayer.play();
            } else if (property.value === valueOn) {
                options.valueOnSoundPlayer.play();
            }
        };
        this.buttonModel.produceSoundEmitter.addListener(playSounds);
        // pdom - signify button is 'pressed' when down
        const setAriaPressed = ()=>this.setPDOMAttribute('aria-pressed', property.value === valueOn);
        property.link(setAriaPressed);
        this.disposeRectangularMomentaryButton = ()=>{
            property.unlink(setAriaPressed);
            buttonModel.produceSoundEmitter.removeListener(playSounds);
            buttonModel.dispose();
        };
        // support for binder documentation, stripped out in builds and only runs when ?binder is specified
        assert && ((_window_phet = window.phet) == null ? void 0 : (_window_phet_chipper = _window_phet.chipper) == null ? void 0 : (_window_phet_chipper_queryParameters = _window_phet_chipper.queryParameters) == null ? void 0 : _window_phet_chipper_queryParameters.binder) && InstanceRegistry.registerDataURL('sun', 'RectangularMomentaryButton', this);
    }
};
export { RectangularMomentaryButton as default };
sun.register('RectangularMomentaryButton', RectangularMomentaryButton);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFJlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uIGlzIGEgcmVjdGFuZ3VsYXIgbW9tZW50YXJ5IGJ1dHRvbiB0aGF0IHRvZ2dsZXMgYSBQcm9wZXJ0eSBiZXR3ZWVuIDIgdmFsdWVzLlxuICogVGhlICdvZmYgdmFsdWUnIGlzIHRoZSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgbm90IHByZXNzZWQuXG4gKiBUaGUgJ29uIHZhbHVlJyBpcyB0aGUgdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIHByZXNzZWQuXG4gKlxuICogVE9ETzogTm90IHN1cHBvcnRlZCB3aXRoIGFsdGVybmF0aXZlIGlucHV0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnkvaXNzdWVzLzExMTdcbiAqXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxuICovXG5cbmltcG9ydCBUUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUHJvcGVydHkuanMnO1xuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IHNoYXJlZFNvdW5kUGxheWVycyBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zaGFyZWRTb3VuZFBsYXllcnMuanMnO1xuaW1wb3J0IFRTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9UU291bmRQbGF5ZXIuanMnO1xuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcbmltcG9ydCBzdW4gZnJvbSAnLi4vc3VuLmpzJztcbmltcG9ydCBNb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgZnJvbSAnLi9Nb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkuanMnO1xuaW1wb3J0IE1vbWVudGFyeUJ1dHRvbk1vZGVsIGZyb20gJy4vTW9tZW50YXJ5QnV0dG9uTW9kZWwuanMnO1xuaW1wb3J0IFJlY3Rhbmd1bGFyQnV0dG9uLCB7IFJlY3Rhbmd1bGFyQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4vUmVjdGFuZ3VsYXJCdXR0b24uanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuICB2YWx1ZU9mZlNvdW5kUGxheWVyPzogVFNvdW5kUGxheWVyO1xuICB2YWx1ZU9uU291bmRQbGF5ZXI/OiBUU291bmRQbGF5ZXI7XG59O1xuXG5leHBvcnQgdHlwZSBSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFJlY3Rhbmd1bGFyQnV0dG9uT3B0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b248VD4gZXh0ZW5kcyBSZWN0YW5ndWxhckJ1dHRvbiB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b246ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gdmFsdWVPZmYgLSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgaW4gdGhlIG9mZiBzdGF0ZVxuICAgKiBAcGFyYW0gdmFsdWVPbiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb24gc3RhdGVcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnM/XVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogVFByb3BlcnR5PFQ+LCB2YWx1ZU9mZjogVCwgdmFsdWVPbjogVCwgcHJvdmlkZWRPcHRpb25zPzogUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b25PcHRpb25zICkge1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhckJ1dHRvbk9wdGlvbnM+KCkoIHtcblxuICAgICAgLy8gU2VsZk9wdGlvbnNcbiAgICAgIHZhbHVlT2ZmU291bmRQbGF5ZXI6IHNoYXJlZFNvdW5kUGxheWVycy5nZXQoICd0b2dnbGVPZmYnICksXG4gICAgICB2YWx1ZU9uU291bmRQbGF5ZXI6IHNoYXJlZFNvdW5kUGxheWVycy5nZXQoICd0b2dnbGVPbicgKSxcblxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIC8vIE5vdGUgaXQgc2hhcmVzIGEgdGFuZGVtIHdpdGggdGhpcywgc28gdGhlIGVtaXR0ZXIgd2lsbCBiZSBpbnN0cnVtZW50ZWQgYXMgYSBjaGlsZCBvZiB0aGUgYnV0dG9uXG4gICAgY29uc3QgYnV0dG9uTW9kZWwgPSBuZXcgTW9tZW50YXJ5QnV0dG9uTW9kZWwoIHZhbHVlT2ZmLCB2YWx1ZU9uLCBwcm9wZXJ0eSwgb3B0aW9ucyApO1xuXG4gICAgc3VwZXIoIGJ1dHRvbk1vZGVsLCBuZXcgTW9tZW50YXJ5QnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5KCBidXR0b25Nb2RlbCApLCBvcHRpb25zICk7XG5cbiAgICAvLyBzb3VuZCBnZW5lcmF0aW9uXG4gICAgY29uc3QgcGxheVNvdW5kcyA9ICgpID0+IHtcbiAgICAgIGlmICggcHJvcGVydHkudmFsdWUgPT09IHZhbHVlT2ZmICkge1xuICAgICAgICBvcHRpb25zLnZhbHVlT2ZmU291bmRQbGF5ZXIucGxheSgpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIHByb3BlcnR5LnZhbHVlID09PSB2YWx1ZU9uICkge1xuICAgICAgICBvcHRpb25zLnZhbHVlT25Tb3VuZFBsYXllci5wbGF5KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIHBsYXlTb3VuZHMgKTtcblxuICAgIC8vIHBkb20gLSBzaWduaWZ5IGJ1dHRvbiBpcyAncHJlc3NlZCcgd2hlbiBkb3duXG4gICAgY29uc3Qgc2V0QXJpYVByZXNzZWQgPSAoKSA9PiB0aGlzLnNldFBET01BdHRyaWJ1dGUoICdhcmlhLXByZXNzZWQnLCBwcm9wZXJ0eS52YWx1ZSA9PT0gdmFsdWVPbiApO1xuICAgIHByb3BlcnR5LmxpbmsoIHNldEFyaWFQcmVzc2VkICk7XG5cbiAgICB0aGlzLmRpc3Bvc2VSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbiA9ICgpID0+IHtcbiAgICAgIHByb3BlcnR5LnVubGluayggc2V0QXJpYVByZXNzZWQgKTtcbiAgICAgIGJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIHBsYXlTb3VuZHMgKTtcbiAgICAgIGJ1dHRvbk1vZGVsLmRpc3Bvc2UoKTtcbiAgICB9O1xuXG4gICAgLy8gc3VwcG9ydCBmb3IgYmluZGVyIGRvY3VtZW50YXRpb24sIHN0cmlwcGVkIG91dCBpbiBidWlsZHMgYW5kIG9ubHkgcnVucyB3aGVuID9iaW5kZXIgaXMgc3BlY2lmaWVkXG4gICAgYXNzZXJ0ICYmIHdpbmRvdy5waGV0Py5jaGlwcGVyPy5xdWVyeVBhcmFtZXRlcnM/LmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3N1bicsICdSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbicsIHRoaXMgKTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcG9zZVJlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uKCk7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG59XG5cbnN1bi5yZWdpc3RlciggJ1JlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uJywgUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b24gKTsiXSwibmFtZXMiOlsiSW5zdGFuY2VSZWdpc3RyeSIsIm9wdGlvbml6ZSIsInNoYXJlZFNvdW5kUGxheWVycyIsIlRhbmRlbSIsInN1biIsIk1vbWVudGFyeUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIk1vbWVudGFyeUJ1dHRvbk1vZGVsIiwiUmVjdGFuZ3VsYXJCdXR0b24iLCJSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbiIsImRpc3Bvc2UiLCJkaXNwb3NlUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b24iLCJwcm9wZXJ0eSIsInZhbHVlT2ZmIiwidmFsdWVPbiIsInByb3ZpZGVkT3B0aW9ucyIsIndpbmRvdyIsIm9wdGlvbnMiLCJ2YWx1ZU9mZlNvdW5kUGxheWVyIiwiZ2V0IiwidmFsdWVPblNvdW5kUGxheWVyIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJidXR0b25Nb2RlbCIsInBsYXlTb3VuZHMiLCJ2YWx1ZSIsInBsYXkiLCJwcm9kdWNlU291bmRFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJzZXRBcmlhUHJlc3NlZCIsInNldFBET01BdHRyaWJ1dGUiLCJsaW5rIiwidW5saW5rIiwicmVtb3ZlTGlzdGVuZXIiLCJhc3NlcnQiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Ozs7O0NBUUMsR0FHRCxPQUFPQSxzQkFBc0IsMERBQTBEO0FBQ3ZGLE9BQU9DLGVBQWUscUNBQXFDO0FBQzNELE9BQU9DLHdCQUF3QiwwQ0FBMEM7QUFFekUsT0FBT0MsWUFBWSwrQkFBK0I7QUFDbEQsT0FBT0MsU0FBUyxZQUFZO0FBQzVCLE9BQU9DLDZDQUE2QywrQ0FBK0M7QUFDbkcsT0FBT0MsMEJBQTBCLDRCQUE0QjtBQUM3RCxPQUFPQyx1QkFBcUQseUJBQXlCO0FBU3RFLElBQUEsQUFBTUMsNkJBQU4sTUFBTUEsbUNBQXNDRDtJQW1EekNFLFVBQWdCO1FBQzlCLElBQUksQ0FBQ0MsaUNBQWlDO1FBQ3RDLEtBQUssQ0FBQ0Q7SUFDUjtJQWxEQTs7Ozs7R0FLQyxHQUNELFlBQW9CRSxRQUFzQixFQUFFQyxRQUFXLEVBQUVDLE9BQVUsRUFBRUMsZUFBbUQsQ0FBRztZQXNDL0dDLHNDQUFBQSxzQkFBQUE7UUFwQ1YsTUFBTUMsVUFBVWYsWUFBdUY7WUFFckcsY0FBYztZQUNkZ0IscUJBQXFCZixtQkFBbUJnQixHQUFHLENBQUU7WUFDN0NDLG9CQUFvQmpCLG1CQUFtQmdCLEdBQUcsQ0FBRTtZQUU1Q0UsUUFBUWpCLE9BQU9rQixRQUFRO1FBQ3pCLEdBQUdQO1FBRUgsa0dBQWtHO1FBQ2xHLE1BQU1RLGNBQWMsSUFBSWhCLHFCQUFzQk0sVUFBVUMsU0FBU0YsVUFBVUs7UUFFM0UsS0FBSyxDQUFFTSxhQUFhLElBQUlqQix3Q0FBeUNpQixjQUFlTjtRQUVoRixtQkFBbUI7UUFDbkIsTUFBTU8sYUFBYTtZQUNqQixJQUFLWixTQUFTYSxLQUFLLEtBQUtaLFVBQVc7Z0JBQ2pDSSxRQUFRQyxtQkFBbUIsQ0FBQ1EsSUFBSTtZQUNsQyxPQUNLLElBQUtkLFNBQVNhLEtBQUssS0FBS1gsU0FBVTtnQkFDckNHLFFBQVFHLGtCQUFrQixDQUFDTSxJQUFJO1lBQ2pDO1FBQ0Y7UUFDQSxJQUFJLENBQUNILFdBQVcsQ0FBQ0ksbUJBQW1CLENBQUNDLFdBQVcsQ0FBRUo7UUFFbEQsK0NBQStDO1FBQy9DLE1BQU1LLGlCQUFpQixJQUFNLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUUsZ0JBQWdCbEIsU0FBU2EsS0FBSyxLQUFLWDtRQUN2RkYsU0FBU21CLElBQUksQ0FBRUY7UUFFZixJQUFJLENBQUNsQixpQ0FBaUMsR0FBRztZQUN2Q0MsU0FBU29CLE1BQU0sQ0FBRUg7WUFDakJOLFlBQVlJLG1CQUFtQixDQUFDTSxjQUFjLENBQUVUO1lBQ2hERCxZQUFZYixPQUFPO1FBQ3JCO1FBRUEsbUdBQW1HO1FBQ25Hd0IsWUFBVWxCLGVBQUFBLE9BQU9tQixJQUFJLHNCQUFYbkIsdUJBQUFBLGFBQWFvQixPQUFPLHNCQUFwQnBCLHVDQUFBQSxxQkFBc0JxQixlQUFlLHFCQUFyQ3JCLHFDQUF1Q3NCLE1BQU0sS0FBSXJDLGlCQUFpQnNDLGVBQWUsQ0FBRSxPQUFPLDhCQUE4QixJQUFJO0lBQ3hJO0FBTUY7QUF2REEsU0FBcUI5Qix3Q0F1RHBCO0FBRURKLElBQUltQyxRQUFRLENBQUUsOEJBQThCL0IifQ==