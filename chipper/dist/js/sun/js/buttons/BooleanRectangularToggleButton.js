// Copyright 2013-2024, University of Colorado Boulder
/**
 * This toggle button uses a boolean Property and a trueNode and falseNode to display its content.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */ import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import BooleanToggleNode from '../BooleanToggleNode.js';
import sun from '../sun.js';
import RectangularToggleButton from './RectangularToggleButton.js';
let BooleanRectangularToggleButton = class BooleanRectangularToggleButton extends RectangularToggleButton {
    dispose() {
        this.disposeBooleanRectangularToggleButton();
        super.dispose();
    }
    /**
   * @param booleanProperty
   * @param trueNode - shown when booleanProperty is true
   * @param falseNode - shown when booleanProperty is false
   * @param providedOptions?
   */ constructor(booleanProperty, trueNode, falseNode, providedOptions){
        const content = new BooleanToggleNode(booleanProperty, trueNode, falseNode);
        const options = optionize()({
            content: content,
            tandem: Tandem.REQUIRED
        }, providedOptions);
        super(booleanProperty, false, true, options);
        this.disposeBooleanRectangularToggleButton = ()=>{
            content.dispose();
        };
    }
};
export { BooleanRectangularToggleButton as default };
sun.register('BooleanRectangularToggleButton', BooleanRectangularToggleButton);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL0Jvb2xlYW5SZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBUaGlzIHRvZ2dsZSBidXR0b24gdXNlcyBhIGJvb2xlYW4gUHJvcGVydHkgYW5kIGEgdHJ1ZU5vZGUgYW5kIGZhbHNlTm9kZSB0byBkaXNwbGF5IGl0cyBjb250ZW50LlxuICpcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XG5pbXBvcnQgQm9vbGVhblRvZ2dsZU5vZGUgZnJvbSAnLi4vQm9vbGVhblRvZ2dsZU5vZGUuanMnO1xuaW1wb3J0IHN1biBmcm9tICcuLi9zdW4uanMnO1xuaW1wb3J0IFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uLCB7IFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4vUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24uanMnO1xuXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcblxuZXhwb3J0IHR5cGUgQm9vbGVhblJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbk9wdGlvbnMsICdjb250ZW50Jz47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2xlYW5SZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiBleHRlbmRzIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uPGJvb2xlYW4+IHtcblxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VCb29sZWFuUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b246ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBib29sZWFuUHJvcGVydHlcbiAgICogQHBhcmFtIHRydWVOb2RlIC0gc2hvd24gd2hlbiBib29sZWFuUHJvcGVydHkgaXMgdHJ1ZVxuICAgKiBAcGFyYW0gZmFsc2VOb2RlIC0gc2hvd24gd2hlbiBib29sZWFuUHJvcGVydHkgaXMgZmFsc2VcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9ucz9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm9vbGVhblByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgdHJ1ZU5vZGU6IE5vZGUsIGZhbHNlTm9kZTogTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBCb29sZWFuUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b25PcHRpb25zICkge1xuXG4gICAgY29uc3QgY29udGVudCA9IG5ldyBCb29sZWFuVG9nZ2xlTm9kZSggYm9vbGVhblByb3BlcnR5LCB0cnVlTm9kZSwgZmFsc2VOb2RlICk7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEJvb2xlYW5SZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbk9wdGlvbnM+KCkoIHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xuXG4gICAgc3VwZXIoIGJvb2xlYW5Qcm9wZXJ0eSwgZmFsc2UsIHRydWUsIG9wdGlvbnMgKTtcblxuICAgIHRoaXMuZGlzcG9zZUJvb2xlYW5SZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiA9ICgpID0+IHtcbiAgICAgIGNvbnRlbnQuZGlzcG9zZSgpO1xuICAgIH07XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3Bvc2VCb29sZWFuUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24oKTtcbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cbn1cblxuc3VuLnJlZ2lzdGVyKCAnQm9vbGVhblJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uJywgQm9vbGVhblJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uICk7Il0sIm5hbWVzIjpbIm9wdGlvbml6ZSIsIlRhbmRlbSIsIkJvb2xlYW5Ub2dnbGVOb2RlIiwic3VuIiwiUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24iLCJCb29sZWFuUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24iLCJkaXNwb3NlIiwiZGlzcG9zZUJvb2xlYW5SZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiIsImJvb2xlYW5Qcm9wZXJ0eSIsInRydWVOb2RlIiwiZmFsc2VOb2RlIiwicHJvdmlkZWRPcHRpb25zIiwiY29udGVudCIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Q0FJQyxHQUdELE9BQU9BLGVBQXFDLHFDQUFxQztBQUdqRixPQUFPQyxZQUFZLCtCQUErQjtBQUNsRCxPQUFPQyx1QkFBdUIsMEJBQTBCO0FBQ3hELE9BQU9DLFNBQVMsWUFBWTtBQUM1QixPQUFPQyw2QkFBaUUsK0JBQStCO0FBTXhGLElBQUEsQUFBTUMsaUNBQU4sTUFBTUEsdUNBQXVDRDtJQTJCMUNFLFVBQWdCO1FBQzlCLElBQUksQ0FBQ0MscUNBQXFDO1FBQzFDLEtBQUssQ0FBQ0Q7SUFDUjtJQTFCQTs7Ozs7R0FLQyxHQUNELFlBQW9CRSxlQUFrQyxFQUFFQyxRQUFjLEVBQUVDLFNBQWUsRUFDbkVDLGVBQXVELENBQUc7UUFFNUUsTUFBTUMsVUFBVSxJQUFJVixrQkFBbUJNLGlCQUFpQkMsVUFBVUM7UUFFbEUsTUFBTUcsVUFBVWIsWUFBaUc7WUFDL0dZLFNBQVNBO1lBQ1RFLFFBQVFiLE9BQU9jLFFBQVE7UUFDekIsR0FBR0o7UUFFSCxLQUFLLENBQUVILGlCQUFpQixPQUFPLE1BQU1LO1FBRXJDLElBQUksQ0FBQ04scUNBQXFDLEdBQUc7WUFDM0NLLFFBQVFOLE9BQU87UUFDakI7SUFDRjtBQU1GO0FBL0JBLFNBQXFCRCw0Q0ErQnBCO0FBRURGLElBQUlhLFFBQVEsQ0FBRSxrQ0FBa0NYIn0=