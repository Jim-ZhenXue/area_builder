// Copyright 2013-2024, University of Colorado Boulder
/**
 * This toggle button uses a boolean Property and a trueNode and falseNode to display its content.
 *
 * @author Sam Reid
 */ import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import BooleanToggleNode from '../BooleanToggleNode.js';
import sun from '../sun.js';
import RoundToggleButton from './RoundToggleButton.js';
let BooleanRoundToggleButton = class BooleanRoundToggleButton extends RoundToggleButton {
    dispose() {
        this.disposeBooleanRoundToggleButton();
        super.dispose();
    }
    /**
   * @param booleanProperty
   * @param trueNode - shown when booleanProperty is true
   * @param falseNode - shown when booleanProperty is false
   * @param [providedOptions]
   */ constructor(booleanProperty, trueNode, falseNode, providedOptions){
        const options = optionize()({
            content: null,
            tandem: Tandem.REQUIRED
        }, providedOptions);
        const toggleNode = new BooleanToggleNode(booleanProperty, trueNode, falseNode, {
            tandem: options.tandem.createTandem('toggleNode')
        });
        options.content = toggleNode;
        super(booleanProperty, false, true, options);
        this.disposeBooleanRoundToggleButton = function() {
            toggleNode.dispose();
        };
    }
};
sun.register('BooleanRoundToggleButton', BooleanRoundToggleButton);
export default BooleanRoundToggleButton;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL0Jvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBUaGlzIHRvZ2dsZSBidXR0b24gdXNlcyBhIGJvb2xlYW4gUHJvcGVydHkgYW5kIGEgdHJ1ZU5vZGUgYW5kIGZhbHNlTm9kZSB0byBkaXNwbGF5IGl0cyBjb250ZW50LlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWRcbiAqL1xuXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcbmltcG9ydCBCb29sZWFuVG9nZ2xlTm9kZSBmcm9tICcuLi9Cb29sZWFuVG9nZ2xlTm9kZS5qcyc7XG5pbXBvcnQgc3VuIGZyb20gJy4uL3N1bi5qcyc7XG5pbXBvcnQgUm91bmRUb2dnbGVCdXR0b24sIHsgUm91bmRUb2dnbGVCdXR0b25PcHRpb25zIH0gZnJvbSAnLi9Sb3VuZFRvZ2dsZUJ1dHRvbi5qcyc7XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xuXG5leHBvcnQgdHlwZSBCb29sZWFuUm91bmRUb2dnbGVCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJvdW5kVG9nZ2xlQnV0dG9uT3B0aW9ucywgJ2NvbnRlbnQnPjtcblxuY2xhc3MgQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uIGV4dGVuZHMgUm91bmRUb2dnbGVCdXR0b248Ym9vbGVhbj4ge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUJvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQHBhcmFtIGJvb2xlYW5Qcm9wZXJ0eVxuICAgKiBAcGFyYW0gdHJ1ZU5vZGUgLSBzaG93biB3aGVuIGJvb2xlYW5Qcm9wZXJ0eSBpcyB0cnVlXG4gICAqIEBwYXJhbSBmYWxzZU5vZGUgLSBzaG93biB3aGVuIGJvb2xlYW5Qcm9wZXJ0eSBpcyBmYWxzZVxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggYm9vbGVhblByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPiwgdHJ1ZU5vZGU6IE5vZGUsIGZhbHNlTm9kZTogTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBCb29sZWFuUm91bmRUb2dnbGVCdXR0b25PcHRpb25zICkge1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCb29sZWFuUm91bmRUb2dnbGVCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUm91bmRUb2dnbGVCdXR0b25PcHRpb25zPigpKCB7XG4gICAgICBjb250ZW50OiBudWxsLFxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRURcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIGNvbnN0IHRvZ2dsZU5vZGUgPSBuZXcgQm9vbGVhblRvZ2dsZU5vZGUoIGJvb2xlYW5Qcm9wZXJ0eSwgdHJ1ZU5vZGUsIGZhbHNlTm9kZSwge1xuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0b2dnbGVOb2RlJyApXG4gICAgfSApO1xuICAgIG9wdGlvbnMuY29udGVudCA9IHRvZ2dsZU5vZGU7XG5cbiAgICBzdXBlciggYm9vbGVhblByb3BlcnR5LCBmYWxzZSwgdHJ1ZSwgb3B0aW9ucyApO1xuXG4gICAgdGhpcy5kaXNwb3NlQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uID0gZnVuY3Rpb24oKSB7XG4gICAgICB0b2dnbGVOb2RlLmRpc3Bvc2UoKTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwb3NlQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uKCk7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG59XG5cbnN1bi5yZWdpc3RlciggJ0Jvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbicsIEJvb2xlYW5Sb3VuZFRvZ2dsZUJ1dHRvbiApO1xuZXhwb3J0IGRlZmF1bHQgQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJUYW5kZW0iLCJCb29sZWFuVG9nZ2xlTm9kZSIsInN1biIsIlJvdW5kVG9nZ2xlQnV0dG9uIiwiQm9vbGVhblJvdW5kVG9nZ2xlQnV0dG9uIiwiZGlzcG9zZSIsImRpc3Bvc2VCb29sZWFuUm91bmRUb2dnbGVCdXR0b24iLCJib29sZWFuUHJvcGVydHkiLCJ0cnVlTm9kZSIsImZhbHNlTm9kZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJjb250ZW50IiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0b2dnbGVOb2RlIiwiY3JlYXRlVGFuZGVtIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBR0QsT0FBT0EsZUFBcUMscUNBQXFDO0FBR2pGLE9BQU9DLFlBQVksK0JBQStCO0FBQ2xELE9BQU9DLHVCQUF1QiwwQkFBMEI7QUFDeEQsT0FBT0MsU0FBUyxZQUFZO0FBQzVCLE9BQU9DLHVCQUFxRCx5QkFBeUI7QUFNckYsSUFBQSxBQUFNQywyQkFBTixNQUFNQSxpQ0FBaUNEO0lBOEJyQkUsVUFBZ0I7UUFDOUIsSUFBSSxDQUFDQywrQkFBK0I7UUFDcEMsS0FBSyxDQUFDRDtJQUNSO0lBN0JBOzs7OztHQUtDLEdBQ0QsWUFBb0JFLGVBQWtDLEVBQUVDLFFBQWMsRUFBRUMsU0FBZSxFQUNuRUMsZUFBaUQsQ0FBRztRQUV0RSxNQUFNQyxVQUFVWixZQUFxRjtZQUNuR2EsU0FBUztZQUNUQyxRQUFRYixPQUFPYyxRQUFRO1FBQ3pCLEdBQUdKO1FBRUgsTUFBTUssYUFBYSxJQUFJZCxrQkFBbUJNLGlCQUFpQkMsVUFBVUMsV0FBVztZQUM5RUksUUFBUUYsUUFBUUUsTUFBTSxDQUFDRyxZQUFZLENBQUU7UUFDdkM7UUFDQUwsUUFBUUMsT0FBTyxHQUFHRztRQUVsQixLQUFLLENBQUVSLGlCQUFpQixPQUFPLE1BQU1JO1FBRXJDLElBQUksQ0FBQ0wsK0JBQStCLEdBQUc7WUFDckNTLFdBQVdWLE9BQU87UUFDcEI7SUFDRjtBQU1GO0FBRUFILElBQUllLFFBQVEsQ0FBRSw0QkFBNEJiO0FBQzFDLGVBQWVBLHlCQUF5QiJ9