// Copyright 2017-2023, University of Colorado Boulder
/**
 * WARNING: PROTOTYPE, see https://github.com/phetsims/twixt/issues/3 before using!
 * Not fully documented or stabilized. May be deleted.
 *
 * Handles a single dimension of damped harmonic-oscillator motion (like a damped spring pulling towards the target).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import TinyProperty from '../../axon/js/TinyProperty.js';
import DampedHarmonic from '../../dot/js/DampedHarmonic.js';
import optionize from '../../phet-core/js/optionize.js';
import twixt from './twixt.js';
let DampedAnimation = class DampedAnimation {
    /**
   * Returns the target value
   */ get targetValue() {
        return this._targetValue;
    }
    /**
   * Change the target value that we are moving toward.
   */ set targetValue(value) {
        this._targetValue = value;
        this.recompute();
    }
    /**
   * Returns the damping value
   */ get damping() {
        return this._damping;
    }
    /**
   * Sets the damping value.
   */ set damping(value) {
        this._damping = value;
        this.recompute();
    }
    /**
   * Returns the force value
   */ get force() {
        return this._force;
    }
    /**
   * Sets the force value.
   */ set force(value) {
        this._force = value;
        this.recompute();
    }
    /**
   * On a change, we need to recompute our harmonic (that plots out the motion to the target)
   */ recompute() {
        this.timeElapsed = 0;
        this.harmonic = new DampedHarmonic(1, Math.sqrt(4 * this._force) * this._damping, this._force, this.valueProperty.value - this._targetValue, this.velocityProperty.value);
    }
    /**
   * Steps the animation forward in time.
   */ step(dt) {
        this.timeElapsed += dt;
        this.valueProperty.value = this._targetValue + this.harmonic.getValue(this.timeElapsed);
        this.velocityProperty.value = this.harmonic.getDerivative(this.timeElapsed);
    }
    constructor(providedOptions){
        this.timeElapsed = 0;
        const options = optionize()({
            valueProperty: new TinyProperty(0),
            velocityProperty: new TinyProperty(0),
            damping: 1,
            force: 1,
            targetValue: 0
        }, providedOptions);
        this.valueProperty = options.valueProperty;
        this.velocityProperty = options.velocityProperty;
        this._damping = options.damping;
        this._force = options.force;
        this._targetValue = options.targetValue;
        this.recompute();
    }
};
twixt.register('DampedAnimation', DampedAnimation);
export default DampedAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3R3aXh0L2pzL0RhbXBlZEFuaW1hdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBXQVJOSU5HOiBQUk9UT1RZUEUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdHdpeHQvaXNzdWVzLzMgYmVmb3JlIHVzaW5nIVxuICogTm90IGZ1bGx5IGRvY3VtZW50ZWQgb3Igc3RhYmlsaXplZC4gTWF5IGJlIGRlbGV0ZWQuXG4gKlxuICogSGFuZGxlcyBhIHNpbmdsZSBkaW1lbnNpb24gb2YgZGFtcGVkIGhhcm1vbmljLW9zY2lsbGF0b3IgbW90aW9uIChsaWtlIGEgZGFtcGVkIHNwcmluZyBwdWxsaW5nIHRvd2FyZHMgdGhlIHRhcmdldCkuXG4gKlxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxuICovXG5cbmltcG9ydCBUaW55UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UaW55UHJvcGVydHkuanMnO1xuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgRGFtcGVkSGFybW9uaWMgZnJvbSAnLi4vLi4vZG90L2pzL0RhbXBlZEhhcm1vbmljLmpzJztcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgdHdpeHQgZnJvbSAnLi90d2l4dC5qcyc7XG5cbmV4cG9ydCB0eXBlIERhbXBlZEFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gIC8vIFRoZSBjdXJyZW50IHZhbHVlL3Bvc2l0aW9uLlxuICB2YWx1ZVByb3BlcnR5PzogVFByb3BlcnR5PG51bWJlcj47XG5cbiAgLy8gVGhlIGN1cnJlbnQgZGVyaXZhdGl2ZSBvZiB0aGUgdmFsdWVcbiAgdmVsb2NpdHlQcm9wZXJ0eT86IFRQcm9wZXJ0eTxudW1iZXI+O1xuXG4gIC8vIFByb3BvcnRpb24gb2YgZGFtcGluZyBhcHBsaWVkLCByZWxhdGl2ZSB0byBjcml0aWNhbCBkYW1waW5nLiBUaHVzOlxuICAvLyAtIGRhbXBpbmcgPSAxOiBDcml0aWNhbGx5IGRhbXBlZCAoZmFzdGVzdCBhcHByb2FjaCB0b3dhcmRzIHRoZSB0YXJnZXQgd2l0aG91dCBvdmVyc2hvb3RpbmcpXG4gIC8vIC0gZGFtcGluZyA8IDE6IFVuZGVyZGFtcGVkICh3aWxsIG92ZXJzaG9vdCB0aGUgdGFyZ2V0IHdpdGggZXhwb25lbnRpYWxseS1kZWNheWluZyBvc2NpbGxhdGlvbilcbiAgLy8gLSBkYW1waW5nID4gMTogT3ZlcmRhbXBlZCAod2lsbCBhcHByb2FjaCB3aXRoIGFuIGV4cG9uZW50aWFsIGN1cnZlKVxuICBkYW1waW5nPzogbnVtYmVyO1xuXG4gIC8vIENvZWZmaWNpZW50IHRoYXQgZGV0ZXJtaW5lcyB0aGUgYW1vdW50IG9mIGZvcmNlIFwicHVzaGluZ1wiIHRvd2FyZHMgdGhlIHRhcmdldCAod2lsbCBiZSBwcm9wb3J0aW9uYWxcbiAgLy8gdG8gdGhlIGRpc3RhbmNlIGZyb20gdGhlIHRhcmdldCkuXG4gIGZvcmNlPzogbnVtYmVyO1xuXG4gIC8vIFRoZSB0YXJnZXQgdmFsdWUgdGhhdCB3ZSBhcmUgYW5pbWF0aW5nIHRvd2FyZHMuXG4gIHRhcmdldFZhbHVlPzogbnVtYmVyO1xufTtcblxuY2xhc3MgRGFtcGVkQW5pbWF0aW9uIHtcblxuICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVQcm9wZXJ0eTogVFByb3BlcnR5PG51bWJlcj47XG4gIHB1YmxpYyByZWFkb25seSB2ZWxvY2l0eVByb3BlcnR5OiBUUHJvcGVydHk8bnVtYmVyPjtcblxuICBwcml2YXRlIF9kYW1waW5nOiBudW1iZXI7XG4gIHByaXZhdGUgX2ZvcmNlOiBudW1iZXI7XG4gIHByaXZhdGUgX3RhcmdldFZhbHVlOiBudW1iZXI7XG4gIHByaXZhdGUgaGFybW9uaWMhOiBEYW1wZWRIYXJtb25pYztcblxuICBwdWJsaWMgdGltZUVsYXBzZWQgPSAwO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogRGFtcGVkQW5pbWF0aW9uT3B0aW9ucyApIHtcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPERhbXBlZEFuaW1hdGlvbk9wdGlvbnMsIERhbXBlZEFuaW1hdGlvbk9wdGlvbnM+KCkoIHtcbiAgICAgIHZhbHVlUHJvcGVydHk6IG5ldyBUaW55UHJvcGVydHkoIDAgKSxcbiAgICAgIHZlbG9jaXR5UHJvcGVydHk6IG5ldyBUaW55UHJvcGVydHkoIDAgKSxcbiAgICAgIGRhbXBpbmc6IDEsXG4gICAgICBmb3JjZTogMSxcbiAgICAgIHRhcmdldFZhbHVlOiAwXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICB0aGlzLnZhbHVlUHJvcGVydHkgPSBvcHRpb25zLnZhbHVlUHJvcGVydHk7XG4gICAgdGhpcy52ZWxvY2l0eVByb3BlcnR5ID0gb3B0aW9ucy52ZWxvY2l0eVByb3BlcnR5O1xuXG4gICAgdGhpcy5fZGFtcGluZyA9IG9wdGlvbnMuZGFtcGluZztcbiAgICB0aGlzLl9mb3JjZSA9IG9wdGlvbnMuZm9yY2U7XG4gICAgdGhpcy5fdGFyZ2V0VmFsdWUgPSBvcHRpb25zLnRhcmdldFZhbHVlO1xuXG4gICAgdGhpcy5yZWNvbXB1dGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0YXJnZXQgdmFsdWVcbiAgICovXG4gIHB1YmxpYyBnZXQgdGFyZ2V0VmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSB0YXJnZXQgdmFsdWUgdGhhdCB3ZSBhcmUgbW92aW5nIHRvd2FyZC5cbiAgICovXG4gIHB1YmxpYyBzZXQgdGFyZ2V0VmFsdWUoIHZhbHVlOiBudW1iZXIgKSB7XG4gICAgdGhpcy5fdGFyZ2V0VmFsdWUgPSB2YWx1ZTtcblxuICAgIHRoaXMucmVjb21wdXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGFtcGluZyB2YWx1ZVxuICAgKi9cbiAgcHVibGljIGdldCBkYW1waW5nKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RhbXBpbmc7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZGFtcGluZyB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBzZXQgZGFtcGluZyggdmFsdWU6IG51bWJlciApIHtcbiAgICB0aGlzLl9kYW1waW5nID0gdmFsdWU7XG5cbiAgICB0aGlzLnJlY29tcHV0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZvcmNlIHZhbHVlXG4gICAqL1xuICBwdWJsaWMgZ2V0IGZvcmNlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZvcmNlIHZhbHVlLlxuICAgKi9cbiAgcHVibGljIHNldCBmb3JjZSggdmFsdWU6IG51bWJlciApIHtcbiAgICB0aGlzLl9mb3JjZSA9IHZhbHVlO1xuXG4gICAgdGhpcy5yZWNvbXB1dGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbiBhIGNoYW5nZSwgd2UgbmVlZCB0byByZWNvbXB1dGUgb3VyIGhhcm1vbmljICh0aGF0IHBsb3RzIG91dCB0aGUgbW90aW9uIHRvIHRoZSB0YXJnZXQpXG4gICAqL1xuICBwcml2YXRlIHJlY29tcHV0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLnRpbWVFbGFwc2VkID0gMDtcbiAgICB0aGlzLmhhcm1vbmljID0gbmV3IERhbXBlZEhhcm1vbmljKCAxLCBNYXRoLnNxcnQoIDQgKiB0aGlzLl9mb3JjZSApICogdGhpcy5fZGFtcGluZywgdGhpcy5fZm9yY2UsIHRoaXMudmFsdWVQcm9wZXJ0eS52YWx1ZSAtIHRoaXMuX3RhcmdldFZhbHVlLCB0aGlzLnZlbG9jaXR5UHJvcGVydHkudmFsdWUgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGVwcyB0aGUgYW5pbWF0aW9uIGZvcndhcmQgaW4gdGltZS5cbiAgICovXG4gIHB1YmxpYyBzdGVwKCBkdDogbnVtYmVyICk6IHZvaWQge1xuICAgIHRoaXMudGltZUVsYXBzZWQgKz0gZHQ7XG5cbiAgICB0aGlzLnZhbHVlUHJvcGVydHkudmFsdWUgPSB0aGlzLl90YXJnZXRWYWx1ZSArIHRoaXMuaGFybW9uaWMuZ2V0VmFsdWUoIHRoaXMudGltZUVsYXBzZWQgKTtcbiAgICB0aGlzLnZlbG9jaXR5UHJvcGVydHkudmFsdWUgPSB0aGlzLmhhcm1vbmljLmdldERlcml2YXRpdmUoIHRoaXMudGltZUVsYXBzZWQgKTtcbiAgfVxufVxuXG50d2l4dC5yZWdpc3RlciggJ0RhbXBlZEFuaW1hdGlvbicsIERhbXBlZEFuaW1hdGlvbiApO1xuZXhwb3J0IGRlZmF1bHQgRGFtcGVkQW5pbWF0aW9uOyJdLCJuYW1lcyI6WyJUaW55UHJvcGVydHkiLCJEYW1wZWRIYXJtb25pYyIsIm9wdGlvbml6ZSIsInR3aXh0IiwiRGFtcGVkQW5pbWF0aW9uIiwidGFyZ2V0VmFsdWUiLCJfdGFyZ2V0VmFsdWUiLCJ2YWx1ZSIsInJlY29tcHV0ZSIsImRhbXBpbmciLCJfZGFtcGluZyIsImZvcmNlIiwiX2ZvcmNlIiwidGltZUVsYXBzZWQiLCJoYXJtb25pYyIsIk1hdGgiLCJzcXJ0IiwidmFsdWVQcm9wZXJ0eSIsInZlbG9jaXR5UHJvcGVydHkiLCJzdGVwIiwiZHQiLCJnZXRWYWx1ZSIsImdldERlcml2YXRpdmUiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7OztDQU9DLEdBRUQsT0FBT0Esa0JBQWtCLGdDQUFnQztBQUV6RCxPQUFPQyxvQkFBb0IsaUNBQWlDO0FBQzVELE9BQU9DLGVBQWUsa0NBQWtDO0FBQ3hELE9BQU9DLFdBQVcsYUFBYTtBQXVCL0IsSUFBQSxBQUFNQyxrQkFBTixNQUFNQTtJQStCSjs7R0FFQyxHQUNELElBQVdDLGNBQXNCO1FBQy9CLE9BQU8sSUFBSSxDQUFDQyxZQUFZO0lBQzFCO0lBRUE7O0dBRUMsR0FDRCxJQUFXRCxZQUFhRSxLQUFhLEVBQUc7UUFDdEMsSUFBSSxDQUFDRCxZQUFZLEdBQUdDO1FBRXBCLElBQUksQ0FBQ0MsU0FBUztJQUNoQjtJQUVBOztHQUVDLEdBQ0QsSUFBV0MsVUFBa0I7UUFDM0IsT0FBTyxJQUFJLENBQUNDLFFBQVE7SUFDdEI7SUFFQTs7R0FFQyxHQUNELElBQVdELFFBQVNGLEtBQWEsRUFBRztRQUNsQyxJQUFJLENBQUNHLFFBQVEsR0FBR0g7UUFFaEIsSUFBSSxDQUFDQyxTQUFTO0lBQ2hCO0lBRUE7O0dBRUMsR0FDRCxJQUFXRyxRQUFnQjtRQUN6QixPQUFPLElBQUksQ0FBQ0MsTUFBTTtJQUNwQjtJQUVBOztHQUVDLEdBQ0QsSUFBV0QsTUFBT0osS0FBYSxFQUFHO1FBQ2hDLElBQUksQ0FBQ0ssTUFBTSxHQUFHTDtRQUVkLElBQUksQ0FBQ0MsU0FBUztJQUNoQjtJQUVBOztHQUVDLEdBQ0QsQUFBUUEsWUFBa0I7UUFDeEIsSUFBSSxDQUFDSyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSWIsZUFBZ0IsR0FBR2MsS0FBS0MsSUFBSSxDQUFFLElBQUksSUFBSSxDQUFDSixNQUFNLElBQUssSUFBSSxDQUFDRixRQUFRLEVBQUUsSUFBSSxDQUFDRSxNQUFNLEVBQUUsSUFBSSxDQUFDSyxhQUFhLENBQUNWLEtBQUssR0FBRyxJQUFJLENBQUNELFlBQVksRUFBRSxJQUFJLENBQUNZLGdCQUFnQixDQUFDWCxLQUFLO0lBQzdLO0lBRUE7O0dBRUMsR0FDRCxBQUFPWSxLQUFNQyxFQUFVLEVBQVM7UUFDOUIsSUFBSSxDQUFDUCxXQUFXLElBQUlPO1FBRXBCLElBQUksQ0FBQ0gsYUFBYSxDQUFDVixLQUFLLEdBQUcsSUFBSSxDQUFDRCxZQUFZLEdBQUcsSUFBSSxDQUFDUSxRQUFRLENBQUNPLFFBQVEsQ0FBRSxJQUFJLENBQUNSLFdBQVc7UUFDdkYsSUFBSSxDQUFDSyxnQkFBZ0IsQ0FBQ1gsS0FBSyxHQUFHLElBQUksQ0FBQ08sUUFBUSxDQUFDUSxhQUFhLENBQUUsSUFBSSxDQUFDVCxXQUFXO0lBQzdFO0lBbkZBLFlBQW9CVSxlQUF3QyxDQUFHO2FBRnhEVixjQUFjO1FBR25CLE1BQU1XLFVBQVV0QixZQUE2RDtZQUMzRWUsZUFBZSxJQUFJakIsYUFBYztZQUNqQ2tCLGtCQUFrQixJQUFJbEIsYUFBYztZQUNwQ1MsU0FBUztZQUNURSxPQUFPO1lBQ1BOLGFBQWE7UUFDZixHQUFHa0I7UUFFSCxJQUFJLENBQUNOLGFBQWEsR0FBR08sUUFBUVAsYUFBYTtRQUMxQyxJQUFJLENBQUNDLGdCQUFnQixHQUFHTSxRQUFRTixnQkFBZ0I7UUFFaEQsSUFBSSxDQUFDUixRQUFRLEdBQUdjLFFBQVFmLE9BQU87UUFDL0IsSUFBSSxDQUFDRyxNQUFNLEdBQUdZLFFBQVFiLEtBQUs7UUFDM0IsSUFBSSxDQUFDTCxZQUFZLEdBQUdrQixRQUFRbkIsV0FBVztRQUV2QyxJQUFJLENBQUNHLFNBQVM7SUFDaEI7QUFtRUY7QUFFQUwsTUFBTXNCLFFBQVEsQ0FBRSxtQkFBbUJyQjtBQUNuQyxlQUFlQSxnQkFBZ0IifQ==