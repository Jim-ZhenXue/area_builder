// Copyright 2020-2024, University of Colorado Boulder
/**
 * A sound generator that is composed of multiple SoundClips that are all started and stopped at the same time.
 * Basically, this is a container to create and control multiple SoundClip instances as one.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import tambo from '../tambo.js';
import SoundClip from './SoundClip.js';
import SoundGenerator from './SoundGenerator.js';
let CompositeSoundClip = class CompositeSoundClip extends SoundGenerator {
    play() {
        this.soundClips.forEach((soundClip)=>soundClip.play());
    }
    stop() {
        this.soundClips.forEach((soundClip)=>soundClip.stop());
    }
    connect(destination) {
        this.soundClips.forEach((soundClip)=>soundClip.connect(destination));
    }
    dispose() {
        this.soundClips.forEach((soundClip)=>soundClip.dispose());
        super.dispose();
    }
    get isPlaying() {
        return _.some(this.soundClips, (soundClip)=>soundClip.isPlaying);
    }
    setOutputLevel(outputLevel, timeConstant) {
        this.soundClips.forEach((soundClip)=>soundClip.setOutputLevel(outputLevel, timeConstant));
    }
    constructor(soundsAndOptionsTuples, options){
        super(options);
        this.soundClips = [];
        for(let i = 0; i < soundsAndOptionsTuples.length; i++){
            const soundAndOptions = soundsAndOptionsTuples[i];
            const soundClip = new SoundClip(soundAndOptions.sound, soundAndOptions.options);
            soundClip.connect(this.soundSourceDestination);
            this.soundClips.push(soundClip);
        }
    }
};
tambo.register('CompositeSoundClip', CompositeSoundClip);
export default CompositeSoundClip;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RhbWJvL2pzL3NvdW5kLWdlbmVyYXRvcnMvQ29tcG9zaXRlU291bmRDbGlwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEEgc291bmQgZ2VuZXJhdG9yIHRoYXQgaXMgY29tcG9zZWQgb2YgbXVsdGlwbGUgU291bmRDbGlwcyB0aGF0IGFyZSBhbGwgc3RhcnRlZCBhbmQgc3RvcHBlZCBhdCB0aGUgc2FtZSB0aW1lLlxuICogQmFzaWNhbGx5LCB0aGlzIGlzIGEgY29udGFpbmVyIHRvIGNyZWF0ZSBhbmQgY29udHJvbCBtdWx0aXBsZSBTb3VuZENsaXAgaW5zdGFuY2VzIGFzIG9uZS5cbiAqXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IHRhbWJvIGZyb20gJy4uL3RhbWJvLmpzJztcbmltcG9ydCBXcmFwcGVkQXVkaW9CdWZmZXIgZnJvbSAnLi4vV3JhcHBlZEF1ZGlvQnVmZmVyLmpzJztcbmltcG9ydCBTb3VuZENsaXAsIHsgU291bmRDbGlwT3B0aW9ucyB9IGZyb20gJy4vU291bmRDbGlwLmpzJztcbmltcG9ydCBTb3VuZEdlbmVyYXRvciwgeyBTb3VuZEdlbmVyYXRvck9wdGlvbnMgfSBmcm9tICcuL1NvdW5kR2VuZXJhdG9yLmpzJztcblxuZXhwb3J0IHR5cGUgU291bmRBbmRPcHRpb25zID0ge1xuICBzb3VuZDogV3JhcHBlZEF1ZGlvQnVmZmVyO1xuICBvcHRpb25zPzogU291bmRDbGlwT3B0aW9ucztcbn07XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xuZXhwb3J0IHR5cGUgQ29tcG9zaXRlU291bmRDbGlwT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU291bmRHZW5lcmF0b3JPcHRpb25zO1xuXG5jbGFzcyBDb21wb3NpdGVTb3VuZENsaXAgZXh0ZW5kcyBTb3VuZEdlbmVyYXRvciB7XG5cbiAgLy8gYXJyYXkgdGhhdCB3aWxsIGhvbGQgdGhlIGluZGl2aWR1YWwgc291bmQgY2xpcHNcbiAgcHJpdmF0ZSByZWFkb25seSBzb3VuZENsaXBzOiBTb3VuZENsaXBbXTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHNvdW5kc0FuZE9wdGlvbnNUdXBsZXM6IFNvdW5kQW5kT3B0aW9uc1tdLCBvcHRpb25zPzogQ29tcG9zaXRlU291bmRDbGlwT3B0aW9ucyApIHtcbiAgICBzdXBlciggb3B0aW9ucyApO1xuXG4gICAgdGhpcy5zb3VuZENsaXBzID0gW107XG5cbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBzb3VuZHNBbmRPcHRpb25zVHVwbGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgY29uc3Qgc291bmRBbmRPcHRpb25zID0gc291bmRzQW5kT3B0aW9uc1R1cGxlc1sgaSBdO1xuICAgICAgY29uc3Qgc291bmRDbGlwID0gbmV3IFNvdW5kQ2xpcCggc291bmRBbmRPcHRpb25zLnNvdW5kLCBzb3VuZEFuZE9wdGlvbnMub3B0aW9ucyApO1xuICAgICAgc291bmRDbGlwLmNvbm5lY3QoIHRoaXMuc291bmRTb3VyY2VEZXN0aW5hdGlvbiApO1xuICAgICAgdGhpcy5zb3VuZENsaXBzLnB1c2goIHNvdW5kQ2xpcCApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwbGF5KCk6IHZvaWQge1xuICAgIHRoaXMuc291bmRDbGlwcy5mb3JFYWNoKCBzb3VuZENsaXAgPT4gc291bmRDbGlwLnBsYXkoKSApO1xuICB9XG5cbiAgcHVibGljIHN0b3AoKTogdm9pZCB7XG4gICAgdGhpcy5zb3VuZENsaXBzLmZvckVhY2goIHNvdW5kQ2xpcCA9PiBzb3VuZENsaXAuc3RvcCgpICk7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgY29ubmVjdCggZGVzdGluYXRpb246IEF1ZGlvUGFyYW0gfCBBdWRpb05vZGUgKTogdm9pZCB7XG4gICAgdGhpcy5zb3VuZENsaXBzLmZvckVhY2goIHNvdW5kQ2xpcCA9PiBzb3VuZENsaXAuY29ubmVjdCggZGVzdGluYXRpb24gKSApO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zb3VuZENsaXBzLmZvckVhY2goIHNvdW5kQ2xpcCA9PiBzb3VuZENsaXAuZGlzcG9zZSgpICk7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBpc1BsYXlpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIF8uc29tZSggdGhpcy5zb3VuZENsaXBzLCBzb3VuZENsaXAgPT4gc291bmRDbGlwLmlzUGxheWluZyApO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIHNldE91dHB1dExldmVsKCBvdXRwdXRMZXZlbDogbnVtYmVyLCB0aW1lQ29uc3RhbnQ6IG51bWJlciApOiB2b2lkIHtcbiAgICB0aGlzLnNvdW5kQ2xpcHMuZm9yRWFjaCggc291bmRDbGlwID0+IHNvdW5kQ2xpcC5zZXRPdXRwdXRMZXZlbCggb3V0cHV0TGV2ZWwsIHRpbWVDb25zdGFudCApICk7XG4gIH1cbn1cblxudGFtYm8ucmVnaXN0ZXIoICdDb21wb3NpdGVTb3VuZENsaXAnLCBDb21wb3NpdGVTb3VuZENsaXAgKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9zaXRlU291bmRDbGlwOyJdLCJuYW1lcyI6WyJ0YW1ibyIsIlNvdW5kQ2xpcCIsIlNvdW5kR2VuZXJhdG9yIiwiQ29tcG9zaXRlU291bmRDbGlwIiwicGxheSIsInNvdW5kQ2xpcHMiLCJmb3JFYWNoIiwic291bmRDbGlwIiwic3RvcCIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsImRpc3Bvc2UiLCJpc1BsYXlpbmciLCJfIiwic29tZSIsInNldE91dHB1dExldmVsIiwib3V0cHV0TGV2ZWwiLCJ0aW1lQ29uc3RhbnQiLCJzb3VuZHNBbmRPcHRpb25zVHVwbGVzIiwib3B0aW9ucyIsImkiLCJsZW5ndGgiLCJzb3VuZEFuZE9wdGlvbnMiLCJzb3VuZCIsInNvdW5kU291cmNlRGVzdGluYXRpb24iLCJwdXNoIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7Q0FLQyxHQUdELE9BQU9BLFdBQVcsY0FBYztBQUVoQyxPQUFPQyxlQUFxQyxpQkFBaUI7QUFDN0QsT0FBT0Msb0JBQStDLHNCQUFzQjtBQVU1RSxJQUFBLEFBQU1DLHFCQUFOLE1BQU1BLDJCQUEyQkQ7SUFrQnhCRSxPQUFhO1FBQ2xCLElBQUksQ0FBQ0MsVUFBVSxDQUFDQyxPQUFPLENBQUVDLENBQUFBLFlBQWFBLFVBQVVILElBQUk7SUFDdEQ7SUFFT0ksT0FBYTtRQUNsQixJQUFJLENBQUNILFVBQVUsQ0FBQ0MsT0FBTyxDQUFFQyxDQUFBQSxZQUFhQSxVQUFVQyxJQUFJO0lBQ3REO0lBRWdCQyxRQUFTQyxXQUFtQyxFQUFTO1FBQ25FLElBQUksQ0FBQ0wsVUFBVSxDQUFDQyxPQUFPLENBQUVDLENBQUFBLFlBQWFBLFVBQVVFLE9BQU8sQ0FBRUM7SUFDM0Q7SUFFZ0JDLFVBQWdCO1FBQzlCLElBQUksQ0FBQ04sVUFBVSxDQUFDQyxPQUFPLENBQUVDLENBQUFBLFlBQWFBLFVBQVVJLE9BQU87UUFDdkQsS0FBSyxDQUFDQTtJQUNSO0lBRUEsSUFBV0MsWUFBcUI7UUFDOUIsT0FBT0MsRUFBRUMsSUFBSSxDQUFFLElBQUksQ0FBQ1QsVUFBVSxFQUFFRSxDQUFBQSxZQUFhQSxVQUFVSyxTQUFTO0lBQ2xFO0lBRWdCRyxlQUFnQkMsV0FBbUIsRUFBRUMsWUFBb0IsRUFBUztRQUNoRixJQUFJLENBQUNaLFVBQVUsQ0FBQ0MsT0FBTyxDQUFFQyxDQUFBQSxZQUFhQSxVQUFVUSxjQUFjLENBQUVDLGFBQWFDO0lBQy9FO0lBcENBLFlBQW9CQyxzQkFBeUMsRUFBRUMsT0FBbUMsQ0FBRztRQUNuRyxLQUFLLENBQUVBO1FBRVAsSUFBSSxDQUFDZCxVQUFVLEdBQUcsRUFBRTtRQUVwQixJQUFNLElBQUllLElBQUksR0FBR0EsSUFBSUYsdUJBQXVCRyxNQUFNLEVBQUVELElBQU07WUFDeEQsTUFBTUUsa0JBQWtCSixzQkFBc0IsQ0FBRUUsRUFBRztZQUNuRCxNQUFNYixZQUFZLElBQUlOLFVBQVdxQixnQkFBZ0JDLEtBQUssRUFBRUQsZ0JBQWdCSCxPQUFPO1lBQy9FWixVQUFVRSxPQUFPLENBQUUsSUFBSSxDQUFDZSxzQkFBc0I7WUFDOUMsSUFBSSxDQUFDbkIsVUFBVSxDQUFDb0IsSUFBSSxDQUFFbEI7UUFDeEI7SUFDRjtBQTBCRjtBQUVBUCxNQUFNMEIsUUFBUSxDQUFFLHNCQUFzQnZCO0FBRXRDLGVBQWVBLG1CQUFtQiJ9