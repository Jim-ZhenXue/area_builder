// Copyright 2024, University of Colorado Boulder
/**
 * CrossFadeSoundClip is a sound generator that combines two sound clips and allows the user to set the relative mix -
 * aka fade - between them.  This can be useful in situations where there are a number of similar UI elements that need
 * to have similar but somewhat distinct interaction sounds.
 *
 * This was created specifically for the needs of the "Mean: Share and Balance" simulation, and there is at least one
 * example of how it was intended to be used in that sim.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */ import NumberProperty from '../../../axon/js/NumberProperty.js';
import optionize from '../../../phet-core/js/optionize.js';
import tambo from '../tambo.js';
import SoundClip from './SoundClip.js';
import SoundGenerator from './SoundGenerator.js';
let CrossFadeSoundClip = class CrossFadeSoundClip extends SoundGenerator {
    play() {
        this.soundClipA.play();
        this.soundClipB.play();
    }
    stop() {
        this.soundClipA.stop();
        this.soundClipB.stop();
    }
    setPlaybackRate(playbackRate) {
        this.soundClipA.setPlaybackRate(playbackRate);
        this.soundClipB.setPlaybackRate(playbackRate);
    }
    /**
   * @param audioBufferA - audio buffer for sound A
   * @param audioBufferB - audio buffer for sound B
   * @param [providedOptions]
   */ constructor(audioBufferA, audioBufferB, providedOptions){
        const options = optionize()({
            crossFadeProperty: null,
            initialCrossFadeValue: 0
        }, providedOptions);
        assert && assert(options.initialCrossFadeValue >= 0 && options.initialCrossFadeValue <= 1, 'initialCrossFadeValue must be between 0 and 1 (inclusive)');
        super(options);
        this.crossFadeProperty = options.crossFadeProperty || new NumberProperty(options.initialCrossFadeValue);
        this.soundClipA = new SoundClip(audioBufferA, {
            rateChangesAffectPlayingSounds: false
        });
        this.soundClipA.connect(this.soundSourceDestination);
        this.soundClipB = new SoundClip(audioBufferB, {
            rateChangesAffectPlayingSounds: false
        });
        this.soundClipB.connect(this.soundSourceDestination);
        // Adjust the volume levels of the individual clips as the cross-fade values changes.
        this.crossFadeProperty.link((crossFade)=>{
            // range check
            assert && assert(crossFade >= 0 && crossFade <= 1, 'out of range cross fade value');
            // A simple linear cross-fade algorithm is used here, which was deemed adequate for the use cases supported as of
            // the time of this writing.  If needed, other algorithms could be created and supplied as an option.
            this.soundClipA.outputLevel = 1 - crossFade;
            this.soundClipB.outputLevel = crossFade;
        });
    }
};
tambo.register('CrossFadeSoundClip', CrossFadeSoundClip);
export default CrossFadeSoundClip;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RhbWJvL2pzL3NvdW5kLWdlbmVyYXRvcnMvQ3Jvc3NGYWRlU291bmRDbGlwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBDcm9zc0ZhZGVTb3VuZENsaXAgaXMgYSBzb3VuZCBnZW5lcmF0b3IgdGhhdCBjb21iaW5lcyB0d28gc291bmQgY2xpcHMgYW5kIGFsbG93cyB0aGUgdXNlciB0byBzZXQgdGhlIHJlbGF0aXZlIG1peCAtXG4gKiBha2EgZmFkZSAtIGJldHdlZW4gdGhlbS4gIFRoaXMgY2FuIGJlIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIHRoZXJlIGFyZSBhIG51bWJlciBvZiBzaW1pbGFyIFVJIGVsZW1lbnRzIHRoYXQgbmVlZFxuICogdG8gaGF2ZSBzaW1pbGFyIGJ1dCBzb21ld2hhdCBkaXN0aW5jdCBpbnRlcmFjdGlvbiBzb3VuZHMuXG4gKlxuICogVGhpcyB3YXMgY3JlYXRlZCBzcGVjaWZpY2FsbHkgZm9yIHRoZSBuZWVkcyBvZiB0aGUgXCJNZWFuOiBTaGFyZSBhbmQgQmFsYW5jZVwiIHNpbXVsYXRpb24sIGFuZCB0aGVyZSBpcyBhdCBsZWFzdCBvbmVcbiAqIGV4YW1wbGUgb2YgaG93IGl0IHdhcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIHRoYXQgc2ltLlxuICpcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCB0YW1ibyBmcm9tICcuLi90YW1iby5qcyc7XG5pbXBvcnQgVFNvdW5kUGxheWVyIGZyb20gJy4uL1RTb3VuZFBsYXllci5qcyc7XG5pbXBvcnQgV3JhcHBlZEF1ZGlvQnVmZmVyIGZyb20gJy4uL1dyYXBwZWRBdWRpb0J1ZmZlci5qcyc7XG5pbXBvcnQgU291bmRDbGlwIGZyb20gJy4vU291bmRDbGlwLmpzJztcbmltcG9ydCBTb3VuZEdlbmVyYXRvciwgeyBTb3VuZEdlbmVyYXRvck9wdGlvbnMgfSBmcm9tICcuL1NvdW5kR2VuZXJhdG9yLmpzJztcblxudHlwZSBTZWxmT3B0aW9ucyA9IHtcblxuICAvLyBUaGUgYW1vdW50IG9mIGNyb3NzLWZhZGUgZnJvbSAwIHRvIDEuICBDYW4gYmUgcHJvdmlkZWQsIHdpbGwgYmUgY3JlYXRlZCBsb2NhbGx5IGlmIG5vdCBzdXBwbGllZC5cbiAgY3Jvc3NGYWRlUHJvcGVydHk/OiBOdW1iZXJQcm9wZXJ0eSB8IG51bGw7XG5cbiAgLy8gSW5pdGlhbCB2YWx1ZSBvZiB0aGUgY3Jvc3MtZmFkZS4gIFRoaXMgaXMgb25seSB1c2VkIGlmIHRoZSBjcm9zc0ZhZGVQcm9wZXJ0eSBpcyBub3QgcHJvdmlkZWQuICBWYWxpZCB2YWx1ZXMgYXJlXG4gIC8vIGZyb20gMCB0byAxIGluY2x1c2l2ZS5cbiAgaW5pdGlhbENyb3NzRmFkZVZhbHVlPzogbnVtYmVyO1xufTtcbnR5cGUgQ3Jvc3NGYWRlU291bmRDbGlwT3B0aW9ucyA9IFNvdW5kR2VuZXJhdG9yT3B0aW9ucyAmIFNlbGZPcHRpb25zO1xuXG5jbGFzcyBDcm9zc0ZhZGVTb3VuZENsaXAgZXh0ZW5kcyBTb3VuZEdlbmVyYXRvciBpbXBsZW1lbnRzIFRTb3VuZFBsYXllciB7XG5cbiAgcHVibGljIHJlYWRvbmx5IGNyb3NzRmFkZVByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eTtcbiAgcHJpdmF0ZSByZWFkb25seSBzb3VuZENsaXBBOiBTb3VuZENsaXA7XG4gIHByaXZhdGUgcmVhZG9ubHkgc291bmRDbGlwQjogU291bmRDbGlwO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gYXVkaW9CdWZmZXJBIC0gYXVkaW8gYnVmZmVyIGZvciBzb3VuZCBBXG4gICAqIEBwYXJhbSBhdWRpb0J1ZmZlckIgLSBhdWRpbyBidWZmZXIgZm9yIHNvdW5kIEJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoIGF1ZGlvQnVmZmVyQTogV3JhcHBlZEF1ZGlvQnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvQnVmZmVyQjogV3JhcHBlZEF1ZGlvQnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IENyb3NzRmFkZVNvdW5kQ2xpcE9wdGlvbnMgKSB7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPENyb3NzRmFkZVNvdW5kQ2xpcE9wdGlvbnMsIFNlbGZPcHRpb25zLCBTb3VuZEdlbmVyYXRvck9wdGlvbnM+KCkoIHtcbiAgICAgIGNyb3NzRmFkZVByb3BlcnR5OiBudWxsLFxuICAgICAgaW5pdGlhbENyb3NzRmFkZVZhbHVlOiAwXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICBhc3NlcnQgJiYgYXNzZXJ0KFxuICAgIG9wdGlvbnMuaW5pdGlhbENyb3NzRmFkZVZhbHVlID49IDAgJiYgb3B0aW9ucy5pbml0aWFsQ3Jvc3NGYWRlVmFsdWUgPD0gMSxcbiAgICAgICdpbml0aWFsQ3Jvc3NGYWRlVmFsdWUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEgKGluY2x1c2l2ZSknXG4gICAgKTtcblxuICAgIHN1cGVyKCBvcHRpb25zICk7XG5cbiAgICB0aGlzLmNyb3NzRmFkZVByb3BlcnR5ID0gb3B0aW9ucy5jcm9zc0ZhZGVQcm9wZXJ0eSB8fCBuZXcgTnVtYmVyUHJvcGVydHkoIG9wdGlvbnMuaW5pdGlhbENyb3NzRmFkZVZhbHVlICk7XG4gICAgdGhpcy5zb3VuZENsaXBBID0gbmV3IFNvdW5kQ2xpcCggYXVkaW9CdWZmZXJBLCB7XG4gICAgICByYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHM6IGZhbHNlXG4gICAgfSApO1xuICAgIHRoaXMuc291bmRDbGlwQS5jb25uZWN0KCB0aGlzLnNvdW5kU291cmNlRGVzdGluYXRpb24gKTtcbiAgICB0aGlzLnNvdW5kQ2xpcEIgPSBuZXcgU291bmRDbGlwKCBhdWRpb0J1ZmZlckIsIHtcbiAgICAgIHJhdGVDaGFuZ2VzQWZmZWN0UGxheWluZ1NvdW5kczogZmFsc2VcbiAgICB9ICk7XG4gICAgdGhpcy5zb3VuZENsaXBCLmNvbm5lY3QoIHRoaXMuc291bmRTb3VyY2VEZXN0aW5hdGlvbiApO1xuXG4gICAgLy8gQWRqdXN0IHRoZSB2b2x1bWUgbGV2ZWxzIG9mIHRoZSBpbmRpdmlkdWFsIGNsaXBzIGFzIHRoZSBjcm9zcy1mYWRlIHZhbHVlcyBjaGFuZ2VzLlxuICAgIHRoaXMuY3Jvc3NGYWRlUHJvcGVydHkubGluayggY3Jvc3NGYWRlID0+IHtcblxuICAgICAgLy8gcmFuZ2UgY2hlY2tcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGNyb3NzRmFkZSA+PSAwICYmIGNyb3NzRmFkZSA8PSAxLCAnb3V0IG9mIHJhbmdlIGNyb3NzIGZhZGUgdmFsdWUnICk7XG5cbiAgICAgIC8vIEEgc2ltcGxlIGxpbmVhciBjcm9zcy1mYWRlIGFsZ29yaXRobSBpcyB1c2VkIGhlcmUsIHdoaWNoIHdhcyBkZWVtZWQgYWRlcXVhdGUgZm9yIHRoZSB1c2UgY2FzZXMgc3VwcG9ydGVkIGFzIG9mXG4gICAgICAvLyB0aGUgdGltZSBvZiB0aGlzIHdyaXRpbmcuICBJZiBuZWVkZWQsIG90aGVyIGFsZ29yaXRobXMgY291bGQgYmUgY3JlYXRlZCBhbmQgc3VwcGxpZWQgYXMgYW4gb3B0aW9uLlxuICAgICAgdGhpcy5zb3VuZENsaXBBLm91dHB1dExldmVsID0gMSAtIGNyb3NzRmFkZTtcbiAgICAgIHRoaXMuc291bmRDbGlwQi5vdXRwdXRMZXZlbCA9IGNyb3NzRmFkZTtcbiAgICB9ICk7XG4gIH1cblxuICBwdWJsaWMgcGxheSgpOiB2b2lkIHtcbiAgICB0aGlzLnNvdW5kQ2xpcEEucGxheSgpO1xuICAgIHRoaXMuc291bmRDbGlwQi5wbGF5KCk7XG4gIH1cblxuICBwdWJsaWMgc3RvcCgpOiB2b2lkIHtcbiAgICB0aGlzLnNvdW5kQ2xpcEEuc3RvcCgpO1xuICAgIHRoaXMuc291bmRDbGlwQi5zdG9wKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0UGxheWJhY2tSYXRlKCBwbGF5YmFja1JhdGU6IG51bWJlciApOiB2b2lkIHtcbiAgICB0aGlzLnNvdW5kQ2xpcEEuc2V0UGxheWJhY2tSYXRlKCBwbGF5YmFja1JhdGUgKTtcbiAgICB0aGlzLnNvdW5kQ2xpcEIuc2V0UGxheWJhY2tSYXRlKCBwbGF5YmFja1JhdGUgKTtcbiAgfVxufVxuXG50YW1iby5yZWdpc3RlciggJ0Nyb3NzRmFkZVNvdW5kQ2xpcCcsIENyb3NzRmFkZVNvdW5kQ2xpcCApO1xuXG5leHBvcnQgZGVmYXVsdCBDcm9zc0ZhZGVTb3VuZENsaXA7Il0sIm5hbWVzIjpbIk51bWJlclByb3BlcnR5Iiwib3B0aW9uaXplIiwidGFtYm8iLCJTb3VuZENsaXAiLCJTb3VuZEdlbmVyYXRvciIsIkNyb3NzRmFkZVNvdW5kQ2xpcCIsInBsYXkiLCJzb3VuZENsaXBBIiwic291bmRDbGlwQiIsInN0b3AiLCJzZXRQbGF5YmFja1JhdGUiLCJwbGF5YmFja1JhdGUiLCJhdWRpb0J1ZmZlckEiLCJhdWRpb0J1ZmZlckIiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiY3Jvc3NGYWRlUHJvcGVydHkiLCJpbml0aWFsQ3Jvc3NGYWRlVmFsdWUiLCJhc3NlcnQiLCJyYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHMiLCJjb25uZWN0Iiwic291bmRTb3VyY2VEZXN0aW5hdGlvbiIsImxpbmsiLCJjcm9zc0ZhZGUiLCJvdXRwdXRMZXZlbCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxpREFBaUQ7QUFFakQ7Ozs7Ozs7OztDQVNDLEdBRUQsT0FBT0Esb0JBQW9CLHFDQUFxQztBQUNoRSxPQUFPQyxlQUFlLHFDQUFxQztBQUMzRCxPQUFPQyxXQUFXLGNBQWM7QUFHaEMsT0FBT0MsZUFBZSxpQkFBaUI7QUFDdkMsT0FBT0Msb0JBQStDLHNCQUFzQjtBQWE1RSxJQUFBLEFBQU1DLHFCQUFOLE1BQU1BLDJCQUEyQkQ7SUFrRHhCRSxPQUFhO1FBQ2xCLElBQUksQ0FBQ0MsVUFBVSxDQUFDRCxJQUFJO1FBQ3BCLElBQUksQ0FBQ0UsVUFBVSxDQUFDRixJQUFJO0lBQ3RCO0lBRU9HLE9BQWE7UUFDbEIsSUFBSSxDQUFDRixVQUFVLENBQUNFLElBQUk7UUFDcEIsSUFBSSxDQUFDRCxVQUFVLENBQUNDLElBQUk7SUFDdEI7SUFFT0MsZ0JBQWlCQyxZQUFvQixFQUFTO1FBQ25ELElBQUksQ0FBQ0osVUFBVSxDQUFDRyxlQUFlLENBQUVDO1FBQ2pDLElBQUksQ0FBQ0gsVUFBVSxDQUFDRSxlQUFlLENBQUVDO0lBQ25DO0lBekRBOzs7O0dBSUMsR0FDRCxZQUFvQkMsWUFBZ0MsRUFDaENDLFlBQWdDLEVBQ2hDQyxlQUEyQyxDQUFHO1FBRWhFLE1BQU1DLFVBQVVkLFlBQTRFO1lBQzFGZSxtQkFBbUI7WUFDbkJDLHVCQUF1QjtRQUN6QixHQUFHSDtRQUVISSxVQUFVQSxPQUNWSCxRQUFRRSxxQkFBcUIsSUFBSSxLQUFLRixRQUFRRSxxQkFBcUIsSUFBSSxHQUNyRTtRQUdGLEtBQUssQ0FBRUY7UUFFUCxJQUFJLENBQUNDLGlCQUFpQixHQUFHRCxRQUFRQyxpQkFBaUIsSUFBSSxJQUFJaEIsZUFBZ0JlLFFBQVFFLHFCQUFxQjtRQUN2RyxJQUFJLENBQUNWLFVBQVUsR0FBRyxJQUFJSixVQUFXUyxjQUFjO1lBQzdDTyxnQ0FBZ0M7UUFDbEM7UUFDQSxJQUFJLENBQUNaLFVBQVUsQ0FBQ2EsT0FBTyxDQUFFLElBQUksQ0FBQ0Msc0JBQXNCO1FBQ3BELElBQUksQ0FBQ2IsVUFBVSxHQUFHLElBQUlMLFVBQVdVLGNBQWM7WUFDN0NNLGdDQUFnQztRQUNsQztRQUNBLElBQUksQ0FBQ1gsVUFBVSxDQUFDWSxPQUFPLENBQUUsSUFBSSxDQUFDQyxzQkFBc0I7UUFFcEQscUZBQXFGO1FBQ3JGLElBQUksQ0FBQ0wsaUJBQWlCLENBQUNNLElBQUksQ0FBRUMsQ0FBQUE7WUFFM0IsY0FBYztZQUNkTCxVQUFVQSxPQUFRSyxhQUFhLEtBQUtBLGFBQWEsR0FBRztZQUVwRCxpSEFBaUg7WUFDakgscUdBQXFHO1lBQ3JHLElBQUksQ0FBQ2hCLFVBQVUsQ0FBQ2lCLFdBQVcsR0FBRyxJQUFJRDtZQUNsQyxJQUFJLENBQUNmLFVBQVUsQ0FBQ2dCLFdBQVcsR0FBR0Q7UUFDaEM7SUFDRjtBQWdCRjtBQUVBckIsTUFBTXVCLFFBQVEsQ0FBRSxzQkFBc0JwQjtBQUV0QyxlQUFlQSxtQkFBbUIifQ==