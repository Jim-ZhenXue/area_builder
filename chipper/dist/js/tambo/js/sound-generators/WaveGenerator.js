// Copyright 2019-2024, University of Colorado Boulder
/**
 * Plays a sine wave using an Oscillator Node
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */ import LinearFunction from '../../../dot/js/LinearFunction.js';
import optionize from '../../../phet-core/js/optionize.js';
import soundConstants from '../../../tambo/js/soundConstants.js';
import tambo from '../tambo.js';
import SoundGenerator from './SoundGenerator.js';
// For the sound scene, map the amplitude to the output level for the "Play Tone"
const mapAmplitudeToOutputLevel = new LinearFunction(0, 10, 0, 0.3 // Max output level
);
let WaveGenerator = class WaveGenerator extends SoundGenerator {
    constructor(frequencyProperty, amplitudeProperty, providedOptions){
        const options = optionize()({
            initialOutputLevel: 0,
            oscillatorType: 'sine'
        }, providedOptions);
        super(options);
        this.oscillator = null;
        const updateFrequency = ()=>{
            const value = frequencyProperty.value * 1000; // convert frequency in mHz to Hz
            this.oscillator && this.oscillator.frequency.setValueAtTime(value, this.audioContext.currentTime);
        };
        frequencyProperty.link(updateFrequency);
        this.fullyEnabledProperty.link((fullyEnabled)=>{
            if (fullyEnabled && this.oscillator === null) {
                this.oscillator = this.audioContext.createOscillator();
                this.oscillator.type = options.oscillatorType;
                updateFrequency();
                this.oscillator.connect(this.soundSourceDestination);
                this.oscillator.start();
            } else if (!fullyEnabled && this.oscillator !== null) {
                // Turn off the audio, note that there is no need to disconnect the oscillator - this happens automatically
                this.oscillator.stop(this.audioContext.currentTime + soundConstants.DEFAULT_LINEAR_GAIN_CHANGE_TIME);
                this.oscillator = null;
            }
        });
        // wire up volume to amplitude
        amplitudeProperty.link((amplitude)=>this.setOutputLevel(mapAmplitudeToOutputLevel.evaluate(amplitude)));
    }
};
tambo.register('WaveGenerator', WaveGenerator);
export default WaveGenerator;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RhbWJvL2pzL3NvdW5kLWdlbmVyYXRvcnMvV2F2ZUdlbmVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBQbGF5cyBhIHNpbmUgd2F2ZSB1c2luZyBhbiBPc2NpbGxhdG9yIE5vZGVcbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgTGluZWFyRnVuY3Rpb24gZnJvbSAnLi4vLi4vLi4vZG90L2pzL0xpbmVhckZ1bmN0aW9uLmpzJztcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgc291bmRDb25zdGFudHMgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvc291bmRDb25zdGFudHMuanMnO1xuaW1wb3J0IHRhbWJvIGZyb20gJy4uL3RhbWJvLmpzJztcbmltcG9ydCBTb3VuZEdlbmVyYXRvciwgeyBTb3VuZEdlbmVyYXRvck9wdGlvbnMgfSBmcm9tICcuL1NvdW5kR2VuZXJhdG9yLmpzJztcblxuLy8gRm9yIHRoZSBzb3VuZCBzY2VuZSwgbWFwIHRoZSBhbXBsaXR1ZGUgdG8gdGhlIG91dHB1dCBsZXZlbCBmb3IgdGhlIFwiUGxheSBUb25lXCJcbmNvbnN0IG1hcEFtcGxpdHVkZVRvT3V0cHV0TGV2ZWwgPSBuZXcgTGluZWFyRnVuY3Rpb24oXG4gIDAsXG4gIDEwLFxuICAwLFxuICAwLjMgLy8gTWF4IG91dHB1dCBsZXZlbFxuKTtcblxudHlwZSBTZWxmT3B0aW9ucyA9IHtcbiAgaW5pdGlhbE91dHB1dExldmVsPzogbnVtYmVyO1xuICBvc2NpbGxhdG9yVHlwZT86IE9zY2lsbGF0b3JUeXBlO1xufTtcblxudHlwZSBXYXZlR2VuZXJhdG9yT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU291bmRHZW5lcmF0b3JPcHRpb25zO1xuXG5jbGFzcyBXYXZlR2VuZXJhdG9yIGV4dGVuZHMgU291bmRHZW5lcmF0b3Ige1xuXG4gIC8vIHtPc2NpbGxhdG9yTm9kZXxudWxsfSBjcmVhdGVkIHdoZW4gc291bmQgYmVnaW5zIGFuZCBudWxsaWZpZWQgd2hlbiBzb3VuZCBlbmRzLCBzZWUgIzM3M1xuICBwcml2YXRlIG9zY2lsbGF0b3I6IE9zY2lsbGF0b3JOb2RlIHwgbnVsbDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIGZyZXF1ZW5jeVByb3BlcnR5OiBSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIGFtcGxpdHVkZVByb3BlcnR5OiBSZWFkT25seVByb3BlcnR5PG51bWJlcj4sIHByb3ZpZGVkT3B0aW9ucz86IFdhdmVHZW5lcmF0b3JPcHRpb25zICkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8V2F2ZUdlbmVyYXRvck9wdGlvbnMsIFNlbGZPcHRpb25zLCBTb3VuZEdlbmVyYXRvck9wdGlvbnM+KCkoIHtcbiAgICAgIGluaXRpYWxPdXRwdXRMZXZlbDogMCwgLy8gU3RhcnRzIHNpbGVudCwgc2VlIGVsc2V3aGVyZSBpbiB0aGlzIGZpbGUgZm9yIHdoZXJlIHRoZSBvdXRwdXRMZXZlbCBpcyBzZXQgYXMgYSBmdW5jdGlvbiBvZiBhbXBsaXR1ZGVcbiAgICAgIG9zY2lsbGF0b3JUeXBlOiAnc2luZSdcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcbiAgICBzdXBlciggb3B0aW9ucyApO1xuXG4gICAgdGhpcy5vc2NpbGxhdG9yID0gbnVsbDtcbiAgICBjb25zdCB1cGRhdGVGcmVxdWVuY3kgPSAoKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGZyZXF1ZW5jeVByb3BlcnR5LnZhbHVlICogMTAwMDsgLy8gY29udmVydCBmcmVxdWVuY3kgaW4gbUh6IHRvIEh6XG4gICAgICB0aGlzLm9zY2lsbGF0b3IgJiYgdGhpcy5vc2NpbGxhdG9yLmZyZXF1ZW5jeS5zZXRWYWx1ZUF0VGltZSggdmFsdWUsIHRoaXMuYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lICk7XG4gICAgfTtcbiAgICBmcmVxdWVuY3lQcm9wZXJ0eS5saW5rKCB1cGRhdGVGcmVxdWVuY3kgKTtcblxuICAgIHRoaXMuZnVsbHlFbmFibGVkUHJvcGVydHkubGluayggZnVsbHlFbmFibGVkID0+IHtcbiAgICAgIGlmICggZnVsbHlFbmFibGVkICYmIHRoaXMub3NjaWxsYXRvciA9PT0gbnVsbCApIHtcbiAgICAgICAgdGhpcy5vc2NpbGxhdG9yID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgICAgICB0aGlzLm9zY2lsbGF0b3IudHlwZSA9IG9wdGlvbnMub3NjaWxsYXRvclR5cGU7XG4gICAgICAgIHVwZGF0ZUZyZXF1ZW5jeSgpO1xuICAgICAgICB0aGlzLm9zY2lsbGF0b3IuY29ubmVjdCggdGhpcy5zb3VuZFNvdXJjZURlc3RpbmF0aW9uICk7XG4gICAgICAgIHRoaXMub3NjaWxsYXRvci5zdGFydCgpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoICFmdWxseUVuYWJsZWQgJiYgdGhpcy5vc2NpbGxhdG9yICE9PSBudWxsICkge1xuXG4gICAgICAgIC8vIFR1cm4gb2ZmIHRoZSBhdWRpbywgbm90ZSB0aGF0IHRoZXJlIGlzIG5vIG5lZWQgdG8gZGlzY29ubmVjdCB0aGUgb3NjaWxsYXRvciAtIHRoaXMgaGFwcGVucyBhdXRvbWF0aWNhbGx5XG4gICAgICAgIHRoaXMub3NjaWxsYXRvci5zdG9wKCB0aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSArIHNvdW5kQ29uc3RhbnRzLkRFRkFVTFRfTElORUFSX0dBSU5fQ0hBTkdFX1RJTUUgKTtcbiAgICAgICAgdGhpcy5vc2NpbGxhdG9yID0gbnVsbDtcbiAgICAgIH1cbiAgICB9ICk7XG5cbiAgICAvLyB3aXJlIHVwIHZvbHVtZSB0byBhbXBsaXR1ZGVcbiAgICBhbXBsaXR1ZGVQcm9wZXJ0eS5saW5rKCBhbXBsaXR1ZGUgPT4gdGhpcy5zZXRPdXRwdXRMZXZlbCggbWFwQW1wbGl0dWRlVG9PdXRwdXRMZXZlbC5ldmFsdWF0ZSggYW1wbGl0dWRlICkgKSApO1xuICB9XG59XG5cbnRhbWJvLnJlZ2lzdGVyKCAnV2F2ZUdlbmVyYXRvcicsIFdhdmVHZW5lcmF0b3IgKTtcbmV4cG9ydCBkZWZhdWx0IFdhdmVHZW5lcmF0b3I7Il0sIm5hbWVzIjpbIkxpbmVhckZ1bmN0aW9uIiwib3B0aW9uaXplIiwic291bmRDb25zdGFudHMiLCJ0YW1ibyIsIlNvdW5kR2VuZXJhdG9yIiwibWFwQW1wbGl0dWRlVG9PdXRwdXRMZXZlbCIsIldhdmVHZW5lcmF0b3IiLCJmcmVxdWVuY3lQcm9wZXJ0eSIsImFtcGxpdHVkZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImluaXRpYWxPdXRwdXRMZXZlbCIsIm9zY2lsbGF0b3JUeXBlIiwib3NjaWxsYXRvciIsInVwZGF0ZUZyZXF1ZW5jeSIsInZhbHVlIiwiZnJlcXVlbmN5Iiwic2V0VmFsdWVBdFRpbWUiLCJhdWRpb0NvbnRleHQiLCJjdXJyZW50VGltZSIsImxpbmsiLCJmdWxseUVuYWJsZWRQcm9wZXJ0eSIsImZ1bGx5RW5hYmxlZCIsImNyZWF0ZU9zY2lsbGF0b3IiLCJ0eXBlIiwiY29ubmVjdCIsInNvdW5kU291cmNlRGVzdGluYXRpb24iLCJzdGFydCIsInN0b3AiLCJERUZBVUxUX0xJTkVBUl9HQUlOX0NIQU5HRV9USU1FIiwiYW1wbGl0dWRlIiwic2V0T3V0cHV0TGV2ZWwiLCJldmFsdWF0ZSIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Q0FJQyxHQUdELE9BQU9BLG9CQUFvQixvQ0FBb0M7QUFDL0QsT0FBT0MsZUFBZSxxQ0FBcUM7QUFDM0QsT0FBT0Msb0JBQW9CLHNDQUFzQztBQUNqRSxPQUFPQyxXQUFXLGNBQWM7QUFDaEMsT0FBT0Msb0JBQStDLHNCQUFzQjtBQUU1RSxpRkFBaUY7QUFDakYsTUFBTUMsNEJBQTRCLElBQUlMLGVBQ3BDLEdBQ0EsSUFDQSxHQUNBLElBQUksbUJBQW1COztBQVV6QixJQUFBLEFBQU1NLGdCQUFOLE1BQU1BLHNCQUFzQkY7SUFLMUIsWUFBb0JHLGlCQUEyQyxFQUFFQyxpQkFBMkMsRUFBRUMsZUFBc0MsQ0FBRztRQUNySixNQUFNQyxVQUFVVCxZQUF1RTtZQUNyRlUsb0JBQW9CO1lBQ3BCQyxnQkFBZ0I7UUFDbEIsR0FBR0g7UUFDSCxLQUFLLENBQUVDO1FBRVAsSUFBSSxDQUFDRyxVQUFVLEdBQUc7UUFDbEIsTUFBTUMsa0JBQWtCO1lBQ3RCLE1BQU1DLFFBQVFSLGtCQUFrQlEsS0FBSyxHQUFHLE1BQU0saUNBQWlDO1lBQy9FLElBQUksQ0FBQ0YsVUFBVSxJQUFJLElBQUksQ0FBQ0EsVUFBVSxDQUFDRyxTQUFTLENBQUNDLGNBQWMsQ0FBRUYsT0FBTyxJQUFJLENBQUNHLFlBQVksQ0FBQ0MsV0FBVztRQUNuRztRQUNBWixrQkFBa0JhLElBQUksQ0FBRU47UUFFeEIsSUFBSSxDQUFDTyxvQkFBb0IsQ0FBQ0QsSUFBSSxDQUFFRSxDQUFBQTtZQUM5QixJQUFLQSxnQkFBZ0IsSUFBSSxDQUFDVCxVQUFVLEtBQUssTUFBTztnQkFDOUMsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSSxDQUFDSyxZQUFZLENBQUNLLGdCQUFnQjtnQkFDcEQsSUFBSSxDQUFDVixVQUFVLENBQUNXLElBQUksR0FBR2QsUUFBUUUsY0FBYztnQkFDN0NFO2dCQUNBLElBQUksQ0FBQ0QsVUFBVSxDQUFDWSxPQUFPLENBQUUsSUFBSSxDQUFDQyxzQkFBc0I7Z0JBQ3BELElBQUksQ0FBQ2IsVUFBVSxDQUFDYyxLQUFLO1lBQ3ZCLE9BQ0ssSUFBSyxDQUFDTCxnQkFBZ0IsSUFBSSxDQUFDVCxVQUFVLEtBQUssTUFBTztnQkFFcEQsMkdBQTJHO2dCQUMzRyxJQUFJLENBQUNBLFVBQVUsQ0FBQ2UsSUFBSSxDQUFFLElBQUksQ0FBQ1YsWUFBWSxDQUFDQyxXQUFXLEdBQUdqQixlQUFlMkIsK0JBQStCO2dCQUNwRyxJQUFJLENBQUNoQixVQUFVLEdBQUc7WUFDcEI7UUFDRjtRQUVBLDhCQUE4QjtRQUM5Qkwsa0JBQWtCWSxJQUFJLENBQUVVLENBQUFBLFlBQWEsSUFBSSxDQUFDQyxjQUFjLENBQUUxQiwwQkFBMEIyQixRQUFRLENBQUVGO0lBQ2hHO0FBQ0Y7QUFFQTNCLE1BQU04QixRQUFRLENBQUUsaUJBQWlCM0I7QUFDakMsZUFBZUEsY0FBYyJ9