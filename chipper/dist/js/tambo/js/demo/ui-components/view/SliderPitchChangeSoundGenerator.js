// Copyright 2022-2024, University of Colorado Boulder
import brightMarimbaShort_mp3 from '../../../../sounds/brightMarimbaShort_mp3.js';
import SoundClip from '../../../sound-generators/SoundClip.js';
import ValueChangeSoundPlayer from '../../../sound-generators/ValueChangeSoundPlayer.js';
import soundManager from '../../../soundManager.js';
import tambo from '../../../tambo.js';
/**
 * SliderPitchChangeSoundGenerator is intended as a demonstration of a ValueChangeSoundPlayer that changes the pitch
 * (aka the playback rate) of its produced sounds as the slider values change.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */ let SliderPitchChangeSoundGenerator = class SliderPitchChangeSoundGenerator extends ValueChangeSoundPlayer {
    /**
   * @param valueRange - the range of values expected and over which sounds will be played
   */ constructor(valueRange){
        // sound clip to be used in both the up and down directions for the middle sounds
        const marimbaSoundClip = new SoundClip(brightMarimbaShort_mp3, {
            initialOutputLevel: 0.2,
            rateChangesAffectPlayingSounds: false
        });
        soundManager.addSoundGenerator(marimbaSoundClip);
        // playback rate mapping function
        const middleMovingUpPlaybackRateMapper = (value)=>0.5 + (value - valueRange.min) / valueRange.getLength();
        const middleMovingDownPlaybackRateMapper = (value)=>0.4 + (value - valueRange.min) / valueRange.getLength();
        super(valueRange, {
            middleMovingUpSoundPlayer: marimbaSoundClip,
            middleMovingDownSoundPlayer: marimbaSoundClip,
            middleMovingUpPlaybackRateMapper: middleMovingUpPlaybackRateMapper,
            middleMovingDownPlaybackRateMapper: middleMovingDownPlaybackRateMapper,
            numberOfMiddleThresholds: 7
        });
    }
};
tambo.register('SliderPitchChangeSoundGenerator', SliderPitchChangeSoundGenerator);
export default SliderPitchChangeSoundGenerator;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RhbWJvL2pzL2RlbW8vdWktY29tcG9uZW50cy92aWV3L1NsaWRlclBpdGNoQ2hhbmdlU291bmRHZW5lcmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xuaW1wb3J0IGJyaWdodE1hcmltYmFTaG9ydF9tcDMgZnJvbSAnLi4vLi4vLi4vLi4vc291bmRzL2JyaWdodE1hcmltYmFTaG9ydF9tcDMuanMnO1xuaW1wb3J0IFNvdW5kQ2xpcCBmcm9tICcuLi8uLi8uLi9zb3VuZC1nZW5lcmF0b3JzL1NvdW5kQ2xpcC5qcyc7XG5pbXBvcnQgVmFsdWVDaGFuZ2VTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi9zb3VuZC1nZW5lcmF0b3JzL1ZhbHVlQ2hhbmdlU291bmRQbGF5ZXIuanMnO1xuaW1wb3J0IHNvdW5kTWFuYWdlciBmcm9tICcuLi8uLi8uLi9zb3VuZE1hbmFnZXIuanMnO1xuaW1wb3J0IHRhbWJvIGZyb20gJy4uLy4uLy4uL3RhbWJvLmpzJztcblxuLyoqXG4gKiBTbGlkZXJQaXRjaENoYW5nZVNvdW5kR2VuZXJhdG9yIGlzIGludGVuZGVkIGFzIGEgZGVtb25zdHJhdGlvbiBvZiBhIFZhbHVlQ2hhbmdlU291bmRQbGF5ZXIgdGhhdCBjaGFuZ2VzIHRoZSBwaXRjaFxuICogKGFrYSB0aGUgcGxheWJhY2sgcmF0ZSkgb2YgaXRzIHByb2R1Y2VkIHNvdW5kcyBhcyB0aGUgc2xpZGVyIHZhbHVlcyBjaGFuZ2UuXG4gKlxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5jbGFzcyBTbGlkZXJQaXRjaENoYW5nZVNvdW5kR2VuZXJhdG9yIGV4dGVuZHMgVmFsdWVDaGFuZ2VTb3VuZFBsYXllciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB2YWx1ZVJhbmdlIC0gdGhlIHJhbmdlIG9mIHZhbHVlcyBleHBlY3RlZCBhbmQgb3ZlciB3aGljaCBzb3VuZHMgd2lsbCBiZSBwbGF5ZWRcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdmFsdWVSYW5nZTogUmFuZ2UgKSB7XG5cbiAgICAvLyBzb3VuZCBjbGlwIHRvIGJlIHVzZWQgaW4gYm90aCB0aGUgdXAgYW5kIGRvd24gZGlyZWN0aW9ucyBmb3IgdGhlIG1pZGRsZSBzb3VuZHNcbiAgICBjb25zdCBtYXJpbWJhU291bmRDbGlwID0gbmV3IFNvdW5kQ2xpcCggYnJpZ2h0TWFyaW1iYVNob3J0X21wMywge1xuICAgICAgaW5pdGlhbE91dHB1dExldmVsOiAwLjIsXG4gICAgICByYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHM6IGZhbHNlXG4gICAgfSApO1xuICAgIHNvdW5kTWFuYWdlci5hZGRTb3VuZEdlbmVyYXRvciggbWFyaW1iYVNvdW5kQ2xpcCApO1xuXG4gICAgLy8gcGxheWJhY2sgcmF0ZSBtYXBwaW5nIGZ1bmN0aW9uXG4gICAgY29uc3QgbWlkZGxlTW92aW5nVXBQbGF5YmFja1JhdGVNYXBwZXIgPSAoIHZhbHVlOiBudW1iZXIgKSA9PiAwLjUgKyAoIHZhbHVlIC0gdmFsdWVSYW5nZS5taW4gKSAvIHZhbHVlUmFuZ2UuZ2V0TGVuZ3RoKCk7XG4gICAgY29uc3QgbWlkZGxlTW92aW5nRG93blBsYXliYWNrUmF0ZU1hcHBlciA9ICggdmFsdWU6IG51bWJlciApID0+IDAuNCArICggdmFsdWUgLSB2YWx1ZVJhbmdlLm1pbiApIC8gdmFsdWVSYW5nZS5nZXRMZW5ndGgoKTtcblxuICAgIHN1cGVyKCB2YWx1ZVJhbmdlLCB7XG4gICAgICBtaWRkbGVNb3ZpbmdVcFNvdW5kUGxheWVyOiBtYXJpbWJhU291bmRDbGlwLFxuICAgICAgbWlkZGxlTW92aW5nRG93blNvdW5kUGxheWVyOiBtYXJpbWJhU291bmRDbGlwLFxuICAgICAgbWlkZGxlTW92aW5nVXBQbGF5YmFja1JhdGVNYXBwZXI6IG1pZGRsZU1vdmluZ1VwUGxheWJhY2tSYXRlTWFwcGVyLFxuICAgICAgbWlkZGxlTW92aW5nRG93blBsYXliYWNrUmF0ZU1hcHBlcjogbWlkZGxlTW92aW5nRG93blBsYXliYWNrUmF0ZU1hcHBlcixcbiAgICAgIG51bWJlck9mTWlkZGxlVGhyZXNob2xkczogN1xuICAgIH0gKTtcbiAgfVxufVxuXG50YW1iby5yZWdpc3RlciggJ1NsaWRlclBpdGNoQ2hhbmdlU291bmRHZW5lcmF0b3InLCBTbGlkZXJQaXRjaENoYW5nZVNvdW5kR2VuZXJhdG9yICk7XG5cbmV4cG9ydCBkZWZhdWx0IFNsaWRlclBpdGNoQ2hhbmdlU291bmRHZW5lcmF0b3I7Il0sIm5hbWVzIjpbImJyaWdodE1hcmltYmFTaG9ydF9tcDMiLCJTb3VuZENsaXAiLCJWYWx1ZUNoYW5nZVNvdW5kUGxheWVyIiwic291bmRNYW5hZ2VyIiwidGFtYm8iLCJTbGlkZXJQaXRjaENoYW5nZVNvdW5kR2VuZXJhdG9yIiwidmFsdWVSYW5nZSIsIm1hcmltYmFTb3VuZENsaXAiLCJpbml0aWFsT3V0cHV0TGV2ZWwiLCJyYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHMiLCJhZGRTb3VuZEdlbmVyYXRvciIsIm1pZGRsZU1vdmluZ1VwUGxheWJhY2tSYXRlTWFwcGVyIiwidmFsdWUiLCJtaW4iLCJnZXRMZW5ndGgiLCJtaWRkbGVNb3ZpbmdEb3duUGxheWJhY2tSYXRlTWFwcGVyIiwibWlkZGxlTW92aW5nVXBTb3VuZFBsYXllciIsIm1pZGRsZU1vdmluZ0Rvd25Tb3VuZFBsYXllciIsIm51bWJlck9mTWlkZGxlVGhyZXNob2xkcyIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFHdEQsT0FBT0EsNEJBQTRCLCtDQUErQztBQUNsRixPQUFPQyxlQUFlLHlDQUF5QztBQUMvRCxPQUFPQyw0QkFBNEIsc0RBQXNEO0FBQ3pGLE9BQU9DLGtCQUFrQiwyQkFBMkI7QUFDcEQsT0FBT0MsV0FBVyxvQkFBb0I7QUFFdEM7Ozs7O0NBS0MsR0FFRCxJQUFBLEFBQU1DLGtDQUFOLE1BQU1BLHdDQUF3Q0g7SUFFNUM7O0dBRUMsR0FDRCxZQUFvQkksVUFBaUIsQ0FBRztRQUV0QyxpRkFBaUY7UUFDakYsTUFBTUMsbUJBQW1CLElBQUlOLFVBQVdELHdCQUF3QjtZQUM5RFEsb0JBQW9CO1lBQ3BCQyxnQ0FBZ0M7UUFDbEM7UUFDQU4sYUFBYU8saUJBQWlCLENBQUVIO1FBRWhDLGlDQUFpQztRQUNqQyxNQUFNSSxtQ0FBbUMsQ0FBRUMsUUFBbUIsTUFBTSxBQUFFQSxDQUFBQSxRQUFRTixXQUFXTyxHQUFHLEFBQUQsSUFBTVAsV0FBV1EsU0FBUztRQUNySCxNQUFNQyxxQ0FBcUMsQ0FBRUgsUUFBbUIsTUFBTSxBQUFFQSxDQUFBQSxRQUFRTixXQUFXTyxHQUFHLEFBQUQsSUFBTVAsV0FBV1EsU0FBUztRQUV2SCxLQUFLLENBQUVSLFlBQVk7WUFDakJVLDJCQUEyQlQ7WUFDM0JVLDZCQUE2QlY7WUFDN0JJLGtDQUFrQ0E7WUFDbENJLG9DQUFvQ0E7WUFDcENHLDBCQUEwQjtRQUM1QjtJQUNGO0FBQ0Y7QUFFQWQsTUFBTWUsUUFBUSxDQUFFLG1DQUFtQ2Q7QUFFbkQsZUFBZUEsZ0NBQWdDIn0=