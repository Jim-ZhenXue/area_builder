// Copyright 2019-2024, University of Colorado Boulder
/**
 * BinMapper is an object that maps a continuous value to one of a finite number of "bins".
 *
 * @author John Blanco (PhET Interactive Simulations)
 */ import optionize from '../../phet-core/js/optionize.js';
import tambo from './tambo.js';
let BinMapper = class BinMapper {
    /**
   * Map the provided value to a bin.
   */ mapToBin(value) {
        if (!this.options.tolerateOutOfRangeValues) {
            assert && assert(value <= this.maxValue);
            assert && assert(value >= this.minValue);
        }
        const proportion = (value - this.minValue) / this.span;
        // this calculation means that values on the boundaries will go into the higher bin except for the max value
        return Math.min(Math.floor(proportion * this.numBins), this.numBins - 1);
    }
    constructor(valueRange, numBins, providedOptions){
        // parameter checking
        assert && assert(numBins > 0);
        const options = optionize()({
            tolerateOutOfRangeValues: false
        }, providedOptions);
        this.minValue = valueRange.min;
        this.maxValue = valueRange.max;
        this.span = valueRange.getLength();
        this.numBins = numBins;
        this.options = options;
    }
};
tambo.register('BinMapper', BinMapper);
export default BinMapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RhbWJvL2pzL0Jpbk1hcHBlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBCaW5NYXBwZXIgaXMgYW4gb2JqZWN0IHRoYXQgbWFwcyBhIGNvbnRpbnVvdXMgdmFsdWUgdG8gb25lIG9mIGEgZmluaXRlIG51bWJlciBvZiBcImJpbnNcIi5cbiAqXG4gKiBAYXV0aG9yIEpvaG4gQmxhbmNvIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCB0YW1ibyBmcm9tICcuL3RhbWJvLmpzJztcblxuZXhwb3J0IHR5cGUgQmluTWFwcGVyT3B0aW9ucyA9IHtcblxuICAvLyBBbGxvdyB2YWx1ZXMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgc3BlY2lmaWVkIHJhbmdlIChpZiBmYWxzZSwgYW4gYXNzZXJ0IG9jY3VycyBvbiBvdXQtb2YtcmFuZ2UgdmFsdWVzKS5cbiAgdG9sZXJhdGVPdXRPZlJhbmdlVmFsdWVzPzogYm9vbGVhbjtcbn07XG5cbmNsYXNzIEJpbk1hcHBlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbWluVmFsdWU6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBtYXhWYWx1ZTogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHNwYW46IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBudW1CaW5zOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogQmluTWFwcGVyT3B0aW9ucztcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHZhbHVlUmFuZ2U6IFJhbmdlLCBudW1CaW5zOiBudW1iZXIsIHByb3ZpZGVkT3B0aW9ucz86IEJpbk1hcHBlck9wdGlvbnMgKSB7XG5cbiAgICAvLyBwYXJhbWV0ZXIgY2hlY2tpbmdcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBudW1CaW5zID4gMCApO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCaW5NYXBwZXJPcHRpb25zLCBCaW5NYXBwZXJPcHRpb25zPigpKCB7XG4gICAgICB0b2xlcmF0ZU91dE9mUmFuZ2VWYWx1ZXM6IGZhbHNlXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICB0aGlzLm1pblZhbHVlID0gdmFsdWVSYW5nZS5taW47XG4gICAgdGhpcy5tYXhWYWx1ZSA9IHZhbHVlUmFuZ2UubWF4O1xuICAgIHRoaXMuc3BhbiA9IHZhbHVlUmFuZ2UuZ2V0TGVuZ3RoKCk7XG4gICAgdGhpcy5udW1CaW5zID0gbnVtQmlucztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcCB0aGUgcHJvdmlkZWQgdmFsdWUgdG8gYSBiaW4uXG4gICAqL1xuICBwdWJsaWMgbWFwVG9CaW4oIHZhbHVlOiBudW1iZXIgKTogbnVtYmVyIHtcbiAgICBpZiAoICF0aGlzLm9wdGlvbnMudG9sZXJhdGVPdXRPZlJhbmdlVmFsdWVzICkge1xuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdmFsdWUgPD0gdGhpcy5tYXhWYWx1ZSApO1xuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdmFsdWUgPj0gdGhpcy5taW5WYWx1ZSApO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BvcnRpb24gPSAoIHZhbHVlIC0gdGhpcy5taW5WYWx1ZSApIC8gKCB0aGlzLnNwYW4gKTtcblxuICAgIC8vIHRoaXMgY2FsY3VsYXRpb24gbWVhbnMgdGhhdCB2YWx1ZXMgb24gdGhlIGJvdW5kYXJpZXMgd2lsbCBnbyBpbnRvIHRoZSBoaWdoZXIgYmluIGV4Y2VwdCBmb3IgdGhlIG1heCB2YWx1ZVxuICAgIHJldHVybiBNYXRoLm1pbiggTWF0aC5mbG9vciggcHJvcG9ydGlvbiAqIHRoaXMubnVtQmlucyApLCB0aGlzLm51bUJpbnMgLSAxICk7XG4gIH1cbn1cblxudGFtYm8ucmVnaXN0ZXIoICdCaW5NYXBwZXInLCBCaW5NYXBwZXIgKTtcblxuZXhwb3J0IGRlZmF1bHQgQmluTWFwcGVyOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJ0YW1ibyIsIkJpbk1hcHBlciIsIm1hcFRvQmluIiwidmFsdWUiLCJvcHRpb25zIiwidG9sZXJhdGVPdXRPZlJhbmdlVmFsdWVzIiwiYXNzZXJ0IiwibWF4VmFsdWUiLCJtaW5WYWx1ZSIsInByb3BvcnRpb24iLCJzcGFuIiwiTWF0aCIsIm1pbiIsImZsb29yIiwibnVtQmlucyIsInZhbHVlUmFuZ2UiLCJwcm92aWRlZE9wdGlvbnMiLCJtYXgiLCJnZXRMZW5ndGgiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7O0NBSUMsR0FHRCxPQUFPQSxlQUFlLGtDQUFrQztBQUN4RCxPQUFPQyxXQUFXLGFBQWE7QUFRL0IsSUFBQSxBQUFNQyxZQUFOLE1BQU1BO0lBdUJKOztHQUVDLEdBQ0QsQUFBT0MsU0FBVUMsS0FBYSxFQUFXO1FBQ3ZDLElBQUssQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0Msd0JBQXdCLEVBQUc7WUFDNUNDLFVBQVVBLE9BQVFILFNBQVMsSUFBSSxDQUFDSSxRQUFRO1lBQ3hDRCxVQUFVQSxPQUFRSCxTQUFTLElBQUksQ0FBQ0ssUUFBUTtRQUMxQztRQUVBLE1BQU1DLGFBQWEsQUFBRU4sQ0FBQUEsUUFBUSxJQUFJLENBQUNLLFFBQVEsQUFBRCxJQUFRLElBQUksQ0FBQ0UsSUFBSTtRQUUxRCw0R0FBNEc7UUFDNUcsT0FBT0MsS0FBS0MsR0FBRyxDQUFFRCxLQUFLRSxLQUFLLENBQUVKLGFBQWEsSUFBSSxDQUFDSyxPQUFPLEdBQUksSUFBSSxDQUFDQSxPQUFPLEdBQUc7SUFDM0U7SUE3QkEsWUFBb0JDLFVBQWlCLEVBQUVELE9BQWUsRUFBRUUsZUFBa0MsQ0FBRztRQUUzRixxQkFBcUI7UUFDckJWLFVBQVVBLE9BQVFRLFVBQVU7UUFFNUIsTUFBTVYsVUFBVUwsWUFBaUQ7WUFDL0RNLDBCQUEwQjtRQUM1QixHQUFHVztRQUVILElBQUksQ0FBQ1IsUUFBUSxHQUFHTyxXQUFXSCxHQUFHO1FBQzlCLElBQUksQ0FBQ0wsUUFBUSxHQUFHUSxXQUFXRSxHQUFHO1FBQzlCLElBQUksQ0FBQ1AsSUFBSSxHQUFHSyxXQUFXRyxTQUFTO1FBQ2hDLElBQUksQ0FBQ0osT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ1YsT0FBTyxHQUFHQTtJQUNqQjtBQWdCRjtBQUVBSixNQUFNbUIsUUFBUSxDQUFFLGFBQWFsQjtBQUU3QixlQUFlQSxVQUFVIn0=