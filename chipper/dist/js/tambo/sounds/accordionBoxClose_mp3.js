/* eslint-disable */ /* @formatter:off */ import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';
const soundURI = 'data:audio/mpeg;base64,//swxAAABSAbF7TAgDE5nqu/MHICAAAAcDYkDIEtmZ+0OAIDonAEAIOjgnenW/yhz/g+fh+CEocif//+c5RVQlRIdHdXcHffj/DYYCgBdaS6OzOU+xCNTd7EPI6nQ7mODNUkXlljx1AXgvbsgTi8z3+Z7a8aMfHP9uQFmXb1f/cmZM/9//sIhYP//sNqQJAgNJhWTyGAwFAoAATS//syxAeACW0Hgbi1EBESBuvjNGAAfDtZrw0MQaBPJj2MwQyJDLEhJZGoPjAvCMnP3dlJiAtJ8xr/PKk5hYV//3KDxif//6MYVcnt//+VFswo04EQAACAAC9YdezBqNoZHHQDlUSCuyZAkxazLI1qAeiR+JfccaBj1xti9B5JXrESzzBnSIgoXKxEzkQCos+pbPmxfwWXkwAAFm+93//7MsQDgAh4Z1G5gwABEY3y9x5iAuzlQAAAAAB2Wop4QsaAhgpWdRTKJsZcpp1XP57ykSikyYckLZ4Ty1TSs+HageepBZpVjXhgAMSIXXKmU65I0d/7dt7v7sNgMBwALVb09GkvHVk7fqBciIEitH44DchaeFCkbZVn3vi+3iz997uspO3MNCwv4nKHDdB/+gTro/8WA6oYAgMAeW//+zLEAwAIZH9bHaGAAQMgrTTxid9Ko07zWxQmamYZMUXJVhdXnyiL/VNVCqJJVOgImNStCjd9bH2ZjwZ/qQYUyG79QVWCpgKmMChqVd/4VIkkywFXa2uRpIAhLLU5m1VG6LimpHOKzIapjKZdQGJoCUbq7bMoVyt+j5W6t+WZ/r/KqPLMbv1Kxurf//8tBTuFZBUABV3GwiMDZuFj//swxAUCB4SDK0ywaICeAyN0wyROlYmGu6/rSDZ4E2kDhIFxZeHE1XJXBGqqqgLGqsZQ8m6ArsXr1fUvL1lChr+v/7fq//SC5HLZU2AEjwW0VUCig+dQNmTNmsUQ+tQt+EhX+skFfU3+n+u7/hV6TEFNRTMuOTkuNaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';
const soundByteArray = base64SoundToByteArray(phetAudioContext, soundURI);
const unlock = asyncLoader.createLock(soundURI);
const wrappedAudioBuffer = new WrappedAudioBuffer();
// safe way to unlock
let unlocked = false;
const safeUnlock = ()=>{
    if (!unlocked) {
        unlock();
        unlocked = true;
    }
};
const onDecodeSuccess = (decodedAudio)=>{
    if (wrappedAudioBuffer.audioBufferProperty.value === null) {
        wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
        safeUnlock();
    }
};
const onDecodeError = (decodeError)=>{
    console.warn('decode of audio data failed, using stubbed sound, error: ' + decodeError);
    wrappedAudioBuffer.audioBufferProperty.set(phetAudioContext.createBuffer(1, 1, phetAudioContext.sampleRate));
    safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData(soundByteArray.buffer, onDecodeSuccess, onDecodeError);
if (decodePromise) {
    decodePromise.then((decodedAudio)=>{
        if (wrappedAudioBuffer.audioBufferProperty.value === null) {
            wrappedAudioBuffer.audioBufferProperty.set(decodedAudio);
            safeUnlock();
        }
    }).catch((e)=>{
        console.warn('promise rejection caught for audio decode, error = ' + e);
        safeUnlock();
    });
}
export default wrappedAudioBuffer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RhbWJvL3NvdW5kcy9hY2NvcmRpb25Cb3hDbG9zZV9tcDMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIEBmb3JtYXR0ZXI6b2ZmICovXG5cbmltcG9ydCBhc3luY0xvYWRlciBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvYXN5bmNMb2FkZXIuanMnO1xuaW1wb3J0IGJhc2U2NFNvdW5kVG9CeXRlQXJyYXkgZnJvbSAnLi4vLi4vdGFtYm8vanMvYmFzZTY0U291bmRUb0J5dGVBcnJheS5qcyc7XG5pbXBvcnQgV3JhcHBlZEF1ZGlvQnVmZmVyIGZyb20gJy4uLy4uL3RhbWJvL2pzL1dyYXBwZWRBdWRpb0J1ZmZlci5qcyc7XG5pbXBvcnQgcGhldEF1ZGlvQ29udGV4dCBmcm9tICcuLi8uLi90YW1iby9qcy9waGV0QXVkaW9Db250ZXh0LmpzJztcblxuY29uc3Qgc291bmRVUkkgPSAnZGF0YTphdWRpby9tcGVnO2Jhc2U2NCwvL3N3eEFBQUJTQWJGN1RBZ0RFNW5xdS9NSElDQUFBQWNEWWtESUV0bVorME9BSURvbkFFQUlPamduZW5XL3loei9nK2ZoK0NFb2NpZi8vK2M1UlZRbFJJZEhkWGNIZmZqL0RZWUNnQmRhUzZPek9VK3hDTlRkN0VQSTZuUTdtT0ROVWtYbGxqeDFBWGd2YnNnVGk4ejMrWjdhOGFNZkhQOXVRRm1YYjFmL2NtWk0vOS8vc0loWVAvL3NOcVFKQWdOSmhXVHlHQXdGQW9BQVRTLy9zeXhBZUFDVzBIZ2JpMUVCRVNCdXZqTkdBQWZEdFpydzBNUWFCUEpqMk13UXlKRExFaEpaR29QakF2Q01uUDNkbEppQXRKOHhyL1BLazVoWVYvLzNLRHhpZi8vNk1ZVmNudC8vK1ZGc3dvMDRFUUFBQ0FBQzlZZGV6QnFOb1pISFFEbFVTQ3V5WkFreGF6TEkxcUFlaVIrSmZjY2FCajF4dGk5QjVKWHJFU3p6Qm5TSWdvWEt4RXprUUNvcytwYlBteGZ3V1hrd0FBRm0rOTMvLzdNc1FEZ0FoNFoxRzVnd0FCRVkzeTl4NWlBdXpsUUFBQUFBQjJXb3A0UXNhQWhncFdkUlRLSnNaY3BwMVhQNTd5a1Npa3lZY2tMWjRUeTFUU3MrSGFnZWVwQlpwVmpYaGdBTVNJWFhLbVU2NUkwZC83ZHQ3djdzTmdNQndBTFZiMDlHa3ZIVms3ZnFCY2lJRWl0SDQ0RGNoYWVGQ2tiWlZuM3ZpKzNpejk5N3VzcE8zTU5Dd3Y0bktIRGRCLytnVHJvLzhXQTZvWUFnTUFlVy8vK3pMRUF3QUlaSDliSGFHQUFRTWdyVFR4aWQ5S28wN3pXeFFtYW1ZWk1VWEpWaGRYbnlpTC9WTlZDcUpKVk9nSW1OU3RDamQ5YkgyWmp3Wi9xUVlVeUc3OVFWV0NwZ0ttTUNocVZkLzRWSWtreXdGWGEydVJwSUFoTExVNW0xVkc2TGltcEhPS3pJYXBqS1pkUUdKb0NVYnE3Yk1vVnl0K2o1VzZ0K1daL3IvS3FQTE1idjFLeHVyZi8vOHRCVHVGWkJVQUJWM0d3aU1EWnVGai8vc3d4QVVDQjRTREsweXdhSUNlQXlOMHd5Uk9sWW1HdTYvclNEWjRFMmtEaElGeFplSEUxWEpYQkdxcXFnTEdxc1pROG02QXJzWHIxZlV2TDFsQ2hyK3YvN2ZxLy9TQzVITFpVMkFFandXMFZVQ2lnK2RRTm1UTm1zVVErdFF0K0VoWCtza0ZmVTMrbit1Ny9oVjZURUZOUlRNdU9Ua3VOYXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXEnO1xuY29uc3Qgc291bmRCeXRlQXJyYXkgPSBiYXNlNjRTb3VuZFRvQnl0ZUFycmF5KCBwaGV0QXVkaW9Db250ZXh0LCBzb3VuZFVSSSApO1xuY29uc3QgdW5sb2NrID0gYXN5bmNMb2FkZXIuY3JlYXRlTG9jayggc291bmRVUkkgKTtcbmNvbnN0IHdyYXBwZWRBdWRpb0J1ZmZlciA9IG5ldyBXcmFwcGVkQXVkaW9CdWZmZXIoKTtcblxuLy8gc2FmZSB3YXkgdG8gdW5sb2NrXG5sZXQgdW5sb2NrZWQgPSBmYWxzZTtcbmNvbnN0IHNhZmVVbmxvY2sgPSAoKSA9PiB7XG4gIGlmICggIXVubG9ja2VkICkge1xuICAgIHVubG9jaygpO1xuICAgIHVubG9ja2VkID0gdHJ1ZTtcbiAgfVxufTtcblxuY29uc3Qgb25EZWNvZGVTdWNjZXNzID0gZGVjb2RlZEF1ZGlvID0+IHtcbiAgaWYgKCB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS52YWx1ZSA9PT0gbnVsbCApIHtcbiAgICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIGRlY29kZWRBdWRpbyApO1xuICAgIHNhZmVVbmxvY2soKTtcbiAgfVxufTtcbmNvbnN0IG9uRGVjb2RlRXJyb3IgPSBkZWNvZGVFcnJvciA9PiB7XG4gIGNvbnNvbGUud2FybiggJ2RlY29kZSBvZiBhdWRpbyBkYXRhIGZhaWxlZCwgdXNpbmcgc3R1YmJlZCBzb3VuZCwgZXJyb3I6ICcgKyBkZWNvZGVFcnJvciApO1xuICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIHBoZXRBdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyKCAxLCAxLCBwaGV0QXVkaW9Db250ZXh0LnNhbXBsZVJhdGUgKSApO1xuICBzYWZlVW5sb2NrKCk7XG59O1xuY29uc3QgZGVjb2RlUHJvbWlzZSA9IHBoZXRBdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBzb3VuZEJ5dGVBcnJheS5idWZmZXIsIG9uRGVjb2RlU3VjY2Vzcywgb25EZWNvZGVFcnJvciApO1xuaWYgKCBkZWNvZGVQcm9taXNlICkge1xuICBkZWNvZGVQcm9taXNlXG4gICAgLnRoZW4oIGRlY29kZWRBdWRpbyA9PiB7XG4gICAgICBpZiAoIHdyYXBwZWRBdWRpb0J1ZmZlci5hdWRpb0J1ZmZlclByb3BlcnR5LnZhbHVlID09PSBudWxsICkge1xuICAgICAgICB3cmFwcGVkQXVkaW9CdWZmZXIuYXVkaW9CdWZmZXJQcm9wZXJ0eS5zZXQoIGRlY29kZWRBdWRpbyApO1xuICAgICAgICBzYWZlVW5sb2NrKCk7XG4gICAgICB9XG4gICAgfSApXG4gICAgLmNhdGNoKCBlID0+IHtcbiAgICAgIGNvbnNvbGUud2FybiggJ3Byb21pc2UgcmVqZWN0aW9uIGNhdWdodCBmb3IgYXVkaW8gZGVjb2RlLCBlcnJvciA9ICcgKyBlICk7XG4gICAgICBzYWZlVW5sb2NrKCk7XG4gICAgfSApO1xufVxuZXhwb3J0IGRlZmF1bHQgd3JhcHBlZEF1ZGlvQnVmZmVyOyJdLCJuYW1lcyI6WyJhc3luY0xvYWRlciIsImJhc2U2NFNvdW5kVG9CeXRlQXJyYXkiLCJXcmFwcGVkQXVkaW9CdWZmZXIiLCJwaGV0QXVkaW9Db250ZXh0Iiwic291bmRVUkkiLCJzb3VuZEJ5dGVBcnJheSIsInVubG9jayIsImNyZWF0ZUxvY2siLCJ3cmFwcGVkQXVkaW9CdWZmZXIiLCJ1bmxvY2tlZCIsInNhZmVVbmxvY2siLCJvbkRlY29kZVN1Y2Nlc3MiLCJkZWNvZGVkQXVkaW8iLCJhdWRpb0J1ZmZlclByb3BlcnR5IiwidmFsdWUiLCJzZXQiLCJvbkRlY29kZUVycm9yIiwiZGVjb2RlRXJyb3IiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZUJ1ZmZlciIsInNhbXBsZVJhdGUiLCJkZWNvZGVQcm9taXNlIiwiZGVjb2RlQXVkaW9EYXRhIiwiYnVmZmVyIiwidGhlbiIsImNhdGNoIiwiZSJdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLEdBQ2xCLGtCQUFrQixHQUVsQixPQUFPQSxpQkFBaUIsb0NBQW9DO0FBQzVELE9BQU9DLDRCQUE0QiwyQ0FBMkM7QUFDOUUsT0FBT0Msd0JBQXdCLHVDQUF1QztBQUN0RSxPQUFPQyxzQkFBc0IscUNBQXFDO0FBRWxFLE1BQU1DLFdBQVc7QUFDakIsTUFBTUMsaUJBQWlCSix1QkFBd0JFLGtCQUFrQkM7QUFDakUsTUFBTUUsU0FBU04sWUFBWU8sVUFBVSxDQUFFSDtBQUN2QyxNQUFNSSxxQkFBcUIsSUFBSU47QUFFL0IscUJBQXFCO0FBQ3JCLElBQUlPLFdBQVc7QUFDZixNQUFNQyxhQUFhO0lBQ2pCLElBQUssQ0FBQ0QsVUFBVztRQUNmSDtRQUNBRyxXQUFXO0lBQ2I7QUFDRjtBQUVBLE1BQU1FLGtCQUFrQkMsQ0FBQUE7SUFDdEIsSUFBS0osbUJBQW1CSyxtQkFBbUIsQ0FBQ0MsS0FBSyxLQUFLLE1BQU87UUFDM0ROLG1CQUFtQkssbUJBQW1CLENBQUNFLEdBQUcsQ0FBRUg7UUFDNUNGO0lBQ0Y7QUFDRjtBQUNBLE1BQU1NLGdCQUFnQkMsQ0FBQUE7SUFDcEJDLFFBQVFDLElBQUksQ0FBRSw4REFBOERGO0lBQzVFVCxtQkFBbUJLLG1CQUFtQixDQUFDRSxHQUFHLENBQUVaLGlCQUFpQmlCLFlBQVksQ0FBRSxHQUFHLEdBQUdqQixpQkFBaUJrQixVQUFVO0lBQzVHWDtBQUNGO0FBQ0EsTUFBTVksZ0JBQWdCbkIsaUJBQWlCb0IsZUFBZSxDQUFFbEIsZUFBZW1CLE1BQU0sRUFBRWIsaUJBQWlCSztBQUNoRyxJQUFLTSxlQUFnQjtJQUNuQkEsY0FDR0csSUFBSSxDQUFFYixDQUFBQTtRQUNMLElBQUtKLG1CQUFtQkssbUJBQW1CLENBQUNDLEtBQUssS0FBSyxNQUFPO1lBQzNETixtQkFBbUJLLG1CQUFtQixDQUFDRSxHQUFHLENBQUVIO1lBQzVDRjtRQUNGO0lBQ0YsR0FDQ2dCLEtBQUssQ0FBRUMsQ0FBQUE7UUFDTlQsUUFBUUMsSUFBSSxDQUFFLHdEQUF3RFE7UUFDdEVqQjtJQUNGO0FBQ0o7QUFDQSxlQUFlRixtQkFBbUIifQ==