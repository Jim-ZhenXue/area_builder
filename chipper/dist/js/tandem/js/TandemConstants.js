// Copyright 2021-2024, University of Colorado Boulder
import tandemNamespace from './tandemNamespace.js';
/**
 * Factored-out constant values for use in Tandem.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ const OBJECT_IO_TYPE_NAME = 'ObjectIO';
const EVENT_TYPE_MODEL = 'MODEL';
const metadataDefaults = {
    phetioTypeName: OBJECT_IO_TYPE_NAME,
    phetioDocumentation: '',
    phetioState: true,
    phetioReadOnly: false,
    // NOTE: Relies on the details about how Enumerations are serialized (via name), like EventType.phetioType.toStateObject( object.phetioEventType )
    phetioEventType: EVENT_TYPE_MODEL,
    phetioHighFrequency: false,
    phetioPlayback: false,
    phetioDynamicElement: false,
    phetioIsArchetype: false,
    phetioFeatured: false,
    phetioDesigned: false,
    phetioArchetypePhetioID: null
};
// The base definition of allowed characters in a tandem name. In regex form. This will be added to a character
// class (inside `[]`). See isValidTandemName(). This applies to all Tandem subtypes, not just Tandem()
// Allowable terms for tandems, like myObject, or myObject3[1,4], or MyObject
// Note: This allows some tandems we would not prefer, such as "My,Obje[ct", but we will catch that during the design phase.
// Note: This block must go before we start creating static Tandem instances at the bottom of this class.
const BASE_TANDEM_CHARACTER_CLASS = 'a-zA-Z0-9[\\],';
const BASE_DYNAMIC_TANDEM_CHARACTER_CLASS = `${BASE_TANDEM_CHARACTER_CLASS}_`;
const BASE_DERIVED_TANDEM_CHARACTER_CLASS = `${BASE_DYNAMIC_TANDEM_CHARACTER_CLASS}\\-`;
const TandemConstants = {
    OBJECT_IO_TYPE_NAME: OBJECT_IO_TYPE_NAME,
    EVENT_TYPE_MODEL: EVENT_TYPE_MODEL,
    // Default metadata set for an ObjectIO in the PhET-iO API.  These are used as the default options in PhetioObject
    // and when outputting an API (since values that match the defaults are omitted)
    PHET_IO_OBJECT_METADATA_DEFAULTS: metadataDefaults,
    METADATA_KEY_NAME: '_metadata',
    DATA_KEY_NAME: '_data',
    BASE_TANDEM_CHARACTER_CLASS: BASE_TANDEM_CHARACTER_CLASS,
    BASE_DYNAMIC_TANDEM_CHARACTER_CLASS: BASE_DYNAMIC_TANDEM_CHARACTER_CLASS,
    BASE_DERIVED_TANDEM_CHARACTER_CLASS: BASE_DERIVED_TANDEM_CHARACTER_CLASS
};
tandemNamespace.register('TandemConstants', TandemConstants);
export default TandemConstants;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW1Db25zdGFudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbmltcG9ydCBQaWNrUmVxdWlyZWQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tSZXF1aXJlZC5qcyc7XG5pbXBvcnQgeyBQaGV0aW9FbGVtZW50TWV0YWRhdGEgfSBmcm9tICcuL3BoZXQtaW8tdHlwZXMuanMnO1xuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5cbi8qKlxuICogRmFjdG9yZWQtb3V0IGNvbnN0YW50IHZhbHVlcyBmb3IgdXNlIGluIFRhbmRlbS5cbiAqXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmNvbnN0IE9CSkVDVF9JT19UWVBFX05BTUUgPSAnT2JqZWN0SU8nO1xuY29uc3QgRVZFTlRfVFlQRV9NT0RFTCA9ICdNT0RFTCc7XG5cbmNvbnN0IG1ldGFkYXRhRGVmYXVsdHM6IFBoZXRpb0VsZW1lbnRNZXRhZGF0YSAmIFBpY2tSZXF1aXJlZDxQaGV0aW9FbGVtZW50TWV0YWRhdGEsICdwaGV0aW9GZWF0dXJlZCc+ID0ge1xuICBwaGV0aW9UeXBlTmFtZTogT0JKRUNUX0lPX1RZUEVfTkFNRSxcbiAgcGhldGlvRG9jdW1lbnRhdGlvbjogJycsXG4gIHBoZXRpb1N0YXRlOiB0cnVlLFxuICBwaGV0aW9SZWFkT25seTogZmFsc2UsXG5cbiAgLy8gTk9URTogUmVsaWVzIG9uIHRoZSBkZXRhaWxzIGFib3V0IGhvdyBFbnVtZXJhdGlvbnMgYXJlIHNlcmlhbGl6ZWQgKHZpYSBuYW1lKSwgbGlrZSBFdmVudFR5cGUucGhldGlvVHlwZS50b1N0YXRlT2JqZWN0KCBvYmplY3QucGhldGlvRXZlbnRUeXBlIClcbiAgcGhldGlvRXZlbnRUeXBlOiBFVkVOVF9UWVBFX01PREVMLFxuICBwaGV0aW9IaWdoRnJlcXVlbmN5OiBmYWxzZSxcbiAgcGhldGlvUGxheWJhY2s6IGZhbHNlLFxuICBwaGV0aW9EeW5hbWljRWxlbWVudDogZmFsc2UsXG4gIHBoZXRpb0lzQXJjaGV0eXBlOiBmYWxzZSxcbiAgcGhldGlvRmVhdHVyZWQ6IGZhbHNlLFxuICBwaGV0aW9EZXNpZ25lZDogZmFsc2UsXG4gIHBoZXRpb0FyY2hldHlwZVBoZXRpb0lEOiBudWxsXG59O1xuXG4vLyBUaGUgYmFzZSBkZWZpbml0aW9uIG9mIGFsbG93ZWQgY2hhcmFjdGVycyBpbiBhIHRhbmRlbSBuYW1lLiBJbiByZWdleCBmb3JtLiBUaGlzIHdpbGwgYmUgYWRkZWQgdG8gYSBjaGFyYWN0ZXJcbi8vIGNsYXNzIChpbnNpZGUgYFtdYCkuIFNlZSBpc1ZhbGlkVGFuZGVtTmFtZSgpLiBUaGlzIGFwcGxpZXMgdG8gYWxsIFRhbmRlbSBzdWJ0eXBlcywgbm90IGp1c3QgVGFuZGVtKClcbi8vIEFsbG93YWJsZSB0ZXJtcyBmb3IgdGFuZGVtcywgbGlrZSBteU9iamVjdCwgb3IgbXlPYmplY3QzWzEsNF0sIG9yIE15T2JqZWN0XG4vLyBOb3RlOiBUaGlzIGFsbG93cyBzb21lIHRhbmRlbXMgd2Ugd291bGQgbm90IHByZWZlciwgc3VjaCBhcyBcIk15LE9iamVbY3RcIiwgYnV0IHdlIHdpbGwgY2F0Y2ggdGhhdCBkdXJpbmcgdGhlIGRlc2lnbiBwaGFzZS5cbi8vIE5vdGU6IFRoaXMgYmxvY2sgbXVzdCBnbyBiZWZvcmUgd2Ugc3RhcnQgY3JlYXRpbmcgc3RhdGljIFRhbmRlbSBpbnN0YW5jZXMgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIGNsYXNzLlxuY29uc3QgQkFTRV9UQU5ERU1fQ0hBUkFDVEVSX0NMQVNTID0gJ2EtekEtWjAtOVtcXFxcXSwnO1xuY29uc3QgQkFTRV9EWU5BTUlDX1RBTkRFTV9DSEFSQUNURVJfQ0xBU1MgPSBgJHtCQVNFX1RBTkRFTV9DSEFSQUNURVJfQ0xBU1N9X2A7XG5jb25zdCBCQVNFX0RFUklWRURfVEFOREVNX0NIQVJBQ1RFUl9DTEFTUyA9IGAke0JBU0VfRFlOQU1JQ19UQU5ERU1fQ0hBUkFDVEVSX0NMQVNTfVxcXFwtYDtcblxuY29uc3QgVGFuZGVtQ29uc3RhbnRzID0ge1xuICBPQkpFQ1RfSU9fVFlQRV9OQU1FOiBPQkpFQ1RfSU9fVFlQRV9OQU1FLFxuICBFVkVOVF9UWVBFX01PREVMOiBFVkVOVF9UWVBFX01PREVMLFxuXG4gIC8vIERlZmF1bHQgbWV0YWRhdGEgc2V0IGZvciBhbiBPYmplY3RJTyBpbiB0aGUgUGhFVC1pTyBBUEkuICBUaGVzZSBhcmUgdXNlZCBhcyB0aGUgZGVmYXVsdCBvcHRpb25zIGluIFBoZXRpb09iamVjdFxuICAvLyBhbmQgd2hlbiBvdXRwdXR0aW5nIGFuIEFQSSAoc2luY2UgdmFsdWVzIHRoYXQgbWF0Y2ggdGhlIGRlZmF1bHRzIGFyZSBvbWl0dGVkKVxuICBQSEVUX0lPX09CSkVDVF9NRVRBREFUQV9ERUZBVUxUUzogbWV0YWRhdGFEZWZhdWx0cyxcblxuICBNRVRBREFUQV9LRVlfTkFNRTogJ19tZXRhZGF0YScsXG4gIERBVEFfS0VZX05BTUU6ICdfZGF0YScsXG5cbiAgQkFTRV9UQU5ERU1fQ0hBUkFDVEVSX0NMQVNTOiBCQVNFX1RBTkRFTV9DSEFSQUNURVJfQ0xBU1MsXG4gIEJBU0VfRFlOQU1JQ19UQU5ERU1fQ0hBUkFDVEVSX0NMQVNTOiBCQVNFX0RZTkFNSUNfVEFOREVNX0NIQVJBQ1RFUl9DTEFTUyxcbiAgQkFTRV9ERVJJVkVEX1RBTkRFTV9DSEFSQUNURVJfQ0xBU1M6IEJBU0VfREVSSVZFRF9UQU5ERU1fQ0hBUkFDVEVSX0NMQVNTXG59IGFzIGNvbnN0O1xuXG50YW5kZW1OYW1lc3BhY2UucmVnaXN0ZXIoICdUYW5kZW1Db25zdGFudHMnLCBUYW5kZW1Db25zdGFudHMgKTtcbmV4cG9ydCBkZWZhdWx0IFRhbmRlbUNvbnN0YW50czsiXSwibmFtZXMiOlsidGFuZGVtTmFtZXNwYWNlIiwiT0JKRUNUX0lPX1RZUEVfTkFNRSIsIkVWRU5UX1RZUEVfTU9ERUwiLCJtZXRhZGF0YURlZmF1bHRzIiwicGhldGlvVHlwZU5hbWUiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwicGhldGlvU3RhdGUiLCJwaGV0aW9SZWFkT25seSIsInBoZXRpb0V2ZW50VHlwZSIsInBoZXRpb0hpZ2hGcmVxdWVuY3kiLCJwaGV0aW9QbGF5YmFjayIsInBoZXRpb0R5bmFtaWNFbGVtZW50IiwicGhldGlvSXNBcmNoZXR5cGUiLCJwaGV0aW9GZWF0dXJlZCIsInBoZXRpb0Rlc2lnbmVkIiwicGhldGlvQXJjaGV0eXBlUGhldGlvSUQiLCJCQVNFX1RBTkRFTV9DSEFSQUNURVJfQ0xBU1MiLCJCQVNFX0RZTkFNSUNfVEFOREVNX0NIQVJBQ1RFUl9DTEFTUyIsIkJBU0VfREVSSVZFRF9UQU5ERU1fQ0hBUkFDVEVSX0NMQVNTIiwiVGFuZGVtQ29uc3RhbnRzIiwiUEhFVF9JT19PQkpFQ1RfTUVUQURBVEFfREVGQVVMVFMiLCJNRVRBREFUQV9LRVlfTkFNRSIsIkRBVEFfS0VZX05BTUUiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBSXRELE9BQU9BLHFCQUFxQix1QkFBdUI7QUFFbkQ7Ozs7O0NBS0MsR0FFRCxNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsbUJBQW1CO0FBRXpCLE1BQU1DLG1CQUFrRztJQUN0R0MsZ0JBQWdCSDtJQUNoQkkscUJBQXFCO0lBQ3JCQyxhQUFhO0lBQ2JDLGdCQUFnQjtJQUVoQixrSkFBa0o7SUFDbEpDLGlCQUFpQk47SUFDakJPLHFCQUFxQjtJQUNyQkMsZ0JBQWdCO0lBQ2hCQyxzQkFBc0I7SUFDdEJDLG1CQUFtQjtJQUNuQkMsZ0JBQWdCO0lBQ2hCQyxnQkFBZ0I7SUFDaEJDLHlCQUF5QjtBQUMzQjtBQUVBLCtHQUErRztBQUMvRyx1R0FBdUc7QUFDdkcsNkVBQTZFO0FBQzdFLDRIQUE0SDtBQUM1SCx5R0FBeUc7QUFDekcsTUFBTUMsOEJBQThCO0FBQ3BDLE1BQU1DLHNDQUFzQyxHQUFHRCw0QkFBNEIsQ0FBQyxDQUFDO0FBQzdFLE1BQU1FLHNDQUFzQyxHQUFHRCxvQ0FBb0MsR0FBRyxDQUFDO0FBRXZGLE1BQU1FLGtCQUFrQjtJQUN0QmxCLHFCQUFxQkE7SUFDckJDLGtCQUFrQkE7SUFFbEIsa0hBQWtIO0lBQ2xILGdGQUFnRjtJQUNoRmtCLGtDQUFrQ2pCO0lBRWxDa0IsbUJBQW1CO0lBQ25CQyxlQUFlO0lBRWZOLDZCQUE2QkE7SUFDN0JDLHFDQUFxQ0E7SUFDckNDLHFDQUFxQ0E7QUFDdkM7QUFFQWxCLGdCQUFnQnVCLFFBQVEsQ0FBRSxtQkFBbUJKO0FBQzdDLGVBQWVBLGdCQUFnQiJ9