// Copyright 2024, University of Colorado Boulder
/**
 * emits the state after each time the PhetioStateEngine has set all that it can for the
 * provided state. The first argument to the emit call is the state object literal that was set.
 * Use the second argument to check if a client Tandem is in the scope of the current set state.
 * This is because some state set calls only set partial state (like for a screen/scene).
 * For example: stateSetEmitter.addListener( ( state, scopeTandem )=> if( myTandem.hasAncestor( scopeTandem ) ){ . . . } )
 *
 * Note that this emitter emits after all state logic has occurred, but while isSettingPhetioStateProperty is still "true"
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import Emitter from '../../axon/js/Emitter.js';
import Tandem from './Tandem.js';
import tandemNamespace from './tandemNamespace.js';
// This one is for specialized usage in the PhetioStateEngine, which changes the value. DO NOT USE in sim code!
export const writablePhetioStateSetEmitter = new Emitter({
    parameters: [
        {
            valueType: Object
        },
        {
            valueType: Tandem
        }
    ]
});
// Simulations can use this one to observe the value
const phetioStateSetEmitter = writablePhetioStateSetEmitter;
tandemNamespace.register('phetioStateSetEmitter', phetioStateSetEmitter);
export default phetioStateSetEmitter;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RhbmRlbS9qcy9waGV0aW9TdGF0ZVNldEVtaXR0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIGVtaXRzIHRoZSBzdGF0ZSBhZnRlciBlYWNoIHRpbWUgdGhlIFBoZXRpb1N0YXRlRW5naW5lIGhhcyBzZXQgYWxsIHRoYXQgaXQgY2FuIGZvciB0aGVcbiAqIHByb3ZpZGVkIHN0YXRlLiBUaGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGVtaXQgY2FsbCBpcyB0aGUgc3RhdGUgb2JqZWN0IGxpdGVyYWwgdGhhdCB3YXMgc2V0LlxuICogVXNlIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gY2hlY2sgaWYgYSBjbGllbnQgVGFuZGVtIGlzIGluIHRoZSBzY29wZSBvZiB0aGUgY3VycmVudCBzZXQgc3RhdGUuXG4gKiBUaGlzIGlzIGJlY2F1c2Ugc29tZSBzdGF0ZSBzZXQgY2FsbHMgb25seSBzZXQgcGFydGlhbCBzdGF0ZSAobGlrZSBmb3IgYSBzY3JlZW4vc2NlbmUpLlxuICogRm9yIGV4YW1wbGU6IHN0YXRlU2V0RW1pdHRlci5hZGRMaXN0ZW5lciggKCBzdGF0ZSwgc2NvcGVUYW5kZW0gKT0+IGlmKCBteVRhbmRlbS5oYXNBbmNlc3Rvciggc2NvcGVUYW5kZW0gKSApeyAuIC4gLiB9IClcbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBlbWl0dGVyIGVtaXRzIGFmdGVyIGFsbCBzdGF0ZSBsb2dpYyBoYXMgb2NjdXJyZWQsIGJ1dCB3aGlsZSBpc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5IGlzIHN0aWxsIFwidHJ1ZVwiXG4gKlxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgRW1pdHRlciBmcm9tICcuLi8uLi9heG9uL2pzL0VtaXR0ZXIuanMnO1xuaW1wb3J0IFRFbWl0dGVyLCB7IFRSZWFkT25seUVtaXR0ZXIgfSBmcm9tICcuLi8uLi9heG9uL2pzL1RFbWl0dGVyLmpzJztcbmltcG9ydCB7IEZ1bGxQaGV0aW9TdGF0ZSB9IGZyb20gJy4vcGhldC1pby10eXBlcy5qcyc7XG5pbXBvcnQgVGFuZGVtIGZyb20gJy4vVGFuZGVtLmpzJztcbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi90YW5kZW1OYW1lc3BhY2UuanMnO1xuXG4vLyBUaGlzIG9uZSBpcyBmb3Igc3BlY2lhbGl6ZWQgdXNhZ2UgaW4gdGhlIFBoZXRpb1N0YXRlRW5naW5lLCB3aGljaCBjaGFuZ2VzIHRoZSB2YWx1ZS4gRE8gTk9UIFVTRSBpbiBzaW0gY29kZSFcbmV4cG9ydCBjb25zdCB3cml0YWJsZVBoZXRpb1N0YXRlU2V0RW1pdHRlcjogVEVtaXR0ZXI8WyBGdWxsUGhldGlvU3RhdGUsIFRhbmRlbSBdPiA9IG5ldyBFbWl0dGVyKCB7XG4gIHBhcmFtZXRlcnM6IFsgeyB2YWx1ZVR5cGU6IE9iamVjdCB9LFxuICAgIHsgdmFsdWVUeXBlOiBUYW5kZW0gfSBdXG59ICk7XG5cbi8vIFNpbXVsYXRpb25zIGNhbiB1c2UgdGhpcyBvbmUgdG8gb2JzZXJ2ZSB0aGUgdmFsdWVcbmNvbnN0IHBoZXRpb1N0YXRlU2V0RW1pdHRlcjogVFJlYWRPbmx5RW1pdHRlcjxbIEZ1bGxQaGV0aW9TdGF0ZSwgVGFuZGVtIF0+ID0gd3JpdGFibGVQaGV0aW9TdGF0ZVNldEVtaXR0ZXI7XG5cbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ3BoZXRpb1N0YXRlU2V0RW1pdHRlcicsIHBoZXRpb1N0YXRlU2V0RW1pdHRlciApO1xuXG5leHBvcnQgZGVmYXVsdCBwaGV0aW9TdGF0ZVNldEVtaXR0ZXI7Il0sIm5hbWVzIjpbIkVtaXR0ZXIiLCJUYW5kZW0iLCJ0YW5kZW1OYW1lc3BhY2UiLCJ3cml0YWJsZVBoZXRpb1N0YXRlU2V0RW1pdHRlciIsInBhcmFtZXRlcnMiLCJ2YWx1ZVR5cGUiLCJPYmplY3QiLCJwaGV0aW9TdGF0ZVNldEVtaXR0ZXIiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBRWpEOzs7Ozs7Ozs7OztDQVdDLEdBRUQsT0FBT0EsYUFBYSwyQkFBMkI7QUFHL0MsT0FBT0MsWUFBWSxjQUFjO0FBQ2pDLE9BQU9DLHFCQUFxQix1QkFBdUI7QUFFbkQsK0dBQStHO0FBQy9HLE9BQU8sTUFBTUMsZ0NBQXVFLElBQUlILFFBQVM7SUFDL0ZJLFlBQVk7UUFBRTtZQUFFQyxXQUFXQztRQUFPO1FBQ2hDO1lBQUVELFdBQVdKO1FBQU87S0FBRztBQUMzQixHQUFJO0FBRUosb0RBQW9EO0FBQ3BELE1BQU1NLHdCQUF1RUo7QUFFN0VELGdCQUFnQk0sUUFBUSxDQUFFLHlCQUF5QkQ7QUFFbkQsZUFBZUEsc0JBQXNCIn0=