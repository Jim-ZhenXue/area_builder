// Copyright 2020-2024, University of Colorado Boulder
/**
 * PhET-iO Type for JS's built-in Float64Array type
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Chris Klusendorf
 */ import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
const Float64ArrayIO = new IOType('Float64ArrayIO', {
    valueType: Float64Array,
    toStateObject: (array)=>{
        const result = [];
        array.forEach((float)=>result.push(float));
        return result;
    },
    fromStateObject: (stateObject)=>new Float64Array(stateObject),
    stateSchema: StateSchema.asValue('Float64Array', {
        isValidValue: (value)=>Array.isArray(value) && value.find((v)=>typeof v !== 'number' || isNaN(v)) === undefined
    }),
    // Float64ArrayIO is a data type, and uses the toStateObject/fromStateObject exclusively for data type serialization.
    // Sites that use Float64ArrayIO as a reference type can use this method to update the state of an existing Float64Arary.
    applyState: (array, stateObject)=>array.set(stateObject)
});
tandemNamespace.register('Float64ArrayIO', Float64ArrayIO);
export default Float64ArrayIO;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9GbG9hdDY0QXJyYXlJTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBQaEVULWlPIFR5cGUgZm9yIEpTJ3MgYnVpbHQtaW4gRmxvYXQ2NEFycmF5IHR5cGVcbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmZcbiAqL1xuXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcblxuY29uc3QgRmxvYXQ2NEFycmF5SU8gPSBuZXcgSU9UeXBlPEZsb2F0NjRBcnJheSwgbnVtYmVyW10+KCAnRmxvYXQ2NEFycmF5SU8nLCB7XG4gIHZhbHVlVHlwZTogRmxvYXQ2NEFycmF5LFxuICB0b1N0YXRlT2JqZWN0OiBhcnJheSA9PiB7XG4gICAgY29uc3QgcmVzdWx0OiBudW1iZXJbXSA9IFtdO1xuICAgIGFycmF5LmZvckVhY2goIGZsb2F0ID0+IHJlc3VsdC5wdXNoKCBmbG9hdCApICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgZnJvbVN0YXRlT2JqZWN0OiBzdGF0ZU9iamVjdCA9PiBuZXcgRmxvYXQ2NEFycmF5KCBzdGF0ZU9iamVjdCApLFxuICBzdGF0ZVNjaGVtYTogU3RhdGVTY2hlbWEuYXNWYWx1ZTxGbG9hdDY0QXJyYXksIG51bWJlcltdPiggJ0Zsb2F0NjRBcnJheScsIHtcbiAgICBpc1ZhbGlkVmFsdWU6ICggdmFsdWU6IG51bWJlcltdICkgPT4gQXJyYXkuaXNBcnJheSggdmFsdWUgKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5maW5kKCB2ID0+IHR5cGVvZiB2ICE9PSAnbnVtYmVyJyB8fCBpc05hTiggdiApICkgPT09IHVuZGVmaW5lZFxuICB9ICksXG5cbiAgLy8gRmxvYXQ2NEFycmF5SU8gaXMgYSBkYXRhIHR5cGUsIGFuZCB1c2VzIHRoZSB0b1N0YXRlT2JqZWN0L2Zyb21TdGF0ZU9iamVjdCBleGNsdXNpdmVseSBmb3IgZGF0YSB0eXBlIHNlcmlhbGl6YXRpb24uXG4gIC8vIFNpdGVzIHRoYXQgdXNlIEZsb2F0NjRBcnJheUlPIGFzIGEgcmVmZXJlbmNlIHR5cGUgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byB1cGRhdGUgdGhlIHN0YXRlIG9mIGFuIGV4aXN0aW5nIEZsb2F0NjRBcmFyeS5cbiAgYXBwbHlTdGF0ZTogKCBhcnJheSwgc3RhdGVPYmplY3QgKSA9PiBhcnJheS5zZXQoIHN0YXRlT2JqZWN0IClcbn0gKTtcblxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnRmxvYXQ2NEFycmF5SU8nLCBGbG9hdDY0QXJyYXlJTyApO1xuZXhwb3J0IGRlZmF1bHQgRmxvYXQ2NEFycmF5SU87Il0sIm5hbWVzIjpbInRhbmRlbU5hbWVzcGFjZSIsIklPVHlwZSIsIlN0YXRlU2NoZW1hIiwiRmxvYXQ2NEFycmF5SU8iLCJ2YWx1ZVR5cGUiLCJGbG9hdDY0QXJyYXkiLCJ0b1N0YXRlT2JqZWN0IiwiYXJyYXkiLCJyZXN1bHQiLCJmb3JFYWNoIiwiZmxvYXQiLCJwdXNoIiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJzdGF0ZVNjaGVtYSIsImFzVmFsdWUiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImZpbmQiLCJ2IiwiaXNOYU4iLCJ1bmRlZmluZWQiLCJhcHBseVN0YXRlIiwic2V0IiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7Q0FLQyxHQUVELE9BQU9BLHFCQUFxQix3QkFBd0I7QUFDcEQsT0FBT0MsWUFBWSxjQUFjO0FBQ2pDLE9BQU9DLGlCQUFpQixtQkFBbUI7QUFFM0MsTUFBTUMsaUJBQWlCLElBQUlGLE9BQWdDLGtCQUFrQjtJQUMzRUcsV0FBV0M7SUFDWEMsZUFBZUMsQ0FBQUE7UUFDYixNQUFNQyxTQUFtQixFQUFFO1FBQzNCRCxNQUFNRSxPQUFPLENBQUVDLENBQUFBLFFBQVNGLE9BQU9HLElBQUksQ0FBRUQ7UUFDckMsT0FBT0Y7SUFDVDtJQUNBSSxpQkFBaUJDLENBQUFBLGNBQWUsSUFBSVIsYUFBY1E7SUFDbERDLGFBQWFaLFlBQVlhLE9BQU8sQ0FBMEIsZ0JBQWdCO1FBQ3hFQyxjQUFjLENBQUVDLFFBQXFCQyxNQUFNQyxPQUFPLENBQUVGLFVBQ2ZBLE1BQU1HLElBQUksQ0FBRUMsQ0FBQUEsSUFBSyxPQUFPQSxNQUFNLFlBQVlDLE1BQU9ELFFBQVVFO0lBQ2xHO0lBRUEscUhBQXFIO0lBQ3JILHlIQUF5SDtJQUN6SEMsWUFBWSxDQUFFakIsT0FBT00sY0FBaUJOLE1BQU1rQixHQUFHLENBQUVaO0FBQ25EO0FBRUFiLGdCQUFnQjBCLFFBQVEsQ0FBRSxrQkFBa0J2QjtBQUM1QyxlQUFlQSxlQUFlIn0=