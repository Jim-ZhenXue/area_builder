// Copyright 2018-2024, University of Colorado Boulder
/**
 * Fills in values for the chipper initialization script script.
 *
 * NOTE: This should not be minified! It contains licenses that should be human readable as well as important formatting
 * for rosetta translation.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import assert from 'assert';
import fs from 'fs';
import grunt from '../../../perennial-alias/js/npm-dependencies/grunt.js';
import ChipperConstants from '../common/ChipperConstants.js';
import ChipperStringUtils from '../common/ChipperStringUtils.js';
import stringEncoding from '../common/stringEncoding.js';
import transpileForBuild from './transpileForBuild.js';
/**
 * Returns a string for the JS of the initialization script.
 */ export default function getInitializationScript(config) {
    const { brand, repo, localeData, stringMap, stringMetadata, version, dependencies, timestamp, locale, includeAllLocales, isDebugBuild, allowLocaleSwitching, encodeStringMap, profileFileSize, packageObject } = config;
    assert(stringMap, 'Requires stringMap');
    assert(dependencies, 'Requires dependencies');
    // Load localeData
    const fullLocaleData = JSON.parse(fs.readFileSync('../babel/localeData.json', 'utf8'));
    // Include a subset of locales' translated strings
    let phetStrings = stringMap;
    if (!includeAllLocales) {
        phetStrings = {};
        // Go through all of the potential fallback locales, and include the strings for each of them
        const requiredLocales = [
            // duplicates OK
            locale,
            ...fullLocaleData[locale].fallbackLocales || [],
            ChipperConstants.FALLBACK_LOCALE
        ];
        for (const locale of requiredLocales){
            phetStrings[locale] = stringMap[locale];
        }
    }
    return ChipperStringUtils.replacePlaceholders(grunt.file.read('../chipper/templates/chipper-initialization.js'), {
        PHET_PROJECT: repo,
        PHET_VERSION: version,
        PHET_BUILD_TIMESTAMP: timestamp,
        PHET_BRAND: brand,
        PHET_LOCALE: locale,
        PHET_LOCALE_DATA: JSON.stringify(localeData),
        PHET_DEPENDENCIES: JSON.stringify(dependencies, null, 2),
        // If it's a debug build, don't encode the strings, so that they are easier to inspect
        PHET_STRINGS: isDebugBuild || !encodeStringMap ? JSON.stringify(phetStrings, null, isDebugBuild ? 2 : '') : stringEncoding.encodeStringMapToJS(phetStrings),
        PHET_BEFORE_STRINGS: profileFileSize ? 'console.log("START_STRINGS");' : '',
        PHET_AFTER_STRINGS: profileFileSize ? 'console.log("END_STRINGS");' : '',
        PHET_STRING_METADATA: JSON.stringify(stringMetadata, null, isDebugBuild ? 2 : ''),
        PHET_IS_DEBUG_BUILD: !!isDebugBuild,
        PHET_ALLOW_LOCALE_SWITCHING: !!allowLocaleSwitching,
        PHET_PACKAGE_OBJECT: JSON.stringify(packageObject),
        IE_DETECTION_SCRIPT: transpileForBuild(grunt.file.read('../chipper/js/browser/ie-detection.js'), true)
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzL2dydW50L2dldEluaXRpYWxpemF0aW9uU2NyaXB0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIEZpbGxzIGluIHZhbHVlcyBmb3IgdGhlIGNoaXBwZXIgaW5pdGlhbGl6YXRpb24gc2NyaXB0IHNjcmlwdC5cbiAqXG4gKiBOT1RFOiBUaGlzIHNob3VsZCBub3QgYmUgbWluaWZpZWQhIEl0IGNvbnRhaW5zIGxpY2Vuc2VzIHRoYXQgc2hvdWxkIGJlIGh1bWFuIHJlYWRhYmxlIGFzIHdlbGwgYXMgaW1wb3J0YW50IGZvcm1hdHRpbmdcbiAqIGZvciByb3NldHRhIHRyYW5zbGF0aW9uLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqL1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGdydW50IGZyb20gJy4uLy4uLy4uL3BlcmVubmlhbC1hbGlhcy9qcy9ucG0tZGVwZW5kZW5jaWVzL2dydW50LmpzJztcbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xuaW1wb3J0IENoaXBwZXJDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0NoaXBwZXJDb25zdGFudHMuanMnO1xuaW1wb3J0IENoaXBwZXJTdHJpbmdVdGlscyBmcm9tICcuLi9jb21tb24vQ2hpcHBlclN0cmluZ1V0aWxzLmpzJztcbmltcG9ydCBzdHJpbmdFbmNvZGluZyBmcm9tICcuLi9jb21tb24vc3RyaW5nRW5jb2RpbmcuanMnO1xuaW1wb3J0IHRyYW5zcGlsZUZvckJ1aWxkIGZyb20gJy4vdHJhbnNwaWxlRm9yQnVpbGQuanMnO1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgZm9yIHRoZSBKUyBvZiB0aGUgaW5pdGlhbGl6YXRpb24gc2NyaXB0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRJbml0aWFsaXphdGlvblNjcmlwdCggY29uZmlnOiBJbnRlbnRpb25hbEFueSApOiBzdHJpbmcge1xuICBjb25zdCB7XG4gICAgYnJhbmQsIC8vIHtzdHJpbmd9LCBlLmcuICdwaGV0JywgJ3BoZXQtaW8nXG4gICAgcmVwbywgLy8ge3N0cmluZ31cbiAgICBsb2NhbGVEYXRhLCAvLyB7T2JqZWN0fSwgbWFwWyBsb2NhbGUgXSA9PiB7T2JqZWN0fVxuICAgIHN0cmluZ01hcCwgLy8ge09iamVjdH0sIG1hcFsgbG9jYWxlIF1bIHN0cmluZ0tleSBdID0+IHtzdHJpbmd9XG4gICAgc3RyaW5nTWV0YWRhdGEsIC8vIHtPYmplY3R9LCBtYXBbIHN0cmluZ0tleSBdID0+IHtPYmplY3R9XG4gICAgdmVyc2lvbiwgLy8ge3N0cmluZ31cbiAgICBkZXBlbmRlbmNpZXMsIC8vIHtPYmplY3R9IC0gRnJvbSBnZXREZXBlbmRlbmNpZXNcbiAgICB0aW1lc3RhbXAsIC8vIHtzdHJpbmd9XG4gICAgbG9jYWxlLCAvLyB7c3RyaW5nfVxuICAgIGluY2x1ZGVBbGxMb2NhbGVzLCAvLyB7Ym9vbGVhbn1cbiAgICBpc0RlYnVnQnVpbGQsIC8vIHtib29sZWFufVxuICAgIGFsbG93TG9jYWxlU3dpdGNoaW5nLCAvLyB7Ym9vbGVhbn1cbiAgICBlbmNvZGVTdHJpbmdNYXAsIC8vIHtib29sZWFufVxuICAgIHByb2ZpbGVGaWxlU2l6ZSwgLy8ge2Jvb2xlYW59XG4gICAgcGFja2FnZU9iamVjdFxuICB9ID0gY29uZmlnO1xuICBhc3NlcnQoIHN0cmluZ01hcCwgJ1JlcXVpcmVzIHN0cmluZ01hcCcgKTtcbiAgYXNzZXJ0KCBkZXBlbmRlbmNpZXMsICdSZXF1aXJlcyBkZXBlbmRlbmNpZXMnICk7XG5cbiAgLy8gTG9hZCBsb2NhbGVEYXRhXG4gIGNvbnN0IGZ1bGxMb2NhbGVEYXRhID0gSlNPTi5wYXJzZSggZnMucmVhZEZpbGVTeW5jKCAnLi4vYmFiZWwvbG9jYWxlRGF0YS5qc29uJywgJ3V0ZjgnICkgKTtcblxuICAvLyBJbmNsdWRlIGEgc3Vic2V0IG9mIGxvY2FsZXMnIHRyYW5zbGF0ZWQgc3RyaW5nc1xuICBsZXQgcGhldFN0cmluZ3MgPSBzdHJpbmdNYXA7XG4gIGlmICggIWluY2x1ZGVBbGxMb2NhbGVzICkge1xuICAgIHBoZXRTdHJpbmdzID0ge307XG5cbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBvZiB0aGUgcG90ZW50aWFsIGZhbGxiYWNrIGxvY2FsZXMsIGFuZCBpbmNsdWRlIHRoZSBzdHJpbmdzIGZvciBlYWNoIG9mIHRoZW1cbiAgICBjb25zdCByZXF1aXJlZExvY2FsZXMgPSBbXG4gICAgICAvLyBkdXBsaWNhdGVzIE9LXG4gICAgICBsb2NhbGUsXG4gICAgICAuLi4oIGZ1bGxMb2NhbGVEYXRhWyBsb2NhbGUgXS5mYWxsYmFja0xvY2FsZXMgfHwgW10gKSxcbiAgICAgIENoaXBwZXJDb25zdGFudHMuRkFMTEJBQ0tfTE9DQUxFXG4gICAgXTtcblxuICAgIGZvciAoIGNvbnN0IGxvY2FsZSBvZiByZXF1aXJlZExvY2FsZXMgKSB7XG4gICAgICBwaGV0U3RyaW5nc1sgbG9jYWxlIF0gPSBzdHJpbmdNYXBbIGxvY2FsZSBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBDaGlwcGVyU3RyaW5nVXRpbHMucmVwbGFjZVBsYWNlaG9sZGVycyggZ3J1bnQuZmlsZS5yZWFkKCAnLi4vY2hpcHBlci90ZW1wbGF0ZXMvY2hpcHBlci1pbml0aWFsaXphdGlvbi5qcycgKSwge1xuICAgIFBIRVRfUFJPSkVDVDogcmVwbyxcbiAgICBQSEVUX1ZFUlNJT046IHZlcnNpb24sXG4gICAgUEhFVF9CVUlMRF9USU1FU1RBTVA6IHRpbWVzdGFtcCxcbiAgICBQSEVUX0JSQU5EOiBicmFuZCxcbiAgICBQSEVUX0xPQ0FMRTogbG9jYWxlLFxuICAgIFBIRVRfTE9DQUxFX0RBVEE6IEpTT04uc3RyaW5naWZ5KCBsb2NhbGVEYXRhICksXG4gICAgUEhFVF9ERVBFTkRFTkNJRVM6IEpTT04uc3RyaW5naWZ5KCBkZXBlbmRlbmNpZXMsIG51bGwsIDIgKSxcbiAgICAvLyBJZiBpdCdzIGEgZGVidWcgYnVpbGQsIGRvbid0IGVuY29kZSB0aGUgc3RyaW5ncywgc28gdGhhdCB0aGV5IGFyZSBlYXNpZXIgdG8gaW5zcGVjdFxuICAgIFBIRVRfU1RSSU5HUzogKCBpc0RlYnVnQnVpbGQgfHwgIWVuY29kZVN0cmluZ01hcCApID8gSlNPTi5zdHJpbmdpZnkoIHBoZXRTdHJpbmdzLCBudWxsLCBpc0RlYnVnQnVpbGQgPyAyIDogJycgKSA6IHN0cmluZ0VuY29kaW5nLmVuY29kZVN0cmluZ01hcFRvSlMoIHBoZXRTdHJpbmdzICksXG4gICAgUEhFVF9CRUZPUkVfU1RSSU5HUzogcHJvZmlsZUZpbGVTaXplID8gJ2NvbnNvbGUubG9nKFwiU1RBUlRfU1RSSU5HU1wiKTsnIDogJycsXG4gICAgUEhFVF9BRlRFUl9TVFJJTkdTOiBwcm9maWxlRmlsZVNpemUgPyAnY29uc29sZS5sb2coXCJFTkRfU1RSSU5HU1wiKTsnIDogJycsXG4gICAgUEhFVF9TVFJJTkdfTUVUQURBVEE6IEpTT04uc3RyaW5naWZ5KCBzdHJpbmdNZXRhZGF0YSwgbnVsbCwgaXNEZWJ1Z0J1aWxkID8gMiA6ICcnICksXG4gICAgUEhFVF9JU19ERUJVR19CVUlMRDogISFpc0RlYnVnQnVpbGQsXG4gICAgUEhFVF9BTExPV19MT0NBTEVfU1dJVENISU5HOiAhIWFsbG93TG9jYWxlU3dpdGNoaW5nLFxuICAgIFBIRVRfUEFDS0FHRV9PQkpFQ1Q6IEpTT04uc3RyaW5naWZ5KCBwYWNrYWdlT2JqZWN0ICksXG4gICAgSUVfREVURUNUSU9OX1NDUklQVDogdHJhbnNwaWxlRm9yQnVpbGQoIGdydW50LmZpbGUucmVhZCggJy4uL2NoaXBwZXIvanMvYnJvd3Nlci9pZS1kZXRlY3Rpb24uanMnICksIHRydWUgKVxuICB9ICk7XG59Il0sIm5hbWVzIjpbImFzc2VydCIsImZzIiwiZ3J1bnQiLCJDaGlwcGVyQ29uc3RhbnRzIiwiQ2hpcHBlclN0cmluZ1V0aWxzIiwic3RyaW5nRW5jb2RpbmciLCJ0cmFuc3BpbGVGb3JCdWlsZCIsImdldEluaXRpYWxpemF0aW9uU2NyaXB0IiwiY29uZmlnIiwiYnJhbmQiLCJyZXBvIiwibG9jYWxlRGF0YSIsInN0cmluZ01hcCIsInN0cmluZ01ldGFkYXRhIiwidmVyc2lvbiIsImRlcGVuZGVuY2llcyIsInRpbWVzdGFtcCIsImxvY2FsZSIsImluY2x1ZGVBbGxMb2NhbGVzIiwiaXNEZWJ1Z0J1aWxkIiwiYWxsb3dMb2NhbGVTd2l0Y2hpbmciLCJlbmNvZGVTdHJpbmdNYXAiLCJwcm9maWxlRmlsZVNpemUiLCJwYWNrYWdlT2JqZWN0IiwiZnVsbExvY2FsZURhdGEiLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJwaGV0U3RyaW5ncyIsInJlcXVpcmVkTG9jYWxlcyIsImZhbGxiYWNrTG9jYWxlcyIsIkZBTExCQUNLX0xPQ0FMRSIsInJlcGxhY2VQbGFjZWhvbGRlcnMiLCJmaWxlIiwicmVhZCIsIlBIRVRfUFJPSkVDVCIsIlBIRVRfVkVSU0lPTiIsIlBIRVRfQlVJTERfVElNRVNUQU1QIiwiUEhFVF9CUkFORCIsIlBIRVRfTE9DQUxFIiwiUEhFVF9MT0NBTEVfREFUQSIsInN0cmluZ2lmeSIsIlBIRVRfREVQRU5ERU5DSUVTIiwiUEhFVF9TVFJJTkdTIiwiZW5jb2RlU3RyaW5nTWFwVG9KUyIsIlBIRVRfQkVGT1JFX1NUUklOR1MiLCJQSEVUX0FGVEVSX1NUUklOR1MiLCJQSEVUX1NUUklOR19NRVRBREFUQSIsIlBIRVRfSVNfREVCVUdfQlVJTEQiLCJQSEVUX0FMTE9XX0xPQ0FMRV9TV0lUQ0hJTkciLCJQSEVUX1BBQ0tBR0VfT0JKRUNUIiwiSUVfREVURUNUSU9OX1NDUklQVCJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7Ozs7O0NBT0MsR0FFRCxPQUFPQSxZQUFZLFNBQVM7QUFDNUIsT0FBT0MsUUFBUSxLQUFLO0FBQ3BCLE9BQU9DLFdBQVcsd0RBQXdEO0FBRTFFLE9BQU9DLHNCQUFzQixnQ0FBZ0M7QUFDN0QsT0FBT0Msd0JBQXdCLGtDQUFrQztBQUNqRSxPQUFPQyxvQkFBb0IsOEJBQThCO0FBQ3pELE9BQU9DLHVCQUF1Qix5QkFBeUI7QUFFdkQ7O0NBRUMsR0FDRCxlQUFlLFNBQVNDLHdCQUF5QkMsTUFBc0I7SUFDckUsTUFBTSxFQUNKQyxLQUFLLEVBQ0xDLElBQUksRUFDSkMsVUFBVSxFQUNWQyxTQUFTLEVBQ1RDLGNBQWMsRUFDZEMsT0FBTyxFQUNQQyxZQUFZLEVBQ1pDLFNBQVMsRUFDVEMsTUFBTSxFQUNOQyxpQkFBaUIsRUFDakJDLFlBQVksRUFDWkMsb0JBQW9CLEVBQ3BCQyxlQUFlLEVBQ2ZDLGVBQWUsRUFDZkMsYUFBYSxFQUNkLEdBQUdmO0lBQ0pSLE9BQVFZLFdBQVc7SUFDbkJaLE9BQVFlLGNBQWM7SUFFdEIsa0JBQWtCO0lBQ2xCLE1BQU1TLGlCQUFpQkMsS0FBS0MsS0FBSyxDQUFFekIsR0FBRzBCLFlBQVksQ0FBRSw0QkFBNEI7SUFFaEYsa0RBQWtEO0lBQ2xELElBQUlDLGNBQWNoQjtJQUNsQixJQUFLLENBQUNNLG1CQUFvQjtRQUN4QlUsY0FBYyxDQUFDO1FBRWYsNkZBQTZGO1FBQzdGLE1BQU1DLGtCQUFrQjtZQUN0QixnQkFBZ0I7WUFDaEJaO2VBQ0tPLGNBQWMsQ0FBRVAsT0FBUSxDQUFDYSxlQUFlLElBQUksRUFBRTtZQUNuRDNCLGlCQUFpQjRCLGVBQWU7U0FDakM7UUFFRCxLQUFNLE1BQU1kLFVBQVVZLGdCQUFrQjtZQUN0Q0QsV0FBVyxDQUFFWCxPQUFRLEdBQUdMLFNBQVMsQ0FBRUssT0FBUTtRQUM3QztJQUNGO0lBRUEsT0FBT2IsbUJBQW1CNEIsbUJBQW1CLENBQUU5QixNQUFNK0IsSUFBSSxDQUFDQyxJQUFJLENBQUUsbURBQW9EO1FBQ2xIQyxjQUFjekI7UUFDZDBCLGNBQWN0QjtRQUNkdUIsc0JBQXNCckI7UUFDdEJzQixZQUFZN0I7UUFDWjhCLGFBQWF0QjtRQUNidUIsa0JBQWtCZixLQUFLZ0IsU0FBUyxDQUFFOUI7UUFDbEMrQixtQkFBbUJqQixLQUFLZ0IsU0FBUyxDQUFFMUIsY0FBYyxNQUFNO1FBQ3ZELHNGQUFzRjtRQUN0RjRCLGNBQWMsQUFBRXhCLGdCQUFnQixDQUFDRSxrQkFBb0JJLEtBQUtnQixTQUFTLENBQUViLGFBQWEsTUFBTVQsZUFBZSxJQUFJLE1BQU9kLGVBQWV1QyxtQkFBbUIsQ0FBRWhCO1FBQ3RKaUIscUJBQXFCdkIsa0JBQWtCLGtDQUFrQztRQUN6RXdCLG9CQUFvQnhCLGtCQUFrQixnQ0FBZ0M7UUFDdEV5QixzQkFBc0J0QixLQUFLZ0IsU0FBUyxDQUFFNUIsZ0JBQWdCLE1BQU1NLGVBQWUsSUFBSTtRQUMvRTZCLHFCQUFxQixDQUFDLENBQUM3QjtRQUN2QjhCLDZCQUE2QixDQUFDLENBQUM3QjtRQUMvQjhCLHFCQUFxQnpCLEtBQUtnQixTQUFTLENBQUVsQjtRQUNyQzRCLHFCQUFxQjdDLGtCQUFtQkosTUFBTStCLElBQUksQ0FBQ0MsSUFBSSxDQUFFLDBDQUEyQztJQUN0RztBQUNGIn0=