// Copyright 2016-2024, University of Colorado Boulder
import fixEOL from '../../../perennial-alias/js/common/fixEOL.js';
import grunt from '../../../perennial-alias/js/npm-dependencies/grunt.js';
import ChipperConstants from '../common/ChipperConstants.js';
import ChipperStringUtils from '../common/ChipperStringUtils.js';
import getTitleStringKey from './getTitleStringKey.js';
/**
 * From the a11y view template file, fill in the templated values and return the html as a string.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @returns - the html string, filled in from the template.
 */ export default function getA11yViewHTMLFromTemplate(repo) {
    let html = grunt.file.read('../chipper/templates/sim-a11y-view.html'); // the template file
    const englishStringsString = grunt.file.read(`../${repo}/${repo}-strings_en.json`); // the english strings file
    const englishStringsJSON = JSON.parse(englishStringsString);
    const englishSimTitle = englishStringsJSON[getTitleStringKey(repo).split('/')[1]].value;
    // Replace placeholders in the template.
    html = ChipperStringUtils.replaceAll(html, '{{PHET_SIM_TITLE}}', englishSimTitle);
    html = ChipperStringUtils.replaceAll(html, '{{PHET_SIM_URL}}', `${repo}_${ChipperConstants.FALLBACK_LOCALE}.html`);
    html = ChipperStringUtils.replaceAll(html, '{{PHET_REPOSITORY}}', repo);
    // Remove to-dos so they don't propagate to all repo copies
    html = html.replace(/^.*\/\/[\s]?TODO.*\r?\n/mg, '');
    return fixEOL(html);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzL2dydW50L2dldEExMXlWaWV3SFRNTEZyb21UZW1wbGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuaW1wb3J0IGZpeEVPTCBmcm9tICcuLi8uLi8uLi9wZXJlbm5pYWwtYWxpYXMvanMvY29tbW9uL2ZpeEVPTC5qcyc7XG5pbXBvcnQgZ3J1bnQgZnJvbSAnLi4vLi4vLi4vcGVyZW5uaWFsLWFsaWFzL2pzL25wbS1kZXBlbmRlbmNpZXMvZ3J1bnQuanMnO1xuaW1wb3J0IENoaXBwZXJDb25zdGFudHMgZnJvbSAnLi4vY29tbW9uL0NoaXBwZXJDb25zdGFudHMuanMnO1xuaW1wb3J0IENoaXBwZXJTdHJpbmdVdGlscyBmcm9tICcuLi9jb21tb24vQ2hpcHBlclN0cmluZ1V0aWxzLmpzJztcbmltcG9ydCBnZXRUaXRsZVN0cmluZ0tleSBmcm9tICcuL2dldFRpdGxlU3RyaW5nS2V5LmpzJztcblxuLyoqXG4gKiBGcm9tIHRoZSBhMTF5IHZpZXcgdGVtcGxhdGUgZmlsZSwgZmlsbCBpbiB0aGUgdGVtcGxhdGVkIHZhbHVlcyBhbmQgcmV0dXJuIHRoZSBodG1sIGFzIGEgc3RyaW5nLlxuICpcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEByZXR1cm5zIC0gdGhlIGh0bWwgc3RyaW5nLCBmaWxsZWQgaW4gZnJvbSB0aGUgdGVtcGxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEExMXlWaWV3SFRNTEZyb21UZW1wbGF0ZSggcmVwbzogc3RyaW5nICk6IHN0cmluZyB7XG5cbiAgbGV0IGh0bWwgPSBncnVudC5maWxlLnJlYWQoICcuLi9jaGlwcGVyL3RlbXBsYXRlcy9zaW0tYTExeS12aWV3Lmh0bWwnICk7IC8vIHRoZSB0ZW1wbGF0ZSBmaWxlXG5cbiAgY29uc3QgZW5nbGlzaFN0cmluZ3NTdHJpbmcgPSBncnVudC5maWxlLnJlYWQoIGAuLi8ke3JlcG99LyR7cmVwb30tc3RyaW5nc19lbi5qc29uYCApOyAvLyB0aGUgZW5nbGlzaCBzdHJpbmdzIGZpbGVcbiAgY29uc3QgZW5nbGlzaFN0cmluZ3NKU09OID0gSlNPTi5wYXJzZSggZW5nbGlzaFN0cmluZ3NTdHJpbmcgKTtcbiAgY29uc3QgZW5nbGlzaFNpbVRpdGxlID0gZW5nbGlzaFN0cmluZ3NKU09OWyBnZXRUaXRsZVN0cmluZ0tleSggcmVwbyApLnNwbGl0KCAnLycgKVsgMSBdIF0udmFsdWU7XG5cbiAgLy8gUmVwbGFjZSBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlLlxuICBodG1sID0gQ2hpcHBlclN0cmluZ1V0aWxzLnJlcGxhY2VBbGwoIGh0bWwsICd7e1BIRVRfU0lNX1RJVExFfX0nLCBlbmdsaXNoU2ltVGl0bGUgKTtcbiAgaHRtbCA9IENoaXBwZXJTdHJpbmdVdGlscy5yZXBsYWNlQWxsKCBodG1sLCAne3tQSEVUX1NJTV9VUkx9fScsIGAke3JlcG99XyR7Q2hpcHBlckNvbnN0YW50cy5GQUxMQkFDS19MT0NBTEV9Lmh0bWxgICk7XG4gIGh0bWwgPSBDaGlwcGVyU3RyaW5nVXRpbHMucmVwbGFjZUFsbCggaHRtbCwgJ3t7UEhFVF9SRVBPU0lUT1JZfX0nLCByZXBvICk7XG5cbiAgLy8gUmVtb3ZlIHRvLWRvcyBzbyB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBhbGwgcmVwbyBjb3BpZXNcbiAgaHRtbCA9IGh0bWwucmVwbGFjZSggL14uKlxcL1xcL1tcXHNdP1RPRE8uKlxccj9cXG4vbWcsICcnICk7XG5cbiAgcmV0dXJuIGZpeEVPTCggaHRtbCApO1xufSJdLCJuYW1lcyI6WyJmaXhFT0wiLCJncnVudCIsIkNoaXBwZXJDb25zdGFudHMiLCJDaGlwcGVyU3RyaW5nVXRpbHMiLCJnZXRUaXRsZVN0cmluZ0tleSIsImdldEExMXlWaWV3SFRNTEZyb21UZW1wbGF0ZSIsInJlcG8iLCJodG1sIiwiZmlsZSIsInJlYWQiLCJlbmdsaXNoU3RyaW5nc1N0cmluZyIsImVuZ2xpc2hTdHJpbmdzSlNPTiIsIkpTT04iLCJwYXJzZSIsImVuZ2xpc2hTaW1UaXRsZSIsInNwbGl0IiwidmFsdWUiLCJyZXBsYWNlQWxsIiwiRkFMTEJBQ0tfTE9DQUxFIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXRELE9BQU9BLFlBQVksK0NBQStDO0FBQ2xFLE9BQU9DLFdBQVcsd0RBQXdEO0FBQzFFLE9BQU9DLHNCQUFzQixnQ0FBZ0M7QUFDN0QsT0FBT0Msd0JBQXdCLGtDQUFrQztBQUNqRSxPQUFPQyx1QkFBdUIseUJBQXlCO0FBRXZEOzs7OztDQUtDLEdBQ0QsZUFBZSxTQUFTQyw0QkFBNkJDLElBQVk7SUFFL0QsSUFBSUMsT0FBT04sTUFBTU8sSUFBSSxDQUFDQyxJQUFJLENBQUUsNENBQTZDLG9CQUFvQjtJQUU3RixNQUFNQyx1QkFBdUJULE1BQU1PLElBQUksQ0FBQ0MsSUFBSSxDQUFFLENBQUMsR0FBRyxFQUFFSCxLQUFLLENBQUMsRUFBRUEsS0FBSyxnQkFBZ0IsQ0FBQyxHQUFJLDJCQUEyQjtJQUNqSCxNQUFNSyxxQkFBcUJDLEtBQUtDLEtBQUssQ0FBRUg7SUFDdkMsTUFBTUksa0JBQWtCSCxrQkFBa0IsQ0FBRVAsa0JBQW1CRSxNQUFPUyxLQUFLLENBQUUsSUFBSyxDQUFFLEVBQUcsQ0FBRSxDQUFDQyxLQUFLO0lBRS9GLHdDQUF3QztJQUN4Q1QsT0FBT0osbUJBQW1CYyxVQUFVLENBQUVWLE1BQU0sc0JBQXNCTztJQUNsRVAsT0FBT0osbUJBQW1CYyxVQUFVLENBQUVWLE1BQU0sb0JBQW9CLEdBQUdELEtBQUssQ0FBQyxFQUFFSixpQkFBaUJnQixlQUFlLENBQUMsS0FBSyxDQUFDO0lBQ2xIWCxPQUFPSixtQkFBbUJjLFVBQVUsQ0FBRVYsTUFBTSx1QkFBdUJEO0lBRW5FLDJEQUEyRDtJQUMzREMsT0FBT0EsS0FBS1ksT0FBTyxDQUFFLDZCQUE2QjtJQUVsRCxPQUFPbkIsT0FBUU87QUFDakIifQ==