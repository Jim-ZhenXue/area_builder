// Copyright 2015-2024, University of Colorado Boulder
/**
 * This function returns an object literal that describes the third-party libraries that are included in the html deliverable.
 * License info is read from sherpa/lib/license.json, and the format of the object literal is similar to that syntax.
 *
 * See getLicenseEntry.js for a description & syntax of the license entries
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */ import assert from 'assert';
import { readFileSync } from 'fs';
import _ from 'lodash';
import grunt from '../../../perennial-alias/js/npm-dependencies/grunt.js';
import getLicenseKeys from './getLicenseKeys.js';
const THIRD_PARTY_LICENSES_FILENAME = '../sherpa/lib/license.json'; // contains third-party license info
const LICENSES_DIRECTORY = '../sherpa/licenses/'; // contains third-party licenses themselves.
export default function getThirdPartyLibEntries(repo, brand) {
    // Read license info
    const licenseInfo = JSON.parse(readFileSync(THIRD_PARTY_LICENSES_FILENAME, 'utf8'));
    let licenseKeys = getLicenseKeys(repo, brand);
    // Add all dependencies. Duplicates will be removed later.
    for(let i = 0; i < licenseKeys.length; i++){
        const license = licenseInfo[licenseKeys[i]];
        assert(license, `${THIRD_PARTY_LICENSES_FILENAME}: no entry for key = ${licenseKeys[i]}`);
        const dependencies = license.dependencies;
        if (typeof dependencies === 'object') {
            licenseKeys = licenseKeys.concat(dependencies);
        }
    }
    // Sort keys and remove duplicates
    licenseKeys = _.uniq(_.sortBy(licenseKeys, (key)=>key.toUpperCase()));
    grunt.log.verbose.writeln(`licenseKeys = ${licenseKeys.toString()}`);
    // Combine all licenses into 1 object literal
    const libEntries = {};
    licenseKeys.forEach((key)=>{
        const license = licenseInfo[key];
        // verify required keys
        assert(license, `${THIRD_PARTY_LICENSES_FILENAME}: no entry for key = ${key}`);
        assert(license.text, `${THIRD_PARTY_LICENSES_FILENAME}: no text field for key = ${key}`);
        assert(license.license, `${THIRD_PARTY_LICENSES_FILENAME}: no license field for key = ${key}`);
        assert(license.projectURL, `${THIRD_PARTY_LICENSES_FILENAME}: no projectURL field for key = ${key}`);
        assert(license.notes, `${THIRD_PARTY_LICENSES_FILENAME}: no notes field for key = ${key}`);
        // read the license file
        const licenseText = grunt.file.read(`${LICENSES_DIRECTORY + key}.txt`);
        license.licenseText = licenseText.split(/\r?\n/);
        libEntries[key] = license;
    });
    return libEntries;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzL2dydW50L2dldFRoaXJkUGFydHlMaWJFbnRyaWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBvYmplY3QgbGl0ZXJhbCB0aGF0IGRlc2NyaWJlcyB0aGUgdGhpcmQtcGFydHkgbGlicmFyaWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIHRoZSBodG1sIGRlbGl2ZXJhYmxlLlxuICogTGljZW5zZSBpbmZvIGlzIHJlYWQgZnJvbSBzaGVycGEvbGliL2xpY2Vuc2UuanNvbiwgYW5kIHRoZSBmb3JtYXQgb2YgdGhlIG9iamVjdCBsaXRlcmFsIGlzIHNpbWlsYXIgdG8gdGhhdCBzeW50YXguXG4gKlxuICogU2VlIGdldExpY2Vuc2VFbnRyeS5qcyBmb3IgYSBkZXNjcmlwdGlvbiAmIHN5bnRheCBvZiB0aGUgbGljZW5zZSBlbnRyaWVzXG4gKlxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBncnVudCBmcm9tICcuLi8uLi8uLi9wZXJlbm5pYWwtYWxpYXMvanMvbnBtLWRlcGVuZGVuY2llcy9ncnVudC5qcyc7XG5pbXBvcnQgZ2V0TGljZW5zZUtleXMgZnJvbSAnLi9nZXRMaWNlbnNlS2V5cy5qcyc7XG5cbmNvbnN0IFRISVJEX1BBUlRZX0xJQ0VOU0VTX0ZJTEVOQU1FID0gJy4uL3NoZXJwYS9saWIvbGljZW5zZS5qc29uJzsgLy8gY29udGFpbnMgdGhpcmQtcGFydHkgbGljZW5zZSBpbmZvXG5jb25zdCBMSUNFTlNFU19ESVJFQ1RPUlkgPSAnLi4vc2hlcnBhL2xpY2Vuc2VzLyc7IC8vIGNvbnRhaW5zIHRoaXJkLXBhcnR5IGxpY2Vuc2VzIHRoZW1zZWx2ZXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoaXJkUGFydHlMaWJFbnRyaWVzKCByZXBvOiBzdHJpbmcsIGJyYW5kOiBzdHJpbmcgKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG5cbiAgLy8gUmVhZCBsaWNlbnNlIGluZm9cbiAgY29uc3QgbGljZW5zZUluZm8gPSBKU09OLnBhcnNlKCByZWFkRmlsZVN5bmMoIFRISVJEX1BBUlRZX0xJQ0VOU0VTX0ZJTEVOQU1FLCAndXRmOCcgKSApO1xuXG4gIGxldCBsaWNlbnNlS2V5cyA9IGdldExpY2Vuc2VLZXlzKCByZXBvLCBicmFuZCApO1xuXG4gIC8vIEFkZCBhbGwgZGVwZW5kZW5jaWVzLiBEdXBsaWNhdGVzIHdpbGwgYmUgcmVtb3ZlZCBsYXRlci5cbiAgZm9yICggbGV0IGkgPSAwOyBpIDwgbGljZW5zZUtleXMubGVuZ3RoOyBpKysgKSB7XG4gICAgY29uc3QgbGljZW5zZSA9IGxpY2Vuc2VJbmZvWyBsaWNlbnNlS2V5c1sgaSBdIF07XG4gICAgYXNzZXJ0KCBsaWNlbnNlLCBgJHtUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRX06IG5vIGVudHJ5IGZvciBrZXkgPSAke2xpY2Vuc2VLZXlzWyBpIF19YCApO1xuICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGxpY2Vuc2UuZGVwZW5kZW5jaWVzO1xuICAgIGlmICggdHlwZW9mIGRlcGVuZGVuY2llcyA9PT0gJ29iamVjdCcgKSB7XG4gICAgICBsaWNlbnNlS2V5cyA9IGxpY2Vuc2VLZXlzLmNvbmNhdCggZGVwZW5kZW5jaWVzICk7XG4gICAgfVxuICB9XG5cbiAgLy8gU29ydCBrZXlzIGFuZCByZW1vdmUgZHVwbGljYXRlc1xuICBsaWNlbnNlS2V5cyA9IF8udW5pcSggXy5zb3J0QnkoIGxpY2Vuc2VLZXlzLCAoIGtleTogc3RyaW5nICkgPT4ga2V5LnRvVXBwZXJDYXNlKCkgKSApO1xuXG4gIGdydW50LmxvZy52ZXJib3NlLndyaXRlbG4oIGBsaWNlbnNlS2V5cyA9ICR7bGljZW5zZUtleXMudG9TdHJpbmcoKX1gICk7XG5cbiAgLy8gQ29tYmluZSBhbGwgbGljZW5zZXMgaW50byAxIG9iamVjdCBsaXRlcmFsXG4gIGNvbnN0IGxpYkVudHJpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgbGljZW5zZUtleXMuZm9yRWFjaCgga2V5ID0+IHtcblxuICAgIGNvbnN0IGxpY2Vuc2UgPSBsaWNlbnNlSW5mb1sga2V5IF07XG5cbiAgICAvLyB2ZXJpZnkgcmVxdWlyZWQga2V5c1xuICAgIGFzc2VydCggbGljZW5zZSwgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyBlbnRyeSBmb3Iga2V5ID0gJHtrZXl9YCApO1xuICAgIGFzc2VydCggbGljZW5zZS50ZXh0LCBgJHtUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRX06IG5vIHRleHQgZmllbGQgZm9yIGtleSA9ICR7a2V5fWAgKTtcbiAgICBhc3NlcnQoIGxpY2Vuc2UubGljZW5zZSwgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyBsaWNlbnNlIGZpZWxkIGZvciBrZXkgPSAke2tleX1gICk7XG4gICAgYXNzZXJ0KCBsaWNlbnNlLnByb2plY3RVUkwsIGAke1RISVJEX1BBUlRZX0xJQ0VOU0VTX0ZJTEVOQU1FfTogbm8gcHJvamVjdFVSTCBmaWVsZCBmb3Iga2V5ID0gJHtrZXl9YCApO1xuICAgIGFzc2VydCggbGljZW5zZS5ub3RlcywgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyBub3RlcyBmaWVsZCBmb3Iga2V5ID0gJHtrZXl9YCApO1xuXG4gICAgLy8gcmVhZCB0aGUgbGljZW5zZSBmaWxlXG4gICAgY29uc3QgbGljZW5zZVRleHQgPSBncnVudC5maWxlLnJlYWQoIGAke0xJQ0VOU0VTX0RJUkVDVE9SWSArIGtleX0udHh0YCApO1xuICAgIGxpY2Vuc2UubGljZW5zZVRleHQgPSBsaWNlbnNlVGV4dC5zcGxpdCggL1xccj9cXG4vICk7XG5cbiAgICBsaWJFbnRyaWVzWyBrZXkgXSA9IGxpY2Vuc2U7XG4gIH0gKTtcblxuICByZXR1cm4gbGliRW50cmllcztcbn0iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVhZEZpbGVTeW5jIiwiXyIsImdydW50IiwiZ2V0TGljZW5zZUtleXMiLCJUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRSIsIkxJQ0VOU0VTX0RJUkVDVE9SWSIsImdldFRoaXJkUGFydHlMaWJFbnRyaWVzIiwicmVwbyIsImJyYW5kIiwibGljZW5zZUluZm8iLCJKU09OIiwicGFyc2UiLCJsaWNlbnNlS2V5cyIsImkiLCJsZW5ndGgiLCJsaWNlbnNlIiwiZGVwZW5kZW5jaWVzIiwiY29uY2F0IiwidW5pcSIsInNvcnRCeSIsImtleSIsInRvVXBwZXJDYXNlIiwibG9nIiwidmVyYm9zZSIsIndyaXRlbG4iLCJ0b1N0cmluZyIsImxpYkVudHJpZXMiLCJmb3JFYWNoIiwidGV4dCIsInByb2plY3RVUkwiLCJub3RlcyIsImxpY2Vuc2VUZXh0IiwiZmlsZSIsInJlYWQiLCJzcGxpdCJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7Ozs7OztDQVFDLEdBRUQsT0FBT0EsWUFBWSxTQUFTO0FBQzVCLFNBQVNDLFlBQVksUUFBUSxLQUFLO0FBQ2xDLE9BQU9DLE9BQU8sU0FBUztBQUN2QixPQUFPQyxXQUFXLHdEQUF3RDtBQUMxRSxPQUFPQyxvQkFBb0Isc0JBQXNCO0FBRWpELE1BQU1DLGdDQUFnQyw4QkFBOEIsb0NBQW9DO0FBQ3hHLE1BQU1DLHFCQUFxQix1QkFBdUIsNENBQTRDO0FBRTlGLGVBQWUsU0FBU0Msd0JBQXlCQyxJQUFZLEVBQUVDLEtBQWE7SUFFMUUsb0JBQW9CO0lBQ3BCLE1BQU1DLGNBQWNDLEtBQUtDLEtBQUssQ0FBRVgsYUFBY0ksK0JBQStCO0lBRTdFLElBQUlRLGNBQWNULGVBQWdCSSxNQUFNQztJQUV4QywwREFBMEQ7SUFDMUQsSUFBTSxJQUFJSyxJQUFJLEdBQUdBLElBQUlELFlBQVlFLE1BQU0sRUFBRUQsSUFBTTtRQUM3QyxNQUFNRSxVQUFVTixXQUFXLENBQUVHLFdBQVcsQ0FBRUMsRUFBRyxDQUFFO1FBQy9DZCxPQUFRZ0IsU0FBUyxHQUFHWCw4QkFBOEIscUJBQXFCLEVBQUVRLFdBQVcsQ0FBRUMsRUFBRyxFQUFFO1FBQzNGLE1BQU1HLGVBQWVELFFBQVFDLFlBQVk7UUFDekMsSUFBSyxPQUFPQSxpQkFBaUIsVUFBVztZQUN0Q0osY0FBY0EsWUFBWUssTUFBTSxDQUFFRDtRQUNwQztJQUNGO0lBRUEsa0NBQWtDO0lBQ2xDSixjQUFjWCxFQUFFaUIsSUFBSSxDQUFFakIsRUFBRWtCLE1BQU0sQ0FBRVAsYUFBYSxDQUFFUSxNQUFpQkEsSUFBSUMsV0FBVztJQUUvRW5CLE1BQU1vQixHQUFHLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFFLENBQUMsY0FBYyxFQUFFWixZQUFZYSxRQUFRLElBQUk7SUFFcEUsNkNBQTZDO0lBQzdDLE1BQU1DLGFBQXFDLENBQUM7SUFDNUNkLFlBQVllLE9BQU8sQ0FBRVAsQ0FBQUE7UUFFbkIsTUFBTUwsVUFBVU4sV0FBVyxDQUFFVyxJQUFLO1FBRWxDLHVCQUF1QjtRQUN2QnJCLE9BQVFnQixTQUFTLEdBQUdYLDhCQUE4QixxQkFBcUIsRUFBRWdCLEtBQUs7UUFDOUVyQixPQUFRZ0IsUUFBUWEsSUFBSSxFQUFFLEdBQUd4Qiw4QkFBOEIsMEJBQTBCLEVBQUVnQixLQUFLO1FBQ3hGckIsT0FBUWdCLFFBQVFBLE9BQU8sRUFBRSxHQUFHWCw4QkFBOEIsNkJBQTZCLEVBQUVnQixLQUFLO1FBQzlGckIsT0FBUWdCLFFBQVFjLFVBQVUsRUFBRSxHQUFHekIsOEJBQThCLGdDQUFnQyxFQUFFZ0IsS0FBSztRQUNwR3JCLE9BQVFnQixRQUFRZSxLQUFLLEVBQUUsR0FBRzFCLDhCQUE4QiwyQkFBMkIsRUFBRWdCLEtBQUs7UUFFMUYsd0JBQXdCO1FBQ3hCLE1BQU1XLGNBQWM3QixNQUFNOEIsSUFBSSxDQUFDQyxJQUFJLENBQUUsR0FBRzVCLHFCQUFxQmUsSUFBSSxJQUFJLENBQUM7UUFDdEVMLFFBQVFnQixXQUFXLEdBQUdBLFlBQVlHLEtBQUssQ0FBRTtRQUV6Q1IsVUFBVSxDQUFFTixJQUFLLEdBQUdMO0lBQ3RCO0lBRUEsT0FBT1c7QUFDVCJ9