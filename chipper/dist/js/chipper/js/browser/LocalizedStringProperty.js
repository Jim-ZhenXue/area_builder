// Copyright 2023-2024, University of Colorado Boulder
/**
 * The main Property for a translated string (subtyped so we can get the stringKey, or other things in the future).
 *
 * @author Jonathan Olson <jonathan.olson>
 */ import DynamicProperty from '../../../axon/js/DynamicProperty.js';
import localeProperty from '../../../joist/js/i18n/localeProperty.js';
import TandemConstants from '../../../tandem/js/TandemConstants.js';
import StringIO from '../../../tandem/js/types/StringIO.js';
import chipper from './chipper.js';
let LocalizedStringProperty = class LocalizedStringProperty extends DynamicProperty {
    get stringKey() {
        return this.localizedString.stringKey;
    }
    constructor(localizedString, tandem, metadata){
        // Allow phetioReadOnly to be overridden
        const phetioReadOnly = metadata && typeof metadata.phetioReadOnly === 'boolean' ? metadata.phetioReadOnly : TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioReadOnly;
        // All i18n model strings are phetioFeatured by default
        const phetioFeatured = metadata && typeof metadata.phetioFeatured === 'boolean' ? metadata.phetioFeatured : true;
        // Allow phetioDocumentation to be overridden
        const phetioDocumentation = metadata && typeof metadata.phetioDocumentation === 'string' ? metadata.phetioDocumentation : TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioDocumentation;
        super(localeProperty, {
            // localeProperty isn't a Property<Property<X>>, so derive() maps the localeProperty to a Property we can use.
            derive: (locale)=>localizedString.getLocaleSpecificProperty(locale),
            // This property should update the localizedString's TinyProperty too.
            bidirectional: true,
            // phet-io issues
            phetioValueType: StringIO,
            phetioState: false,
            tandem: tandem,
            phetioFeatured: phetioFeatured,
            phetioReadOnly: phetioReadOnly,
            phetioDocumentation: phetioDocumentation
        }), this.localizedString = localizedString;
    }
};
chipper.register('LocalizedStringProperty', LocalizedStringProperty);
export default LocalizedStringProperty;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzL2Jyb3dzZXIvTG9jYWxpemVkU3RyaW5nUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogVGhlIG1haW4gUHJvcGVydHkgZm9yIGEgdHJhbnNsYXRlZCBzdHJpbmcgKHN1YnR5cGVkIHNvIHdlIGNhbiBnZXQgdGhlIHN0cmluZ0tleSwgb3Igb3RoZXIgdGhpbmdzIGluIHRoZSBmdXR1cmUpLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uPlxuICovXG5cbmltcG9ydCBEeW5hbWljUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9EeW5hbWljUHJvcGVydHkuanMnO1xuaW1wb3J0IGxvY2FsZVByb3BlcnR5LCB7IExvY2FsZSB9IGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL2kxOG4vbG9jYWxlUHJvcGVydHkuanMnO1xuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcbmltcG9ydCBUYW5kZW1Db25zdGFudHMgZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbUNvbnN0YW50cy5qcyc7XG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcbmltcG9ydCBjaGlwcGVyIGZyb20gJy4vY2hpcHBlci5qcyc7XG5pbXBvcnQgTG9jYWxpemVkU3RyaW5nIGZyb20gJy4vTG9jYWxpemVkU3RyaW5nLmpzJztcblxuY2xhc3MgTG9jYWxpemVkU3RyaW5nUHJvcGVydHkgZXh0ZW5kcyBEeW5hbWljUHJvcGVydHk8c3RyaW5nLCBzdHJpbmcsIExvY2FsZT4ge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHVibGljIHJlYWRvbmx5IGxvY2FsaXplZFN0cmluZzogTG9jYWxpemVkU3RyaW5nLCB0YW5kZW06IFRhbmRlbSwgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiApIHtcblxuICAgIC8vIEFsbG93IHBoZXRpb1JlYWRPbmx5IHRvIGJlIG92ZXJyaWRkZW5cbiAgICBjb25zdCBwaGV0aW9SZWFkT25seSA9ICggbWV0YWRhdGEgJiYgdHlwZW9mIG1ldGFkYXRhLnBoZXRpb1JlYWRPbmx5ID09PSAnYm9vbGVhbicgKSA/IG1ldGFkYXRhLnBoZXRpb1JlYWRPbmx5IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhbmRlbUNvbnN0YW50cy5QSEVUX0lPX09CSkVDVF9NRVRBREFUQV9ERUZBVUxUUy5waGV0aW9SZWFkT25seTtcblxuICAgIC8vIEFsbCBpMThuIG1vZGVsIHN0cmluZ3MgYXJlIHBoZXRpb0ZlYXR1cmVkIGJ5IGRlZmF1bHRcbiAgICBjb25zdCBwaGV0aW9GZWF0dXJlZCA9ICggbWV0YWRhdGEgJiYgdHlwZW9mIG1ldGFkYXRhLnBoZXRpb0ZlYXR1cmVkID09PSAnYm9vbGVhbicgKSA/IG1ldGFkYXRhLnBoZXRpb0ZlYXR1cmVkIDogdHJ1ZTtcblxuICAgIC8vIEFsbG93IHBoZXRpb0RvY3VtZW50YXRpb24gdG8gYmUgb3ZlcnJpZGRlblxuICAgIGNvbnN0IHBoZXRpb0RvY3VtZW50YXRpb24gPSAoIG1ldGFkYXRhICYmIHR5cGVvZiBtZXRhZGF0YS5waGV0aW9Eb2N1bWVudGF0aW9uID09PSAnc3RyaW5nJyApID8gbWV0YWRhdGEucGhldGlvRG9jdW1lbnRhdGlvbiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhbmRlbUNvbnN0YW50cy5QSEVUX0lPX09CSkVDVF9NRVRBREFUQV9ERUZBVUxUUy5waGV0aW9Eb2N1bWVudGF0aW9uO1xuXG4gICAgc3VwZXIoIGxvY2FsZVByb3BlcnR5LCB7XG5cbiAgICAgIC8vIGxvY2FsZVByb3BlcnR5IGlzbid0IGEgUHJvcGVydHk8UHJvcGVydHk8WD4+LCBzbyBkZXJpdmUoKSBtYXBzIHRoZSBsb2NhbGVQcm9wZXJ0eSB0byBhIFByb3BlcnR5IHdlIGNhbiB1c2UuXG4gICAgICBkZXJpdmU6ICggbG9jYWxlOiBMb2NhbGUgKSA9PiBsb2NhbGl6ZWRTdHJpbmcuZ2V0TG9jYWxlU3BlY2lmaWNQcm9wZXJ0eSggbG9jYWxlICksXG5cbiAgICAgIC8vIFRoaXMgcHJvcGVydHkgc2hvdWxkIHVwZGF0ZSB0aGUgbG9jYWxpemVkU3RyaW5nJ3MgVGlueVByb3BlcnR5IHRvby5cbiAgICAgIGJpZGlyZWN0aW9uYWw6IHRydWUsXG5cbiAgICAgIC8vIHBoZXQtaW8gaXNzdWVzXG4gICAgICBwaGV0aW9WYWx1ZVR5cGU6IFN0cmluZ0lPLFxuICAgICAgcGhldGlvU3RhdGU6IGZhbHNlLFxuICAgICAgdGFuZGVtOiB0YW5kZW0sXG4gICAgICBwaGV0aW9GZWF0dXJlZDogcGhldGlvRmVhdHVyZWQsXG4gICAgICBwaGV0aW9SZWFkT25seTogcGhldGlvUmVhZE9ubHksXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiBwaGV0aW9Eb2N1bWVudGF0aW9uXG4gICAgfSApO1xuICB9XG5cbiAgcHVibGljIGdldCBzdHJpbmdLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGl6ZWRTdHJpbmcuc3RyaW5nS2V5O1xuICB9XG59XG5cbmNoaXBwZXIucmVnaXN0ZXIoICdMb2NhbGl6ZWRTdHJpbmdQcm9wZXJ0eScsIExvY2FsaXplZFN0cmluZ1Byb3BlcnR5ICk7XG5cbmV4cG9ydCBkZWZhdWx0IExvY2FsaXplZFN0cmluZ1Byb3BlcnR5OyJdLCJuYW1lcyI6WyJEeW5hbWljUHJvcGVydHkiLCJsb2NhbGVQcm9wZXJ0eSIsIlRhbmRlbUNvbnN0YW50cyIsIlN0cmluZ0lPIiwiY2hpcHBlciIsIkxvY2FsaXplZFN0cmluZ1Byb3BlcnR5Iiwic3RyaW5nS2V5IiwibG9jYWxpemVkU3RyaW5nIiwidGFuZGVtIiwibWV0YWRhdGEiLCJwaGV0aW9SZWFkT25seSIsIlBIRVRfSU9fT0JKRUNUX01FVEFEQVRBX0RFRkFVTFRTIiwicGhldGlvRmVhdHVyZWQiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwiZGVyaXZlIiwibG9jYWxlIiwiZ2V0TG9jYWxlU3BlY2lmaWNQcm9wZXJ0eSIsImJpZGlyZWN0aW9uYWwiLCJwaGV0aW9WYWx1ZVR5cGUiLCJwaGV0aW9TdGF0ZSIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Q0FJQyxHQUVELE9BQU9BLHFCQUFxQixzQ0FBc0M7QUFDbEUsT0FBT0Msb0JBQWdDLDJDQUEyQztBQUVsRixPQUFPQyxxQkFBcUIsd0NBQXdDO0FBQ3BFLE9BQU9DLGNBQWMsdUNBQXVDO0FBQzVELE9BQU9DLGFBQWEsZUFBZTtBQUduQyxJQUFBLEFBQU1DLDBCQUFOLE1BQU1BLGdDQUFnQ0w7SUFpQ3BDLElBQVdNLFlBQW9CO1FBQzdCLE9BQU8sSUFBSSxDQUFDQyxlQUFlLENBQUNELFNBQVM7SUFDdkM7SUFqQ0EsWUFBb0IsQUFBZ0JDLGVBQWdDLEVBQUVDLE1BQWMsRUFBRUMsUUFBa0MsQ0FBRztRQUV6SCx3Q0FBd0M7UUFDeEMsTUFBTUMsaUJBQWlCLEFBQUVELFlBQVksT0FBT0EsU0FBU0MsY0FBYyxLQUFLLFlBQWNELFNBQVNDLGNBQWMsR0FDdEZSLGdCQUFnQlMsZ0NBQWdDLENBQUNELGNBQWM7UUFFdEYsdURBQXVEO1FBQ3ZELE1BQU1FLGlCQUFpQixBQUFFSCxZQUFZLE9BQU9BLFNBQVNHLGNBQWMsS0FBSyxZQUFjSCxTQUFTRyxjQUFjLEdBQUc7UUFFaEgsNkNBQTZDO1FBQzdDLE1BQU1DLHNCQUFzQixBQUFFSixZQUFZLE9BQU9BLFNBQVNJLG1CQUFtQixLQUFLLFdBQWFKLFNBQVNJLG1CQUFtQixHQUMvRlgsZ0JBQWdCUyxnQ0FBZ0MsQ0FBQ0UsbUJBQW1CO1FBRWhHLEtBQUssQ0FBRVosZ0JBQWdCO1lBRXJCLDhHQUE4RztZQUM5R2EsUUFBUSxDQUFFQyxTQUFvQlIsZ0JBQWdCUyx5QkFBeUIsQ0FBRUQ7WUFFekUsc0VBQXNFO1lBQ3RFRSxlQUFlO1lBRWYsaUJBQWlCO1lBQ2pCQyxpQkFBaUJmO1lBQ2pCZ0IsYUFBYTtZQUNiWCxRQUFRQTtZQUNSSSxnQkFBZ0JBO1lBQ2hCRixnQkFBZ0JBO1lBQ2hCRyxxQkFBcUJBO1FBQ3ZCLFNBNUJrQ04sa0JBQUFBO0lBNkJwQztBQUtGO0FBRUFILFFBQVFnQixRQUFRLENBQUUsMkJBQTJCZjtBQUU3QyxlQUFlQSx3QkFBd0IifQ==