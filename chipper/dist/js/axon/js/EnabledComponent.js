// Copyright 2021-2024, University of Colorado Boulder
/**
 * Base class that defines a settable Property that determines whether the Object is enabled or not. This includes
 * support for phet-io instrumentation and a variety of options to customize the enabled Property as well as how it is
 * created.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */ import merge from '../../phet-core/js/merge.js';
import { optionize3 } from '../../phet-core/js/optionize.js';
import PhetioObject from '../../tandem/js/PhetioObject.js';
import Tandem from '../../tandem/js/Tandem.js';
import axon from './axon.js';
import Disposable from './Disposable.js';
import EnabledProperty from './EnabledProperty.js';
// constants
const DEFAULT_OPTIONS = {
    enabledProperty: null,
    enabled: true,
    enabledPropertyOptions: null,
    phetioEnabledPropertyInstrumented: true,
    tandem: PhetioObject.DEFAULT_OPTIONS.tandem
};
let EnabledComponent = class EnabledComponent extends Disposable {
    setEnabled(enabled) {
        assert && assert(this.enabledProperty.isSettable(), 'cannot set enabledProperty');
        this.enabledProperty.value = enabled;
    }
    set enabled(value) {
        this.setEnabled(value);
    }
    get enabled() {
        return this.isEnabled();
    }
    isEnabled() {
        return this.enabledProperty.value;
    }
    dispose() {
        this.disposeEnabledComponent();
        super.dispose();
    }
    constructor(providedOptions){
        const options = optionize3()({}, DEFAULT_OPTIONS, providedOptions);
        const ownsEnabledProperty = !options.enabledProperty;
        assert && options.enabledPropertyOptions && assert(!(!options.phetioEnabledPropertyInstrumented && options.enabledPropertyOptions.tandem), 'incompatible options. Cannot specify phetioEnabledPropertyInstrumented opt out and a Tandem via enabledPropertyOptions.');
        super(options);
        // @ts-expect-error There is no way without a plethora of parameterized types to convey if this enabledProperty is
        // settable, so accept unsettable, and typecast to settable.
        this.enabledProperty = options.enabledProperty || new EnabledProperty(options.enabled, merge({
            tandem: options.phetioEnabledPropertyInstrumented ? options.tandem.createTandem(EnabledProperty.TANDEM_NAME) : Tandem.OPT_OUT
        }, options.enabledPropertyOptions));
        this.disposeEnabledComponent = ()=>{
            ownsEnabledProperty && this.enabledProperty.dispose();
        };
    }
};
export { EnabledComponent as default };
axon.register('EnabledComponent', EnabledComponent);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2F4b24vanMvRW5hYmxlZENvbXBvbmVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBCYXNlIGNsYXNzIHRoYXQgZGVmaW5lcyBhIHNldHRhYmxlIFByb3BlcnR5IHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBPYmplY3QgaXMgZW5hYmxlZCBvciBub3QuIFRoaXMgaW5jbHVkZXNcbiAqIHN1cHBvcnQgZm9yIHBoZXQtaW8gaW5zdHJ1bWVudGF0aW9uIGFuZCBhIHZhcmlldHkgb2Ygb3B0aW9ucyB0byBjdXN0b21pemUgdGhlIGVuYWJsZWQgUHJvcGVydHkgYXMgd2VsbCBhcyBob3cgaXQgaXNcbiAqIGNyZWF0ZWQuXG4gKlxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcbmltcG9ydCB7IG9wdGlvbml6ZTMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCBQaGV0aW9PYmplY3QsIHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcbmltcG9ydCBheG9uIGZyb20gJy4vYXhvbi5qcyc7XG5pbXBvcnQgRGlzcG9zYWJsZSwgeyBEaXNwb3NhYmxlT3B0aW9ucyB9IGZyb20gJy4vRGlzcG9zYWJsZS5qcyc7XG5pbXBvcnQgRW5hYmxlZFByb3BlcnR5LCB7IEVuYWJsZWRQcm9wZXJ0eU9wdGlvbnMgfSBmcm9tICcuL0VuYWJsZWRQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4vVFByb3BlcnR5LmpzJztcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuL1RSZWFkT25seVByb3BlcnR5LmpzJztcblxuLy8gY29uc3RhbnRzXG5jb25zdCBERUZBVUxUX09QVElPTlMgPSB7XG4gIGVuYWJsZWRQcm9wZXJ0eTogbnVsbCxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZW5hYmxlZFByb3BlcnR5T3B0aW9uczogbnVsbCxcbiAgcGhldGlvRW5hYmxlZFByb3BlcnR5SW5zdHJ1bWVudGVkOiB0cnVlLFxuICB0YW5kZW06IFBoZXRpb09iamVjdC5ERUZBVUxUX09QVElPTlMudGFuZGVtXG59IGFzIGNvbnN0O1xuXG50eXBlIFNlbGZPcHRpb25zID0ge1xuXG4gIC8vIGlmIG5vdCBwcm92aWRlZCwgYSBQcm9wZXJ0eSB3aWxsIGJlIGNyZWF0ZWRcbiAgZW5hYmxlZFByb3BlcnR5PzogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4gfCBudWxsO1xuXG4gIC8vIGluaXRpYWwgdmFsdWUgb2YgZW5hYmxlZFByb3BlcnR5IGlmIHdlIGNyZWF0ZSBpdCwgaWdub3JlZCBpZiBlbmFibGVkUHJvcGVydHkgaXMgcHJvdmlkZWRcbiAgZW5hYmxlZD86IGJvb2xlYW47XG5cbiAgLy8gb3B0aW9ucyB0byBlbmFibGVkUHJvcGVydHkgaWYgd2UgY3JlYXRlIGl0LCBpZ25vcmVkIGlmIGVuYWJsZWRQcm9wZXJ0eSBpcyBwcm92aWRlZFxuICBlbmFibGVkUHJvcGVydHlPcHRpb25zPzogRW5hYmxlZFByb3BlcnR5T3B0aW9ucyB8IG51bGw7XG5cbiAgLy8gV2hldGhlciB0aGUgZGVmYXVsdC1jcmVhdGVkIGVuYWJsZWRQcm9wZXJ0eSBzaG91bGQgYmUgaW5zdHJ1bWVudGVkIGZvciBQaEVULWlPLiBJZ25vcmVkIGlmXG4gIC8vIG9wdGlvbnMuZW5hYmxlZFByb3BlcnR5IGlzIHByb3ZpZGVkLlxuICBwaGV0aW9FbmFibGVkUHJvcGVydHlJbnN0cnVtZW50ZWQ/OiBib29sZWFuO1xufSAmIFBpY2s8UGhldGlvT2JqZWN0T3B0aW9ucywgJ3RhbmRlbSc+O1xuXG5leHBvcnQgdHlwZSBFbmFibGVkQ29tcG9uZW50T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgRGlzcG9zYWJsZU9wdGlvbnM7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuYWJsZWRDb21wb25lbnQgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcblxuICBwdWJsaWMgZW5hYmxlZFByb3BlcnR5OiBUUHJvcGVydHk8Ym9vbGVhbj47XG5cbiAgcHJpdmF0ZSBkaXNwb3NlRW5hYmxlZENvbXBvbmVudDogKCkgPT4gdm9pZDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IEVuYWJsZWRDb21wb25lbnRPcHRpb25zICkge1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTM8RW5hYmxlZENvbXBvbmVudE9wdGlvbnMsIFNlbGZPcHRpb25zLCBEaXNwb3NhYmxlT3B0aW9ucz4oKSgge30sIERFRkFVTFRfT1BUSU9OUywgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICBjb25zdCBvd25zRW5hYmxlZFByb3BlcnR5ID0gIW9wdGlvbnMuZW5hYmxlZFByb3BlcnR5O1xuXG4gICAgYXNzZXJ0ICYmIG9wdGlvbnMuZW5hYmxlZFByb3BlcnR5T3B0aW9ucyAmJiBhc3NlcnQoICEoICFvcHRpb25zLnBoZXRpb0VuYWJsZWRQcm9wZXJ0eUluc3RydW1lbnRlZCAmJiBvcHRpb25zLmVuYWJsZWRQcm9wZXJ0eU9wdGlvbnMudGFuZGVtICksXG4gICAgICAnaW5jb21wYXRpYmxlIG9wdGlvbnMuIENhbm5vdCBzcGVjaWZ5IHBoZXRpb0VuYWJsZWRQcm9wZXJ0eUluc3RydW1lbnRlZCBvcHQgb3V0IGFuZCBhIFRhbmRlbSB2aWEgZW5hYmxlZFByb3BlcnR5T3B0aW9ucy4nICk7XG5cbiAgICBzdXBlciggb3B0aW9ucyApO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUaGVyZSBpcyBubyB3YXkgd2l0aG91dCBhIHBsZXRob3JhIG9mIHBhcmFtZXRlcml6ZWQgdHlwZXMgdG8gY29udmV5IGlmIHRoaXMgZW5hYmxlZFByb3BlcnR5IGlzXG4gICAgLy8gc2V0dGFibGUsIHNvIGFjY2VwdCB1bnNldHRhYmxlLCBhbmQgdHlwZWNhc3QgdG8gc2V0dGFibGUuXG4gICAgdGhpcy5lbmFibGVkUHJvcGVydHkgPSBvcHRpb25zLmVuYWJsZWRQcm9wZXJ0eSB8fCBuZXcgRW5hYmxlZFByb3BlcnR5KCBvcHRpb25zLmVuYWJsZWQsIG1lcmdlKCB7XG4gICAgICB0YW5kZW06IG9wdGlvbnMucGhldGlvRW5hYmxlZFByb3BlcnR5SW5zdHJ1bWVudGVkID8gb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCBFbmFibGVkUHJvcGVydHkuVEFOREVNX05BTUUgKSA6IFRhbmRlbS5PUFRfT1VUXG4gICAgfSwgb3B0aW9ucy5lbmFibGVkUHJvcGVydHlPcHRpb25zICkgKTtcblxuICAgIHRoaXMuZGlzcG9zZUVuYWJsZWRDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgICBvd25zRW5hYmxlZFByb3BlcnR5ICYmIHRoaXMuZW5hYmxlZFByb3BlcnR5LmRpc3Bvc2UoKTtcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRFbmFibGVkKCBlbmFibGVkOiBib29sZWFuICk6IHZvaWQge1xuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuZW5hYmxlZFByb3BlcnR5LmlzU2V0dGFibGUoKSwgJ2Nhbm5vdCBzZXQgZW5hYmxlZFByb3BlcnR5JyApO1xuICAgIHRoaXMuZW5hYmxlZFByb3BlcnR5LnZhbHVlID0gZW5hYmxlZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgZW5hYmxlZCggdmFsdWU6IGJvb2xlYW4gKSB7IHRoaXMuc2V0RW5hYmxlZCggdmFsdWUgKTsgfVxuXG4gIHB1YmxpYyBnZXQgZW5hYmxlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuaXNFbmFibGVkKCk7IH1cblxuICBwdWJsaWMgaXNFbmFibGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5lbmFibGVkUHJvcGVydHkudmFsdWU7IH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3Bvc2VFbmFibGVkQ29tcG9uZW50KCk7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG59XG5cbmF4b24ucmVnaXN0ZXIoICdFbmFibGVkQ29tcG9uZW50JywgRW5hYmxlZENvbXBvbmVudCApOyJdLCJuYW1lcyI6WyJtZXJnZSIsIm9wdGlvbml6ZTMiLCJQaGV0aW9PYmplY3QiLCJUYW5kZW0iLCJheG9uIiwiRGlzcG9zYWJsZSIsIkVuYWJsZWRQcm9wZXJ0eSIsIkRFRkFVTFRfT1BUSU9OUyIsImVuYWJsZWRQcm9wZXJ0eSIsImVuYWJsZWQiLCJlbmFibGVkUHJvcGVydHlPcHRpb25zIiwicGhldGlvRW5hYmxlZFByb3BlcnR5SW5zdHJ1bWVudGVkIiwidGFuZGVtIiwiRW5hYmxlZENvbXBvbmVudCIsInNldEVuYWJsZWQiLCJhc3NlcnQiLCJpc1NldHRhYmxlIiwidmFsdWUiLCJpc0VuYWJsZWQiLCJkaXNwb3NlIiwiZGlzcG9zZUVuYWJsZWRDb21wb25lbnQiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwib3duc0VuYWJsZWRQcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsIlRBTkRFTV9OQU1FIiwiT1BUX09VVCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Ozs7Q0FPQyxHQUVELE9BQU9BLFdBQVcsOEJBQThCO0FBQ2hELFNBQVNDLFVBQVUsUUFBUSxrQ0FBa0M7QUFDN0QsT0FBT0Msa0JBQTJDLGtDQUFrQztBQUNwRixPQUFPQyxZQUFZLDRCQUE0QjtBQUMvQyxPQUFPQyxVQUFVLFlBQVk7QUFDN0IsT0FBT0MsZ0JBQXVDLGtCQUFrQjtBQUNoRSxPQUFPQyxxQkFBaUQsdUJBQXVCO0FBSS9FLFlBQVk7QUFDWixNQUFNQyxrQkFBa0I7SUFDdEJDLGlCQUFpQjtJQUNqQkMsU0FBUztJQUNUQyx3QkFBd0I7SUFDeEJDLG1DQUFtQztJQUNuQ0MsUUFBUVYsYUFBYUssZUFBZSxDQUFDSyxNQUFNO0FBQzdDO0FBb0JlLElBQUEsQUFBTUMsbUJBQU4sTUFBTUEseUJBQXlCUjtJQTRCcENTLFdBQVlMLE9BQWdCLEVBQVM7UUFDM0NNLFVBQVVBLE9BQVEsSUFBSSxDQUFDUCxlQUFlLENBQUNRLFVBQVUsSUFBSTtRQUNyRCxJQUFJLENBQUNSLGVBQWUsQ0FBQ1MsS0FBSyxHQUFHUjtJQUMvQjtJQUVBLElBQVdBLFFBQVNRLEtBQWMsRUFBRztRQUFFLElBQUksQ0FBQ0gsVUFBVSxDQUFFRztJQUFTO0lBRWpFLElBQVdSLFVBQW1CO1FBQUUsT0FBTyxJQUFJLENBQUNTLFNBQVM7SUFBSTtJQUVsREEsWUFBcUI7UUFBRSxPQUFPLElBQUksQ0FBQ1YsZUFBZSxDQUFDUyxLQUFLO0lBQUU7SUFFakRFLFVBQWdCO1FBQzlCLElBQUksQ0FBQ0MsdUJBQXVCO1FBQzVCLEtBQUssQ0FBQ0Q7SUFDUjtJQXBDQSxZQUFvQkUsZUFBeUMsQ0FBRztRQUU5RCxNQUFNQyxVQUFVckIsYUFBdUUsQ0FBQyxHQUFHTSxpQkFBaUJjO1FBRTVHLE1BQU1FLHNCQUFzQixDQUFDRCxRQUFRZCxlQUFlO1FBRXBETyxVQUFVTyxRQUFRWixzQkFBc0IsSUFBSUssT0FBUSxDQUFHLENBQUEsQ0FBQ08sUUFBUVgsaUNBQWlDLElBQUlXLFFBQVFaLHNCQUFzQixDQUFDRSxNQUFNLEFBQUQsR0FDdkk7UUFFRixLQUFLLENBQUVVO1FBRVAsa0hBQWtIO1FBQ2xILDREQUE0RDtRQUM1RCxJQUFJLENBQUNkLGVBQWUsR0FBR2MsUUFBUWQsZUFBZSxJQUFJLElBQUlGLGdCQUFpQmdCLFFBQVFiLE9BQU8sRUFBRVQsTUFBTztZQUM3RlksUUFBUVUsUUFBUVgsaUNBQWlDLEdBQUdXLFFBQVFWLE1BQU0sQ0FBQ1ksWUFBWSxDQUFFbEIsZ0JBQWdCbUIsV0FBVyxJQUFLdEIsT0FBT3VCLE9BQU87UUFDakksR0FBR0osUUFBUVosc0JBQXNCO1FBRWpDLElBQUksQ0FBQ1UsdUJBQXVCLEdBQUc7WUFDN0JHLHVCQUF1QixJQUFJLENBQUNmLGVBQWUsQ0FBQ1csT0FBTztRQUNyRDtJQUNGO0FBaUJGO0FBM0NBLFNBQXFCTiw4QkEyQ3BCO0FBRURULEtBQUt1QixRQUFRLENBQUUsb0JBQW9CZCJ9