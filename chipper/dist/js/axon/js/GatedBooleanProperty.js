// Copyright 2024, University of Colorado Boulder
/**
 * The GatedVisibleProperty class abstracts the process of creating a "gated" visibility Property
 * designed for PhET-iO integration. This pattern comes in handy when an object's visibility is already controlled
 * within the simulation, but there is a need to grant additional visibility control to an external entity,
 * such as a studio or a PhET-iO client.
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import optionize from '../../phet-core/js/optionize.js';
import BooleanIO from '../../tandem/js/types/BooleanIO.js';
import axon from './axon.js';
import BooleanProperty from './BooleanProperty.js';
import { DerivedProperty2 } from './DerivedProperty.js';
let GatedBooleanProperty = class GatedBooleanProperty extends DerivedProperty2 {
    dispose() {
        // Remove the selfBooleanProperty from the PhET-iO registry
        this.selfBooleanProperty.dispose();
        super.dispose();
    }
    constructor(providedBooleanProperty, parentTandem, providedOptions){
        const options = optionize()({
            tandemName: 'property',
            selfTandemName: 'selfProperty',
            selfBooleanInitialValue: true,
            selfBooleanPropertyOptions: {
                phetioFeatured: true
            },
            phetioValueType: BooleanIO
        }, providedOptions);
        if (!options.tandem) {
            options.tandem = parentTandem.createTandem(options.tandemName);
        }
        if (!options.selfBooleanPropertyOptions.tandem) {
            options.selfBooleanPropertyOptions.tandem = parentTandem.createTandem(options.selfTandemName);
        }
        const selfBooleanProperty = new BooleanProperty(options.selfBooleanInitialValue, options.selfBooleanPropertyOptions);
        if (options.phetioDocumentation) {
            options.phetioDocumentation = options.phetioDocumentation.replace('{{SELF_PROPERTY_TANDEM_NAME}}', selfBooleanProperty.tandem.name);
        }
        super([
            providedBooleanProperty,
            selfBooleanProperty
        ], (providedBoolean, selfBoolean)=>providedBoolean && selfBoolean, options);
        this.selfBooleanProperty = selfBooleanProperty;
    }
};
export class GatedVisibleProperty extends GatedBooleanProperty {
    constructor(providedBooleanProperty, parentTandem, providedOptions){
        const options = optionize()({
            tandemName: 'visibleProperty',
            selfTandemName: 'selfVisibleProperty',
            phetioDocumentation: 'Whether the PhET-iO Element is visible, see {{SELF_PROPERTY_TANDEM_NAME}} for customization.',
            selfBooleanPropertyOptions: {
                phetioDocumentation: 'Provides an additional way to toggle the visibility for the PhET-iO Element.'
            }
        }, providedOptions);
        super(providedBooleanProperty, parentTandem, options);
    }
}
export class GatedEnabledProperty extends GatedBooleanProperty {
    constructor(providedBooleanProperty, parentTandem, providedOptions){
        const options = optionize()({
            tandemName: 'enabledProperty',
            selfTandemName: 'selfEnabledProperty',
            phetioDocumentation: 'Whether the PhET-iO Element is enabled, see {{SELF_PROPERTY_TANDEM_NAME}} for customization.',
            selfBooleanPropertyOptions: {
                phetioDocumentation: 'Provides an additional way to toggle enabled for the PhET-iO Element.'
            }
        }, providedOptions);
        super(providedBooleanProperty, parentTandem, options);
    }
}
export default GatedBooleanProperty;
axon.register('GatedBooleanProperty', GatedBooleanProperty);

//# sourceMappingURL=data:application/json;base64,