// Copyright 2021-2024, University of Colorado Boulder
/**
 * QUnit tests for EnabledComponent
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */ import BooleanProperty from './BooleanProperty.js';
import EnabledComponent from './EnabledComponent.js';
import Property from './Property.js';
QUnit.module('EnabledComponent');
QUnit.test('EnabledComponent into Object', (assert)=>{
    let EnabledObject = class EnabledObject extends EnabledComponent {
        constructor(options){
            super(options);
        }
    };
    const object = new EnabledObject();
    testEnabledComponent(assert, object, 'default enabledProperty created');
    object['disposeEnabledComponent']();
    assert.ok(object.enabledProperty.isDisposed, 'enabledProperty should be disposed because it was not passed in');
    const myEnabledProperty = new BooleanProperty(false);
    const passedInEnabledPropertyObject = new EnabledObject({
        enabledProperty: myEnabledProperty
    });
    testEnabledComponent(assert, object, 'passed in enabledProperty');
    assert.ok(myEnabledProperty === passedInEnabledPropertyObject.enabledProperty, 'passed in should be the same');
    passedInEnabledPropertyObject['disposeEnabledComponent']();
    assert.ok(!myEnabledProperty.isDisposed, 'do not dispose my enabledProperty!');
});
QUnit.test('EnabledComponent.isDisposable', (assert)=>{
    assert.ok(true, 'when no window.assertions');
    const object1 = new EnabledComponent({
        isDisposable: true
    });
    const object2 = new EnabledComponent();
    const object3 = new EnabledComponent({
        isDisposable: false
    });
    object1.dispose();
    object2.dispose();
    if (window.assert) {
        assert.throws(()=>object3.dispose(), 'should throw if isDisposable is false');
    }
});
/**
 * Test basic functionality for an object that uses EnabledComponent
 * assert - from QUnit
 * enabledObject - subtype of EnabledComponent
 * message - to tack onto assert messages
 */ function testEnabledComponent(assert, enabledObject, message) {
    assert.ok(enabledObject.enabledProperty instanceof Property, `${message}: enabledProperty should exist`);
    assert.ok(enabledObject.enabledProperty.value === enabledObject.enabled, `${message}: test getter`);
    enabledObject.enabled = false;
    assert.ok(!enabledObject.enabled, `${message}: test setter`);
    assert.ok(enabledObject.enabledProperty.value === enabledObject.enabled, `${message}: test getter after setting`);
    assert.ok(!enabledObject.enabledProperty.value, `${message}: test getter after setting`);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2F4b24vanMvRW5hYmxlZENvbXBvbmVudFRlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFFVbml0IHRlc3RzIGZvciBFbmFibGVkQ29tcG9uZW50XG4gKlxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxuICovXG5cbmltcG9ydCBCb29sZWFuUHJvcGVydHkgZnJvbSAnLi9Cb29sZWFuUHJvcGVydHkuanMnO1xuaW1wb3J0IEVuYWJsZWRDb21wb25lbnQsIHsgRW5hYmxlZENvbXBvbmVudE9wdGlvbnMgfSBmcm9tICcuL0VuYWJsZWRDb21wb25lbnQuanMnO1xuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4vUHJvcGVydHkuanMnO1xuXG5RVW5pdC5tb2R1bGUoICdFbmFibGVkQ29tcG9uZW50JyApO1xuXG5RVW5pdC50ZXN0KCAnRW5hYmxlZENvbXBvbmVudCBpbnRvIE9iamVjdCcsIGFzc2VydCA9PiB7XG5cbiAgY2xhc3MgRW5hYmxlZE9iamVjdCBleHRlbmRzIEVuYWJsZWRDb21wb25lbnQge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvciggb3B0aW9ucz86IEVuYWJsZWRDb21wb25lbnRPcHRpb25zICkge1xuICAgICAgc3VwZXIoIG9wdGlvbnMgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBvYmplY3QgPSBuZXcgRW5hYmxlZE9iamVjdCgpO1xuICB0ZXN0RW5hYmxlZENvbXBvbmVudCggYXNzZXJ0LCBvYmplY3QsICdkZWZhdWx0IGVuYWJsZWRQcm9wZXJ0eSBjcmVhdGVkJyApO1xuXG4gIG9iamVjdFsgJ2Rpc3Bvc2VFbmFibGVkQ29tcG9uZW50JyBdKCk7XG4gIGFzc2VydC5vayggb2JqZWN0LmVuYWJsZWRQcm9wZXJ0eS5pc0Rpc3Bvc2VkLCAnZW5hYmxlZFByb3BlcnR5IHNob3VsZCBiZSBkaXNwb3NlZCBiZWNhdXNlIGl0IHdhcyBub3QgcGFzc2VkIGluJyApO1xuXG4gIGNvbnN0IG15RW5hYmxlZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcbiAgY29uc3QgcGFzc2VkSW5FbmFibGVkUHJvcGVydHlPYmplY3QgPSBuZXcgRW5hYmxlZE9iamVjdCgge1xuICAgIGVuYWJsZWRQcm9wZXJ0eTogbXlFbmFibGVkUHJvcGVydHlcbiAgfSApO1xuICB0ZXN0RW5hYmxlZENvbXBvbmVudCggYXNzZXJ0LCBvYmplY3QsICdwYXNzZWQgaW4gZW5hYmxlZFByb3BlcnR5JyApO1xuICBhc3NlcnQub2soIG15RW5hYmxlZFByb3BlcnR5ID09PSBwYXNzZWRJbkVuYWJsZWRQcm9wZXJ0eU9iamVjdC5lbmFibGVkUHJvcGVydHksICdwYXNzZWQgaW4gc2hvdWxkIGJlIHRoZSBzYW1lJyApO1xuICBwYXNzZWRJbkVuYWJsZWRQcm9wZXJ0eU9iamVjdFsgJ2Rpc3Bvc2VFbmFibGVkQ29tcG9uZW50JyBdKCk7XG4gIGFzc2VydC5vayggIW15RW5hYmxlZFByb3BlcnR5LmlzRGlzcG9zZWQsICdkbyBub3QgZGlzcG9zZSBteSBlbmFibGVkUHJvcGVydHkhJyApO1xufSApO1xuXG5RVW5pdC50ZXN0KCAnRW5hYmxlZENvbXBvbmVudC5pc0Rpc3Bvc2FibGUnLCBhc3NlcnQgPT4ge1xuICBhc3NlcnQub2soIHRydWUsICd3aGVuIG5vIHdpbmRvdy5hc3NlcnRpb25zJyApO1xuXG4gIGNvbnN0IG9iamVjdDEgPSBuZXcgRW5hYmxlZENvbXBvbmVudCgge1xuICAgIGlzRGlzcG9zYWJsZTogdHJ1ZVxuICB9ICk7XG4gIGNvbnN0IG9iamVjdDIgPSBuZXcgRW5hYmxlZENvbXBvbmVudCgpO1xuICBjb25zdCBvYmplY3QzID0gbmV3IEVuYWJsZWRDb21wb25lbnQoIHtcbiAgICBpc0Rpc3Bvc2FibGU6IGZhbHNlXG4gIH0gKTtcblxuICBvYmplY3QxLmRpc3Bvc2UoKTtcbiAgb2JqZWN0Mi5kaXNwb3NlKCk7XG4gIGlmICggd2luZG93LmFzc2VydCApIHtcbiAgICBhc3NlcnQudGhyb3dzKCAoKSA9PiBvYmplY3QzLmRpc3Bvc2UoKSwgJ3Nob3VsZCB0aHJvdyBpZiBpc0Rpc3Bvc2FibGUgaXMgZmFsc2UnICk7XG4gIH1cbn0gKTtcblxuLyoqXG4gKiBUZXN0IGJhc2ljIGZ1bmN0aW9uYWxpdHkgZm9yIGFuIG9iamVjdCB0aGF0IHVzZXMgRW5hYmxlZENvbXBvbmVudFxuICogYXNzZXJ0IC0gZnJvbSBRVW5pdFxuICogZW5hYmxlZE9iamVjdCAtIHN1YnR5cGUgb2YgRW5hYmxlZENvbXBvbmVudFxuICogbWVzc2FnZSAtIHRvIHRhY2sgb250byBhc3NlcnQgbWVzc2FnZXNcbiAqL1xuZnVuY3Rpb24gdGVzdEVuYWJsZWRDb21wb25lbnQoIGFzc2VydDogQXNzZXJ0LCBlbmFibGVkT2JqZWN0OiBFbmFibGVkQ29tcG9uZW50LCBtZXNzYWdlOiBzdHJpbmcgKTogdm9pZCB7XG4gIGFzc2VydC5vayggZW5hYmxlZE9iamVjdC5lbmFibGVkUHJvcGVydHkgaW5zdGFuY2VvZiBQcm9wZXJ0eSwgYCR7bWVzc2FnZX06IGVuYWJsZWRQcm9wZXJ0eSBzaG91bGQgZXhpc3RgICk7XG4gIGFzc2VydC5vayggZW5hYmxlZE9iamVjdC5lbmFibGVkUHJvcGVydHkudmFsdWUgPT09IGVuYWJsZWRPYmplY3QuZW5hYmxlZCwgYCR7bWVzc2FnZX06IHRlc3QgZ2V0dGVyYCApO1xuXG4gIGVuYWJsZWRPYmplY3QuZW5hYmxlZCA9IGZhbHNlO1xuICBhc3NlcnQub2soICFlbmFibGVkT2JqZWN0LmVuYWJsZWQsIGAke21lc3NhZ2V9OiB0ZXN0IHNldHRlcmAgKTtcbiAgYXNzZXJ0Lm9rKCBlbmFibGVkT2JqZWN0LmVuYWJsZWRQcm9wZXJ0eS52YWx1ZSA9PT0gZW5hYmxlZE9iamVjdC5lbmFibGVkLCBgJHttZXNzYWdlfTogdGVzdCBnZXR0ZXIgYWZ0ZXIgc2V0dGluZ2AgKTtcbiAgYXNzZXJ0Lm9rKCAhZW5hYmxlZE9iamVjdC5lbmFibGVkUHJvcGVydHkudmFsdWUsIGAke21lc3NhZ2V9OiB0ZXN0IGdldHRlciBhZnRlciBzZXR0aW5nYCApO1xufSJdLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJFbmFibGVkQ29tcG9uZW50IiwiUHJvcGVydHkiLCJRVW5pdCIsIm1vZHVsZSIsInRlc3QiLCJhc3NlcnQiLCJFbmFibGVkT2JqZWN0Iiwib3B0aW9ucyIsIm9iamVjdCIsInRlc3RFbmFibGVkQ29tcG9uZW50Iiwib2siLCJlbmFibGVkUHJvcGVydHkiLCJpc0Rpc3Bvc2VkIiwibXlFbmFibGVkUHJvcGVydHkiLCJwYXNzZWRJbkVuYWJsZWRQcm9wZXJ0eU9iamVjdCIsIm9iamVjdDEiLCJpc0Rpc3Bvc2FibGUiLCJvYmplY3QyIiwib2JqZWN0MyIsImRpc3Bvc2UiLCJ3aW5kb3ciLCJ0aHJvd3MiLCJlbmFibGVkT2JqZWN0IiwibWVzc2FnZSIsInZhbHVlIiwiZW5hYmxlZCJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7O0NBSUMsR0FFRCxPQUFPQSxxQkFBcUIsdUJBQXVCO0FBQ25ELE9BQU9DLHNCQUFtRCx3QkFBd0I7QUFDbEYsT0FBT0MsY0FBYyxnQkFBZ0I7QUFFckNDLE1BQU1DLE1BQU0sQ0FBRTtBQUVkRCxNQUFNRSxJQUFJLENBQUUsZ0NBQWdDQyxDQUFBQTtJQUUxQyxJQUFBLEFBQU1DLGdCQUFOLE1BQU1BLHNCQUFzQk47UUFDMUIsWUFBb0JPLE9BQWlDLENBQUc7WUFDdEQsS0FBSyxDQUFFQTtRQUNUO0lBQ0Y7SUFFQSxNQUFNQyxTQUFTLElBQUlGO0lBQ25CRyxxQkFBc0JKLFFBQVFHLFFBQVE7SUFFdENBLE1BQU0sQ0FBRSwwQkFBMkI7SUFDbkNILE9BQU9LLEVBQUUsQ0FBRUYsT0FBT0csZUFBZSxDQUFDQyxVQUFVLEVBQUU7SUFFOUMsTUFBTUMsb0JBQW9CLElBQUlkLGdCQUFpQjtJQUMvQyxNQUFNZSxnQ0FBZ0MsSUFBSVIsY0FBZTtRQUN2REssaUJBQWlCRTtJQUNuQjtJQUNBSixxQkFBc0JKLFFBQVFHLFFBQVE7SUFDdENILE9BQU9LLEVBQUUsQ0FBRUcsc0JBQXNCQyw4QkFBOEJILGVBQWUsRUFBRTtJQUNoRkcsNkJBQTZCLENBQUUsMEJBQTJCO0lBQzFEVCxPQUFPSyxFQUFFLENBQUUsQ0FBQ0csa0JBQWtCRCxVQUFVLEVBQUU7QUFDNUM7QUFFQVYsTUFBTUUsSUFBSSxDQUFFLGlDQUFpQ0MsQ0FBQUE7SUFDM0NBLE9BQU9LLEVBQUUsQ0FBRSxNQUFNO0lBRWpCLE1BQU1LLFVBQVUsSUFBSWYsaUJBQWtCO1FBQ3BDZ0IsY0FBYztJQUNoQjtJQUNBLE1BQU1DLFVBQVUsSUFBSWpCO0lBQ3BCLE1BQU1rQixVQUFVLElBQUlsQixpQkFBa0I7UUFDcENnQixjQUFjO0lBQ2hCO0lBRUFELFFBQVFJLE9BQU87SUFDZkYsUUFBUUUsT0FBTztJQUNmLElBQUtDLE9BQU9mLE1BQU0sRUFBRztRQUNuQkEsT0FBT2dCLE1BQU0sQ0FBRSxJQUFNSCxRQUFRQyxPQUFPLElBQUk7SUFDMUM7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU1YscUJBQXNCSixNQUFjLEVBQUVpQixhQUErQixFQUFFQyxPQUFlO0lBQzdGbEIsT0FBT0ssRUFBRSxDQUFFWSxjQUFjWCxlQUFlLFlBQVlWLFVBQVUsR0FBR3NCLFFBQVEsOEJBQThCLENBQUM7SUFDeEdsQixPQUFPSyxFQUFFLENBQUVZLGNBQWNYLGVBQWUsQ0FBQ2EsS0FBSyxLQUFLRixjQUFjRyxPQUFPLEVBQUUsR0FBR0YsUUFBUSxhQUFhLENBQUM7SUFFbkdELGNBQWNHLE9BQU8sR0FBRztJQUN4QnBCLE9BQU9LLEVBQUUsQ0FBRSxDQUFDWSxjQUFjRyxPQUFPLEVBQUUsR0FBR0YsUUFBUSxhQUFhLENBQUM7SUFDNURsQixPQUFPSyxFQUFFLENBQUVZLGNBQWNYLGVBQWUsQ0FBQ2EsS0FBSyxLQUFLRixjQUFjRyxPQUFPLEVBQUUsR0FBR0YsUUFBUSwyQkFBMkIsQ0FBQztJQUNqSGxCLE9BQU9LLEVBQUUsQ0FBRSxDQUFDWSxjQUFjWCxlQUFlLENBQUNhLEtBQUssRUFBRSxHQUFHRCxRQUFRLDJCQUEyQixDQUFDO0FBQzFGIn0=