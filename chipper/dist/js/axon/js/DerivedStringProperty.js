// Copyright 2023-2024, University of Colorado Boulder
/**
 * DerivedStringProperty is typically used for strings that are derived from LocalizedStringProperty
 * (translatable strings, generated from the {{REPO}}-strings_en.json file via 'grunt modulify') and/or other instances
 * of DerivedStringProperty. Using this class ensures that code follows PhET-iO instrumentation standards,
 * and makes occurrences of this type of string Property easier to identify.
 *
 * Responsibilities include:
 *  - ensures that the derivation returns a string
 *  - adds proper PhET-iO metadata, with defaults that have been specified by PhET-iO design, which can be
 *    overridden where appropriate (e.g. phetioFeatured) and are not part of the public API where they should
 *    not be overridable (e.g. phetioValueType)
 *
 * Note that you can also use DerivedStringProperty for model/logic strings that are not translated. But you'll
 * need to consider whether you want to override the default of phetioFeatured: true, which was chosen as the default
 * for translated strings.
 *
 * See https://github.com/phetsims/phet-io/issues/1943
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */ import optionize from '../../phet-core/js/optionize.js';
import StringIO from '../../tandem/js/types/StringIO.js';
import axon from './axon.js';
import DerivedProperty from './DerivedProperty.js';
let DerivedStringProperty = class DerivedStringProperty extends DerivedProperty {
    constructor(dependencies, derivation, providedOptions){
        const options = optionize()({
            phetioFeatured: true,
            phetioValueType: StringIO,
            tandemNameSuffix: 'StringProperty' // Change only with caution
        }, providedOptions);
        super(dependencies, derivation, options);
    }
};
export { DerivedStringProperty as default };
axon.register('DerivedStringProperty', DerivedStringProperty);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFN0cmluZ1Byb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIERlcml2ZWRTdHJpbmdQcm9wZXJ0eSBpcyB0eXBpY2FsbHkgdXNlZCBmb3Igc3RyaW5ncyB0aGF0IGFyZSBkZXJpdmVkIGZyb20gTG9jYWxpemVkU3RyaW5nUHJvcGVydHlcbiAqICh0cmFuc2xhdGFibGUgc3RyaW5ncywgZ2VuZXJhdGVkIGZyb20gdGhlIHt7UkVQT319LXN0cmluZ3NfZW4uanNvbiBmaWxlIHZpYSAnZ3J1bnQgbW9kdWxpZnknKSBhbmQvb3Igb3RoZXIgaW5zdGFuY2VzXG4gKiBvZiBEZXJpdmVkU3RyaW5nUHJvcGVydHkuIFVzaW5nIHRoaXMgY2xhc3MgZW5zdXJlcyB0aGF0IGNvZGUgZm9sbG93cyBQaEVULWlPIGluc3RydW1lbnRhdGlvbiBzdGFuZGFyZHMsXG4gKiBhbmQgbWFrZXMgb2NjdXJyZW5jZXMgb2YgdGhpcyB0eXBlIG9mIHN0cmluZyBQcm9wZXJ0eSBlYXNpZXIgdG8gaWRlbnRpZnkuXG4gKlxuICogUmVzcG9uc2liaWxpdGllcyBpbmNsdWRlOlxuICogIC0gZW5zdXJlcyB0aGF0IHRoZSBkZXJpdmF0aW9uIHJldHVybnMgYSBzdHJpbmdcbiAqICAtIGFkZHMgcHJvcGVyIFBoRVQtaU8gbWV0YWRhdGEsIHdpdGggZGVmYXVsdHMgdGhhdCBoYXZlIGJlZW4gc3BlY2lmaWVkIGJ5IFBoRVQtaU8gZGVzaWduLCB3aGljaCBjYW4gYmVcbiAqICAgIG92ZXJyaWRkZW4gd2hlcmUgYXBwcm9wcmlhdGUgKGUuZy4gcGhldGlvRmVhdHVyZWQpIGFuZCBhcmUgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgd2hlcmUgdGhleSBzaG91bGRcbiAqICAgIG5vdCBiZSBvdmVycmlkYWJsZSAoZS5nLiBwaGV0aW9WYWx1ZVR5cGUpXG4gKlxuICogTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyB1c2UgRGVyaXZlZFN0cmluZ1Byb3BlcnR5IGZvciBtb2RlbC9sb2dpYyBzdHJpbmdzIHRoYXQgYXJlIG5vdCB0cmFuc2xhdGVkLiBCdXQgeW91J2xsXG4gKiBuZWVkIHRvIGNvbnNpZGVyIHdoZXRoZXIgeW91IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb2YgcGhldGlvRmVhdHVyZWQ6IHRydWUsIHdoaWNoIHdhcyBjaG9zZW4gYXMgdGhlIGRlZmF1bHRcbiAqIGZvciB0cmFuc2xhdGVkIHN0cmluZ3MuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waGV0LWlvL2lzc3Vlcy8xOTQzXG4gKlxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcbiAqL1xuXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcbmltcG9ydCBTdHJpbmdJTyBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvU3RyaW5nSU8uanMnO1xuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcbmltcG9ydCBEZXJpdmVkUHJvcGVydHksIHsgRGVyaXZlZFByb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4vRGVyaXZlZFByb3BlcnR5LmpzJztcbmltcG9ydCB7IERlcGVuZGVuY2llcyB9IGZyb20gJy4vTXVsdGlsaW5rLmpzJztcblxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XG5cbnR5cGUgU3VwZXJPcHRpb25zPFQgZXh0ZW5kcyBzdHJpbmc+ID0gRGVyaXZlZFByb3BlcnR5T3B0aW9uczxUPjsgLy8gdGhlIGRlcml2YXRpb24gcmV0dXJucyBhIHN0cmluZ1xuXG5leHBvcnQgdHlwZSBEZXJpdmVkU3RyaW5nUHJvcGVydHlPcHRpb25zPFQgZXh0ZW5kcyBzdHJpbmc+ID0gU2VsZk9wdGlvbnMgJlxuICBTdHJpY3RPbWl0PFN1cGVyT3B0aW9uczxUPiwgJ3BoZXRpb1ZhbHVlVHlwZSc+ICYgLy8gRGVyaXZlZFN0cmluZ1Byb3BlcnR5IGlzIHJlc3BvbnNpYmxlIGZvciB0aGlzIG1ldGFkYXRhXG4gIFN1cGVyT3B0aW9uczxUPjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVyaXZlZFN0cmluZ1Byb3BlcnR5PFQgZXh0ZW5kcyBzdHJpbmcsIFQxLCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBUMTU+XG4gIGV4dGVuZHMgRGVyaXZlZFByb3BlcnR5PFQsIFQxLCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBUMTU+IHtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoIGRlcGVuZGVuY2llczogRGVwZW5kZW5jaWVzPFQxLCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBUMTU+LFxuICAgICAgICAgICAgICAgICAgICAgIGRlcml2YXRpb246ICggLi4ucGFyYW1zOiBbIFQxLCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBUMTUgXSApID0+IFQsXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWRPcHRpb25zPzogRGVyaXZlZFN0cmluZ1Byb3BlcnR5T3B0aW9uczxUPiApIHtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8RGVyaXZlZFN0cmluZ1Byb3BlcnR5T3B0aW9uczxUPiwgU2VsZk9wdGlvbnMsIFN1cGVyT3B0aW9uczxUPj4oKSgge1xuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWUsIC8vIGZlYXR1cmVkIGJ5IGRlZmF1bHQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGhldC1pby9pc3N1ZXMvMTk0M1xuICAgICAgcGhldGlvVmFsdWVUeXBlOiBTdHJpbmdJTyxcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdTdHJpbmdQcm9wZXJ0eScgLy8gQ2hhbmdlIG9ubHkgd2l0aCBjYXV0aW9uXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICBzdXBlciggZGVwZW5kZW5jaWVzLCBkZXJpdmF0aW9uLCBvcHRpb25zICk7XG4gIH1cbn1cblxuYXhvbi5yZWdpc3RlciggJ0Rlcml2ZWRTdHJpbmdQcm9wZXJ0eScsIERlcml2ZWRTdHJpbmdQcm9wZXJ0eSApOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJTdHJpbmdJTyIsImF4b24iLCJEZXJpdmVkUHJvcGVydHkiLCJEZXJpdmVkU3RyaW5nUHJvcGVydHkiLCJkZXBlbmRlbmNpZXMiLCJkZXJpdmF0aW9uIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBoZXRpb0ZlYXR1cmVkIiwicGhldGlvVmFsdWVUeXBlIiwidGFuZGVtTmFtZVN1ZmZpeCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FtQkMsR0FFRCxPQUFPQSxlQUFxQyxrQ0FBa0M7QUFFOUUsT0FBT0MsY0FBYyxvQ0FBb0M7QUFDekQsT0FBT0MsVUFBVSxZQUFZO0FBQzdCLE9BQU9DLHFCQUFpRCx1QkFBdUI7QUFXaEUsSUFBQSxBQUFNQyx3QkFBTixNQUFNQSw4QkFDWEQ7SUFFUixZQUFvQkUsWUFBNEYsRUFDNUZDLFVBQW9HLEVBQ3BHQyxlQUFpRCxDQUFHO1FBRXRFLE1BQU1DLFVBQVVSLFlBQTRFO1lBQzFGUyxnQkFBZ0I7WUFDaEJDLGlCQUFpQlQ7WUFDakJVLGtCQUFrQixpQkFBaUIsMkJBQTJCO1FBQ2hFLEdBQUdKO1FBRUgsS0FBSyxDQUFFRixjQUFjQyxZQUFZRTtJQUNuQztBQUNGO0FBZkEsU0FBcUJKLG1DQWVwQjtBQUVERixLQUFLVSxRQUFRLENBQUUseUJBQXlCUiJ9