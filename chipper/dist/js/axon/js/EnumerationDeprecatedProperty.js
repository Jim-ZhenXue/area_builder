// Copyright 2019-2022, University of Colorado Boulder
/**
 * Property whose value is a member of an Enumeration.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */ import deprecationWarning from '../../phet-core/js/deprecationWarning.js';
import EnumerationDeprecated from '../../phet-core/js/EnumerationDeprecated.js';
import merge from '../../phet-core/js/merge.js';
import EnumerationIO from '../../tandem/js/types/EnumerationIO.js';
import axon from './axon.js';
import Property from './Property.js';
/**
 * @deprecated
 */ let EnumerationDeprecatedProperty = class EnumerationDeprecatedProperty extends Property {
    /**
   * @param {EnumerationDeprecated} enumeration
   * @param {*} initialValue - one of the values from enumeration
   * @param {Object} [options]
   */ constructor(enumeration, initialValue, options){
        deprecationWarning('Use EnumerationProperty. EnumerationDeprecated should be exchanged for classes that extend EnumerationValue, see WilderEnumerationPatterns for examples.');
        assert && assert(enumeration instanceof EnumerationDeprecated, 'likely you are using the new and improved Enumeration, better use EnumerationProperty too.');
        assert && assert(enumeration.VALUES.includes(initialValue), `invalid initialValue: ${initialValue}`);
        if (options) {
            // client cannot specify superclass options that are not supported by EnumerationDeprecatedProperty
            assert && assert(!options.hasOwnProperty('isValidValue'), 'EnumerationDeprecatedProperty does not support isValidValue');
            // client cannot specify superclass options that are controlled by EnumerationDeprecatedProperty
            assert && assert(!options.hasOwnProperty('valueType'), 'EnumerationDeprecatedProperty sets valueType');
            assert && assert(!options.hasOwnProperty('phetioType'), 'EnumerationDeprecatedProperty sets phetioType');
        }
        options = merge({
            valueType: enumeration,
            phetioValueType: EnumerationIO(enumeration),
            validValues: enumeration.VALUES // for PhET-iO documentation and support
        }, options);
        super(initialValue, options);
        // @public (read-only)
        this.enumeration = enumeration;
    }
};
axon.register('EnumerationDeprecatedProperty', EnumerationDeprecatedProperty);
export default EnumerationDeprecatedProperty;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMiwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogUHJvcGVydHkgd2hvc2UgdmFsdWUgaXMgYSBtZW1iZXIgb2YgYW4gRW51bWVyYXRpb24uXG4gKlxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcbiAqL1xuXG5pbXBvcnQgZGVwcmVjYXRpb25XYXJuaW5nIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9kZXByZWNhdGlvbldhcm5pbmcuanMnO1xuaW1wb3J0IEVudW1lcmF0aW9uRGVwcmVjYXRlZCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvRW51bWVyYXRpb25EZXByZWNhdGVkLmpzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xuaW1wb3J0IEVudW1lcmF0aW9uSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0VudW1lcmF0aW9uSU8uanMnO1xuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuL1Byb3BlcnR5LmpzJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5jbGFzcyBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSBleHRlbmRzIFByb3BlcnR5IHtcblxuICAvKipcbiAgICogQHBhcmFtIHtFbnVtZXJhdGlvbkRlcHJlY2F0ZWR9IGVudW1lcmF0aW9uXG4gICAqIEBwYXJhbSB7Kn0gaW5pdGlhbFZhbHVlIC0gb25lIG9mIHRoZSB2YWx1ZXMgZnJvbSBlbnVtZXJhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gICAqL1xuICBjb25zdHJ1Y3RvciggZW51bWVyYXRpb24sIGluaXRpYWxWYWx1ZSwgb3B0aW9ucyApIHtcbiAgICBkZXByZWNhdGlvbldhcm5pbmcoICdVc2UgRW51bWVyYXRpb25Qcm9wZXJ0eS4gRW51bWVyYXRpb25EZXByZWNhdGVkIHNob3VsZCBiZSBleGNoYW5nZWQgZm9yIGNsYXNzZXMgdGhhdCBleHRlbmQgRW51bWVyYXRpb25WYWx1ZSwgc2VlIFdpbGRlckVudW1lcmF0aW9uUGF0dGVybnMgZm9yIGV4YW1wbGVzLicgKTtcblxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGVudW1lcmF0aW9uIGluc3RhbmNlb2YgRW51bWVyYXRpb25EZXByZWNhdGVkLCAnbGlrZWx5IHlvdSBhcmUgdXNpbmcgdGhlIG5ldyBhbmQgaW1wcm92ZWQgRW51bWVyYXRpb24sIGJldHRlciB1c2UgRW51bWVyYXRpb25Qcm9wZXJ0eSB0b28uJyApO1xuICAgIGFzc2VydCAmJiBhc3NlcnQoIGVudW1lcmF0aW9uLlZBTFVFUy5pbmNsdWRlcyggaW5pdGlhbFZhbHVlICksIGBpbnZhbGlkIGluaXRpYWxWYWx1ZTogJHtpbml0aWFsVmFsdWV9YCApO1xuXG4gICAgaWYgKCBvcHRpb25zICkge1xuXG4gICAgICAvLyBjbGllbnQgY2Fubm90IHNwZWNpZnkgc3VwZXJjbGFzcyBvcHRpb25zIHRoYXQgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHlcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLmhhc093blByb3BlcnR5KCAnaXNWYWxpZFZhbHVlJyApLCAnRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkgZG9lcyBub3Qgc3VwcG9ydCBpc1ZhbGlkVmFsdWUnICk7XG5cbiAgICAgIC8vIGNsaWVudCBjYW5ub3Qgc3BlY2lmeSBzdXBlcmNsYXNzIG9wdGlvbnMgdGhhdCBhcmUgY29udHJvbGxlZCBieSBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eVxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoICd2YWx1ZVR5cGUnICksICdFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eSBzZXRzIHZhbHVlVHlwZScgKTtcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoICFvcHRpb25zLmhhc093blByb3BlcnR5KCAncGhldGlvVHlwZScgKSwgJ0VudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5IHNldHMgcGhldGlvVHlwZScgKTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gbWVyZ2UoIHtcbiAgICAgIHZhbHVlVHlwZTogZW51bWVyYXRpb24sXG4gICAgICBwaGV0aW9WYWx1ZVR5cGU6IEVudW1lcmF0aW9uSU8oIGVudW1lcmF0aW9uICksXG4gICAgICB2YWxpZFZhbHVlczogZW51bWVyYXRpb24uVkFMVUVTIC8vIGZvciBQaEVULWlPIGRvY3VtZW50YXRpb24gYW5kIHN1cHBvcnRcbiAgICB9LCBvcHRpb25zICk7XG5cbiAgICBzdXBlciggaW5pdGlhbFZhbHVlLCBvcHRpb25zICk7XG5cbiAgICAvLyBAcHVibGljIChyZWFkLW9ubHkpXG4gICAgdGhpcy5lbnVtZXJhdGlvbiA9IGVudW1lcmF0aW9uO1xuICB9XG59XG5cbmF4b24ucmVnaXN0ZXIoICdFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eScsIEVudW1lcmF0aW9uRGVwcmVjYXRlZFByb3BlcnR5ICk7XG5leHBvcnQgZGVmYXVsdCBFbnVtZXJhdGlvbkRlcHJlY2F0ZWRQcm9wZXJ0eTsiXSwibmFtZXMiOlsiZGVwcmVjYXRpb25XYXJuaW5nIiwiRW51bWVyYXRpb25EZXByZWNhdGVkIiwibWVyZ2UiLCJFbnVtZXJhdGlvbklPIiwiYXhvbiIsIlByb3BlcnR5IiwiRW51bWVyYXRpb25EZXByZWNhdGVkUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsImVudW1lcmF0aW9uIiwiaW5pdGlhbFZhbHVlIiwib3B0aW9ucyIsImFzc2VydCIsIlZBTFVFUyIsImluY2x1ZGVzIiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZVR5cGUiLCJwaGV0aW9WYWx1ZVR5cGUiLCJ2YWxpZFZhbHVlcyIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7Q0FJQyxHQUVELE9BQU9BLHdCQUF3QiwyQ0FBMkM7QUFDMUUsT0FBT0MsMkJBQTJCLDhDQUE4QztBQUNoRixPQUFPQyxXQUFXLDhCQUE4QjtBQUNoRCxPQUFPQyxtQkFBbUIseUNBQXlDO0FBQ25FLE9BQU9DLFVBQVUsWUFBWTtBQUM3QixPQUFPQyxjQUFjLGdCQUFnQjtBQUVyQzs7Q0FFQyxHQUNELElBQUEsQUFBTUMsZ0NBQU4sTUFBTUEsc0NBQXNDRDtJQUUxQzs7OztHQUlDLEdBQ0RFLFlBQWFDLFdBQVcsRUFBRUMsWUFBWSxFQUFFQyxPQUFPLENBQUc7UUFDaERWLG1CQUFvQjtRQUVwQlcsVUFBVUEsT0FBUUgsdUJBQXVCUCx1QkFBdUI7UUFDaEVVLFVBQVVBLE9BQVFILFlBQVlJLE1BQU0sQ0FBQ0MsUUFBUSxDQUFFSixlQUFnQixDQUFDLHNCQUFzQixFQUFFQSxjQUFjO1FBRXRHLElBQUtDLFNBQVU7WUFFYixtR0FBbUc7WUFDbkdDLFVBQVVBLE9BQVEsQ0FBQ0QsUUFBUUksY0FBYyxDQUFFLGlCQUFrQjtZQUU3RCxnR0FBZ0c7WUFDaEdILFVBQVVBLE9BQVEsQ0FBQ0QsUUFBUUksY0FBYyxDQUFFLGNBQWU7WUFDMURILFVBQVVBLE9BQVEsQ0FBQ0QsUUFBUUksY0FBYyxDQUFFLGVBQWdCO1FBQzdEO1FBRUFKLFVBQVVSLE1BQU87WUFDZmEsV0FBV1A7WUFDWFEsaUJBQWlCYixjQUFlSztZQUNoQ1MsYUFBYVQsWUFBWUksTUFBTSxDQUFDLHdDQUF3QztRQUMxRSxHQUFHRjtRQUVILEtBQUssQ0FBRUQsY0FBY0M7UUFFckIsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQ0YsV0FBVyxHQUFHQTtJQUNyQjtBQUNGO0FBRUFKLEtBQUtjLFFBQVEsQ0FBRSxpQ0FBaUNaO0FBQ2hELGVBQWVBLDhCQUE4QiJ9