// Copyright 2024, University of Colorado Boulder
/**
 * Utility for counting the launches of a simulation, which is helpful when counting crashes during
 * extended fuzzing. Replaces the sim name with a title that indicates the run number.
 *
 * NOTE: There is no easy way to clear the local storage for this value, so correct usage would focus on the differences
 * in values rather than the absolute values.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */ import TinyProperty from '../../axon/js/TinyProperty.js';
import Utils from '../../dot/js/Utils.js';
// Key for storing the launch count in local storage. This is transient and does not need to be maintained or migrated.
// Safe to rename.
const LOCAL_STORAGE_KEY = 'phet.sim.launchCount';
/**
 * Returns a new hard-coded sim name that indicates the launch count. Note this disables the translatability of the sim title.
 */ export default function launchCounter(simNameProperty) {
    let storedRunCountString = null;
    let newRunCount = null;
    // Attempt to retrieve the run count from local storage
    try {
        storedRunCountString = window.localStorage.getItem(LOCAL_STORAGE_KEY);
    } catch (error) {
        console.error('Error accessing localStorage:', error);
    }
    if (storedRunCountString) {
        const storedRunCount = parseInt(storedRunCountString, 10);
        newRunCount = storedRunCount + 1;
    } else {
        newRunCount = 1;
    }
    // Attempt to store the updated run count back to local storage
    try {
        window.localStorage.setItem(LOCAL_STORAGE_KEY, Utils.toFixed(newRunCount, 0));
    } catch (error) {
        console.error('Error accessing localStorage:', error);
    }
    return new TinyProperty(simNameProperty.value + ' (Run ' + newRunCount + ')');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL2xhdW5jaENvdW50ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIFV0aWxpdHkgZm9yIGNvdW50aW5nIHRoZSBsYXVuY2hlcyBvZiBhIHNpbXVsYXRpb24sIHdoaWNoIGlzIGhlbHBmdWwgd2hlbiBjb3VudGluZyBjcmFzaGVzIGR1cmluZ1xuICogZXh0ZW5kZWQgZnV6emluZy4gUmVwbGFjZXMgdGhlIHNpbSBuYW1lIHdpdGggYSB0aXRsZSB0aGF0IGluZGljYXRlcyB0aGUgcnVuIG51bWJlci5cbiAqXG4gKiBOT1RFOiBUaGVyZSBpcyBubyBlYXN5IHdheSB0byBjbGVhciB0aGUgbG9jYWwgc3RvcmFnZSBmb3IgdGhpcyB2YWx1ZSwgc28gY29ycmVjdCB1c2FnZSB3b3VsZCBmb2N1cyBvbiB0aGUgZGlmZmVyZW5jZXNcbiAqIGluIHZhbHVlcyByYXRoZXIgdGhhbiB0aGUgYWJzb2x1dGUgdmFsdWVzLlxuICpcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFRpbnlQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RpbnlQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcblxuLy8gS2V5IGZvciBzdG9yaW5nIHRoZSBsYXVuY2ggY291bnQgaW4gbG9jYWwgc3RvcmFnZS4gVGhpcyBpcyB0cmFuc2llbnQgYW5kIGRvZXMgbm90IG5lZWQgdG8gYmUgbWFpbnRhaW5lZCBvciBtaWdyYXRlZC5cbi8vIFNhZmUgdG8gcmVuYW1lLlxuY29uc3QgTE9DQUxfU1RPUkFHRV9LRVkgPSAncGhldC5zaW0ubGF1bmNoQ291bnQnO1xuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgaGFyZC1jb2RlZCBzaW0gbmFtZSB0aGF0IGluZGljYXRlcyB0aGUgbGF1bmNoIGNvdW50LiBOb3RlIHRoaXMgZGlzYWJsZXMgdGhlIHRyYW5zbGF0YWJpbGl0eSBvZiB0aGUgc2ltIHRpdGxlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYXVuY2hDb3VudGVyKCBzaW1OYW1lUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4gKTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiB7XG5cbiAgbGV0IHN0b3JlZFJ1bkNvdW50U3RyaW5nOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgbGV0IG5ld1J1bkNvdW50OiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICAvLyBBdHRlbXB0IHRvIHJldHJpZXZlIHRoZSBydW4gY291bnQgZnJvbSBsb2NhbCBzdG9yYWdlXG4gIHRyeSB7XG4gICAgc3RvcmVkUnVuQ291bnRTdHJpbmcgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oIExPQ0FMX1NUT1JBR0VfS0VZICk7XG4gIH1cbiAgY2F0Y2goIGVycm9yICkge1xuICAgIGNvbnNvbGUuZXJyb3IoICdFcnJvciBhY2Nlc3NpbmcgbG9jYWxTdG9yYWdlOicsIGVycm9yICk7XG4gIH1cblxuICBpZiAoIHN0b3JlZFJ1bkNvdW50U3RyaW5nICkge1xuICAgIGNvbnN0IHN0b3JlZFJ1bkNvdW50ID0gcGFyc2VJbnQoIHN0b3JlZFJ1bkNvdW50U3RyaW5nLCAxMCApO1xuICAgIG5ld1J1bkNvdW50ID0gc3RvcmVkUnVuQ291bnQgKyAxO1xuICB9XG4gIGVsc2Uge1xuICAgIG5ld1J1bkNvdW50ID0gMTtcbiAgfVxuXG4gIC8vIEF0dGVtcHQgdG8gc3RvcmUgdGhlIHVwZGF0ZWQgcnVuIGNvdW50IGJhY2sgdG8gbG9jYWwgc3RvcmFnZVxuICB0cnkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSggTE9DQUxfU1RPUkFHRV9LRVksIFV0aWxzLnRvRml4ZWQoIG5ld1J1bkNvdW50LCAwICkgKTtcbiAgfVxuICBjYXRjaCggZXJyb3IgKSB7XG4gICAgY29uc29sZS5lcnJvciggJ0Vycm9yIGFjY2Vzc2luZyBsb2NhbFN0b3JhZ2U6JywgZXJyb3IgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVGlueVByb3BlcnR5KCBzaW1OYW1lUHJvcGVydHkudmFsdWUgKyAnIChSdW4gJyArIG5ld1J1bkNvdW50ICsgJyknICk7XG59Il0sIm5hbWVzIjpbIlRpbnlQcm9wZXJ0eSIsIlV0aWxzIiwiTE9DQUxfU1RPUkFHRV9LRVkiLCJsYXVuY2hDb3VudGVyIiwic2ltTmFtZVByb3BlcnR5Iiwic3RvcmVkUnVuQ291bnRTdHJpbmciLCJuZXdSdW5Db3VudCIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJlcnJvciIsImNvbnNvbGUiLCJzdG9yZWRSdW5Db3VudCIsInBhcnNlSW50Iiwic2V0SXRlbSIsInRvRml4ZWQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBRWpEOzs7Ozs7OztDQVFDLEdBRUQsT0FBT0Esa0JBQWtCLGdDQUFnQztBQUV6RCxPQUFPQyxXQUFXLHdCQUF3QjtBQUUxQyx1SEFBdUg7QUFDdkgsa0JBQWtCO0FBQ2xCLE1BQU1DLG9CQUFvQjtBQUUxQjs7Q0FFQyxHQUNELGVBQWUsU0FBU0MsY0FBZUMsZUFBMEM7SUFFL0UsSUFBSUMsdUJBQXNDO0lBQzFDLElBQUlDLGNBQTZCO0lBRWpDLHVEQUF1RDtJQUN2RCxJQUFJO1FBQ0ZELHVCQUF1QkUsT0FBT0MsWUFBWSxDQUFDQyxPQUFPLENBQUVQO0lBQ3RELEVBQ0EsT0FBT1EsT0FBUTtRQUNiQyxRQUFRRCxLQUFLLENBQUUsaUNBQWlDQTtJQUNsRDtJQUVBLElBQUtMLHNCQUF1QjtRQUMxQixNQUFNTyxpQkFBaUJDLFNBQVVSLHNCQUFzQjtRQUN2REMsY0FBY00saUJBQWlCO0lBQ2pDLE9BQ0s7UUFDSE4sY0FBYztJQUNoQjtJQUVBLCtEQUErRDtJQUMvRCxJQUFJO1FBQ0ZDLE9BQU9DLFlBQVksQ0FBQ00sT0FBTyxDQUFFWixtQkFBbUJELE1BQU1jLE9BQU8sQ0FBRVQsYUFBYTtJQUM5RSxFQUNBLE9BQU9JLE9BQVE7UUFDYkMsUUFBUUQsS0FBSyxDQUFFLGlDQUFpQ0E7SUFDbEQ7SUFFQSxPQUFPLElBQUlWLGFBQWNJLGdCQUFnQlksS0FBSyxHQUFHLFdBQVdWLGNBQWM7QUFDNUUifQ==