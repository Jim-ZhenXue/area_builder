// Copyright 2021-2024, University of Colorado Boulder
/**
 * Button in the NavigationBar that opens the PreferencesDialog.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */ import optionize from '../../../phet-core/js/optionize.js';
import { Color, Image } from '../../../scenery/js/imports.js';
import Dialog from '../../../sun/js/Dialog.js';
import PhetioCapsule from '../../../tandem/js/PhetioCapsule.js';
import preferencesIcon_png from '../../images/preferencesIcon_png.js'; // on a black navbar
import preferencesIconOnWhite_png from '../../images/preferencesIconOnWhite_png.js'; // on a white navbar
import joist from '../joist.js';
import JoistButton from '../JoistButton.js';
import JoistStrings from '../JoistStrings.js';
import PreferencesDialog from './PreferencesDialog.js';
// // empirically determined to similarly match the height of the P in PhET button, see https://github.com/phetsims/joist/issues/919
const DESIRED_ICON_HEIGHT = 18.85;
let NavigationBarPreferencesButton = class NavigationBarPreferencesButton extends JoistButton {
    constructor(preferencesModel, backgroundColorProperty, providedOptions){
        const options = optionize()({
            listener: ()=>{
                const preferencesDialog = preferencesDialogCapsule.getElement();
                preferencesDialog.show();
                preferencesDialog.focusSelectedTab();
            },
            highlightExtensionWidth: 5 + 3.6,
            highlightExtensionHeight: 10,
            // pdom
            innerContent: JoistStrings.preferences.titleStringProperty,
            positionInPDOM: true,
            // voicing
            voicingNameResponse: JoistStrings.preferences.titleStringProperty,
            visiblePropertyOptions: {
                phetioFeatured: true
            }
        }, providedOptions);
        const icon = new Image(preferencesIcon_png, {
            scale: DESIRED_ICON_HEIGHT / preferencesIcon_png.height,
            pickable: false
        });
        super(icon, backgroundColorProperty, options);
        const preferencesDialogCapsule = new PhetioCapsule((tandem)=>{
            return new PreferencesDialog(preferencesModel, {
                tandem: tandem,
                focusOnHideNode: this
            });
        }, [], {
            tandem: options.tandem.createTandem('preferencesDialogCapsule'),
            phetioType: PhetioCapsule.PhetioCapsuleIO(Dialog.DialogIO),
            disposeOnClear: false
        });
        // change the icon so that it is visible when the background changes from dark to light
        backgroundColorProperty.link((backgroundColor)=>{
            icon.image = backgroundColor.equals(Color.BLACK) ? preferencesIcon_png : preferencesIconOnWhite_png;
        });
        // pdom - Signal to screen readers that the button will open a dialog. For some reason, this also seems to
        // prevent a bug in iOS Safari where two events are dispatched to the screen on activation instead of one.
        // The result was that one press would open the dialog and the second buggy press would immediately close it.
        // Make sure that the dialog can be opened on iOS Safari before removing this.
        this.setPDOMAttribute('aria-haspopup', true);
    }
};
joist.register('NavigationBarPreferencesButton', NavigationBarPreferencesButton);
export default NavigationBarPreferencesButton;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL05hdmlnYXRpb25CYXJQcmVmZXJlbmNlc0J1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBCdXR0b24gaW4gdGhlIE5hdmlnYXRpb25CYXIgdGhhdCBvcGVucyB0aGUgUHJlZmVyZW5jZXNEaWFsb2cuXG4gKlxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgUGlja1JlcXVpcmVkIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrUmVxdWlyZWQuanMnO1xuaW1wb3J0IHsgQ29sb3IsIEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBEaWFsb2cgZnJvbSAnLi4vLi4vLi4vc3VuL2pzL0RpYWxvZy5qcyc7XG5pbXBvcnQgUGhldGlvQ2Fwc3VsZSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvUGhldGlvQ2Fwc3VsZS5qcyc7XG5pbXBvcnQgcHJlZmVyZW5jZXNJY29uX3BuZyBmcm9tICcuLi8uLi9pbWFnZXMvcHJlZmVyZW5jZXNJY29uX3BuZy5qcyc7IC8vIG9uIGEgYmxhY2sgbmF2YmFyXG5pbXBvcnQgcHJlZmVyZW5jZXNJY29uT25XaGl0ZV9wbmcgZnJvbSAnLi4vLi4vaW1hZ2VzL3ByZWZlcmVuY2VzSWNvbk9uV2hpdGVfcG5nLmpzJzsgLy8gb24gYSB3aGl0ZSBuYXZiYXJcbmltcG9ydCBqb2lzdCBmcm9tICcuLi9qb2lzdC5qcyc7XG5pbXBvcnQgSm9pc3RCdXR0b24sIHsgSm9pc3RCdXR0b25PcHRpb25zIH0gZnJvbSAnLi4vSm9pc3RCdXR0b24uanMnO1xuaW1wb3J0IEpvaXN0U3RyaW5ncyBmcm9tICcuLi9Kb2lzdFN0cmluZ3MuanMnO1xuaW1wb3J0IFByZWZlcmVuY2VzRGlhbG9nIGZyb20gJy4vUHJlZmVyZW5jZXNEaWFsb2cuanMnO1xuaW1wb3J0IFByZWZlcmVuY2VzTW9kZWwgZnJvbSAnLi9QcmVmZXJlbmNlc01vZGVsLmpzJztcblxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uQmFyUHJlZmVyZW5jZXNCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrUmVxdWlyZWQ8Sm9pc3RCdXR0b25PcHRpb25zLCAndGFuZGVtJz4gJiBQaWNrPEpvaXN0QnV0dG9uT3B0aW9ucywgJ3BvaW50ZXJBcmVhRGlsYXRpb25YJyB8ICdwb2ludGVyQXJlYURpbGF0aW9uWSc+O1xuXG4vLyAvLyBlbXBpcmljYWxseSBkZXRlcm1pbmVkIHRvIHNpbWlsYXJseSBtYXRjaCB0aGUgaGVpZ2h0IG9mIHRoZSBQIGluIFBoRVQgYnV0dG9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy85MTlcbmNvbnN0IERFU0lSRURfSUNPTl9IRUlHSFQgPSAxOC44NTtcblxuY2xhc3MgTmF2aWdhdGlvbkJhclByZWZlcmVuY2VzQnV0dG9uIGV4dGVuZHMgSm9pc3RCdXR0b24ge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJlZmVyZW5jZXNNb2RlbDogUHJlZmVyZW5jZXNNb2RlbCwgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PENvbG9yPixcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IE5hdmlnYXRpb25CYXJQcmVmZXJlbmNlc0J1dHRvbk9wdGlvbnMgKSB7XG5cbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE5hdmlnYXRpb25CYXJQcmVmZXJlbmNlc0J1dHRvbk9wdGlvbnMsIFNlbGZPcHRpb25zLCBKb2lzdEJ1dHRvbk9wdGlvbnM+KCkoIHtcblxuICAgICAgbGlzdGVuZXI6ICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJlZmVyZW5jZXNEaWFsb2cgPSBwcmVmZXJlbmNlc0RpYWxvZ0NhcHN1bGUuZ2V0RWxlbWVudCgpO1xuICAgICAgICBwcmVmZXJlbmNlc0RpYWxvZy5zaG93KCk7XG4gICAgICAgIHByZWZlcmVuY2VzRGlhbG9nLmZvY3VzU2VsZWN0ZWRUYWIoKTtcbiAgICAgIH0sXG4gICAgICBoaWdobGlnaHRFeHRlbnNpb25XaWR0aDogNSArIDMuNixcbiAgICAgIGhpZ2hsaWdodEV4dGVuc2lvbkhlaWdodDogMTAsXG5cbiAgICAgIC8vIHBkb21cbiAgICAgIGlubmVyQ29udGVudDogSm9pc3RTdHJpbmdzLnByZWZlcmVuY2VzLnRpdGxlU3RyaW5nUHJvcGVydHksXG4gICAgICBwb3NpdGlvbkluUERPTTogdHJ1ZSxcblxuICAgICAgLy8gdm9pY2luZ1xuICAgICAgdm9pY2luZ05hbWVSZXNwb25zZTogSm9pc3RTdHJpbmdzLnByZWZlcmVuY2VzLnRpdGxlU3RyaW5nUHJvcGVydHksXG5cbiAgICAgIHZpc2libGVQcm9wZXJ0eU9wdGlvbnM6IHtcbiAgICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcbiAgICAgIH1cbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIGNvbnN0IGljb24gPSBuZXcgSW1hZ2UoIHByZWZlcmVuY2VzSWNvbl9wbmcsIHtcbiAgICAgIHNjYWxlOiBERVNJUkVEX0lDT05fSEVJR0hUIC8gcHJlZmVyZW5jZXNJY29uX3BuZy5oZWlnaHQsXG4gICAgICBwaWNrYWJsZTogZmFsc2VcbiAgICB9ICk7XG5cbiAgICBzdXBlciggaWNvbiwgYmFja2dyb3VuZENvbG9yUHJvcGVydHksIG9wdGlvbnMgKTtcblxuICAgIGNvbnN0IHByZWZlcmVuY2VzRGlhbG9nQ2Fwc3VsZSA9IG5ldyBQaGV0aW9DYXBzdWxlPFByZWZlcmVuY2VzRGlhbG9nPiggdGFuZGVtID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJlZmVyZW5jZXNEaWFsb2coIHByZWZlcmVuY2VzTW9kZWwsIHtcbiAgICAgICAgdGFuZGVtOiB0YW5kZW0sXG4gICAgICAgIGZvY3VzT25IaWRlTm9kZTogdGhpc1xuICAgICAgfSApO1xuICAgIH0sIFtdLCB7XG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3ByZWZlcmVuY2VzRGlhbG9nQ2Fwc3VsZScgKSxcbiAgICAgIHBoZXRpb1R5cGU6IFBoZXRpb0NhcHN1bGUuUGhldGlvQ2Fwc3VsZUlPKCBEaWFsb2cuRGlhbG9nSU8gKSxcbiAgICAgIGRpc3Bvc2VPbkNsZWFyOiBmYWxzZVxuICAgIH0gKTtcblxuICAgIC8vIGNoYW5nZSB0aGUgaWNvbiBzbyB0aGF0IGl0IGlzIHZpc2libGUgd2hlbiB0aGUgYmFja2dyb3VuZCBjaGFuZ2VzIGZyb20gZGFyayB0byBsaWdodFxuICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5LmxpbmsoIGJhY2tncm91bmRDb2xvciA9PiB7XG4gICAgICBpY29uLmltYWdlID0gYmFja2dyb3VuZENvbG9yLmVxdWFscyggQ29sb3IuQkxBQ0sgKSA/IHByZWZlcmVuY2VzSWNvbl9wbmcgOiBwcmVmZXJlbmNlc0ljb25PbldoaXRlX3BuZztcbiAgICB9ICk7XG5cbiAgICAvLyBwZG9tIC0gU2lnbmFsIHRvIHNjcmVlbiByZWFkZXJzIHRoYXQgdGhlIGJ1dHRvbiB3aWxsIG9wZW4gYSBkaWFsb2cuIEZvciBzb21lIHJlYXNvbiwgdGhpcyBhbHNvIHNlZW1zIHRvXG4gICAgLy8gcHJldmVudCBhIGJ1ZyBpbiBpT1MgU2FmYXJpIHdoZXJlIHR3byBldmVudHMgYXJlIGRpc3BhdGNoZWQgdG8gdGhlIHNjcmVlbiBvbiBhY3RpdmF0aW9uIGluc3RlYWQgb2Ygb25lLlxuICAgIC8vIFRoZSByZXN1bHQgd2FzIHRoYXQgb25lIHByZXNzIHdvdWxkIG9wZW4gdGhlIGRpYWxvZyBhbmQgdGhlIHNlY29uZCBidWdneSBwcmVzcyB3b3VsZCBpbW1lZGlhdGVseSBjbG9zZSBpdC5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgZGlhbG9nIGNhbiBiZSBvcGVuZWQgb24gaU9TIFNhZmFyaSBiZWZvcmUgcmVtb3ZpbmcgdGhpcy5cbiAgICB0aGlzLnNldFBET01BdHRyaWJ1dGUoICdhcmlhLWhhc3BvcHVwJywgdHJ1ZSApO1xuICB9XG59XG5cbmpvaXN0LnJlZ2lzdGVyKCAnTmF2aWdhdGlvbkJhclByZWZlcmVuY2VzQnV0dG9uJywgTmF2aWdhdGlvbkJhclByZWZlcmVuY2VzQnV0dG9uICk7XG5leHBvcnQgZGVmYXVsdCBOYXZpZ2F0aW9uQmFyUHJlZmVyZW5jZXNCdXR0b247Il0sIm5hbWVzIjpbIm9wdGlvbml6ZSIsIkNvbG9yIiwiSW1hZ2UiLCJEaWFsb2ciLCJQaGV0aW9DYXBzdWxlIiwicHJlZmVyZW5jZXNJY29uX3BuZyIsInByZWZlcmVuY2VzSWNvbk9uV2hpdGVfcG5nIiwiam9pc3QiLCJKb2lzdEJ1dHRvbiIsIkpvaXN0U3RyaW5ncyIsIlByZWZlcmVuY2VzRGlhbG9nIiwiREVTSVJFRF9JQ09OX0hFSUdIVCIsIk5hdmlnYXRpb25CYXJQcmVmZXJlbmNlc0J1dHRvbiIsInByZWZlcmVuY2VzTW9kZWwiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJsaXN0ZW5lciIsInByZWZlcmVuY2VzRGlhbG9nIiwicHJlZmVyZW5jZXNEaWFsb2dDYXBzdWxlIiwiZ2V0RWxlbWVudCIsInNob3ciLCJmb2N1c1NlbGVjdGVkVGFiIiwiaGlnaGxpZ2h0RXh0ZW5zaW9uV2lkdGgiLCJoaWdobGlnaHRFeHRlbnNpb25IZWlnaHQiLCJpbm5lckNvbnRlbnQiLCJwcmVmZXJlbmNlcyIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJwb3NpdGlvbkluUERPTSIsInZvaWNpbmdOYW1lUmVzcG9uc2UiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJpY29uIiwic2NhbGUiLCJoZWlnaHQiLCJwaWNrYWJsZSIsInRhbmRlbSIsImZvY3VzT25IaWRlTm9kZSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb1R5cGUiLCJQaGV0aW9DYXBzdWxlSU8iLCJEaWFsb2dJTyIsImRpc3Bvc2VPbkNsZWFyIiwibGluayIsImJhY2tncm91bmRDb2xvciIsImltYWdlIiwiZXF1YWxzIiwiQkxBQ0siLCJzZXRQRE9NQXR0cmlidXRlIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBR0QsT0FBT0EsZUFBcUMscUNBQXFDO0FBRWpGLFNBQVNDLEtBQUssRUFBRUMsS0FBSyxRQUFRLGlDQUFpQztBQUM5RCxPQUFPQyxZQUFZLDRCQUE0QjtBQUMvQyxPQUFPQyxtQkFBbUIsc0NBQXNDO0FBQ2hFLE9BQU9DLHlCQUF5QixzQ0FBc0MsQ0FBQyxvQkFBb0I7QUFDM0YsT0FBT0MsZ0NBQWdDLDZDQUE2QyxDQUFDLG9CQUFvQjtBQUN6RyxPQUFPQyxXQUFXLGNBQWM7QUFDaEMsT0FBT0MsaUJBQXlDLG9CQUFvQjtBQUNwRSxPQUFPQyxrQkFBa0IscUJBQXFCO0FBQzlDLE9BQU9DLHVCQUF1Qix5QkFBeUI7QUFNdkQsb0lBQW9JO0FBQ3BJLE1BQU1DLHNCQUFzQjtBQUU1QixJQUFBLEFBQU1DLGlDQUFOLE1BQU1BLHVDQUF1Q0o7SUFFM0MsWUFBb0JLLGdCQUFrQyxFQUFFQyx1QkFBaUQsRUFDckZDLGVBQXNELENBQUc7UUFFM0UsTUFBTUMsVUFBVWhCLFlBQXFGO1lBRW5HaUIsVUFBVTtnQkFDUixNQUFNQyxvQkFBb0JDLHlCQUF5QkMsVUFBVTtnQkFDN0RGLGtCQUFrQkcsSUFBSTtnQkFDdEJILGtCQUFrQkksZ0JBQWdCO1lBQ3BDO1lBQ0FDLHlCQUF5QixJQUFJO1lBQzdCQywwQkFBMEI7WUFFMUIsT0FBTztZQUNQQyxjQUFjaEIsYUFBYWlCLFdBQVcsQ0FBQ0MsbUJBQW1CO1lBQzFEQyxnQkFBZ0I7WUFFaEIsVUFBVTtZQUNWQyxxQkFBcUJwQixhQUFhaUIsV0FBVyxDQUFDQyxtQkFBbUI7WUFFakVHLHdCQUF3QjtnQkFDdEJDLGdCQUFnQjtZQUNsQjtRQUNGLEdBQUdoQjtRQUVILE1BQU1pQixPQUFPLElBQUk5QixNQUFPRyxxQkFBcUI7WUFDM0M0QixPQUFPdEIsc0JBQXNCTixvQkFBb0I2QixNQUFNO1lBQ3ZEQyxVQUFVO1FBQ1o7UUFFQSxLQUFLLENBQUVILE1BQU1sQix5QkFBeUJFO1FBRXRDLE1BQU1HLDJCQUEyQixJQUFJZixjQUFrQ2dDLENBQUFBO1lBQ3JFLE9BQU8sSUFBSTFCLGtCQUFtQkcsa0JBQWtCO2dCQUM5Q3VCLFFBQVFBO2dCQUNSQyxpQkFBaUIsSUFBSTtZQUN2QjtRQUNGLEdBQUcsRUFBRSxFQUFFO1lBQ0xELFFBQVFwQixRQUFRb0IsTUFBTSxDQUFDRSxZQUFZLENBQUU7WUFDckNDLFlBQVluQyxjQUFjb0MsZUFBZSxDQUFFckMsT0FBT3NDLFFBQVE7WUFDMURDLGdCQUFnQjtRQUNsQjtRQUVBLHVGQUF1RjtRQUN2RjVCLHdCQUF3QjZCLElBQUksQ0FBRUMsQ0FBQUE7WUFDNUJaLEtBQUthLEtBQUssR0FBR0QsZ0JBQWdCRSxNQUFNLENBQUU3QyxNQUFNOEMsS0FBSyxJQUFLMUMsc0JBQXNCQztRQUM3RTtRQUVBLDBHQUEwRztRQUMxRywwR0FBMEc7UUFDMUcsNkdBQTZHO1FBQzdHLDhFQUE4RTtRQUM5RSxJQUFJLENBQUMwQyxnQkFBZ0IsQ0FBRSxpQkFBaUI7SUFDMUM7QUFDRjtBQUVBekMsTUFBTTBDLFFBQVEsQ0FBRSxrQ0FBa0NyQztBQUNsRCxlQUFlQSwrQkFBK0IifQ==