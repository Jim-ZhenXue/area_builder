// Copyright 2022-2024, University of Colorado Boulder
/**
 * RegionAndCultureComboBox is the combo box used to set 'Region and Culture' in Preferences > Localization.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */ import optionize from '../../../phet-core/js/optionize.js';
import { Text } from '../../../scenery/js/imports.js';
import ComboBox from '../../../sun/js/ComboBox.js';
import Tandem from '../../../tandem/js/Tandem.js';
import regionAndCultureProperty, { supportedRegionAndCultureValues } from '../i18n/regionAndCultureProperty.js';
import joist from '../joist.js';
import JoistStrings from '../JoistStrings.js';
import PreferencesDialog from './PreferencesDialog.js';
// Maps a RegionAndCulture value to a StringProperty.
const STRING_PROPERTY_MAP = {
    africa: JoistStrings.preferences.tabs.localization.regionAndCulture.africaStringProperty,
    africaModest: JoistStrings.preferences.tabs.localization.regionAndCulture.africaModestStringProperty,
    asia: JoistStrings.preferences.tabs.localization.regionAndCulture.asiaStringProperty,
    latinAmerica: JoistStrings.preferences.tabs.localization.regionAndCulture.latinAmericaStringProperty,
    oceania: JoistStrings.preferences.tabs.localization.regionAndCulture.oceaniaStringProperty,
    random: JoistStrings.preferences.tabs.localization.regionAndCulture.randomStringProperty,
    usa: JoistStrings.preferences.tabs.localization.regionAndCulture.unitedStatesOfAmericaStringProperty
};
let RegionAndCultureComboBox = class RegionAndCultureComboBox extends ComboBox {
    constructor(providedOptions){
        const options = optionize()({
            // For now, do not instrument Preferences elements, see https://github.com/phetsims/joist/issues/744#issuecomment-1196028362
            tandem: Tandem.OPT_OUT
        }, providedOptions);
        // Sort the region and culture choices. We are sorting on RegionAndCulture tokens, rather than translated strings,
        // because ComboBox does not have an API for changing the order of items in its listbox. Since there are a
        // relatively small number of items here, we felt that having a consistent order here was sufficient, and that
        // the effort to dynamically put the items in alphabetical order was not warranted.
        // See https://github.com/phetsims/joist/issues/955
        const comboBoxItems = supportedRegionAndCultureValues.slice().sort().map((regionAndCulture)=>{
            return {
                value: regionAndCulture,
                createNode: ()=>new Text(STRING_PROPERTY_MAP[regionAndCulture], PreferencesDialog.PANEL_SECTION_CONTENT_OPTIONS)
            };
        });
        // TODO: Need a different top layer node for ComboBox here. See https://github.com/phetsims/joist/issues/841
        super(regionAndCultureProperty, comboBoxItems, phet.joist.sim.topLayer, options);
    }
};
joist.register('RegionAndCultureComboBox', RegionAndCultureComboBox);
export default RegionAndCultureComboBox;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL3ByZWZlcmVuY2VzL1JlZ2lvbkFuZEN1bHR1cmVDb21ib0JveC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3ggaXMgdGhlIGNvbWJvIGJveCB1c2VkIHRvIHNldCAnUmVnaW9uIGFuZCBDdWx0dXJlJyBpbiBQcmVmZXJlbmNlcyA+IExvY2FsaXphdGlvbi5cbiAqXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqL1xuXG5pbXBvcnQgTG9jYWxpemVkU3RyaW5nUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vY2hpcHBlci9qcy9icm93c2VyL0xvY2FsaXplZFN0cmluZ1Byb3BlcnR5LmpzJztcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xuaW1wb3J0IFBpY2tPcHRpb25hbCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja09wdGlvbmFsLmpzJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xuaW1wb3J0IENvbWJvQm94LCB7IENvbWJvQm94T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3N1bi9qcy9Db21ib0JveC5qcyc7XG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xuaW1wb3J0IHJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSwgeyBSZWdpb25BbmRDdWx0dXJlLCBzdXBwb3J0ZWRSZWdpb25BbmRDdWx0dXJlVmFsdWVzIH0gZnJvbSAnLi4vaTE4bi9yZWdpb25BbmRDdWx0dXJlUHJvcGVydHkuanMnO1xuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcbmltcG9ydCBKb2lzdFN0cmluZ3MgZnJvbSAnLi4vSm9pc3RTdHJpbmdzLmpzJztcbmltcG9ydCBQcmVmZXJlbmNlc0RpYWxvZyBmcm9tICcuL1ByZWZlcmVuY2VzRGlhbG9nLmpzJztcblxuLy8gTWFwcyBhIFJlZ2lvbkFuZEN1bHR1cmUgdmFsdWUgdG8gYSBTdHJpbmdQcm9wZXJ0eS5cbmNvbnN0IFNUUklOR19QUk9QRVJUWV9NQVA6IFJlY29yZDxSZWdpb25BbmRDdWx0dXJlLCBMb2NhbGl6ZWRTdHJpbmdQcm9wZXJ0eT4gPSB7XG4gIGFmcmljYTogSm9pc3RTdHJpbmdzLnByZWZlcmVuY2VzLnRhYnMubG9jYWxpemF0aW9uLnJlZ2lvbkFuZEN1bHR1cmUuYWZyaWNhU3RyaW5nUHJvcGVydHksXG4gIGFmcmljYU1vZGVzdDogSm9pc3RTdHJpbmdzLnByZWZlcmVuY2VzLnRhYnMubG9jYWxpemF0aW9uLnJlZ2lvbkFuZEN1bHR1cmUuYWZyaWNhTW9kZXN0U3RyaW5nUHJvcGVydHksXG4gIGFzaWE6IEpvaXN0U3RyaW5ncy5wcmVmZXJlbmNlcy50YWJzLmxvY2FsaXphdGlvbi5yZWdpb25BbmRDdWx0dXJlLmFzaWFTdHJpbmdQcm9wZXJ0eSxcbiAgbGF0aW5BbWVyaWNhOiBKb2lzdFN0cmluZ3MucHJlZmVyZW5jZXMudGFicy5sb2NhbGl6YXRpb24ucmVnaW9uQW5kQ3VsdHVyZS5sYXRpbkFtZXJpY2FTdHJpbmdQcm9wZXJ0eSxcbiAgb2NlYW5pYTogSm9pc3RTdHJpbmdzLnByZWZlcmVuY2VzLnRhYnMubG9jYWxpemF0aW9uLnJlZ2lvbkFuZEN1bHR1cmUub2NlYW5pYVN0cmluZ1Byb3BlcnR5LFxuICByYW5kb206IEpvaXN0U3RyaW5ncy5wcmVmZXJlbmNlcy50YWJzLmxvY2FsaXphdGlvbi5yZWdpb25BbmRDdWx0dXJlLnJhbmRvbVN0cmluZ1Byb3BlcnR5LFxuICB1c2E6IEpvaXN0U3RyaW5ncy5wcmVmZXJlbmNlcy50YWJzLmxvY2FsaXphdGlvbi5yZWdpb25BbmRDdWx0dXJlLnVuaXRlZFN0YXRlc09mQW1lcmljYVN0cmluZ1Byb3BlcnR5XG59O1xuXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcbnR5cGUgUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94T3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja09wdGlvbmFsPENvbWJvQm94T3B0aW9ucywgJ3RhbmRlbSc+O1xuXG5jbGFzcyBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3ggZXh0ZW5kcyBDb21ib0JveDxSZWdpb25BbmRDdWx0dXJlPiB7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3hPcHRpb25zICkge1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3hPcHRpb25zLCBTZWxmT3B0aW9ucywgQ29tYm9Cb3hPcHRpb25zPigpKCB7XG5cbiAgICAgIC8vIEZvciBub3csIGRvIG5vdCBpbnN0cnVtZW50IFByZWZlcmVuY2VzIGVsZW1lbnRzLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy83NDQjaXNzdWVjb21tZW50LTExOTYwMjgzNjJcbiAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcblxuICAgIC8vIFNvcnQgdGhlIHJlZ2lvbiBhbmQgY3VsdHVyZSBjaG9pY2VzLiBXZSBhcmUgc29ydGluZyBvbiBSZWdpb25BbmRDdWx0dXJlIHRva2VucywgcmF0aGVyIHRoYW4gdHJhbnNsYXRlZCBzdHJpbmdzLFxuICAgIC8vIGJlY2F1c2UgQ29tYm9Cb3ggZG9lcyBub3QgaGF2ZSBhbiBBUEkgZm9yIGNoYW5naW5nIHRoZSBvcmRlciBvZiBpdGVtcyBpbiBpdHMgbGlzdGJveC4gU2luY2UgdGhlcmUgYXJlIGFcbiAgICAvLyByZWxhdGl2ZWx5IHNtYWxsIG51bWJlciBvZiBpdGVtcyBoZXJlLCB3ZSBmZWx0IHRoYXQgaGF2aW5nIGEgY29uc2lzdGVudCBvcmRlciBoZXJlIHdhcyBzdWZmaWNpZW50LCBhbmQgdGhhdFxuICAgIC8vIHRoZSBlZmZvcnQgdG8gZHluYW1pY2FsbHkgcHV0IHRoZSBpdGVtcyBpbiBhbHBoYWJldGljYWwgb3JkZXIgd2FzIG5vdCB3YXJyYW50ZWQuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvOTU1XG4gICAgY29uc3QgY29tYm9Cb3hJdGVtcyA9IHN1cHBvcnRlZFJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMuc2xpY2UoKS5zb3J0KCkubWFwKCByZWdpb25BbmRDdWx0dXJlID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiByZWdpb25BbmRDdWx0dXJlLFxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggU1RSSU5HX1BST1BFUlRZX01BUFsgcmVnaW9uQW5kQ3VsdHVyZSBdLCBQcmVmZXJlbmNlc0RpYWxvZy5QQU5FTF9TRUNUSU9OX0NPTlRFTlRfT1BUSU9OUyApXG4gICAgICB9O1xuICAgIH0gKTtcblxuICAgIC8vIFRPRE86IE5lZWQgYSBkaWZmZXJlbnQgdG9wIGxheWVyIG5vZGUgZm9yIENvbWJvQm94IGhlcmUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzg0MVxuICAgIHN1cGVyKCByZWdpb25BbmRDdWx0dXJlUHJvcGVydHksIGNvbWJvQm94SXRlbXMsIHBoZXQuam9pc3Quc2ltLnRvcExheWVyLCBvcHRpb25zICk7XG4gIH1cbn1cblxuam9pc3QucmVnaXN0ZXIoICdSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3gnLCBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3ggKTtcbmV4cG9ydCBkZWZhdWx0IFJlZ2lvbkFuZEN1bHR1cmVDb21ib0JveDsiXSwibmFtZXMiOlsib3B0aW9uaXplIiwiVGV4dCIsIkNvbWJvQm94IiwiVGFuZGVtIiwicmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5Iiwic3VwcG9ydGVkUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcyIsImpvaXN0IiwiSm9pc3RTdHJpbmdzIiwiUHJlZmVyZW5jZXNEaWFsb2ciLCJTVFJJTkdfUFJPUEVSVFlfTUFQIiwiYWZyaWNhIiwicHJlZmVyZW5jZXMiLCJ0YWJzIiwibG9jYWxpemF0aW9uIiwicmVnaW9uQW5kQ3VsdHVyZSIsImFmcmljYVN0cmluZ1Byb3BlcnR5IiwiYWZyaWNhTW9kZXN0IiwiYWZyaWNhTW9kZXN0U3RyaW5nUHJvcGVydHkiLCJhc2lhIiwiYXNpYVN0cmluZ1Byb3BlcnR5IiwibGF0aW5BbWVyaWNhIiwibGF0aW5BbWVyaWNhU3RyaW5nUHJvcGVydHkiLCJvY2VhbmlhIiwib2NlYW5pYVN0cmluZ1Byb3BlcnR5IiwicmFuZG9tIiwicmFuZG9tU3RyaW5nUHJvcGVydHkiLCJ1c2EiLCJ1bml0ZWRTdGF0ZXNPZkFtZXJpY2FTdHJpbmdQcm9wZXJ0eSIsIlJlZ2lvbkFuZEN1bHR1cmVDb21ib0JveCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJPUFRfT1VUIiwiY29tYm9Cb3hJdGVtcyIsInNsaWNlIiwic29ydCIsIm1hcCIsInZhbHVlIiwiY3JlYXRlTm9kZSIsIlBBTkVMX1NFQ1RJT05fQ09OVEVOVF9PUFRJT05TIiwicGhldCIsInNpbSIsInRvcExheWVyIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7OztDQUlDLEdBR0QsT0FBT0EsZUFBcUMscUNBQXFDO0FBRWpGLFNBQVNDLElBQUksUUFBUSxpQ0FBaUM7QUFDdEQsT0FBT0MsY0FBbUMsOEJBQThCO0FBQ3hFLE9BQU9DLFlBQVksK0JBQStCO0FBQ2xELE9BQU9DLDRCQUE4Q0MsK0JBQStCLFFBQVEsc0NBQXNDO0FBQ2xJLE9BQU9DLFdBQVcsY0FBYztBQUNoQyxPQUFPQyxrQkFBa0IscUJBQXFCO0FBQzlDLE9BQU9DLHVCQUF1Qix5QkFBeUI7QUFFdkQscURBQXFEO0FBQ3JELE1BQU1DLHNCQUF5RTtJQUM3RUMsUUFBUUgsYUFBYUksV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsZ0JBQWdCLENBQUNDLG9CQUFvQjtJQUN4RkMsY0FBY1QsYUFBYUksV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsZ0JBQWdCLENBQUNHLDBCQUEwQjtJQUNwR0MsTUFBTVgsYUFBYUksV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsZ0JBQWdCLENBQUNLLGtCQUFrQjtJQUNwRkMsY0FBY2IsYUFBYUksV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsZ0JBQWdCLENBQUNPLDBCQUEwQjtJQUNwR0MsU0FBU2YsYUFBYUksV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsZ0JBQWdCLENBQUNTLHFCQUFxQjtJQUMxRkMsUUFBUWpCLGFBQWFJLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxZQUFZLENBQUNDLGdCQUFnQixDQUFDVyxvQkFBb0I7SUFDeEZDLEtBQUtuQixhQUFhSSxXQUFXLENBQUNDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxnQkFBZ0IsQ0FBQ2EsbUNBQW1DO0FBQ3RHO0FBS0EsSUFBQSxBQUFNQywyQkFBTixNQUFNQSxpQ0FBaUMxQjtJQUVyQyxZQUFvQjJCLGVBQWlELENBQUc7UUFFdEUsTUFBTUMsVUFBVTlCLFlBQTRFO1lBRTFGLDRIQUE0SDtZQUM1SCtCLFFBQVE1QixPQUFPNkIsT0FBTztRQUN4QixHQUFHSDtRQUVILGtIQUFrSDtRQUNsSCwwR0FBMEc7UUFDMUcsOEdBQThHO1FBQzlHLG1GQUFtRjtRQUNuRixtREFBbUQ7UUFDbkQsTUFBTUksZ0JBQWdCNUIsZ0NBQWdDNkIsS0FBSyxHQUFHQyxJQUFJLEdBQUdDLEdBQUcsQ0FBRXRCLENBQUFBO1lBQ3hFLE9BQU87Z0JBQ0x1QixPQUFPdkI7Z0JBQ1B3QixZQUFZLElBQU0sSUFBSXJDLEtBQU1RLG1CQUFtQixDQUFFSyxpQkFBa0IsRUFBRU4sa0JBQWtCK0IsNkJBQTZCO1lBQ3RIO1FBQ0Y7UUFFQSw0R0FBNEc7UUFDNUcsS0FBSyxDQUFFbkMsMEJBQTBCNkIsZUFBZU8sS0FBS2xDLEtBQUssQ0FBQ21DLEdBQUcsQ0FBQ0MsUUFBUSxFQUFFWjtJQUMzRTtBQUNGO0FBRUF4QixNQUFNcUMsUUFBUSxDQUFFLDRCQUE0QmY7QUFDNUMsZUFBZUEseUJBQXlCIn0=