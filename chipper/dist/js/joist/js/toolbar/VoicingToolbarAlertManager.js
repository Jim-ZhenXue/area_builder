// Copyright 2021-2023, University of Colorado Boulder
/**
 * Abstract class that creates alert content for the VoicingToolbarItem. Buttons in that item will call these
 * functions to create content that is spoken using speech synthesis. Extend this class and implement these
 * functions. Then pass this as an entry to the PreferencesModel when creating a Sim.
 *
 * @author Jesse Greenberg
 */ import joist from '../joist.js';
let VoicingToolbarAlertManager = class VoicingToolbarAlertManager {
    /**
   * Create the alert content for the simulation overview for the "Overview" button.
   */ createOverviewContent() {
        const screenView = this.screenProperty.value.view;
        assert && assert(screenView, 'view needs to be inititalized for voicing toolbar content');
        return screenView.getVoicingOverviewContent();
    }
    /**
   * Creates the alert content for the simulation details when the "Current Details"
   * button is pressed.
   */ createDetailsContent() {
        const screenView = this.screenProperty.value.view;
        assert && assert(screenView, 'view needs to be inititalized for voicing toolbar content');
        return screenView.getVoicingDetailsContent();
    }
    /**
   * Creates the alert content for an interaction hint when the "Hint" button is pressed.
   */ createHintContent() {
        const screenView = this.screenProperty.value.view;
        assert && assert(screenView, 'view needs to be inititalized for voicing toolbar content');
        return this.screenProperty.value.view.getVoicingHintContent();
    }
    /**
   * @param screenProperty - indicates the active screen
   */ constructor(screenProperty){
        this.screenProperty = screenProperty;
    }
};
joist.register('VoicingToolbarAlertManager', VoicingToolbarAlertManager);
export default VoicingToolbarAlertManager;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL3Rvb2xiYXIvVm9pY2luZ1Rvb2xiYXJBbGVydE1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBjcmVhdGVzIGFsZXJ0IGNvbnRlbnQgZm9yIHRoZSBWb2ljaW5nVG9vbGJhckl0ZW0uIEJ1dHRvbnMgaW4gdGhhdCBpdGVtIHdpbGwgY2FsbCB0aGVzZVxuICogZnVuY3Rpb25zIHRvIGNyZWF0ZSBjb250ZW50IHRoYXQgaXMgc3Bva2VuIHVzaW5nIHNwZWVjaCBzeW50aGVzaXMuIEV4dGVuZCB0aGlzIGNsYXNzIGFuZCBpbXBsZW1lbnQgdGhlc2VcbiAqIGZ1bmN0aW9ucy4gVGhlbiBwYXNzIHRoaXMgYXMgYW4gZW50cnkgdG8gdGhlIFByZWZlcmVuY2VzTW9kZWwgd2hlbiBjcmVhdGluZyBhIFNpbS5cbiAqXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xuICovXG5cbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcbmltcG9ydCB7IFNwZWFrYWJsZVJlc29sdmVkUmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi91dHRlcmFuY2UtcXVldWUvanMvUmVzcG9uc2VQYWNrZXQuanMnO1xuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcbmltcG9ydCB7IEFueVNjcmVlbiB9IGZyb20gJy4uL1NjcmVlbi5qcyc7XG5cbmNsYXNzIFZvaWNpbmdUb29sYmFyQWxlcnRNYW5hZ2VyIHtcblxuICAvLyBUaGUgYWN0aXZlIFNjcmVlbiBmb3IgdGhlIHNpbXVsYXRpb24sIHRvIGdlbmVyYXRlIFZvaWNpbmcgZGVzY3JpcHRpb25zIHRoYXQgYXJlIHJlbGF0ZWQgdG8gdGhlIGFjdGl2ZSBzY3JlZW4uXG4gIHByaXZhdGUgcmVhZG9ubHkgc2NyZWVuUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PEFueVNjcmVlbj47XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzY3JlZW5Qcm9wZXJ0eSAtIGluZGljYXRlcyB0aGUgYWN0aXZlIHNjcmVlblxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzY3JlZW5Qcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8QW55U2NyZWVuPiApIHtcbiAgICB0aGlzLnNjcmVlblByb3BlcnR5ID0gc2NyZWVuUHJvcGVydHk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBhbGVydCBjb250ZW50IGZvciB0aGUgc2ltdWxhdGlvbiBvdmVydmlldyBmb3IgdGhlIFwiT3ZlcnZpZXdcIiBidXR0b24uXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlT3ZlcnZpZXdDb250ZW50KCk6IFNwZWFrYWJsZVJlc29sdmVkUmVzcG9uc2Uge1xuICAgIGNvbnN0IHNjcmVlblZpZXcgPSB0aGlzLnNjcmVlblByb3BlcnR5LnZhbHVlLnZpZXc7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2NyZWVuVmlldywgJ3ZpZXcgbmVlZHMgdG8gYmUgaW5pdGl0YWxpemVkIGZvciB2b2ljaW5nIHRvb2xiYXIgY29udGVudCcgKTtcbiAgICByZXR1cm4gc2NyZWVuVmlldy5nZXRWb2ljaW5nT3ZlcnZpZXdDb250ZW50KCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgYWxlcnQgY29udGVudCBmb3IgdGhlIHNpbXVsYXRpb24gZGV0YWlscyB3aGVuIHRoZSBcIkN1cnJlbnQgRGV0YWlsc1wiXG4gICAqIGJ1dHRvbiBpcyBwcmVzc2VkLlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZURldGFpbHNDb250ZW50KCk6IFNwZWFrYWJsZVJlc29sdmVkUmVzcG9uc2Uge1xuICAgIGNvbnN0IHNjcmVlblZpZXcgPSB0aGlzLnNjcmVlblByb3BlcnR5LnZhbHVlLnZpZXc7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2NyZWVuVmlldywgJ3ZpZXcgbmVlZHMgdG8gYmUgaW5pdGl0YWxpemVkIGZvciB2b2ljaW5nIHRvb2xiYXIgY29udGVudCcgKTtcbiAgICByZXR1cm4gc2NyZWVuVmlldy5nZXRWb2ljaW5nRGV0YWlsc0NvbnRlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBhbGVydCBjb250ZW50IGZvciBhbiBpbnRlcmFjdGlvbiBoaW50IHdoZW4gdGhlIFwiSGludFwiIGJ1dHRvbiBpcyBwcmVzc2VkLlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUhpbnRDb250ZW50KCk6IFNwZWFrYWJsZVJlc29sdmVkUmVzcG9uc2Uge1xuICAgIGNvbnN0IHNjcmVlblZpZXcgPSB0aGlzLnNjcmVlblByb3BlcnR5LnZhbHVlLnZpZXc7XG4gICAgYXNzZXJ0ICYmIGFzc2VydCggc2NyZWVuVmlldywgJ3ZpZXcgbmVlZHMgdG8gYmUgaW5pdGl0YWxpemVkIGZvciB2b2ljaW5nIHRvb2xiYXIgY29udGVudCcgKTtcbiAgICByZXR1cm4gdGhpcy5zY3JlZW5Qcm9wZXJ0eS52YWx1ZS52aWV3LmdldFZvaWNpbmdIaW50Q29udGVudCgpO1xuICB9XG59XG5cbmpvaXN0LnJlZ2lzdGVyKCAnVm9pY2luZ1Rvb2xiYXJBbGVydE1hbmFnZXInLCBWb2ljaW5nVG9vbGJhckFsZXJ0TWFuYWdlciApO1xuZXhwb3J0IGRlZmF1bHQgVm9pY2luZ1Rvb2xiYXJBbGVydE1hbmFnZXI7Il0sIm5hbWVzIjpbImpvaXN0IiwiVm9pY2luZ1Rvb2xiYXJBbGVydE1hbmFnZXIiLCJjcmVhdGVPdmVydmlld0NvbnRlbnQiLCJzY3JlZW5WaWV3Iiwic2NyZWVuUHJvcGVydHkiLCJ2YWx1ZSIsInZpZXciLCJhc3NlcnQiLCJnZXRWb2ljaW5nT3ZlcnZpZXdDb250ZW50IiwiY3JlYXRlRGV0YWlsc0NvbnRlbnQiLCJnZXRWb2ljaW5nRGV0YWlsc0NvbnRlbnQiLCJjcmVhdGVIaW50Q29udGVudCIsImdldFZvaWNpbmdIaW50Q29udGVudCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7OztDQU1DLEdBSUQsT0FBT0EsV0FBVyxjQUFjO0FBR2hDLElBQUEsQUFBTUMsNkJBQU4sTUFBTUE7SUFZSjs7R0FFQyxHQUNELEFBQU9DLHdCQUFtRDtRQUN4RCxNQUFNQyxhQUFhLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxLQUFLLENBQUNDLElBQUk7UUFDakRDLFVBQVVBLE9BQVFKLFlBQVk7UUFDOUIsT0FBT0EsV0FBV0sseUJBQXlCO0lBQzdDO0lBRUE7OztHQUdDLEdBQ0QsQUFBT0MsdUJBQWtEO1FBQ3ZELE1BQU1OLGFBQWEsSUFBSSxDQUFDQyxjQUFjLENBQUNDLEtBQUssQ0FBQ0MsSUFBSTtRQUNqREMsVUFBVUEsT0FBUUosWUFBWTtRQUM5QixPQUFPQSxXQUFXTyx3QkFBd0I7SUFDNUM7SUFFQTs7R0FFQyxHQUNELEFBQU9DLG9CQUErQztRQUNwRCxNQUFNUixhQUFhLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxLQUFLLENBQUNDLElBQUk7UUFDakRDLFVBQVVBLE9BQVFKLFlBQVk7UUFDOUIsT0FBTyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNNLHFCQUFxQjtJQUM3RDtJQWpDQTs7R0FFQyxHQUNELFlBQW9CUixjQUE0QyxDQUFHO1FBQ2pFLElBQUksQ0FBQ0EsY0FBYyxHQUFHQTtJQUN4QjtBQTZCRjtBQUVBSixNQUFNYSxRQUFRLENBQUUsOEJBQThCWjtBQUM5QyxlQUFlQSwyQkFBMkIifQ==