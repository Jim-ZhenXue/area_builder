// Copyright 2024, University of Colorado Boulder
/**
 * A Property whose value will change with the "region and culture", and will take a value that can be used with Images.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ import { DerivedProperty1 } from '../../../axon/js/DerivedProperty.js';
import joist from '../joist.js';
import concreteRegionAndCultureProperty, { concreteRegionAndCultureValues } from './concreteRegionAndCultureProperty.js';
let LocalizedImageProperty = class LocalizedImageProperty extends DerivedProperty1 {
    constructor(// The name of the image, for debugging purposes (from the ${repo}-images.json file)
    imageName, // Allow optional, so that we can support a subset of regionAndCultures.
    // BUT also require the usa regionAndCulture, so that we can always have a fallback.
    imageMap){
        assert && Object.keys(imageMap).forEach((regionAndCulture)=>{
            assert && assert(concreteRegionAndCultureValues.includes(regionAndCulture), `Unsupported regionAndCulture provided to LocalizedImageProperty: ${regionAndCulture}`);
        });
        assert && concreteRegionAndCultureValues.forEach((regionAndCulture)=>{
            assert && assert(regionAndCulture in imageMap, `Missing image for regionAndCulture: ${regionAndCulture}`);
        });
        super([
            concreteRegionAndCultureProperty
        ], (regionAndCulture)=>{
            const image = imageMap[regionAndCulture];
            assert && assert(image);
            return image;
        }), this.imageName = imageName, this.imageMap = imageMap;
    }
};
export { LocalizedImageProperty as default };
joist.register('LocalizedImageProperty', LocalizedImageProperty);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL2kxOG4vTG9jYWxpemVkSW1hZ2VQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQSBQcm9wZXJ0eSB3aG9zZSB2YWx1ZSB3aWxsIGNoYW5nZSB3aXRoIHRoZSBcInJlZ2lvbiBhbmQgY3VsdHVyZVwiLCBhbmQgd2lsbCB0YWtlIGEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIEltYWdlcy5cbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IHsgRGVyaXZlZFByb3BlcnR5MSB9IGZyb20gJy4uLy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcbmltcG9ydCB7IEltYWdlYWJsZUltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBqb2lzdCBmcm9tICcuLi9qb2lzdC5qcyc7XG5pbXBvcnQgY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHksIHsgQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlLCBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMgfSBmcm9tICcuL2NvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYWxpemVkSW1hZ2VQcm9wZXJ0eSBleHRlbmRzIERlcml2ZWRQcm9wZXJ0eTE8SW1hZ2VhYmxlSW1hZ2UsIENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZT4ge1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgLy8gVGhlIG5hbWUgb2YgdGhlIGltYWdlLCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzIChmcm9tIHRoZSAke3JlcG99LWltYWdlcy5qc29uIGZpbGUpXG4gICAgcHVibGljIHJlYWRvbmx5IGltYWdlTmFtZTogc3RyaW5nLFxuXG4gICAgLy8gQWxsb3cgb3B0aW9uYWwsIHNvIHRoYXQgd2UgY2FuIHN1cHBvcnQgYSBzdWJzZXQgb2YgcmVnaW9uQW5kQ3VsdHVyZXMuXG4gICAgLy8gQlVUIGFsc28gcmVxdWlyZSB0aGUgdXNhIHJlZ2lvbkFuZEN1bHR1cmUsIHNvIHRoYXQgd2UgY2FuIGFsd2F5cyBoYXZlIGEgZmFsbGJhY2suXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbWFnZU1hcDogUGFydGlhbDxSZWNvcmQ8Q29uY3JldGVSZWdpb25BbmRDdWx0dXJlLCBJbWFnZWFibGVJbWFnZT4+ICYgeyB1c2E6IEltYWdlYWJsZUltYWdlIH1cbiAgKSB7XG4gICAgYXNzZXJ0ICYmIE9iamVjdC5rZXlzKCBpbWFnZU1hcCApLmZvckVhY2goIHJlZ2lvbkFuZEN1bHR1cmUgPT4ge1xuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggY29uY3JldGVSZWdpb25BbmRDdWx0dXJlVmFsdWVzLmluY2x1ZGVzKCByZWdpb25BbmRDdWx0dXJlIGFzIENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSApLFxuICAgICAgICBgVW5zdXBwb3J0ZWQgcmVnaW9uQW5kQ3VsdHVyZSBwcm92aWRlZCB0byBMb2NhbGl6ZWRJbWFnZVByb3BlcnR5OiAke3JlZ2lvbkFuZEN1bHR1cmV9YCApO1xuICAgIH0gKTtcblxuICAgIGFzc2VydCAmJiBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMuZm9yRWFjaCggcmVnaW9uQW5kQ3VsdHVyZSA9PiB7XG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCByZWdpb25BbmRDdWx0dXJlIGluIGltYWdlTWFwLCBgTWlzc2luZyBpbWFnZSBmb3IgcmVnaW9uQW5kQ3VsdHVyZTogJHtyZWdpb25BbmRDdWx0dXJlfWAgKTtcbiAgICB9ICk7XG5cbiAgICBzdXBlciggWyBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSBdLCAoIHJlZ2lvbkFuZEN1bHR1cmU6IENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSApID0+IHtcbiAgICAgIGNvbnN0IGltYWdlID0gaW1hZ2VNYXBbIHJlZ2lvbkFuZEN1bHR1cmUgXSE7XG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpbWFnZSApO1xuXG4gICAgICByZXR1cm4gaW1hZ2U7XG4gICAgfSApO1xuICB9XG59XG5cbmpvaXN0LnJlZ2lzdGVyKCAnTG9jYWxpemVkSW1hZ2VQcm9wZXJ0eScsIExvY2FsaXplZEltYWdlUHJvcGVydHkgKTsiXSwibmFtZXMiOlsiRGVyaXZlZFByb3BlcnR5MSIsImpvaXN0IiwiY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHkiLCJjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMiLCJMb2NhbGl6ZWRJbWFnZVByb3BlcnR5IiwiaW1hZ2VOYW1lIiwiaW1hZ2VNYXAiLCJhc3NlcnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInJlZ2lvbkFuZEN1bHR1cmUiLCJpbmNsdWRlcyIsImltYWdlIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUVqRDs7OztDQUlDLEdBRUQsU0FBU0EsZ0JBQWdCLFFBQVEsc0NBQXNDO0FBRXZFLE9BQU9DLFdBQVcsY0FBYztBQUNoQyxPQUFPQyxvQ0FBOERDLDhCQUE4QixRQUFRLHdDQUF3QztBQUVwSSxJQUFBLEFBQU1DLHlCQUFOLE1BQU1BLCtCQUErQko7SUFDbEQsWUFDRSxvRkFBb0Y7SUFDcEVLLFNBQWlCLEVBRWpDLHdFQUF3RTtJQUN4RSxvRkFBb0Y7SUFDbkVDLFFBQTZGLENBQzlHO1FBQ0FDLFVBQVVDLE9BQU9DLElBQUksQ0FBRUgsVUFBV0ksT0FBTyxDQUFFQyxDQUFBQTtZQUN6Q0osVUFBVUEsT0FBUUosK0JBQStCUyxRQUFRLENBQUVELG1CQUN6RCxDQUFDLGlFQUFpRSxFQUFFQSxrQkFBa0I7UUFDMUY7UUFFQUosVUFBVUosK0JBQStCTyxPQUFPLENBQUVDLENBQUFBO1lBQ2hESixVQUFVQSxPQUFRSSxvQkFBb0JMLFVBQVUsQ0FBQyxvQ0FBb0MsRUFBRUssa0JBQWtCO1FBQzNHO1FBRUEsS0FBSyxDQUFFO1lBQUVUO1NBQWtDLEVBQUUsQ0FBRVM7WUFDN0MsTUFBTUUsUUFBUVAsUUFBUSxDQUFFSyxpQkFBa0I7WUFDMUNKLFVBQVVBLE9BQVFNO1lBRWxCLE9BQU9BO1FBQ1QsU0FwQmdCUixZQUFBQSxnQkFJQ0MsV0FBQUE7SUFpQm5CO0FBQ0Y7QUF6QkEsU0FBcUJGLG9DQXlCcEI7QUFFREgsTUFBTWEsUUFBUSxDQUFFLDBCQUEwQlYifQ==