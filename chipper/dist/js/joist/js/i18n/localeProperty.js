// Copyright 2022-2024, University of Colorado Boulder
/**
 * A universal locale Property that is accessible independently of the running Sim instance.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */ var _window_phet_chipper_queryParameters, _window_phet_chipper, _window_phet;
import Property from '../../../axon/js/Property.js';
import StringUtils from '../../../phetcommon/js/util/StringUtils.js';
import { globalKeyStateTracker, KeyboardUtils } from '../../../scenery/js/imports.js';
import Tandem from '../../../tandem/js/Tandem.js';
import StringIO from '../../../tandem/js/types/StringIO.js';
import joist from '../joist.js';
assert && assert(phet.chipper.locale, 'phet.chipper.locale global expected');
assert && assert(phet.chipper.localeData, 'phet.chipper.localeData global expected');
assert && assert(phet.chipper.strings, 'phet.chipper.strings global expected');
// Sort these properly by their localized name (without using _.sortBy, since string comparison does not provide
// a good sorting experience). See https://github.com/phetsims/joist/issues/965
const availableRuntimeLocales = Object.keys(phet.chipper.strings).sort((a, b)=>{
    const lowerCaseA = StringUtils.localeToLocalizedName(a).toLowerCase();
    const lowerCaseB = StringUtils.localeToLocalizedName(b).toLowerCase();
    return lowerCaseA.localeCompare(lowerCaseB, 'en-US', {
        sensitivity: 'base'
    });
});
export class LocaleProperty extends Property {
    // Override to provide grace and support for the full definition of allowed locales (aligned with the query parameter
    // schema). For example three letter values, and case insensitivity. See checkAndRemapLocale() for details. NOTE that
    // this will assert if the locale doesn't match the right format.
    unguardedSet(value) {
        // NOTE: updates phet.chipper.locale as a side-effect
        super.unguardedSet(phet.chipper.checkAndRemapLocale(value, true));
    }
    // This improves the PhET-iO Studio interface, by giving available values, without triggering validation if you want
    // to use the more general locale schema (three digit/case-insensitive/etc).
    toStateObject() {
        const parentObject = super.toStateObject();
        // Provide via validValues without forcing validation assertions if a different value is set.
        parentObject.validValues = [
            ...this.availableRuntimeLocales
        ].sort();
        return parentObject;
    }
    // Dynamic local switching is not supported if there is only one available runtime locale
    get supportsDynamicLocale() {
        return this.availableRuntimeLocales.length > 1;
    }
    constructor(...args){
        super(...args), this.availableRuntimeLocales = availableRuntimeLocales;
    }
}
const localeProperty = new LocaleProperty(phet.chipper.locale, {
    tandem: Tandem.GENERAL_MODEL.createTandem('localeProperty'),
    valueType: 'string',
    phetioFeatured: true,
    phetioValueType: StringIO,
    phetioDocumentation: 'Specifies language currently displayed in the simulation'
});
if ((_window_phet = window.phet) == null ? void 0 : (_window_phet_chipper = _window_phet.chipper) == null ? void 0 : (_window_phet_chipper_queryParameters = _window_phet_chipper.queryParameters) == null ? void 0 : _window_phet_chipper_queryParameters.keyboardLocaleSwitcher) {
    // DUPLICATION ALERT: don't change these without consulting PHET_IO_WRAPPERS/PhetioClient.initializeKeyboardLocaleSwitcher()
    const FORWARD_KEY = KeyboardUtils.KEY_I;
    const BACKWARD_KEY = KeyboardUtils.KEY_U;
    globalKeyStateTracker.keydownEmitter.addListener((event)=>{
        const bump = (delta)=>{
            // Ctrl + u in Chrome on Windows is "view source" in a new tab
            event.preventDefault();
            const index = availableRuntimeLocales.indexOf(localeProperty.value);
            const nextIndex = (index + delta + availableRuntimeLocales.length) % availableRuntimeLocales.length;
            localeProperty.value = availableRuntimeLocales[nextIndex];
            // Indicate the new locale on the console
            console.log(localeProperty.value);
        };
        if (event.ctrlKey && !event.shiftKey && !event.metaKey && !event.altKey) {
            if (KeyboardUtils.isKeyEvent(event, FORWARD_KEY)) {
                bump(+1);
            } else if (KeyboardUtils.isKeyEvent(event, BACKWARD_KEY)) {
                bump(-1);
            }
        }
    });
}
joist.register('localeProperty', localeProperty);
export default localeProperty;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL2kxOG4vbG9jYWxlUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogQSB1bml2ZXJzYWwgbG9jYWxlIFByb3BlcnR5IHRoYXQgaXMgYWNjZXNzaWJsZSBpbmRlcGVuZGVudGx5IG9mIHRoZSBydW5uaW5nIFNpbSBpbnN0YW5jZS5cbiAqXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XG4gKi9cblxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xuaW1wb3J0IHsgUmVhZE9ubHlQcm9wZXJ0eVN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9SZWFkT25seVByb3BlcnR5LmpzJztcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xuaW1wb3J0IHsgZ2xvYmFsS2V5U3RhdGVUcmFja2VyLCBLZXlib2FyZFV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcbmltcG9ydCBqb2lzdCBmcm9tICcuLi9qb2lzdC5qcyc7XG5cbi8vIEhhcmQgY29kaW5nIGEgZmV3IGxvY2FsZXMgaGVyZSBpcyBiZXR0ZXIgdGhhbiByZWx5aW5nIG9uIGEgZ2VuZXJhdGVkIG91dHB1dCBvZiB0aGUgXCJncm91bmQgdHJ1dGhcIiBsb2NhbGVEYXRhIGluIGJhYmVsLFxuLy8gd2hpY2ggY291bGQgY2hhbmdlIGF0IGFueSB0aW1lIGFuZCBjYXVzZSBhIHR5cGUgZXJyb3IgaGVyZSAoZWl0aGVyIG9uIG1haW4gb3Igd29yc2UsIGluIHJlbGVhc2UgYnJhbmNoZXMpLiBBbHNvIHdlXG4vLyBjb3VsZCByZWFjaCB0aGUgVHlwZVNjcmlwdCBtYXhpbXVtIGZvciBudW1iZXIgb2Ygc3RyaW5nIHVuaW9uIGVudHJpZXMsIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy80MTE2MCNpc3N1ZWNvbW1lbnQtMTI4NzI3MTEzMikuXG4vLyBGZWVsIGZyZWUgdG8gYWRkIGFueSBsb2NhbGUgaGVyZSBhcyBuZWVkZWQgZm9yIHRoZSB0eXBlLlxuZXhwb3J0IHR5cGUgTG9jYWxlID0gJ2VuJyB8ICdkZScgfCAnb3QnIHwgJ3poX0NOJyB8ICd6aF9ISycgfCAndGwnO1xuXG5hc3NlcnQgJiYgYXNzZXJ0KCBwaGV0LmNoaXBwZXIubG9jYWxlLCAncGhldC5jaGlwcGVyLmxvY2FsZSBnbG9iYWwgZXhwZWN0ZWQnICk7XG5hc3NlcnQgJiYgYXNzZXJ0KCBwaGV0LmNoaXBwZXIubG9jYWxlRGF0YSwgJ3BoZXQuY2hpcHBlci5sb2NhbGVEYXRhIGdsb2JhbCBleHBlY3RlZCcgKTtcbmFzc2VydCAmJiBhc3NlcnQoIHBoZXQuY2hpcHBlci5zdHJpbmdzLCAncGhldC5jaGlwcGVyLnN0cmluZ3MgZ2xvYmFsIGV4cGVjdGVkJyApO1xuXG4vLyBTb3J0IHRoZXNlIHByb3Blcmx5IGJ5IHRoZWlyIGxvY2FsaXplZCBuYW1lICh3aXRob3V0IHVzaW5nIF8uc29ydEJ5LCBzaW5jZSBzdHJpbmcgY29tcGFyaXNvbiBkb2VzIG5vdCBwcm92aWRlXG4vLyBhIGdvb2Qgc29ydGluZyBleHBlcmllbmNlKS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvOTY1XG5jb25zdCBhdmFpbGFibGVSdW50aW1lTG9jYWxlcyA9ICggT2JqZWN0LmtleXMoIHBoZXQuY2hpcHBlci5zdHJpbmdzICkgYXMgTG9jYWxlW10gKS5zb3J0KCAoIGEsIGIgKSA9PiB7XG4gIGNvbnN0IGxvd2VyQ2FzZUEgPSBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUoIGEgKS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBsb3dlckNhc2VCID0gU3RyaW5nVXRpbHMubG9jYWxlVG9Mb2NhbGl6ZWROYW1lKCBiICkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGxvd2VyQ2FzZUEubG9jYWxlQ29tcGFyZSggbG93ZXJDYXNlQiwgJ2VuLVVTJywgeyBzZW5zaXRpdml0eTogJ2Jhc2UnIH0gKTtcbn0gKTtcblxuZXhwb3J0IGNsYXNzIExvY2FsZVByb3BlcnR5IGV4dGVuZHMgUHJvcGVydHk8TG9jYWxlPiB7XG4gIHB1YmxpYyByZWFkb25seSBhdmFpbGFibGVSdW50aW1lTG9jYWxlczogTG9jYWxlW10gPSBhdmFpbGFibGVSdW50aW1lTG9jYWxlcztcblxuICAvLyBPdmVycmlkZSB0byBwcm92aWRlIGdyYWNlIGFuZCBzdXBwb3J0IGZvciB0aGUgZnVsbCBkZWZpbml0aW9uIG9mIGFsbG93ZWQgbG9jYWxlcyAoYWxpZ25lZCB3aXRoIHRoZSBxdWVyeSBwYXJhbWV0ZXJcbiAgLy8gc2NoZW1hKS4gRm9yIGV4YW1wbGUgdGhyZWUgbGV0dGVyIHZhbHVlcywgYW5kIGNhc2UgaW5zZW5zaXRpdml0eS4gU2VlIGNoZWNrQW5kUmVtYXBMb2NhbGUoKSBmb3IgZGV0YWlscy4gTk9URSB0aGF0XG4gIC8vIHRoaXMgd2lsbCBhc3NlcnQgaWYgdGhlIGxvY2FsZSBkb2Vzbid0IG1hdGNoIHRoZSByaWdodCBmb3JtYXQuXG4gIHByb3RlY3RlZCBvdmVycmlkZSB1bmd1YXJkZWRTZXQoIHZhbHVlOiBMb2NhbGUgKTogdm9pZCB7XG5cbiAgICAvLyBOT1RFOiB1cGRhdGVzIHBoZXQuY2hpcHBlci5sb2NhbGUgYXMgYSBzaWRlLWVmZmVjdFxuICAgIHN1cGVyLnVuZ3VhcmRlZFNldCggcGhldC5jaGlwcGVyLmNoZWNrQW5kUmVtYXBMb2NhbGUoIHZhbHVlLCB0cnVlICkgKTtcbiAgfVxuXG4gIC8vIFRoaXMgaW1wcm92ZXMgdGhlIFBoRVQtaU8gU3R1ZGlvIGludGVyZmFjZSwgYnkgZ2l2aW5nIGF2YWlsYWJsZSB2YWx1ZXMsIHdpdGhvdXQgdHJpZ2dlcmluZyB2YWxpZGF0aW9uIGlmIHlvdSB3YW50XG4gIC8vIHRvIHVzZSB0aGUgbW9yZSBnZW5lcmFsIGxvY2FsZSBzY2hlbWEgKHRocmVlIGRpZ2l0L2Nhc2UtaW5zZW5zaXRpdmUvZXRjKS5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHRvU3RhdGVPYmplY3Q8U3RhdGVUeXBlPigpOiBSZWFkT25seVByb3BlcnR5U3RhdGU8U3RhdGVUeXBlPiB7XG4gICAgY29uc3QgcGFyZW50T2JqZWN0ID0gc3VwZXIudG9TdGF0ZU9iamVjdDxTdGF0ZVR5cGU+KCk7XG5cbiAgICAvLyBQcm92aWRlIHZpYSB2YWxpZFZhbHVlcyB3aXRob3V0IGZvcmNpbmcgdmFsaWRhdGlvbiBhc3NlcnRpb25zIGlmIGEgZGlmZmVyZW50IHZhbHVlIGlzIHNldC5cbiAgICBwYXJlbnRPYmplY3QudmFsaWRWYWx1ZXMgPSBbIC4uLnRoaXMuYXZhaWxhYmxlUnVudGltZUxvY2FsZXMgXS5zb3J0KCkgYXMgU3RhdGVUeXBlW107XG4gICAgcmV0dXJuIHBhcmVudE9iamVjdDtcbiAgfVxuXG4gIC8vIER5bmFtaWMgbG9jYWwgc3dpdGNoaW5nIGlzIG5vdCBzdXBwb3J0ZWQgaWYgdGhlcmUgaXMgb25seSBvbmUgYXZhaWxhYmxlIHJ1bnRpbWUgbG9jYWxlXG4gIHB1YmxpYyBnZXQgc3VwcG9ydHNEeW5hbWljTG9jYWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZVJ1bnRpbWVMb2NhbGVzLmxlbmd0aCA+IDE7XG4gIH1cbn1cblxuY29uc3QgbG9jYWxlUHJvcGVydHkgPSBuZXcgTG9jYWxlUHJvcGVydHkoIHBoZXQuY2hpcHBlci5sb2NhbGUsIHtcbiAgdGFuZGVtOiBUYW5kZW0uR0VORVJBTF9NT0RFTC5jcmVhdGVUYW5kZW0oICdsb2NhbGVQcm9wZXJ0eScgKSxcbiAgdmFsdWVUeXBlOiAnc3RyaW5nJyxcbiAgcGhldGlvRmVhdHVyZWQ6IHRydWUsXG4gIHBoZXRpb1ZhbHVlVHlwZTogU3RyaW5nSU8sXG4gIHBoZXRpb0RvY3VtZW50YXRpb246ICdTcGVjaWZpZXMgbGFuZ3VhZ2UgY3VycmVudGx5IGRpc3BsYXllZCBpbiB0aGUgc2ltdWxhdGlvbidcbn0gKTtcblxuaWYgKCB3aW5kb3cucGhldD8uY2hpcHBlcj8ucXVlcnlQYXJhbWV0ZXJzPy5rZXlib2FyZExvY2FsZVN3aXRjaGVyICkge1xuXG4gIC8vIERVUExJQ0FUSU9OIEFMRVJUOiBkb24ndCBjaGFuZ2UgdGhlc2Ugd2l0aG91dCBjb25zdWx0aW5nIFBIRVRfSU9fV1JBUFBFUlMvUGhldGlvQ2xpZW50LmluaXRpYWxpemVLZXlib2FyZExvY2FsZVN3aXRjaGVyKClcbiAgY29uc3QgRk9SV0FSRF9LRVkgPSBLZXlib2FyZFV0aWxzLktFWV9JO1xuICBjb25zdCBCQUNLV0FSRF9LRVkgPSBLZXlib2FyZFV0aWxzLktFWV9VO1xuXG4gIGdsb2JhbEtleVN0YXRlVHJhY2tlci5rZXlkb3duRW1pdHRlci5hZGRMaXN0ZW5lciggKCBldmVudDogS2V5Ym9hcmRFdmVudCApID0+IHtcblxuICAgIGNvbnN0IGJ1bXAgPSAoIGRlbHRhOiBudW1iZXIgKSA9PiB7XG5cbiAgICAgIC8vIEN0cmwgKyB1IGluIENocm9tZSBvbiBXaW5kb3dzIGlzIFwidmlldyBzb3VyY2VcIiBpbiBhIG5ldyB0YWJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gYXZhaWxhYmxlUnVudGltZUxvY2FsZXMuaW5kZXhPZiggbG9jYWxlUHJvcGVydHkudmFsdWUgKTtcbiAgICAgIGNvbnN0IG5leHRJbmRleCA9ICggaW5kZXggKyBkZWx0YSArIGF2YWlsYWJsZVJ1bnRpbWVMb2NhbGVzLmxlbmd0aCApICUgYXZhaWxhYmxlUnVudGltZUxvY2FsZXMubGVuZ3RoO1xuICAgICAgbG9jYWxlUHJvcGVydHkudmFsdWUgPSBhdmFpbGFibGVSdW50aW1lTG9jYWxlc1sgbmV4dEluZGV4IF07XG5cbiAgICAgIC8vIEluZGljYXRlIHRoZSBuZXcgbG9jYWxlIG9uIHRoZSBjb25zb2xlXG4gICAgICBjb25zb2xlLmxvZyggbG9jYWxlUHJvcGVydHkudmFsdWUgKTtcbiAgICB9O1xuXG4gICAgaWYgKCBldmVudC5jdHJsS2V5ICYmICFldmVudC5zaGlmdEtleSAmJiAhZXZlbnQubWV0YUtleSAmJiAhZXZlbnQuYWx0S2V5ICkge1xuICAgICAgaWYgKCBLZXlib2FyZFV0aWxzLmlzS2V5RXZlbnQoIGV2ZW50LCBGT1JXQVJEX0tFWSApICkge1xuICAgICAgICBidW1wKCArMSApO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIEtleWJvYXJkVXRpbHMuaXNLZXlFdmVudCggZXZlbnQsIEJBQ0tXQVJEX0tFWSApICkge1xuICAgICAgICBidW1wKCAtMSApO1xuICAgICAgfVxuICAgIH1cbiAgfSApO1xufVxuXG5qb2lzdC5yZWdpc3RlciggJ2xvY2FsZVByb3BlcnR5JywgbG9jYWxlUHJvcGVydHkgKTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxlUHJvcGVydHk7Il0sIm5hbWVzIjpbIndpbmRvdyIsIlByb3BlcnR5IiwiU3RyaW5nVXRpbHMiLCJnbG9iYWxLZXlTdGF0ZVRyYWNrZXIiLCJLZXlib2FyZFV0aWxzIiwiVGFuZGVtIiwiU3RyaW5nSU8iLCJqb2lzdCIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwibG9jYWxlIiwibG9jYWxlRGF0YSIsInN0cmluZ3MiLCJhdmFpbGFibGVSdW50aW1lTG9jYWxlcyIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiYSIsImIiLCJsb3dlckNhc2VBIiwibG9jYWxlVG9Mb2NhbGl6ZWROYW1lIiwidG9Mb3dlckNhc2UiLCJsb3dlckNhc2VCIiwibG9jYWxlQ29tcGFyZSIsInNlbnNpdGl2aXR5IiwiTG9jYWxlUHJvcGVydHkiLCJ1bmd1YXJkZWRTZXQiLCJ2YWx1ZSIsImNoZWNrQW5kUmVtYXBMb2NhbGUiLCJ0b1N0YXRlT2JqZWN0IiwicGFyZW50T2JqZWN0IiwidmFsaWRWYWx1ZXMiLCJzdXBwb3J0c0R5bmFtaWNMb2NhbGUiLCJsZW5ndGgiLCJsb2NhbGVQcm9wZXJ0eSIsInRhbmRlbSIsIkdFTkVSQUxfTU9ERUwiLCJjcmVhdGVUYW5kZW0iLCJ2YWx1ZVR5cGUiLCJwaGV0aW9GZWF0dXJlZCIsInBoZXRpb1ZhbHVlVHlwZSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJxdWVyeVBhcmFtZXRlcnMiLCJrZXlib2FyZExvY2FsZVN3aXRjaGVyIiwiRk9SV0FSRF9LRVkiLCJLRVlfSSIsIkJBQ0tXQVJEX0tFWSIsIktFWV9VIiwia2V5ZG93bkVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImV2ZW50IiwiYnVtcCIsImRlbHRhIiwicHJldmVudERlZmF1bHQiLCJpbmRleCIsImluZGV4T2YiLCJuZXh0SW5kZXgiLCJjb25zb2xlIiwibG9nIiwiY3RybEtleSIsInNoaWZ0S2V5IiwibWV0YUtleSIsImFsdEtleSIsImlzS2V5RXZlbnQiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBRXREOzs7O0NBSUMsT0FnRUlBLHNDQUFBQSxzQkFBQUE7QUE5REwsT0FBT0MsY0FBYywrQkFBK0I7QUFFcEQsT0FBT0MsaUJBQWlCLDZDQUE2QztBQUNyRSxTQUFTQyxxQkFBcUIsRUFBRUMsYUFBYSxRQUFRLGlDQUFpQztBQUN0RixPQUFPQyxZQUFZLCtCQUErQjtBQUNsRCxPQUFPQyxjQUFjLHVDQUF1QztBQUM1RCxPQUFPQyxXQUFXLGNBQWM7QUFRaENDLFVBQVVBLE9BQVFDLEtBQUtDLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFO0FBQ3ZDSCxVQUFVQSxPQUFRQyxLQUFLQyxPQUFPLENBQUNFLFVBQVUsRUFBRTtBQUMzQ0osVUFBVUEsT0FBUUMsS0FBS0MsT0FBTyxDQUFD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