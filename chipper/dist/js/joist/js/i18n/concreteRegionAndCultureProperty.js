// Copyright 2024, University of Colorado Boulder
/**
 * Like regionAndCultureProperty, but excludes the "random" option, since it doesn't represent a concrete region and culture.
 * "random" means to randomly select one of the other choices that is supported by the sim.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Chris Malley (PixelZoom, Inc.)
 */ import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import dotRandom from '../../../dot/js/dotRandom.js';
import joist from '../joist.js';
import regionAndCultureProperty, { supportedRegionAndCultureValues } from './regionAndCultureProperty.js';
// The values supported by the sim at runtime, minus 'random'.
export const concreteRegionAndCultureValues = supportedRegionAndCultureValues.filter((regionAndCulture)=>regionAndCulture !== 'random');
// The previous value of concreteRegionAndCultureProperty.
let previousConcreteRegionAndCulture = null;
// When 'random' is selected, randomly select one of the other choices, but not the previous choice.
export const concreteRegionAndCultureProperty = new DerivedProperty([
    regionAndCultureProperty
], (regionAndCulture)=>{
    const concreteRegionAndCulture = regionAndCulture === 'random' ? dotRandom.sample(supportedRegionAndCultureValues.filter((regionAndCulture)=>{
        return regionAndCulture !== 'random' && regionAndCulture !== previousConcreteRegionAndCulture;
    })) : regionAndCulture;
    previousConcreteRegionAndCulture = concreteRegionAndCulture;
    return concreteRegionAndCulture;
});
joist.register('concreteRegionAndCultureProperty', concreteRegionAndCultureProperty);
export default concreteRegionAndCultureProperty;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL2kxOG4vY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxuXG4vKipcbiAqIExpa2UgcmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LCBidXQgZXhjbHVkZXMgdGhlIFwicmFuZG9tXCIgb3B0aW9uLCBzaW5jZSBpdCBkb2Vzbid0IHJlcHJlc2VudCBhIGNvbmNyZXRlIHJlZ2lvbiBhbmQgY3VsdHVyZS5cbiAqIFwicmFuZG9tXCIgbWVhbnMgdG8gcmFuZG9tbHkgc2VsZWN0IG9uZSBvZiB0aGUgb3RoZXIgY2hvaWNlcyB0aGF0IGlzIHN1cHBvcnRlZCBieSB0aGUgc2ltLlxuICpcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXG4gKi9cblxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgZG90UmFuZG9tIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9kb3RSYW5kb20uanMnO1xuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcbmltcG9ydCByZWdpb25BbmRDdWx0dXJlUHJvcGVydHksIHsgUmVnaW9uQW5kQ3VsdHVyZSwgc3VwcG9ydGVkUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcyB9IGZyb20gJy4vcmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LmpzJztcblxuLy8gVGhlIGNvbXBsZXRlIHNldCBvZiBSZWdpb25BbmRDdWx0dXJlIHZhbHVlcywgbWludXMgJ3JhbmRvbScuXG5leHBvcnQgdHlwZSBDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmUgPSBFeGNsdWRlPFJlZ2lvbkFuZEN1bHR1cmUsICdyYW5kb20nPjtcblxuLy8gVGhlIHZhbHVlcyBzdXBwb3J0ZWQgYnkgdGhlIHNpbSBhdCBydW50aW1lLCBtaW51cyAncmFuZG9tJy5cbmV4cG9ydCBjb25zdCBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXM6IENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVtdID1cbiAgc3VwcG9ydGVkUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcy5maWx0ZXIoIHJlZ2lvbkFuZEN1bHR1cmUgPT4gcmVnaW9uQW5kQ3VsdHVyZSAhPT0gJ3JhbmRvbScgKSBhcyBDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVbXTtcblxuLy8gVGhlIHByZXZpb3VzIHZhbHVlIG9mIGNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LlxubGV0IHByZXZpb3VzQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlOiBDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmUgfCBudWxsID0gbnVsbDtcblxuLy8gV2hlbiAncmFuZG9tJyBpcyBzZWxlY3RlZCwgcmFuZG9tbHkgc2VsZWN0IG9uZSBvZiB0aGUgb3RoZXIgY2hvaWNlcywgYnV0IG5vdCB0aGUgcHJldmlvdXMgY2hvaWNlLlxuZXhwb3J0IGNvbnN0IGNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmU+ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcbiAgWyByZWdpb25BbmRDdWx0dXJlUHJvcGVydHkgXSwgKCByZWdpb25BbmRDdWx0dXJlID0+IHtcblxuICBjb25zdCBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmUgPSByZWdpb25BbmRDdWx0dXJlID09PSAncmFuZG9tJyA/IGRvdFJhbmRvbS5zYW1wbGUoIHN1cHBvcnRlZFJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMuZmlsdGVyKCByZWdpb25BbmRDdWx0dXJlID0+IHtcbiAgICByZXR1cm4gcmVnaW9uQW5kQ3VsdHVyZSAhPT0gJ3JhbmRvbScgJiYgcmVnaW9uQW5kQ3VsdHVyZSAhPT0gcHJldmlvdXNDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmU7XG4gIH0gKSApIGFzIENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSA6IHJlZ2lvbkFuZEN1bHR1cmU7XG5cbiAgcHJldmlvdXNDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmUgPSBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmU7XG5cbiAgcmV0dXJuIGNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZTtcbn0gKSApO1xuXG5qb2lzdC5yZWdpc3RlciggJ2NvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5JywgY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHkgKTtcblxuZXhwb3J0IGRlZmF1bHQgY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHk7Il0sIm5hbWVzIjpbIkRlcml2ZWRQcm9wZXJ0eSIsImRvdFJhbmRvbSIsImpvaXN0IiwicmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5Iiwic3VwcG9ydGVkUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcyIsImNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcyIsImZpbHRlciIsInJlZ2lvbkFuZEN1bHR1cmUiLCJwcmV2aW91c0NvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSIsImNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5IiwiY29uY3JldGVSZWdpb25BbmRDdWx0dXJlIiwic2FtcGxlIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUVqRDs7Ozs7O0NBTUMsR0FFRCxPQUFPQSxxQkFBcUIsc0NBQXNDO0FBRWxFLE9BQU9DLGVBQWUsK0JBQStCO0FBQ3JELE9BQU9DLFdBQVcsY0FBYztBQUNoQyxPQUFPQyw0QkFBOENDLCtCQUErQixRQUFRLGdDQUFnQztBQUs1SCw4REFBOEQ7QUFDOUQsT0FBTyxNQUFNQyxpQ0FDWEQsZ0NBQWdDRSxNQUFNLENBQUVDLENBQUFBLG1CQUFvQkEscUJBQXFCLFVBQXlDO0FBRTVILDBEQUEwRDtBQUMxRCxJQUFJQyxtQ0FBb0U7QUFFeEUsb0dBQW9HO0FBQ3BHLE9BQU8sTUFBTUMsbUNBQWdGLElBQUlULGdCQUMvRjtJQUFFRztDQUEwQixFQUFJSSxDQUFBQTtJQUVoQyxNQUFNRywyQkFBMkJILHFCQUFxQixXQUFXTixVQUFVVSxNQUFNLENBQUVQLGdDQUFnQ0UsTUFBTSxDQUFFQyxDQUFBQTtRQUN6SCxPQUFPQSxxQkFBcUIsWUFBWUEscUJBQXFCQztJQUMvRCxNQUFvQ0Q7SUFFcENDLG1DQUFtQ0U7SUFFbkMsT0FBT0E7QUFDVCxHQUFNO0FBRU5SLE1BQU1VLFFBQVEsQ0FBRSxvQ0FBb0NIO0FBRXBELGVBQWVBLGlDQUFpQyJ9