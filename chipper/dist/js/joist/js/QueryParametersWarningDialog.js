// Copyright 2020-2024, University of Colorado Boulder
/**
 * Message dialog displayed when any public query parameters have invalid values, see https://github.com/phetsims/joist/issues/593
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */ import optionize from '../../phet-core/js/optionize.js';
import OopsDialog from '../../scenery-phet/js/OopsDialog.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import { Text } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import joist from './joist.js';
import JoistStrings from './JoistStrings.js';
let QueryParametersWarningDialog = class QueryParametersWarningDialog extends OopsDialog {
    /**
   * @param warnings - see QueryStringMachine.warnings
   * @param [providedOptions]
   */ constructor(// See phet-types.d.ts
    warnings, providedOptions){
        assert && assert(warnings.length > 0, `expected 1 or more warnings: ${warnings.length}`);
        const options = optionize()({
            // OopsDialogOptions
            richTextOptions: {
                font: new PhetFont(16)
            },
            title: new Text(JoistStrings.queryParametersWarningDialog.invalidQueryParametersStringProperty, {
                font: new PhetFont(28)
            }),
            tandem: Tandem.OPT_OUT
        }, providedOptions);
        // add warnings to generic message
        let message = `${JoistStrings.queryParametersWarningDialog.oneOrMoreQueryParametersStringProperty.value}<br><br>`;
        warnings.forEach((warning)=>{
            message += `${warning.key}=${warning.value}<br>`;
        });
        message += `<br>${JoistStrings.queryParametersWarningDialog.theSimulationWillStartStringProperty.value}`;
        super(message, options);
    }
};
joist.register('QueryParametersWarningDialog', QueryParametersWarningDialog);
export default QueryParametersWarningDialog;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL1F1ZXJ5UGFyYW1ldGVyc1dhcm5pbmdEaWFsb2cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXG5cbi8qKlxuICogTWVzc2FnZSBkaWFsb2cgZGlzcGxheWVkIHdoZW4gYW55IHB1YmxpYyBxdWVyeSBwYXJhbWV0ZXJzIGhhdmUgaW52YWxpZCB2YWx1ZXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzU5M1xuICpcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXG4gKi9cblxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XG5pbXBvcnQgT29wc0RpYWxvZywgeyBPb3BzRGlhbG9nT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9Pb3BzRGlhbG9nLmpzJztcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xuaW1wb3J0IGpvaXN0IGZyb20gJy4vam9pc3QuanMnO1xuaW1wb3J0IEpvaXN0U3RyaW5ncyBmcm9tICcuL0pvaXN0U3RyaW5ncy5qcyc7XG5cbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xuZXhwb3J0IHR5cGUgUXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZ09wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE9vcHNEaWFsb2dPcHRpb25zO1xuXG5jbGFzcyBRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nIGV4dGVuZHMgT29wc0RpYWxvZyB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB3YXJuaW5ncyAtIHNlZSBRdWVyeVN0cmluZ01hY2hpbmUud2FybmluZ3NcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgLy8gU2VlIHBoZXQtdHlwZXMuZC50c1xuICAgIHdhcm5pbmdzOiBXYXJuaW5nW10sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICBwcm92aWRlZE9wdGlvbnM/OiBRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nT3B0aW9ucyApIHtcblxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHdhcm5pbmdzLmxlbmd0aCA+IDAsIGBleHBlY3RlZCAxIG9yIG1vcmUgd2FybmluZ3M6ICR7d2FybmluZ3MubGVuZ3RofWAgKTtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8UXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZ09wdGlvbnMsIFNlbGZPcHRpb25zLCBPb3BzRGlhbG9nT3B0aW9ucz4oKSgge1xuXG4gICAgICAvLyBPb3BzRGlhbG9nT3B0aW9uc1xuICAgICAgcmljaFRleHRPcHRpb25zOiB7XG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMTYgKVxuICAgICAgfSxcbiAgICAgIHRpdGxlOiBuZXcgVGV4dCggSm9pc3RTdHJpbmdzLnF1ZXJ5UGFyYW1ldGVyc1dhcm5pbmdEaWFsb2cuaW52YWxpZFF1ZXJ5UGFyYW1ldGVyc1N0cmluZ1Byb3BlcnR5LCB7XG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjggKVxuICAgICAgfSApLFxuXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XG5cbiAgICAvLyBhZGQgd2FybmluZ3MgdG8gZ2VuZXJpYyBtZXNzYWdlXG4gICAgbGV0IG1lc3NhZ2UgPSBgJHtKb2lzdFN0cmluZ3MucXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZy5vbmVPck1vcmVRdWVyeVBhcmFtZXRlcnNTdHJpbmdQcm9wZXJ0eS52YWx1ZX08YnI+PGJyPmA7XG4gICAgd2FybmluZ3MuZm9yRWFjaCggd2FybmluZyA9PiB7XG4gICAgICBtZXNzYWdlICs9IGAke3dhcm5pbmcua2V5fT0ke3dhcm5pbmcudmFsdWV9PGJyPmA7XG4gICAgfSApO1xuICAgIG1lc3NhZ2UgKz0gYDxicj4ke0pvaXN0U3RyaW5ncy5xdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nLnRoZVNpbXVsYXRpb25XaWxsU3RhcnRTdHJpbmdQcm9wZXJ0eS52YWx1ZX1gO1xuXG4gICAgc3VwZXIoIG1lc3NhZ2UsIG9wdGlvbnMgKTtcbiAgfVxufVxuXG5qb2lzdC5yZWdpc3RlciggJ1F1ZXJ5UGFyYW1ldGVyc1dhcm5pbmdEaWFsb2cnLCBRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nICk7XG5leHBvcnQgZGVmYXVsdCBRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nOyJdLCJuYW1lcyI6WyJvcHRpb25pemUiLCJPb3BzRGlhbG9nIiwiUGhldEZvbnQiLCJUZXh0IiwiVGFuZGVtIiwiam9pc3QiLCJKb2lzdFN0cmluZ3MiLCJRdWVyeVBhcmFtZXRlcnNXYXJuaW5nRGlhbG9nIiwid2FybmluZ3MiLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJsZW5ndGgiLCJvcHRpb25zIiwicmljaFRleHRPcHRpb25zIiwiZm9udCIsInRpdGxlIiwicXVlcnlQYXJhbWV0ZXJzV2FybmluZ0RpYWxvZyIsImludmFsaWRRdWVyeVBhcmFtZXRlcnNTdHJpbmdQcm9wZXJ0eSIsInRhbmRlbSIsIk9QVF9PVVQiLCJtZXNzYWdlIiwib25lT3JNb3JlUXVlcnlQYXJhbWV0ZXJzU3RyaW5nUHJvcGVydHkiLCJ2YWx1ZSIsImZvckVhY2giLCJ3YXJuaW5nIiwia2V5IiwidGhlU2ltdWxhdGlvbldpbGxTdGFydFN0cmluZ1Byb3BlcnR5IiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUV0RDs7Ozs7Q0FLQyxHQUVELE9BQU9BLGVBQXFDLGtDQUFrQztBQUM5RSxPQUFPQyxnQkFBdUMsc0NBQXNDO0FBQ3BGLE9BQU9DLGNBQWMsb0NBQW9DO0FBQ3pELFNBQVNDLElBQUksUUFBUSw4QkFBOEI7QUFDbkQsT0FBT0MsWUFBWSw0QkFBNEI7QUFDL0MsT0FBT0MsV0FBVyxhQUFhO0FBQy9CLE9BQU9DLGtCQUFrQixvQkFBb0I7QUFLN0MsSUFBQSxBQUFNQywrQkFBTixNQUFNQSxxQ0FBcUNOO0lBRXpDOzs7R0FHQyxHQUNELFlBQ0Usc0JBQXNCO0lBQ3RCTyxRQUFtQixFQUNuQkMsZUFBcUQsQ0FBRztRQUV4REMsVUFBVUEsT0FBUUYsU0FBU0csTUFBTSxHQUFHLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRUgsU0FBU0csTUFBTSxFQUFFO1FBRXhGLE1BQU1DLFVBQVVaLFlBQWtGO1lBRWhHLG9CQUFvQjtZQUNwQmEsaUJBQWlCO2dCQUNmQyxNQUFNLElBQUlaLFNBQVU7WUFDdEI7WUFDQWEsT0FBTyxJQUFJWixLQUFNRyxhQUFhVSw0QkFBNEIsQ0FBQ0Msb0NBQW9DLEVBQUU7Z0JBQy9GSCxNQUFNLElBQUlaLFNBQVU7WUFDdEI7WUFFQWdCLFFBQVFkLE9BQU9lLE9BQU87UUFDeEIsR0FBR1Y7UUFFSCxrQ0FBa0M7UUFDbEMsSUFBSVcsVUFBVSxHQUFHZCxhQUFhVSw0QkFBNEIsQ0FBQ0ssc0NBQXNDLENBQUNDLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDakhkLFNBQVNlLE9BQU8sQ0FBRUMsQ0FBQUE7WUFDaEJKLFdBQVcsR0FBR0ksUUFBUUMsR0FBRyxDQUFDLENBQUMsRUFBRUQsUUFBUUYsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNsRDtRQUNBRixXQUFXLENBQUMsSUFBSSxFQUFFZCxhQUFhVSw0QkFBNEIsQ0FBQ1Usb0NBQW9DLENBQUNKLEtBQUssRUFBRTtRQUV4RyxLQUFLLENBQUVGLFNBQVNSO0lBQ2xCO0FBQ0Y7QUFFQVAsTUFBTXNCLFFBQVEsQ0FBRSxnQ0FBZ0NwQjtBQUNoRCxlQUFlQSw2QkFBNkIifQ==