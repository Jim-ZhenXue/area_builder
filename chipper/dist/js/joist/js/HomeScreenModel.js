// Copyright 2020-2023, University of Colorado Boulder
/**
 * Model for the home screen.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 */ import Property from '../../axon/js/Property.js';
import joist from './joist.js';
import Screen from './Screen.js';
let HomeScreenModel = class HomeScreenModel {
    reset() {}
    /**
   * @param screenProperty - the screen that is displayed to the user in the main area above the
   *                                           - navigation bar
   * @param simScreens
   * @param tandem
   */ constructor(screenProperty, simScreens, activeSimScreensProperty, tandem){
        this.simScreens = simScreens;
        this.screenProperty = screenProperty;
        this.activeSimScreensProperty = activeSimScreensProperty;
        this.selectedScreenProperty = new Property(simScreens[0], {
            validValues: simScreens,
            phetioValueType: Screen.ScreenIO,
            tandem: tandem.createTandem('selectedScreenProperty'),
            phetioFeatured: true
        });
        // the correct screen icon is selected when returning to the home screen
        this.screenProperty.link((screen)=>{
            if (_.includes(simScreens, screen)) {
                this.selectedScreenProperty.value = screen;
            }
        });
    }
};
joist.register('HomeScreenModel', HomeScreenModel);
export default HomeScreenModel;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pvaXN0L2pzL0hvbWVTY3JlZW5Nb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcblxuLyoqXG4gKiBNb2RlbCBmb3IgdGhlIGhvbWUgc2NyZWVuLlxuICpcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKiBAYXV0aG9yIENocmlzIEtsdXNlbmRvcmYgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXG4gKi9cblxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xuaW1wb3J0IFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9SZWFkT25seVByb3BlcnR5LmpzJztcbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcbmltcG9ydCBqb2lzdCBmcm9tICcuL2pvaXN0LmpzJztcbmltcG9ydCBTY3JlZW4sIHsgQW55U2NyZWVuIH0gZnJvbSAnLi9TY3JlZW4uanMnO1xuaW1wb3J0IFRNb2RlbCBmcm9tICcuL1RNb2RlbC5qcyc7XG5cbmNsYXNzIEhvbWVTY3JlZW5Nb2RlbCBpbXBsZW1lbnRzIFRNb2RlbCB7XG4gIHB1YmxpYyBzaW1TY3JlZW5zOiBBbnlTY3JlZW5bXTsgLy8gc2NyZWVucyBpbiB0aGUgc2ltdWxhdGlvbnMgdGhhdCBhcmUgbm90IHRoZSBIb21lU2NyZWVuXG4gIHB1YmxpYyBzY3JlZW5Qcm9wZXJ0eTogUHJvcGVydHk8QW55U2NyZWVuPjtcbiAgcHVibGljIHNlbGVjdGVkU2NyZWVuUHJvcGVydHk6IFByb3BlcnR5PEFueVNjcmVlbj47XG4gIHB1YmxpYyByZWFkb25seSBhY3RpdmVTaW1TY3JlZW5zUHJvcGVydHk6IFJlYWRPbmx5UHJvcGVydHk8QW55U2NyZWVuW10+O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gc2NyZWVuUHJvcGVydHkgLSB0aGUgc2NyZWVuIHRoYXQgaXMgZGlzcGxheWVkIHRvIHRoZSB1c2VyIGluIHRoZSBtYWluIGFyZWEgYWJvdmUgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gbmF2aWdhdGlvbiBiYXJcbiAgICogQHBhcmFtIHNpbVNjcmVlbnNcbiAgICogQHBhcmFtIHRhbmRlbVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzY3JlZW5Qcm9wZXJ0eTogUHJvcGVydHk8U2NyZWVuPEludGVudGlvbmFsQW55LCBJbnRlbnRpb25hbEFueT4+LCBzaW1TY3JlZW5zOiBTY3JlZW48SW50ZW50aW9uYWxBbnksIEludGVudGlvbmFsQW55PltdLCBhY3RpdmVTaW1TY3JlZW5zUHJvcGVydHk6IFJlYWRPbmx5UHJvcGVydHk8QW55U2NyZWVuW10+LCB0YW5kZW06IFRhbmRlbSApIHtcblxuICAgIHRoaXMuc2ltU2NyZWVucyA9IHNpbVNjcmVlbnM7XG4gICAgdGhpcy5zY3JlZW5Qcm9wZXJ0eSA9IHNjcmVlblByb3BlcnR5O1xuICAgIHRoaXMuYWN0aXZlU2ltU2NyZWVuc1Byb3BlcnR5ID0gYWN0aXZlU2ltU2NyZWVuc1Byb3BlcnR5O1xuICAgIHRoaXMuc2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggc2ltU2NyZWVuc1sgMCBdLCB7XG4gICAgICB2YWxpZFZhbHVlczogc2ltU2NyZWVucyxcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogU2NyZWVuLlNjcmVlbklPLFxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnc2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eScgKSxcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXG4gICAgfSApO1xuXG4gICAgLy8gdGhlIGNvcnJlY3Qgc2NyZWVuIGljb24gaXMgc2VsZWN0ZWQgd2hlbiByZXR1cm5pbmcgdG8gdGhlIGhvbWUgc2NyZWVuXG4gICAgdGhpcy5zY3JlZW5Qcm9wZXJ0eS5saW5rKCBzY3JlZW4gPT4ge1xuICAgICAgaWYgKCBfLmluY2x1ZGVzKCBzaW1TY3JlZW5zLCBzY3JlZW4gKSApIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFNjcmVlblByb3BlcnR5LnZhbHVlID0gc2NyZWVuO1xuICAgICAgfVxuICAgIH0gKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHsgLyogbm90aGluZyB0byBkbyAqLyB9XG59XG5cbmpvaXN0LnJlZ2lzdGVyKCAnSG9tZVNjcmVlbk1vZGVsJywgSG9tZVNjcmVlbk1vZGVsICk7XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVTY3JlZW5Nb2RlbDsiXSwibmFtZXMiOlsiUHJvcGVydHkiLCJqb2lzdCIsIlNjcmVlbiIsIkhvbWVTY3JlZW5Nb2RlbCIsInJlc2V0Iiwic2NyZWVuUHJvcGVydHkiLCJzaW1TY3JlZW5zIiwiYWN0aXZlU2ltU2NyZWVuc1Byb3BlcnR5IiwidGFuZGVtIiwic2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eSIsInZhbGlkVmFsdWVzIiwicGhldGlvVmFsdWVUeXBlIiwiU2NyZWVuSU8iLCJjcmVhdGVUYW5kZW0iLCJwaGV0aW9GZWF0dXJlZCIsImxpbmsiLCJzY3JlZW4iLCJfIiwiaW5jbHVkZXMiLCJ2YWx1ZSIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFFdEQ7Ozs7OztDQU1DLEdBRUQsT0FBT0EsY0FBYyw0QkFBNEI7QUFJakQsT0FBT0MsV0FBVyxhQUFhO0FBQy9CLE9BQU9DLFlBQTJCLGNBQWM7QUFHaEQsSUFBQSxBQUFNQyxrQkFBTixNQUFNQTtJQWdDR0MsUUFBYyxDQUFzQjtJQTFCM0M7Ozs7O0dBS0MsR0FDRCxZQUFvQkMsY0FBZ0UsRUFBRUMsVUFBb0QsRUFBRUMsd0JBQXVELEVBQUVDLE1BQWMsQ0FBRztRQUVwTixJQUFJLENBQUNGLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDRCxjQUFjLEdBQUdBO1FBQ3RCLElBQUksQ0FBQ0Usd0JBQXdCLEdBQUdBO1FBQ2hDLElBQUksQ0FBQ0Usc0JBQXNCLEdBQUcsSUFBSVQsU0FBVU0sVUFBVSxDQUFFLEVBQUcsRUFBRTtZQUMzREksYUFBYUo7WUFDYkssaUJBQWlCVCxPQUFPVSxRQUFRO1lBQ2hDSixRQUFRQSxPQUFPSyxZQUFZLENBQUU7WUFDN0JDLGdCQUFnQjtRQUNsQjtRQUVBLHdFQUF3RTtRQUN4RSxJQUFJLENBQUNULGNBQWMsQ0FBQ1UsSUFBSSxDQUFFQyxDQUFBQTtZQUN4QixJQUFLQyxFQUFFQyxRQUFRLENBQUVaLFlBQVlVLFNBQVc7Z0JBQ3RDLElBQUksQ0FBQ1Asc0JBQXNCLENBQUNVLEtBQUssR0FBR0g7WUFDdEM7UUFDRjtJQUNGO0FBR0Y7QUFFQWYsTUFBTW1CLFFBQVEsQ0FBRSxtQkFBbUJqQjtBQUVuQyxlQUFlQSxnQkFBZ0IifQ==